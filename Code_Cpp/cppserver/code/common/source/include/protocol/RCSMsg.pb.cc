// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RCSMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PBC2RSTextCmdAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2RSTextCmdAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRS2CTextCmdAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRS2CTextCmdAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2RSAccountUpdateAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2RSAccountUpdateAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRS2CAccountUpdateAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRS2CAccountUpdateAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRS2CAccountUpdateAck_AccountInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRS2CAccountUpdateAck_AccountInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRS2CNetStatAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRS2CNetStatAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRS2CetStatAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRS2CetStatAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2RSAccountRemoveAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2RSAccountRemoveAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRS2CAccountRemoveAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRS2CAccountRemoveAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2RSRobotAIUpdateAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2RSRobotAIUpdateAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRS2CRobotAIUpdateAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRS2CRobotAIUpdateAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2RSMSGStreamAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2RSMSGStreamAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRS2CMSGStreamAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRS2CMSGStreamAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2RSLoadLuaAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2RSLoadLuaAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRS2CLoadLuaAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRS2CLoadLuaAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMSGPrintf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMSGPrintf_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RCSMsg_2eproto() {
  protobuf_AddDesc_RCSMsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RCSMsg.proto");
  GOOGLE_CHECK(file != NULL);
  PBC2RSTextCmdAsk_descriptor_ = file->message_type(0);
  static const int PBC2RSTextCmdAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2RSTextCmdAsk, cmd_),
  };
  PBC2RSTextCmdAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2RSTextCmdAsk_descriptor_,
      PBC2RSTextCmdAsk::default_instance_,
      PBC2RSTextCmdAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2RSTextCmdAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2RSTextCmdAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2RSTextCmdAsk));
  PBRS2CTextCmdAck_descriptor_ = file->message_type(1);
  static const int PBRS2CTextCmdAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRS2CTextCmdAck, cmd_),
  };
  PBRS2CTextCmdAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRS2CTextCmdAck_descriptor_,
      PBRS2CTextCmdAck::default_instance_,
      PBRS2CTextCmdAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRS2CTextCmdAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRS2CTextCmdAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRS2CTextCmdAck));
  PBC2RSAccountUpdateAsk_descriptor_ = file->message_type(2);
  static const int PBC2RSAccountUpdateAsk_offsets_[1] = {
  };
  PBC2RSAccountUpdateAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2RSAccountUpdateAsk_descriptor_,
      PBC2RSAccountUpdateAsk::default_instance_,
      PBC2RSAccountUpdateAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2RSAccountUpdateAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2RSAccountUpdateAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2RSAccountUpdateAsk));
  PBRS2CAccountUpdateAck_descriptor_ = file->message_type(3);
  static const int PBRS2CAccountUpdateAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRS2CAccountUpdateAck, info_),
  };
  PBRS2CAccountUpdateAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRS2CAccountUpdateAck_descriptor_,
      PBRS2CAccountUpdateAck::default_instance_,
      PBRS2CAccountUpdateAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRS2CAccountUpdateAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRS2CAccountUpdateAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRS2CAccountUpdateAck));
  PBRS2CAccountUpdateAck_AccountInfo_descriptor_ = PBRS2CAccountUpdateAck_descriptor_->nested_type(0);
  static const int PBRS2CAccountUpdateAck_AccountInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRS2CAccountUpdateAck_AccountInfo, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRS2CAccountUpdateAck_AccountInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRS2CAccountUpdateAck_AccountInfo, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRS2CAccountUpdateAck_AccountInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRS2CAccountUpdateAck_AccountInfo, scene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRS2CAccountUpdateAck_AccountInfo, cell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRS2CAccountUpdateAck_AccountInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRS2CAccountUpdateAck_AccountInfo, move_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRS2CAccountUpdateAck_AccountInfo, ai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRS2CAccountUpdateAck_AccountInfo, reconn_),
  };
  PBRS2CAccountUpdateAck_AccountInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRS2CAccountUpdateAck_AccountInfo_descriptor_,
      PBRS2CAccountUpdateAck_AccountInfo::default_instance_,
      PBRS2CAccountUpdateAck_AccountInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRS2CAccountUpdateAck_AccountInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRS2CAccountUpdateAck_AccountInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRS2CAccountUpdateAck_AccountInfo));
  PBRS2CNetStatAsk_descriptor_ = file->message_type(4);
  static const int PBRS2CNetStatAsk_offsets_[1] = {
  };
  PBRS2CNetStatAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRS2CNetStatAsk_descriptor_,
      PBRS2CNetStatAsk::default_instance_,
      PBRS2CNetStatAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRS2CNetStatAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRS2CNetStatAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRS2CNetStatAsk));
  PBRS2CetStatAck_descriptor_ = file->message_type(5);
  static const int PBRS2CetStatAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRS2CetStatAck, conn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRS2CetStatAck, reconn_),
  };
  PBRS2CetStatAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRS2CetStatAck_descriptor_,
      PBRS2CetStatAck::default_instance_,
      PBRS2CetStatAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRS2CetStatAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRS2CetStatAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRS2CetStatAck));
  PBC2RSAccountRemoveAsk_descriptor_ = file->message_type(6);
  static const int PBC2RSAccountRemoveAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2RSAccountRemoveAsk, account_),
  };
  PBC2RSAccountRemoveAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2RSAccountRemoveAsk_descriptor_,
      PBC2RSAccountRemoveAsk::default_instance_,
      PBC2RSAccountRemoveAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2RSAccountRemoveAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2RSAccountRemoveAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2RSAccountRemoveAsk));
  PBRS2CAccountRemoveAck_descriptor_ = file->message_type(7);
  static const int PBRS2CAccountRemoveAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRS2CAccountRemoveAck, account_),
  };
  PBRS2CAccountRemoveAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRS2CAccountRemoveAck_descriptor_,
      PBRS2CAccountRemoveAck::default_instance_,
      PBRS2CAccountRemoveAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRS2CAccountRemoveAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRS2CAccountRemoveAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRS2CAccountRemoveAck));
  PBC2RSRobotAIUpdateAsk_descriptor_ = file->message_type(8);
  static const int PBC2RSRobotAIUpdateAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2RSRobotAIUpdateAsk, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2RSRobotAIUpdateAsk, ainame_),
  };
  PBC2RSRobotAIUpdateAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2RSRobotAIUpdateAsk_descriptor_,
      PBC2RSRobotAIUpdateAsk::default_instance_,
      PBC2RSRobotAIUpdateAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2RSRobotAIUpdateAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2RSRobotAIUpdateAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2RSRobotAIUpdateAsk));
  PBRS2CRobotAIUpdateAck_descriptor_ = file->message_type(9);
  static const int PBRS2CRobotAIUpdateAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRS2CRobotAIUpdateAck, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRS2CRobotAIUpdateAck, ainame_),
  };
  PBRS2CRobotAIUpdateAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRS2CRobotAIUpdateAck_descriptor_,
      PBRS2CRobotAIUpdateAck::default_instance_,
      PBRS2CRobotAIUpdateAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRS2CRobotAIUpdateAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRS2CRobotAIUpdateAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRS2CRobotAIUpdateAck));
  PBC2RSMSGStreamAsk_descriptor_ = file->message_type(10);
  static const int PBC2RSMSGStreamAsk_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2RSMSGStreamAsk, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2RSMSGStreamAsk, mainprot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2RSMSGStreamAsk, subprot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2RSMSGStreamAsk, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2RSMSGStreamAsk, msgdata_),
  };
  PBC2RSMSGStreamAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2RSMSGStreamAsk_descriptor_,
      PBC2RSMSGStreamAsk::default_instance_,
      PBC2RSMSGStreamAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2RSMSGStreamAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2RSMSGStreamAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2RSMSGStreamAsk));
  PBRS2CMSGStreamAck_descriptor_ = file->message_type(11);
  static const int PBRS2CMSGStreamAck_offsets_[1] = {
  };
  PBRS2CMSGStreamAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRS2CMSGStreamAck_descriptor_,
      PBRS2CMSGStreamAck::default_instance_,
      PBRS2CMSGStreamAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRS2CMSGStreamAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRS2CMSGStreamAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRS2CMSGStreamAck));
  PBC2RSLoadLuaAsk_descriptor_ = file->message_type(12);
  static const int PBC2RSLoadLuaAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2RSLoadLuaAsk, account_),
  };
  PBC2RSLoadLuaAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2RSLoadLuaAsk_descriptor_,
      PBC2RSLoadLuaAsk::default_instance_,
      PBC2RSLoadLuaAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2RSLoadLuaAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2RSLoadLuaAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2RSLoadLuaAsk));
  PBRS2CLoadLuaAck_descriptor_ = file->message_type(13);
  static const int PBRS2CLoadLuaAck_offsets_[1] = {
  };
  PBRS2CLoadLuaAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRS2CLoadLuaAck_descriptor_,
      PBRS2CLoadLuaAck::default_instance_,
      PBRS2CLoadLuaAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRS2CLoadLuaAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRS2CLoadLuaAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRS2CLoadLuaAck));
  PBMSGPrintf_descriptor_ = file->message_type(14);
  static const int PBMSGPrintf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMSGPrintf, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMSGPrintf, printf_),
  };
  PBMSGPrintf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMSGPrintf_descriptor_,
      PBMSGPrintf::default_instance_,
      PBMSGPrintf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMSGPrintf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMSGPrintf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMSGPrintf));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RCSMsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2RSTextCmdAsk_descriptor_, &PBC2RSTextCmdAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRS2CTextCmdAck_descriptor_, &PBRS2CTextCmdAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2RSAccountUpdateAsk_descriptor_, &PBC2RSAccountUpdateAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRS2CAccountUpdateAck_descriptor_, &PBRS2CAccountUpdateAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRS2CAccountUpdateAck_AccountInfo_descriptor_, &PBRS2CAccountUpdateAck_AccountInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRS2CNetStatAsk_descriptor_, &PBRS2CNetStatAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRS2CetStatAck_descriptor_, &PBRS2CetStatAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2RSAccountRemoveAsk_descriptor_, &PBC2RSAccountRemoveAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRS2CAccountRemoveAck_descriptor_, &PBRS2CAccountRemoveAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2RSRobotAIUpdateAsk_descriptor_, &PBC2RSRobotAIUpdateAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRS2CRobotAIUpdateAck_descriptor_, &PBRS2CRobotAIUpdateAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2RSMSGStreamAsk_descriptor_, &PBC2RSMSGStreamAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRS2CMSGStreamAck_descriptor_, &PBRS2CMSGStreamAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2RSLoadLuaAsk_descriptor_, &PBC2RSLoadLuaAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRS2CLoadLuaAck_descriptor_, &PBRS2CLoadLuaAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMSGPrintf_descriptor_, &PBMSGPrintf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RCSMsg_2eproto() {
  delete PBC2RSTextCmdAsk::default_instance_;
  delete PBC2RSTextCmdAsk_reflection_;
  delete PBRS2CTextCmdAck::default_instance_;
  delete PBRS2CTextCmdAck_reflection_;
  delete PBC2RSAccountUpdateAsk::default_instance_;
  delete PBC2RSAccountUpdateAsk_reflection_;
  delete PBRS2CAccountUpdateAck::default_instance_;
  delete PBRS2CAccountUpdateAck_reflection_;
  delete PBRS2CAccountUpdateAck_AccountInfo::default_instance_;
  delete PBRS2CAccountUpdateAck_AccountInfo_reflection_;
  delete PBRS2CNetStatAsk::default_instance_;
  delete PBRS2CNetStatAsk_reflection_;
  delete PBRS2CetStatAck::default_instance_;
  delete PBRS2CetStatAck_reflection_;
  delete PBC2RSAccountRemoveAsk::default_instance_;
  delete PBC2RSAccountRemoveAsk_reflection_;
  delete PBRS2CAccountRemoveAck::default_instance_;
  delete PBRS2CAccountRemoveAck_reflection_;
  delete PBC2RSRobotAIUpdateAsk::default_instance_;
  delete PBC2RSRobotAIUpdateAsk_reflection_;
  delete PBRS2CRobotAIUpdateAck::default_instance_;
  delete PBRS2CRobotAIUpdateAck_reflection_;
  delete PBC2RSMSGStreamAsk::default_instance_;
  delete PBC2RSMSGStreamAsk_reflection_;
  delete PBRS2CMSGStreamAck::default_instance_;
  delete PBRS2CMSGStreamAck_reflection_;
  delete PBC2RSLoadLuaAsk::default_instance_;
  delete PBC2RSLoadLuaAsk_reflection_;
  delete PBRS2CLoadLuaAck::default_instance_;
  delete PBRS2CLoadLuaAck_reflection_;
  delete PBMSGPrintf::default_instance_;
  delete PBMSGPrintf_reflection_;
}

void protobuf_AddDesc_RCSMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014RCSMsg.proto\"\037\n\020PBC2RSTextCmdAsk\022\013\n\003cm"
    "d\030\001 \001(\t\"\037\n\020PBRS2CTextCmdAck\022\013\n\003cmd\030\001 \001(\t"
    "\"\030\n\026PBC2RSAccountUpdateAsk\"\355\001\n\026PBRS2CAcc"
    "ountUpdateAck\0221\n\004info\030\001 \003(\0132#.PBRS2CAcco"
    "untUpdateAck.AccountInfo\032\237\001\n\013AccountInfo"
    "\022\017\n\007account\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\013\n\003job\030\003"
    " \001(\005\022\r\n\005level\030\004 \001(\005\022\r\n\005scene\030\005 \001(\005\022\014\n\004ce"
    "ll\030\006 \001(\005\022\016\n\006status\030\007 \001(\005\022\014\n\004move\030\010 \001(\005\022\n"
    "\n\002ai\030\t \001(\005\022\016\n\006reconn\030\n \001(\005\"\022\n\020PBRS2CNetS"
    "tatAsk\"/\n\017PBRS2CetStatAck\022\014\n\004conn\030\001 \001(\005\022"
    "\016\n\006reconn\030\002 \001(\005\")\n\026PBC2RSAccountRemoveAs"
    "k\022\017\n\007account\030\001 \001(\t\")\n\026PBRS2CAccountRemov"
    "eAck\022\017\n\007account\030\001 \001(\t\"9\n\026PBC2RSRobotAIUp"
    "dateAsk\022\017\n\007account\030\001 \003(\t\022\016\n\006ainame\030\002 \001(\t"
    "\"9\n\026PBRS2CRobotAIUpdateAck\022\017\n\007account\030\001 "
    "\003(\t\022\016\n\006ainame\030\002 \001(\t\"j\n\022PBC2RSMSGStreamAs"
    "k\022\017\n\007account\030\001 \001(\t\022\020\n\010mainprot\030\002 \001(\r\022\017\n\007"
    "subprot\030\003 \001(\r\022\017\n\007msgname\030\004 \001(\t\022\017\n\007msgdat"
    "a\030\005 \001(\t\"\024\n\022PBRS2CMSGStreamAck\"#\n\020PBC2RSL"
    "oadLuaAsk\022\017\n\007account\030\001 \001(\t\"\022\n\020PBRS2CLoad"
    "LuaAck\".\n\013PBMSGPrintf\022\017\n\007account\030\001 \001(\t\022\016"
    "\n\006printf\030\002 \001(\005", 854);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RCSMsg.proto", &protobuf_RegisterTypes);
  PBC2RSTextCmdAsk::default_instance_ = new PBC2RSTextCmdAsk();
  PBRS2CTextCmdAck::default_instance_ = new PBRS2CTextCmdAck();
  PBC2RSAccountUpdateAsk::default_instance_ = new PBC2RSAccountUpdateAsk();
  PBRS2CAccountUpdateAck::default_instance_ = new PBRS2CAccountUpdateAck();
  PBRS2CAccountUpdateAck_AccountInfo::default_instance_ = new PBRS2CAccountUpdateAck_AccountInfo();
  PBRS2CNetStatAsk::default_instance_ = new PBRS2CNetStatAsk();
  PBRS2CetStatAck::default_instance_ = new PBRS2CetStatAck();
  PBC2RSAccountRemoveAsk::default_instance_ = new PBC2RSAccountRemoveAsk();
  PBRS2CAccountRemoveAck::default_instance_ = new PBRS2CAccountRemoveAck();
  PBC2RSRobotAIUpdateAsk::default_instance_ = new PBC2RSRobotAIUpdateAsk();
  PBRS2CRobotAIUpdateAck::default_instance_ = new PBRS2CRobotAIUpdateAck();
  PBC2RSMSGStreamAsk::default_instance_ = new PBC2RSMSGStreamAsk();
  PBRS2CMSGStreamAck::default_instance_ = new PBRS2CMSGStreamAck();
  PBC2RSLoadLuaAsk::default_instance_ = new PBC2RSLoadLuaAsk();
  PBRS2CLoadLuaAck::default_instance_ = new PBRS2CLoadLuaAck();
  PBMSGPrintf::default_instance_ = new PBMSGPrintf();
  PBC2RSTextCmdAsk::default_instance_->InitAsDefaultInstance();
  PBRS2CTextCmdAck::default_instance_->InitAsDefaultInstance();
  PBC2RSAccountUpdateAsk::default_instance_->InitAsDefaultInstance();
  PBRS2CAccountUpdateAck::default_instance_->InitAsDefaultInstance();
  PBRS2CAccountUpdateAck_AccountInfo::default_instance_->InitAsDefaultInstance();
  PBRS2CNetStatAsk::default_instance_->InitAsDefaultInstance();
  PBRS2CetStatAck::default_instance_->InitAsDefaultInstance();
  PBC2RSAccountRemoveAsk::default_instance_->InitAsDefaultInstance();
  PBRS2CAccountRemoveAck::default_instance_->InitAsDefaultInstance();
  PBC2RSRobotAIUpdateAsk::default_instance_->InitAsDefaultInstance();
  PBRS2CRobotAIUpdateAck::default_instance_->InitAsDefaultInstance();
  PBC2RSMSGStreamAsk::default_instance_->InitAsDefaultInstance();
  PBRS2CMSGStreamAck::default_instance_->InitAsDefaultInstance();
  PBC2RSLoadLuaAsk::default_instance_->InitAsDefaultInstance();
  PBRS2CLoadLuaAck::default_instance_->InitAsDefaultInstance();
  PBMSGPrintf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RCSMsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RCSMsg_2eproto {
  StaticDescriptorInitializer_RCSMsg_2eproto() {
    protobuf_AddDesc_RCSMsg_2eproto();
  }
} static_descriptor_initializer_RCSMsg_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PBC2RSTextCmdAsk::kCmdFieldNumber;
#endif  // !_MSC_VER

PBC2RSTextCmdAsk::PBC2RSTextCmdAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2RSTextCmdAsk::InitAsDefaultInstance() {
}

PBC2RSTextCmdAsk::PBC2RSTextCmdAsk(const PBC2RSTextCmdAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2RSTextCmdAsk::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2RSTextCmdAsk::~PBC2RSTextCmdAsk() {
  SharedDtor();
}

void PBC2RSTextCmdAsk::SharedDtor() {
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete cmd_;
  }
  if (this != default_instance_) {
  }
}

void PBC2RSTextCmdAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2RSTextCmdAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2RSTextCmdAsk_descriptor_;
}

const PBC2RSTextCmdAsk& PBC2RSTextCmdAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCSMsg_2eproto();  return *default_instance_;
}

PBC2RSTextCmdAsk* PBC2RSTextCmdAsk::default_instance_ = NULL;

PBC2RSTextCmdAsk* PBC2RSTextCmdAsk::New() const {
  return new PBC2RSTextCmdAsk;
}

void PBC2RSTextCmdAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cmd()) {
      if (cmd_ != &::google::protobuf::internal::kEmptyString) {
        cmd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2RSTextCmdAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cmd().data(), this->cmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2RSTextCmdAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cmd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2RSTextCmdAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cmd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2RSTextCmdAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cmd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2RSTextCmdAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2RSTextCmdAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2RSTextCmdAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2RSTextCmdAsk::MergeFrom(const PBC2RSTextCmdAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2RSTextCmdAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2RSTextCmdAsk::CopyFrom(const PBC2RSTextCmdAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2RSTextCmdAsk::IsInitialized() const {
  
  return true;
}

void PBC2RSTextCmdAsk::Swap(PBC2RSTextCmdAsk* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2RSTextCmdAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2RSTextCmdAsk_descriptor_;
  metadata.reflection = PBC2RSTextCmdAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBRS2CTextCmdAck::kCmdFieldNumber;
#endif  // !_MSC_VER

PBRS2CTextCmdAck::PBRS2CTextCmdAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRS2CTextCmdAck::InitAsDefaultInstance() {
}

PBRS2CTextCmdAck::PBRS2CTextCmdAck(const PBRS2CTextCmdAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRS2CTextCmdAck::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRS2CTextCmdAck::~PBRS2CTextCmdAck() {
  SharedDtor();
}

void PBRS2CTextCmdAck::SharedDtor() {
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete cmd_;
  }
  if (this != default_instance_) {
  }
}

void PBRS2CTextCmdAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBRS2CTextCmdAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRS2CTextCmdAck_descriptor_;
}

const PBRS2CTextCmdAck& PBRS2CTextCmdAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCSMsg_2eproto();  return *default_instance_;
}

PBRS2CTextCmdAck* PBRS2CTextCmdAck::default_instance_ = NULL;

PBRS2CTextCmdAck* PBRS2CTextCmdAck::New() const {
  return new PBRS2CTextCmdAck;
}

void PBRS2CTextCmdAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cmd()) {
      if (cmd_ != &::google::protobuf::internal::kEmptyString) {
        cmd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRS2CTextCmdAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cmd().data(), this->cmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRS2CTextCmdAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cmd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRS2CTextCmdAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cmd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRS2CTextCmdAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cmd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBRS2CTextCmdAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRS2CTextCmdAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRS2CTextCmdAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRS2CTextCmdAck::MergeFrom(const PBRS2CTextCmdAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRS2CTextCmdAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRS2CTextCmdAck::CopyFrom(const PBRS2CTextCmdAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBRS2CTextCmdAck::IsInitialized() const {
  
  return true;
}

void PBRS2CTextCmdAck::Swap(PBRS2CTextCmdAck* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBRS2CTextCmdAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBRS2CTextCmdAck_descriptor_;
  metadata.reflection = PBRS2CTextCmdAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBC2RSAccountUpdateAsk::PBC2RSAccountUpdateAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2RSAccountUpdateAsk::InitAsDefaultInstance() {
}

PBC2RSAccountUpdateAsk::PBC2RSAccountUpdateAsk(const PBC2RSAccountUpdateAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2RSAccountUpdateAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2RSAccountUpdateAsk::~PBC2RSAccountUpdateAsk() {
  SharedDtor();
}

void PBC2RSAccountUpdateAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2RSAccountUpdateAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2RSAccountUpdateAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2RSAccountUpdateAsk_descriptor_;
}

const PBC2RSAccountUpdateAsk& PBC2RSAccountUpdateAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCSMsg_2eproto();  return *default_instance_;
}

PBC2RSAccountUpdateAsk* PBC2RSAccountUpdateAsk::default_instance_ = NULL;

PBC2RSAccountUpdateAsk* PBC2RSAccountUpdateAsk::New() const {
  return new PBC2RSAccountUpdateAsk;
}

void PBC2RSAccountUpdateAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2RSAccountUpdateAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBC2RSAccountUpdateAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2RSAccountUpdateAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2RSAccountUpdateAsk::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2RSAccountUpdateAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2RSAccountUpdateAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2RSAccountUpdateAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2RSAccountUpdateAsk::MergeFrom(const PBC2RSAccountUpdateAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2RSAccountUpdateAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2RSAccountUpdateAsk::CopyFrom(const PBC2RSAccountUpdateAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2RSAccountUpdateAsk::IsInitialized() const {
  
  return true;
}

void PBC2RSAccountUpdateAsk::Swap(PBC2RSAccountUpdateAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2RSAccountUpdateAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2RSAccountUpdateAsk_descriptor_;
  metadata.reflection = PBC2RSAccountUpdateAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBRS2CAccountUpdateAck_AccountInfo::kAccountFieldNumber;
const int PBRS2CAccountUpdateAck_AccountInfo::kNameFieldNumber;
const int PBRS2CAccountUpdateAck_AccountInfo::kJobFieldNumber;
const int PBRS2CAccountUpdateAck_AccountInfo::kLevelFieldNumber;
const int PBRS2CAccountUpdateAck_AccountInfo::kSceneFieldNumber;
const int PBRS2CAccountUpdateAck_AccountInfo::kCellFieldNumber;
const int PBRS2CAccountUpdateAck_AccountInfo::kStatusFieldNumber;
const int PBRS2CAccountUpdateAck_AccountInfo::kMoveFieldNumber;
const int PBRS2CAccountUpdateAck_AccountInfo::kAiFieldNumber;
const int PBRS2CAccountUpdateAck_AccountInfo::kReconnFieldNumber;
#endif  // !_MSC_VER

PBRS2CAccountUpdateAck_AccountInfo::PBRS2CAccountUpdateAck_AccountInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRS2CAccountUpdateAck_AccountInfo::InitAsDefaultInstance() {
}

PBRS2CAccountUpdateAck_AccountInfo::PBRS2CAccountUpdateAck_AccountInfo(const PBRS2CAccountUpdateAck_AccountInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRS2CAccountUpdateAck_AccountInfo::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  job_ = 0;
  level_ = 0;
  scene_ = 0;
  cell_ = 0;
  status_ = 0;
  move_ = 0;
  ai_ = 0;
  reconn_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRS2CAccountUpdateAck_AccountInfo::~PBRS2CAccountUpdateAck_AccountInfo() {
  SharedDtor();
}

void PBRS2CAccountUpdateAck_AccountInfo::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PBRS2CAccountUpdateAck_AccountInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBRS2CAccountUpdateAck_AccountInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRS2CAccountUpdateAck_AccountInfo_descriptor_;
}

const PBRS2CAccountUpdateAck_AccountInfo& PBRS2CAccountUpdateAck_AccountInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCSMsg_2eproto();  return *default_instance_;
}

PBRS2CAccountUpdateAck_AccountInfo* PBRS2CAccountUpdateAck_AccountInfo::default_instance_ = NULL;

PBRS2CAccountUpdateAck_AccountInfo* PBRS2CAccountUpdateAck_AccountInfo::New() const {
  return new PBRS2CAccountUpdateAck_AccountInfo;
}

void PBRS2CAccountUpdateAck_AccountInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    job_ = 0;
    level_ = 0;
    scene_ = 0;
    cell_ = 0;
    status_ = 0;
    move_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ai_ = 0;
    reconn_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRS2CAccountUpdateAck_AccountInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_job;
        break;
      }
      
      // optional int32 job = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }
      
      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_scene;
        break;
      }
      
      // optional int32 scene = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_)));
          set_has_scene();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cell;
        break;
      }
      
      // optional int32 cell = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cell:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cell_)));
          set_has_cell();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_status;
        break;
      }
      
      // optional int32 status = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_move;
        break;
      }
      
      // optional int32 move = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_move:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move_)));
          set_has_move();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ai;
        break;
      }
      
      // optional int32 ai = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ai:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ai_)));
          set_has_ai();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_reconn;
        break;
      }
      
      // optional int32 reconn = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reconn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reconn_)));
          set_has_reconn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRS2CAccountUpdateAck_AccountInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional int32 job = 3;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->job(), output);
  }
  
  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }
  
  // optional int32 scene = 5;
  if (has_scene()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->scene(), output);
  }
  
  // optional int32 cell = 6;
  if (has_cell()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cell(), output);
  }
  
  // optional int32 status = 7;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->status(), output);
  }
  
  // optional int32 move = 8;
  if (has_move()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->move(), output);
  }
  
  // optional int32 ai = 9;
  if (has_ai()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->ai(), output);
  }
  
  // optional int32 reconn = 10;
  if (has_reconn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->reconn(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRS2CAccountUpdateAck_AccountInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional int32 job = 3;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->job(), target);
  }
  
  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }
  
  // optional int32 scene = 5;
  if (has_scene()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->scene(), target);
  }
  
  // optional int32 cell = 6;
  if (has_cell()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cell(), target);
  }
  
  // optional int32 status = 7;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->status(), target);
  }
  
  // optional int32 move = 8;
  if (has_move()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->move(), target);
  }
  
  // optional int32 ai = 9;
  if (has_ai()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->ai(), target);
  }
  
  // optional int32 reconn = 10;
  if (has_reconn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->reconn(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRS2CAccountUpdateAck_AccountInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 job = 3;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job());
    }
    
    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 scene = 5;
    if (has_scene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene());
    }
    
    // optional int32 cell = 6;
    if (has_cell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cell());
    }
    
    // optional int32 status = 7;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional int32 move = 8;
    if (has_move()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->move());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 ai = 9;
    if (has_ai()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ai());
    }
    
    // optional int32 reconn = 10;
    if (has_reconn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reconn());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBRS2CAccountUpdateAck_AccountInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRS2CAccountUpdateAck_AccountInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRS2CAccountUpdateAck_AccountInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRS2CAccountUpdateAck_AccountInfo::MergeFrom(const PBRS2CAccountUpdateAck_AccountInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_scene()) {
      set_scene(from.scene());
    }
    if (from.has_cell()) {
      set_cell(from.cell());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_move()) {
      set_move(from.move());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ai()) {
      set_ai(from.ai());
    }
    if (from.has_reconn()) {
      set_reconn(from.reconn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRS2CAccountUpdateAck_AccountInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRS2CAccountUpdateAck_AccountInfo::CopyFrom(const PBRS2CAccountUpdateAck_AccountInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBRS2CAccountUpdateAck_AccountInfo::IsInitialized() const {
  
  return true;
}

void PBRS2CAccountUpdateAck_AccountInfo::Swap(PBRS2CAccountUpdateAck_AccountInfo* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(name_, other->name_);
    std::swap(job_, other->job_);
    std::swap(level_, other->level_);
    std::swap(scene_, other->scene_);
    std::swap(cell_, other->cell_);
    std::swap(status_, other->status_);
    std::swap(move_, other->move_);
    std::swap(ai_, other->ai_);
    std::swap(reconn_, other->reconn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBRS2CAccountUpdateAck_AccountInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBRS2CAccountUpdateAck_AccountInfo_descriptor_;
  metadata.reflection = PBRS2CAccountUpdateAck_AccountInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PBRS2CAccountUpdateAck::kInfoFieldNumber;
#endif  // !_MSC_VER

PBRS2CAccountUpdateAck::PBRS2CAccountUpdateAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRS2CAccountUpdateAck::InitAsDefaultInstance() {
}

PBRS2CAccountUpdateAck::PBRS2CAccountUpdateAck(const PBRS2CAccountUpdateAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRS2CAccountUpdateAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRS2CAccountUpdateAck::~PBRS2CAccountUpdateAck() {
  SharedDtor();
}

void PBRS2CAccountUpdateAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBRS2CAccountUpdateAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBRS2CAccountUpdateAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRS2CAccountUpdateAck_descriptor_;
}

const PBRS2CAccountUpdateAck& PBRS2CAccountUpdateAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCSMsg_2eproto();  return *default_instance_;
}

PBRS2CAccountUpdateAck* PBRS2CAccountUpdateAck::default_instance_ = NULL;

PBRS2CAccountUpdateAck* PBRS2CAccountUpdateAck::New() const {
  return new PBRS2CAccountUpdateAck;
}

void PBRS2CAccountUpdateAck::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRS2CAccountUpdateAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBRS2CAccountUpdateAck.AccountInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRS2CAccountUpdateAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBRS2CAccountUpdateAck.AccountInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRS2CAccountUpdateAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBRS2CAccountUpdateAck.AccountInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRS2CAccountUpdateAck::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBRS2CAccountUpdateAck.AccountInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBRS2CAccountUpdateAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRS2CAccountUpdateAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRS2CAccountUpdateAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRS2CAccountUpdateAck::MergeFrom(const PBRS2CAccountUpdateAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRS2CAccountUpdateAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRS2CAccountUpdateAck::CopyFrom(const PBRS2CAccountUpdateAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBRS2CAccountUpdateAck::IsInitialized() const {
  
  return true;
}

void PBRS2CAccountUpdateAck::Swap(PBRS2CAccountUpdateAck* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBRS2CAccountUpdateAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBRS2CAccountUpdateAck_descriptor_;
  metadata.reflection = PBRS2CAccountUpdateAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBRS2CNetStatAsk::PBRS2CNetStatAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRS2CNetStatAsk::InitAsDefaultInstance() {
}

PBRS2CNetStatAsk::PBRS2CNetStatAsk(const PBRS2CNetStatAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRS2CNetStatAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRS2CNetStatAsk::~PBRS2CNetStatAsk() {
  SharedDtor();
}

void PBRS2CNetStatAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBRS2CNetStatAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBRS2CNetStatAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRS2CNetStatAsk_descriptor_;
}

const PBRS2CNetStatAsk& PBRS2CNetStatAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCSMsg_2eproto();  return *default_instance_;
}

PBRS2CNetStatAsk* PBRS2CNetStatAsk::default_instance_ = NULL;

PBRS2CNetStatAsk* PBRS2CNetStatAsk::New() const {
  return new PBRS2CNetStatAsk;
}

void PBRS2CNetStatAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRS2CNetStatAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBRS2CNetStatAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRS2CNetStatAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRS2CNetStatAsk::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBRS2CNetStatAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRS2CNetStatAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRS2CNetStatAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRS2CNetStatAsk::MergeFrom(const PBRS2CNetStatAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRS2CNetStatAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRS2CNetStatAsk::CopyFrom(const PBRS2CNetStatAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBRS2CNetStatAsk::IsInitialized() const {
  
  return true;
}

void PBRS2CNetStatAsk::Swap(PBRS2CNetStatAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBRS2CNetStatAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBRS2CNetStatAsk_descriptor_;
  metadata.reflection = PBRS2CNetStatAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBRS2CetStatAck::kConnFieldNumber;
const int PBRS2CetStatAck::kReconnFieldNumber;
#endif  // !_MSC_VER

PBRS2CetStatAck::PBRS2CetStatAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRS2CetStatAck::InitAsDefaultInstance() {
}

PBRS2CetStatAck::PBRS2CetStatAck(const PBRS2CetStatAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRS2CetStatAck::SharedCtor() {
  _cached_size_ = 0;
  conn_ = 0;
  reconn_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRS2CetStatAck::~PBRS2CetStatAck() {
  SharedDtor();
}

void PBRS2CetStatAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBRS2CetStatAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBRS2CetStatAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRS2CetStatAck_descriptor_;
}

const PBRS2CetStatAck& PBRS2CetStatAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCSMsg_2eproto();  return *default_instance_;
}

PBRS2CetStatAck* PBRS2CetStatAck::default_instance_ = NULL;

PBRS2CetStatAck* PBRS2CetStatAck::New() const {
  return new PBRS2CetStatAck;
}

void PBRS2CetStatAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    conn_ = 0;
    reconn_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRS2CetStatAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 conn = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &conn_)));
          set_has_conn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reconn;
        break;
      }
      
      // optional int32 reconn = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reconn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reconn_)));
          set_has_reconn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRS2CetStatAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 conn = 1;
  if (has_conn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->conn(), output);
  }
  
  // optional int32 reconn = 2;
  if (has_reconn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reconn(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRS2CetStatAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 conn = 1;
  if (has_conn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->conn(), target);
  }
  
  // optional int32 reconn = 2;
  if (has_reconn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reconn(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRS2CetStatAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 conn = 1;
    if (has_conn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->conn());
    }
    
    // optional int32 reconn = 2;
    if (has_reconn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reconn());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBRS2CetStatAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRS2CetStatAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRS2CetStatAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRS2CetStatAck::MergeFrom(const PBRS2CetStatAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_conn()) {
      set_conn(from.conn());
    }
    if (from.has_reconn()) {
      set_reconn(from.reconn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRS2CetStatAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRS2CetStatAck::CopyFrom(const PBRS2CetStatAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBRS2CetStatAck::IsInitialized() const {
  
  return true;
}

void PBRS2CetStatAck::Swap(PBRS2CetStatAck* other) {
  if (other != this) {
    std::swap(conn_, other->conn_);
    std::swap(reconn_, other->reconn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBRS2CetStatAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBRS2CetStatAck_descriptor_;
  metadata.reflection = PBRS2CetStatAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2RSAccountRemoveAsk::kAccountFieldNumber;
#endif  // !_MSC_VER

PBC2RSAccountRemoveAsk::PBC2RSAccountRemoveAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2RSAccountRemoveAsk::InitAsDefaultInstance() {
}

PBC2RSAccountRemoveAsk::PBC2RSAccountRemoveAsk(const PBC2RSAccountRemoveAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2RSAccountRemoveAsk::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2RSAccountRemoveAsk::~PBC2RSAccountRemoveAsk() {
  SharedDtor();
}

void PBC2RSAccountRemoveAsk::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void PBC2RSAccountRemoveAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2RSAccountRemoveAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2RSAccountRemoveAsk_descriptor_;
}

const PBC2RSAccountRemoveAsk& PBC2RSAccountRemoveAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCSMsg_2eproto();  return *default_instance_;
}

PBC2RSAccountRemoveAsk* PBC2RSAccountRemoveAsk::default_instance_ = NULL;

PBC2RSAccountRemoveAsk* PBC2RSAccountRemoveAsk::New() const {
  return new PBC2RSAccountRemoveAsk;
}

void PBC2RSAccountRemoveAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2RSAccountRemoveAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2RSAccountRemoveAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2RSAccountRemoveAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2RSAccountRemoveAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2RSAccountRemoveAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2RSAccountRemoveAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2RSAccountRemoveAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2RSAccountRemoveAsk::MergeFrom(const PBC2RSAccountRemoveAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2RSAccountRemoveAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2RSAccountRemoveAsk::CopyFrom(const PBC2RSAccountRemoveAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2RSAccountRemoveAsk::IsInitialized() const {
  
  return true;
}

void PBC2RSAccountRemoveAsk::Swap(PBC2RSAccountRemoveAsk* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2RSAccountRemoveAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2RSAccountRemoveAsk_descriptor_;
  metadata.reflection = PBC2RSAccountRemoveAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBRS2CAccountRemoveAck::kAccountFieldNumber;
#endif  // !_MSC_VER

PBRS2CAccountRemoveAck::PBRS2CAccountRemoveAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRS2CAccountRemoveAck::InitAsDefaultInstance() {
}

PBRS2CAccountRemoveAck::PBRS2CAccountRemoveAck(const PBRS2CAccountRemoveAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRS2CAccountRemoveAck::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRS2CAccountRemoveAck::~PBRS2CAccountRemoveAck() {
  SharedDtor();
}

void PBRS2CAccountRemoveAck::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void PBRS2CAccountRemoveAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBRS2CAccountRemoveAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRS2CAccountRemoveAck_descriptor_;
}

const PBRS2CAccountRemoveAck& PBRS2CAccountRemoveAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCSMsg_2eproto();  return *default_instance_;
}

PBRS2CAccountRemoveAck* PBRS2CAccountRemoveAck::default_instance_ = NULL;

PBRS2CAccountRemoveAck* PBRS2CAccountRemoveAck::New() const {
  return new PBRS2CAccountRemoveAck;
}

void PBRS2CAccountRemoveAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRS2CAccountRemoveAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRS2CAccountRemoveAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRS2CAccountRemoveAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRS2CAccountRemoveAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBRS2CAccountRemoveAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRS2CAccountRemoveAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRS2CAccountRemoveAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRS2CAccountRemoveAck::MergeFrom(const PBRS2CAccountRemoveAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRS2CAccountRemoveAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRS2CAccountRemoveAck::CopyFrom(const PBRS2CAccountRemoveAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBRS2CAccountRemoveAck::IsInitialized() const {
  
  return true;
}

void PBRS2CAccountRemoveAck::Swap(PBRS2CAccountRemoveAck* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBRS2CAccountRemoveAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBRS2CAccountRemoveAck_descriptor_;
  metadata.reflection = PBRS2CAccountRemoveAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2RSRobotAIUpdateAsk::kAccountFieldNumber;
const int PBC2RSRobotAIUpdateAsk::kAinameFieldNumber;
#endif  // !_MSC_VER

PBC2RSRobotAIUpdateAsk::PBC2RSRobotAIUpdateAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2RSRobotAIUpdateAsk::InitAsDefaultInstance() {
}

PBC2RSRobotAIUpdateAsk::PBC2RSRobotAIUpdateAsk(const PBC2RSRobotAIUpdateAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2RSRobotAIUpdateAsk::SharedCtor() {
  _cached_size_ = 0;
  ainame_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2RSRobotAIUpdateAsk::~PBC2RSRobotAIUpdateAsk() {
  SharedDtor();
}

void PBC2RSRobotAIUpdateAsk::SharedDtor() {
  if (ainame_ != &::google::protobuf::internal::kEmptyString) {
    delete ainame_;
  }
  if (this != default_instance_) {
  }
}

void PBC2RSRobotAIUpdateAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2RSRobotAIUpdateAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2RSRobotAIUpdateAsk_descriptor_;
}

const PBC2RSRobotAIUpdateAsk& PBC2RSRobotAIUpdateAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCSMsg_2eproto();  return *default_instance_;
}

PBC2RSRobotAIUpdateAsk* PBC2RSRobotAIUpdateAsk::default_instance_ = NULL;

PBC2RSRobotAIUpdateAsk* PBC2RSRobotAIUpdateAsk::New() const {
  return new PBC2RSRobotAIUpdateAsk;
}

void PBC2RSRobotAIUpdateAsk::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_ainame()) {
      if (ainame_ != &::google::protobuf::internal::kEmptyString) {
        ainame_->clear();
      }
    }
  }
  account_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2RSRobotAIUpdateAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account(0).data(), this->account(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_account;
        if (input->ExpectTag(18)) goto parse_ainame;
        break;
      }
      
      // optional string ainame = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ainame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ainame()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ainame().data(), this->ainame().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2RSRobotAIUpdateAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string account = 1;
  for (int i = 0; i < this->account_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->account(i).data(), this->account(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(i), output);
  }
  
  // optional string ainame = 2;
  if (has_ainame()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ainame().data(), this->ainame().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ainame(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2RSRobotAIUpdateAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string account = 1;
  for (int i = 0; i < this->account_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account(i).data(), this->account(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->account(i), target);
  }
  
  // optional string ainame = 2;
  if (has_ainame()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ainame().data(), this->ainame().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ainame(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2RSRobotAIUpdateAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string ainame = 2;
    if (has_ainame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ainame());
    }
    
  }
  // repeated string account = 1;
  total_size += 1 * this->account_size();
  for (int i = 0; i < this->account_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->account(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2RSRobotAIUpdateAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2RSRobotAIUpdateAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2RSRobotAIUpdateAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2RSRobotAIUpdateAsk::MergeFrom(const PBC2RSRobotAIUpdateAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  account_.MergeFrom(from.account_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_ainame()) {
      set_ainame(from.ainame());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2RSRobotAIUpdateAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2RSRobotAIUpdateAsk::CopyFrom(const PBC2RSRobotAIUpdateAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2RSRobotAIUpdateAsk::IsInitialized() const {
  
  return true;
}

void PBC2RSRobotAIUpdateAsk::Swap(PBC2RSRobotAIUpdateAsk* other) {
  if (other != this) {
    account_.Swap(&other->account_);
    std::swap(ainame_, other->ainame_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2RSRobotAIUpdateAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2RSRobotAIUpdateAsk_descriptor_;
  metadata.reflection = PBC2RSRobotAIUpdateAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBRS2CRobotAIUpdateAck::kAccountFieldNumber;
const int PBRS2CRobotAIUpdateAck::kAinameFieldNumber;
#endif  // !_MSC_VER

PBRS2CRobotAIUpdateAck::PBRS2CRobotAIUpdateAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRS2CRobotAIUpdateAck::InitAsDefaultInstance() {
}

PBRS2CRobotAIUpdateAck::PBRS2CRobotAIUpdateAck(const PBRS2CRobotAIUpdateAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRS2CRobotAIUpdateAck::SharedCtor() {
  _cached_size_ = 0;
  ainame_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRS2CRobotAIUpdateAck::~PBRS2CRobotAIUpdateAck() {
  SharedDtor();
}

void PBRS2CRobotAIUpdateAck::SharedDtor() {
  if (ainame_ != &::google::protobuf::internal::kEmptyString) {
    delete ainame_;
  }
  if (this != default_instance_) {
  }
}

void PBRS2CRobotAIUpdateAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBRS2CRobotAIUpdateAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRS2CRobotAIUpdateAck_descriptor_;
}

const PBRS2CRobotAIUpdateAck& PBRS2CRobotAIUpdateAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCSMsg_2eproto();  return *default_instance_;
}

PBRS2CRobotAIUpdateAck* PBRS2CRobotAIUpdateAck::default_instance_ = NULL;

PBRS2CRobotAIUpdateAck* PBRS2CRobotAIUpdateAck::New() const {
  return new PBRS2CRobotAIUpdateAck;
}

void PBRS2CRobotAIUpdateAck::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_ainame()) {
      if (ainame_ != &::google::protobuf::internal::kEmptyString) {
        ainame_->clear();
      }
    }
  }
  account_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRS2CRobotAIUpdateAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account(0).data(), this->account(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_account;
        if (input->ExpectTag(18)) goto parse_ainame;
        break;
      }
      
      // optional string ainame = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ainame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ainame()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ainame().data(), this->ainame().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRS2CRobotAIUpdateAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string account = 1;
  for (int i = 0; i < this->account_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->account(i).data(), this->account(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(i), output);
  }
  
  // optional string ainame = 2;
  if (has_ainame()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ainame().data(), this->ainame().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ainame(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRS2CRobotAIUpdateAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string account = 1;
  for (int i = 0; i < this->account_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account(i).data(), this->account(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->account(i), target);
  }
  
  // optional string ainame = 2;
  if (has_ainame()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ainame().data(), this->ainame().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ainame(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRS2CRobotAIUpdateAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string ainame = 2;
    if (has_ainame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ainame());
    }
    
  }
  // repeated string account = 1;
  total_size += 1 * this->account_size();
  for (int i = 0; i < this->account_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->account(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBRS2CRobotAIUpdateAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRS2CRobotAIUpdateAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRS2CRobotAIUpdateAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRS2CRobotAIUpdateAck::MergeFrom(const PBRS2CRobotAIUpdateAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  account_.MergeFrom(from.account_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_ainame()) {
      set_ainame(from.ainame());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRS2CRobotAIUpdateAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRS2CRobotAIUpdateAck::CopyFrom(const PBRS2CRobotAIUpdateAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBRS2CRobotAIUpdateAck::IsInitialized() const {
  
  return true;
}

void PBRS2CRobotAIUpdateAck::Swap(PBRS2CRobotAIUpdateAck* other) {
  if (other != this) {
    account_.Swap(&other->account_);
    std::swap(ainame_, other->ainame_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBRS2CRobotAIUpdateAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBRS2CRobotAIUpdateAck_descriptor_;
  metadata.reflection = PBRS2CRobotAIUpdateAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2RSMSGStreamAsk::kAccountFieldNumber;
const int PBC2RSMSGStreamAsk::kMainprotFieldNumber;
const int PBC2RSMSGStreamAsk::kSubprotFieldNumber;
const int PBC2RSMSGStreamAsk::kMsgnameFieldNumber;
const int PBC2RSMSGStreamAsk::kMsgdataFieldNumber;
#endif  // !_MSC_VER

PBC2RSMSGStreamAsk::PBC2RSMSGStreamAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2RSMSGStreamAsk::InitAsDefaultInstance() {
}

PBC2RSMSGStreamAsk::PBC2RSMSGStreamAsk(const PBC2RSMSGStreamAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2RSMSGStreamAsk::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mainprot_ = 0u;
  subprot_ = 0u;
  msgname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msgdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2RSMSGStreamAsk::~PBC2RSMSGStreamAsk() {
  SharedDtor();
}

void PBC2RSMSGStreamAsk::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (msgname_ != &::google::protobuf::internal::kEmptyString) {
    delete msgname_;
  }
  if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
    delete msgdata_;
  }
  if (this != default_instance_) {
  }
}

void PBC2RSMSGStreamAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2RSMSGStreamAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2RSMSGStreamAsk_descriptor_;
}

const PBC2RSMSGStreamAsk& PBC2RSMSGStreamAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCSMsg_2eproto();  return *default_instance_;
}

PBC2RSMSGStreamAsk* PBC2RSMSGStreamAsk::default_instance_ = NULL;

PBC2RSMSGStreamAsk* PBC2RSMSGStreamAsk::New() const {
  return new PBC2RSMSGStreamAsk;
}

void PBC2RSMSGStreamAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    mainprot_ = 0u;
    subprot_ = 0u;
    if (has_msgname()) {
      if (msgname_ != &::google::protobuf::internal::kEmptyString) {
        msgname_->clear();
      }
    }
    if (has_msgdata()) {
      if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
        msgdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2RSMSGStreamAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mainprot;
        break;
      }
      
      // optional uint32 mainprot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mainprot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mainprot_)));
          set_has_mainprot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_subprot;
        break;
      }
      
      // optional uint32 subprot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subprot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subprot_)));
          set_has_subprot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_msgname;
        break;
      }
      
      // optional string msgname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_msgdata;
        break;
      }
      
      // optional string msgdata = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgdata().data(), this->msgdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2RSMSGStreamAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }
  
  // optional uint32 mainprot = 2;
  if (has_mainprot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mainprot(), output);
  }
  
  // optional uint32 subprot = 3;
  if (has_subprot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->subprot(), output);
  }
  
  // optional string msgname = 4;
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->msgname(), output);
  }
  
  // optional string msgdata = 5;
  if (has_msgdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgdata().data(), this->msgdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->msgdata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2RSMSGStreamAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }
  
  // optional uint32 mainprot = 2;
  if (has_mainprot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mainprot(), target);
  }
  
  // optional uint32 subprot = 3;
  if (has_subprot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->subprot(), target);
  }
  
  // optional string msgname = 4;
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->msgname(), target);
  }
  
  // optional string msgdata = 5;
  if (has_msgdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgdata().data(), this->msgdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->msgdata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2RSMSGStreamAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }
    
    // optional uint32 mainprot = 2;
    if (has_mainprot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mainprot());
    }
    
    // optional uint32 subprot = 3;
    if (has_subprot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subprot());
    }
    
    // optional string msgname = 4;
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }
    
    // optional string msgdata = 5;
    if (has_msgdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgdata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2RSMSGStreamAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2RSMSGStreamAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2RSMSGStreamAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2RSMSGStreamAsk::MergeFrom(const PBC2RSMSGStreamAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_mainprot()) {
      set_mainprot(from.mainprot());
    }
    if (from.has_subprot()) {
      set_subprot(from.subprot());
    }
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_msgdata()) {
      set_msgdata(from.msgdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2RSMSGStreamAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2RSMSGStreamAsk::CopyFrom(const PBC2RSMSGStreamAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2RSMSGStreamAsk::IsInitialized() const {
  
  return true;
}

void PBC2RSMSGStreamAsk::Swap(PBC2RSMSGStreamAsk* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(mainprot_, other->mainprot_);
    std::swap(subprot_, other->subprot_);
    std::swap(msgname_, other->msgname_);
    std::swap(msgdata_, other->msgdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2RSMSGStreamAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2RSMSGStreamAsk_descriptor_;
  metadata.reflection = PBC2RSMSGStreamAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBRS2CMSGStreamAck::PBRS2CMSGStreamAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRS2CMSGStreamAck::InitAsDefaultInstance() {
}

PBRS2CMSGStreamAck::PBRS2CMSGStreamAck(const PBRS2CMSGStreamAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRS2CMSGStreamAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRS2CMSGStreamAck::~PBRS2CMSGStreamAck() {
  SharedDtor();
}

void PBRS2CMSGStreamAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBRS2CMSGStreamAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBRS2CMSGStreamAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRS2CMSGStreamAck_descriptor_;
}

const PBRS2CMSGStreamAck& PBRS2CMSGStreamAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCSMsg_2eproto();  return *default_instance_;
}

PBRS2CMSGStreamAck* PBRS2CMSGStreamAck::default_instance_ = NULL;

PBRS2CMSGStreamAck* PBRS2CMSGStreamAck::New() const {
  return new PBRS2CMSGStreamAck;
}

void PBRS2CMSGStreamAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRS2CMSGStreamAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBRS2CMSGStreamAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRS2CMSGStreamAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRS2CMSGStreamAck::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBRS2CMSGStreamAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRS2CMSGStreamAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRS2CMSGStreamAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRS2CMSGStreamAck::MergeFrom(const PBRS2CMSGStreamAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRS2CMSGStreamAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRS2CMSGStreamAck::CopyFrom(const PBRS2CMSGStreamAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBRS2CMSGStreamAck::IsInitialized() const {
  
  return true;
}

void PBRS2CMSGStreamAck::Swap(PBRS2CMSGStreamAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBRS2CMSGStreamAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBRS2CMSGStreamAck_descriptor_;
  metadata.reflection = PBRS2CMSGStreamAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2RSLoadLuaAsk::kAccountFieldNumber;
#endif  // !_MSC_VER

PBC2RSLoadLuaAsk::PBC2RSLoadLuaAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2RSLoadLuaAsk::InitAsDefaultInstance() {
}

PBC2RSLoadLuaAsk::PBC2RSLoadLuaAsk(const PBC2RSLoadLuaAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2RSLoadLuaAsk::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2RSLoadLuaAsk::~PBC2RSLoadLuaAsk() {
  SharedDtor();
}

void PBC2RSLoadLuaAsk::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void PBC2RSLoadLuaAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2RSLoadLuaAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2RSLoadLuaAsk_descriptor_;
}

const PBC2RSLoadLuaAsk& PBC2RSLoadLuaAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCSMsg_2eproto();  return *default_instance_;
}

PBC2RSLoadLuaAsk* PBC2RSLoadLuaAsk::default_instance_ = NULL;

PBC2RSLoadLuaAsk* PBC2RSLoadLuaAsk::New() const {
  return new PBC2RSLoadLuaAsk;
}

void PBC2RSLoadLuaAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2RSLoadLuaAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2RSLoadLuaAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2RSLoadLuaAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2RSLoadLuaAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2RSLoadLuaAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2RSLoadLuaAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2RSLoadLuaAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2RSLoadLuaAsk::MergeFrom(const PBC2RSLoadLuaAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2RSLoadLuaAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2RSLoadLuaAsk::CopyFrom(const PBC2RSLoadLuaAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2RSLoadLuaAsk::IsInitialized() const {
  
  return true;
}

void PBC2RSLoadLuaAsk::Swap(PBC2RSLoadLuaAsk* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2RSLoadLuaAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2RSLoadLuaAsk_descriptor_;
  metadata.reflection = PBC2RSLoadLuaAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBRS2CLoadLuaAck::PBRS2CLoadLuaAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRS2CLoadLuaAck::InitAsDefaultInstance() {
}

PBRS2CLoadLuaAck::PBRS2CLoadLuaAck(const PBRS2CLoadLuaAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRS2CLoadLuaAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRS2CLoadLuaAck::~PBRS2CLoadLuaAck() {
  SharedDtor();
}

void PBRS2CLoadLuaAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBRS2CLoadLuaAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBRS2CLoadLuaAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRS2CLoadLuaAck_descriptor_;
}

const PBRS2CLoadLuaAck& PBRS2CLoadLuaAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCSMsg_2eproto();  return *default_instance_;
}

PBRS2CLoadLuaAck* PBRS2CLoadLuaAck::default_instance_ = NULL;

PBRS2CLoadLuaAck* PBRS2CLoadLuaAck::New() const {
  return new PBRS2CLoadLuaAck;
}

void PBRS2CLoadLuaAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRS2CLoadLuaAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBRS2CLoadLuaAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRS2CLoadLuaAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRS2CLoadLuaAck::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBRS2CLoadLuaAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRS2CLoadLuaAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRS2CLoadLuaAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRS2CLoadLuaAck::MergeFrom(const PBRS2CLoadLuaAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRS2CLoadLuaAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRS2CLoadLuaAck::CopyFrom(const PBRS2CLoadLuaAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBRS2CLoadLuaAck::IsInitialized() const {
  
  return true;
}

void PBRS2CLoadLuaAck::Swap(PBRS2CLoadLuaAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBRS2CLoadLuaAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBRS2CLoadLuaAck_descriptor_;
  metadata.reflection = PBRS2CLoadLuaAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBMSGPrintf::kAccountFieldNumber;
const int PBMSGPrintf::kPrintfFieldNumber;
#endif  // !_MSC_VER

PBMSGPrintf::PBMSGPrintf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMSGPrintf::InitAsDefaultInstance() {
}

PBMSGPrintf::PBMSGPrintf(const PBMSGPrintf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMSGPrintf::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  printf_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMSGPrintf::~PBMSGPrintf() {
  SharedDtor();
}

void PBMSGPrintf::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void PBMSGPrintf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMSGPrintf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMSGPrintf_descriptor_;
}

const PBMSGPrintf& PBMSGPrintf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCSMsg_2eproto();  return *default_instance_;
}

PBMSGPrintf* PBMSGPrintf::default_instance_ = NULL;

PBMSGPrintf* PBMSGPrintf::New() const {
  return new PBMSGPrintf;
}

void PBMSGPrintf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    printf_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMSGPrintf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_printf;
        break;
      }
      
      // optional int32 printf = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_printf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &printf_)));
          set_has_printf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMSGPrintf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }
  
  // optional int32 printf = 2;
  if (has_printf()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->printf(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMSGPrintf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }
  
  // optional int32 printf = 2;
  if (has_printf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->printf(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMSGPrintf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }
    
    // optional int32 printf = 2;
    if (has_printf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->printf());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMSGPrintf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMSGPrintf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMSGPrintf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMSGPrintf::MergeFrom(const PBMSGPrintf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_printf()) {
      set_printf(from.printf());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMSGPrintf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMSGPrintf::CopyFrom(const PBMSGPrintf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMSGPrintf::IsInitialized() const {
  
  return true;
}

void PBMSGPrintf::Swap(PBMSGPrintf* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(printf_, other->printf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMSGPrintf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMSGPrintf_descriptor_;
  metadata.reflection = PBMSGPrintf_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
