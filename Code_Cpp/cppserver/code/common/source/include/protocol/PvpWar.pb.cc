// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PvpWar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PBPvpMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPvpMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GPvpEnterMatchAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GPvpEnterMatchAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CPvpEnterMatchAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CPvpEnterMatchAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CPvpExitMatchAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CPvpExitMatchAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBS2C_PvpWar_ReadyAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBS2C_PvpWar_ReadyAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBS2C_PvpWar_ExitReadyAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBS2C_PvpWar_ExitReadyAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBW2BWPvpWarSingleMatchAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBW2BWPvpWarSingleMatchAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBW2BWPvpWarTeamMatchAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBW2BWPvpWarTeamMatchAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBW2BWPvpWarExitMatchAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBW2BWPvpWarExitMatchAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBW2BWPvpWarReadyEnterAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBW2BWPvpWarReadyEnterAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBW2BWPvpWarExitEnterAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBW2BWPvpWarExitEnterAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBW2WPvpWarExitMatchAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBW2WPvpWarExitMatchAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBW2WPvpWarEnterMatchAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBW2WPvpWarEnterMatchAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBW2WPvpWarReadyEnterAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBW2WPvpWarReadyEnterAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBW2WPvpWarExitReadyEnterAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBW2WPvpWarExitReadyEnterAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBW2WPvpWarCompleteMatchAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBW2WPvpWarCompleteMatchAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPvpBannerCampScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPvpBannerCampScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPvpBannerPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPvpBannerPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCopymapSynBannerScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCopymapSynBannerScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCopymapSynBannerPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCopymapSynBannerPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCopymapSynBannerResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCopymapSynBannerResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCopymapSynBannerGodlike_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCopymapSynBannerGodlike_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCopymapSynBannerMegakill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCopymapSynBannerMegakill_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCopymapSynGetBanner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCopymapSynGetBanner_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCopymapSynBannerKill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCopymapSynBannerKill_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSinglePvpMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSinglePvpMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2WSinglePvpExitMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2WSinglePvpExitMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCopymapSynSinglePvpResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCopymapSynSinglePvpResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCAGSinglePvpDayPrize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCAGSinglePvpDayPrize_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CSinglePvpSynScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CSinglePvpSynScore_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PvpWar_2eproto() {
  protobuf_AddDesc_PvpWar_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PvpWar.proto");
  GOOGLE_CHECK(file != NULL);
  PBPvpMember_descriptor_ = file->message_type(0);
  static const int PBPvpMember_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPvpMember, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPvpMember, maxfightpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPvpMember, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPvpMember, isready_),
  };
  PBPvpMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPvpMember_descriptor_,
      PBPvpMember::default_instance_,
      PBPvpMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPvpMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPvpMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPvpMember));
  PBC2GPvpEnterMatchAsk_descriptor_ = file->message_type(1);
  static const int PBC2GPvpEnterMatchAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GPvpEnterMatchAsk, id_),
  };
  PBC2GPvpEnterMatchAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GPvpEnterMatchAsk_descriptor_,
      PBC2GPvpEnterMatchAsk::default_instance_,
      PBC2GPvpEnterMatchAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GPvpEnterMatchAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GPvpEnterMatchAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GPvpEnterMatchAsk));
  PBG2CPvpEnterMatchAck_descriptor_ = file->message_type(2);
  static const int PBG2CPvpEnterMatchAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CPvpEnterMatchAck, id_),
  };
  PBG2CPvpEnterMatchAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CPvpEnterMatchAck_descriptor_,
      PBG2CPvpEnterMatchAck::default_instance_,
      PBG2CPvpEnterMatchAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CPvpEnterMatchAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CPvpEnterMatchAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CPvpEnterMatchAck));
  PBG2CPvpExitMatchAck_descriptor_ = file->message_type(3);
  static const int PBG2CPvpExitMatchAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CPvpExitMatchAck, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CPvpExitMatchAck, playerid_),
  };
  PBG2CPvpExitMatchAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CPvpExitMatchAck_descriptor_,
      PBG2CPvpExitMatchAck::default_instance_,
      PBG2CPvpExitMatchAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CPvpExitMatchAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CPvpExitMatchAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CPvpExitMatchAck));
  PBS2C_PvpWar_ReadyAck_descriptor_ = file->message_type(4);
  static const int PBS2C_PvpWar_ReadyAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2C_PvpWar_ReadyAck, playerid_),
  };
  PBS2C_PvpWar_ReadyAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBS2C_PvpWar_ReadyAck_descriptor_,
      PBS2C_PvpWar_ReadyAck::default_instance_,
      PBS2C_PvpWar_ReadyAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2C_PvpWar_ReadyAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2C_PvpWar_ReadyAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBS2C_PvpWar_ReadyAck));
  PBS2C_PvpWar_ExitReadyAck_descriptor_ = file->message_type(5);
  static const int PBS2C_PvpWar_ExitReadyAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2C_PvpWar_ExitReadyAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2C_PvpWar_ExitReadyAck, nextentertime_),
  };
  PBS2C_PvpWar_ExitReadyAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBS2C_PvpWar_ExitReadyAck_descriptor_,
      PBS2C_PvpWar_ExitReadyAck::default_instance_,
      PBS2C_PvpWar_ExitReadyAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2C_PvpWar_ExitReadyAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2C_PvpWar_ExitReadyAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBS2C_PvpWar_ExitReadyAck));
  PBW2BWPvpWarSingleMatchAsk_descriptor_ = file->message_type(6);
  static const int PBW2BWPvpWarSingleMatchAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2BWPvpWarSingleMatchAsk, member_),
  };
  PBW2BWPvpWarSingleMatchAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBW2BWPvpWarSingleMatchAsk_descriptor_,
      PBW2BWPvpWarSingleMatchAsk::default_instance_,
      PBW2BWPvpWarSingleMatchAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2BWPvpWarSingleMatchAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2BWPvpWarSingleMatchAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBW2BWPvpWarSingleMatchAsk));
  PBW2BWPvpWarTeamMatchAsk_descriptor_ = file->message_type(7);
  static const int PBW2BWPvpWarTeamMatchAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2BWPvpWarTeamMatchAsk, member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2BWPvpWarTeamMatchAsk, maxfightpower_),
  };
  PBW2BWPvpWarTeamMatchAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBW2BWPvpWarTeamMatchAsk_descriptor_,
      PBW2BWPvpWarTeamMatchAsk::default_instance_,
      PBW2BWPvpWarTeamMatchAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2BWPvpWarTeamMatchAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2BWPvpWarTeamMatchAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBW2BWPvpWarTeamMatchAsk));
  PBW2BWPvpWarExitMatchAsk_descriptor_ = file->message_type(8);
  static const int PBW2BWPvpWarExitMatchAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2BWPvpWarExitMatchAsk, display_),
  };
  PBW2BWPvpWarExitMatchAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBW2BWPvpWarExitMatchAsk_descriptor_,
      PBW2BWPvpWarExitMatchAsk::default_instance_,
      PBW2BWPvpWarExitMatchAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2BWPvpWarExitMatchAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2BWPvpWarExitMatchAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBW2BWPvpWarExitMatchAsk));
  PBW2BWPvpWarReadyEnterAsk_descriptor_ = file->message_type(9);
  static const int PBW2BWPvpWarReadyEnterAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2BWPvpWarReadyEnterAsk, display_),
  };
  PBW2BWPvpWarReadyEnterAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBW2BWPvpWarReadyEnterAsk_descriptor_,
      PBW2BWPvpWarReadyEnterAsk::default_instance_,
      PBW2BWPvpWarReadyEnterAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2BWPvpWarReadyEnterAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2BWPvpWarReadyEnterAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBW2BWPvpWarReadyEnterAsk));
  PBW2BWPvpWarExitEnterAsk_descriptor_ = file->message_type(10);
  static const int PBW2BWPvpWarExitEnterAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2BWPvpWarExitEnterAsk, display_),
  };
  PBW2BWPvpWarExitEnterAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBW2BWPvpWarExitEnterAsk_descriptor_,
      PBW2BWPvpWarExitEnterAsk::default_instance_,
      PBW2BWPvpWarExitEnterAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2BWPvpWarExitEnterAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2BWPvpWarExitEnterAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBW2BWPvpWarExitEnterAsk));
  PBBW2WPvpWarExitMatchAck_descriptor_ = file->message_type(11);
  static const int PBBW2WPvpWarExitMatchAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBW2WPvpWarExitMatchAck, playerid_),
  };
  PBBW2WPvpWarExitMatchAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBW2WPvpWarExitMatchAck_descriptor_,
      PBBW2WPvpWarExitMatchAck::default_instance_,
      PBBW2WPvpWarExitMatchAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBW2WPvpWarExitMatchAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBW2WPvpWarExitMatchAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBW2WPvpWarExitMatchAck));
  PBBW2WPvpWarEnterMatchAck_descriptor_ = file->message_type(12);
  static const int PBBW2WPvpWarEnterMatchAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBW2WPvpWarEnterMatchAck, warid_),
  };
  PBBW2WPvpWarEnterMatchAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBW2WPvpWarEnterMatchAck_descriptor_,
      PBBW2WPvpWarEnterMatchAck::default_instance_,
      PBBW2WPvpWarEnterMatchAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBW2WPvpWarEnterMatchAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBW2WPvpWarEnterMatchAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBW2WPvpWarEnterMatchAck));
  PBBW2WPvpWarReadyEnterAck_descriptor_ = file->message_type(13);
  static const int PBBW2WPvpWarReadyEnterAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBW2WPvpWarReadyEnterAck, playerid_),
  };
  PBBW2WPvpWarReadyEnterAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBW2WPvpWarReadyEnterAck_descriptor_,
      PBBW2WPvpWarReadyEnterAck::default_instance_,
      PBBW2WPvpWarReadyEnterAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBW2WPvpWarReadyEnterAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBW2WPvpWarReadyEnterAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBW2WPvpWarReadyEnterAck));
  PBBW2WPvpWarExitReadyEnterAck_descriptor_ = file->message_type(14);
  static const int PBBW2WPvpWarExitReadyEnterAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBW2WPvpWarExitReadyEnterAck, playerid_),
  };
  PBBW2WPvpWarExitReadyEnterAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBW2WPvpWarExitReadyEnterAck_descriptor_,
      PBBW2WPvpWarExitReadyEnterAck::default_instance_,
      PBBW2WPvpWarExitReadyEnterAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBW2WPvpWarExitReadyEnterAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBW2WPvpWarExitReadyEnterAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBW2WPvpWarExitReadyEnterAck));
  PBBW2WPvpWarCompleteMatchAck_descriptor_ = file->message_type(15);
  static const int PBBW2WPvpWarCompleteMatchAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBW2WPvpWarCompleteMatchAck, friend__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBW2WPvpWarCompleteMatchAck, enemy_),
  };
  PBBW2WPvpWarCompleteMatchAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBW2WPvpWarCompleteMatchAck_descriptor_,
      PBBW2WPvpWarCompleteMatchAck::default_instance_,
      PBBW2WPvpWarCompleteMatchAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBW2WPvpWarCompleteMatchAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBW2WPvpWarCompleteMatchAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBW2WPvpWarCompleteMatchAck));
  PBPvpBannerCampScore_descriptor_ = file->message_type(16);
  static const int PBPvpBannerCampScore_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPvpBannerCampScore, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPvpBannerCampScore, score_),
  };
  PBPvpBannerCampScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPvpBannerCampScore_descriptor_,
      PBPvpBannerCampScore::default_instance_,
      PBPvpBannerCampScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPvpBannerCampScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPvpBannerCampScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPvpBannerCampScore));
  PBPvpBannerPlayerInfo_descriptor_ = file->message_type(17);
  static const int PBPvpBannerPlayerInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPvpBannerPlayerInfo, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPvpBannerPlayerInfo, killcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPvpBannerPlayerInfo, deadcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPvpBannerPlayerInfo, assistkillcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPvpBannerPlayerInfo, contri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPvpBannerPlayerInfo, godlikecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPvpBannerPlayerInfo, megakillcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPvpBannerPlayerInfo, ismvp_),
  };
  PBPvpBannerPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPvpBannerPlayerInfo_descriptor_,
      PBPvpBannerPlayerInfo::default_instance_,
      PBPvpBannerPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPvpBannerPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPvpBannerPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPvpBannerPlayerInfo));
  PBG2CCopymapSynBannerScore_descriptor_ = file->message_type(18);
  static const int PBG2CCopymapSynBannerScore_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapSynBannerScore, campscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapSynBannerScore, bannercampid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapSynBannerScore, buffid_),
  };
  PBG2CCopymapSynBannerScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCopymapSynBannerScore_descriptor_,
      PBG2CCopymapSynBannerScore::default_instance_,
      PBG2CCopymapSynBannerScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapSynBannerScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapSynBannerScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCopymapSynBannerScore));
  PBG2CCopymapSynBannerPlayerInfo_descriptor_ = file->message_type(19);
  static const int PBG2CCopymapSynBannerPlayerInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapSynBannerPlayerInfo, pbinfo_),
  };
  PBG2CCopymapSynBannerPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCopymapSynBannerPlayerInfo_descriptor_,
      PBG2CCopymapSynBannerPlayerInfo::default_instance_,
      PBG2CCopymapSynBannerPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapSynBannerPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapSynBannerPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCopymapSynBannerPlayerInfo));
  PBG2CCopymapSynBannerResult_descriptor_ = file->message_type(20);
  static const int PBG2CCopymapSynBannerResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapSynBannerResult, campscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapSynBannerResult, pbinfo_),
  };
  PBG2CCopymapSynBannerResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCopymapSynBannerResult_descriptor_,
      PBG2CCopymapSynBannerResult::default_instance_,
      PBG2CCopymapSynBannerResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapSynBannerResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapSynBannerResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCopymapSynBannerResult));
  PBG2CCopymapSynBannerGodlike_descriptor_ = file->message_type(21);
  static const int PBG2CCopymapSynBannerGodlike_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapSynBannerGodlike, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapSynBannerGodlike, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapSynBannerGodlike, target_),
  };
  PBG2CCopymapSynBannerGodlike_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCopymapSynBannerGodlike_descriptor_,
      PBG2CCopymapSynBannerGodlike::default_instance_,
      PBG2CCopymapSynBannerGodlike_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapSynBannerGodlike, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapSynBannerGodlike, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCopymapSynBannerGodlike));
  PBG2CCopymapSynBannerMegakill_descriptor_ = file->message_type(22);
  static const int PBG2CCopymapSynBannerMegakill_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapSynBannerMegakill, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapSynBannerMegakill, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapSynBannerMegakill, target_),
  };
  PBG2CCopymapSynBannerMegakill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCopymapSynBannerMegakill_descriptor_,
      PBG2CCopymapSynBannerMegakill::default_instance_,
      PBG2CCopymapSynBannerMegakill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapSynBannerMegakill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapSynBannerMegakill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCopymapSynBannerMegakill));
  PBG2CCopymapSynGetBanner_descriptor_ = file->message_type(23);
  static const int PBG2CCopymapSynGetBanner_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapSynGetBanner, display_),
  };
  PBG2CCopymapSynGetBanner_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCopymapSynGetBanner_descriptor_,
      PBG2CCopymapSynGetBanner::default_instance_,
      PBG2CCopymapSynGetBanner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapSynGetBanner, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapSynGetBanner, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCopymapSynGetBanner));
  PBG2CCopymapSynBannerKill_descriptor_ = file->message_type(24);
  static const int PBG2CCopymapSynBannerKill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapSynBannerKill, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapSynBannerKill, target_),
  };
  PBG2CCopymapSynBannerKill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCopymapSynBannerKill_descriptor_,
      PBG2CCopymapSynBannerKill::default_instance_,
      PBG2CCopymapSynBannerKill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapSynBannerKill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapSynBannerKill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCopymapSynBannerKill));
  PBSinglePvpMember_descriptor_ = file->message_type(25);
  static const int PBSinglePvpMember_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSinglePvpMember, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSinglePvpMember, singlepvpscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSinglePvpMember, maxfightpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSinglePvpMember, wincount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSinglePvpMember, failcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSinglePvpMember, equalcount_),
  };
  PBSinglePvpMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSinglePvpMember_descriptor_,
      PBSinglePvpMember::default_instance_,
      PBSinglePvpMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSinglePvpMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSinglePvpMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSinglePvpMember));
  PBG2WSinglePvpExitMatch_descriptor_ = file->message_type(26);
  static const int PBG2WSinglePvpExitMatch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WSinglePvpExitMatch, display_),
  };
  PBG2WSinglePvpExitMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2WSinglePvpExitMatch_descriptor_,
      PBG2WSinglePvpExitMatch::default_instance_,
      PBG2WSinglePvpExitMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WSinglePvpExitMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WSinglePvpExitMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2WSinglePvpExitMatch));
  PBG2CCopymapSynSinglePvpResult_descriptor_ = file->message_type(27);
  static const int PBG2CCopymapSynSinglePvpResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapSynSinglePvpResult, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapSynSinglePvpResult, curscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapSynSinglePvpResult, oldscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapSynSinglePvpResult, honor_),
  };
  PBG2CCopymapSynSinglePvpResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCopymapSynSinglePvpResult_descriptor_,
      PBG2CCopymapSynSinglePvpResult::default_instance_,
      PBG2CCopymapSynSinglePvpResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapSynSinglePvpResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapSynSinglePvpResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCopymapSynSinglePvpResult));
  PBCAGSinglePvpDayPrize_descriptor_ = file->message_type(28);
  static const int PBCAGSinglePvpDayPrize_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCAGSinglePvpDayPrize, daycount_),
  };
  PBCAGSinglePvpDayPrize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCAGSinglePvpDayPrize_descriptor_,
      PBCAGSinglePvpDayPrize::default_instance_,
      PBCAGSinglePvpDayPrize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCAGSinglePvpDayPrize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCAGSinglePvpDayPrize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCAGSinglePvpDayPrize));
  PBG2CSinglePvpSynScore_descriptor_ = file->message_type(29);
  static const int PBG2CSinglePvpSynScore_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSinglePvpSynScore, singlepvpscore_),
  };
  PBG2CSinglePvpSynScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CSinglePvpSynScore_descriptor_,
      PBG2CSinglePvpSynScore::default_instance_,
      PBG2CSinglePvpSynScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSinglePvpSynScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSinglePvpSynScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CSinglePvpSynScore));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PvpWar_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPvpMember_descriptor_, &PBPvpMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GPvpEnterMatchAsk_descriptor_, &PBC2GPvpEnterMatchAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CPvpEnterMatchAck_descriptor_, &PBG2CPvpEnterMatchAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CPvpExitMatchAck_descriptor_, &PBG2CPvpExitMatchAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBS2C_PvpWar_ReadyAck_descriptor_, &PBS2C_PvpWar_ReadyAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBS2C_PvpWar_ExitReadyAck_descriptor_, &PBS2C_PvpWar_ExitReadyAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBW2BWPvpWarSingleMatchAsk_descriptor_, &PBW2BWPvpWarSingleMatchAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBW2BWPvpWarTeamMatchAsk_descriptor_, &PBW2BWPvpWarTeamMatchAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBW2BWPvpWarExitMatchAsk_descriptor_, &PBW2BWPvpWarExitMatchAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBW2BWPvpWarReadyEnterAsk_descriptor_, &PBW2BWPvpWarReadyEnterAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBW2BWPvpWarExitEnterAsk_descriptor_, &PBW2BWPvpWarExitEnterAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBW2WPvpWarExitMatchAck_descriptor_, &PBBW2WPvpWarExitMatchAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBW2WPvpWarEnterMatchAck_descriptor_, &PBBW2WPvpWarEnterMatchAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBW2WPvpWarReadyEnterAck_descriptor_, &PBBW2WPvpWarReadyEnterAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBW2WPvpWarExitReadyEnterAck_descriptor_, &PBBW2WPvpWarExitReadyEnterAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBW2WPvpWarCompleteMatchAck_descriptor_, &PBBW2WPvpWarCompleteMatchAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPvpBannerCampScore_descriptor_, &PBPvpBannerCampScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPvpBannerPlayerInfo_descriptor_, &PBPvpBannerPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCopymapSynBannerScore_descriptor_, &PBG2CCopymapSynBannerScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCopymapSynBannerPlayerInfo_descriptor_, &PBG2CCopymapSynBannerPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCopymapSynBannerResult_descriptor_, &PBG2CCopymapSynBannerResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCopymapSynBannerGodlike_descriptor_, &PBG2CCopymapSynBannerGodlike::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCopymapSynBannerMegakill_descriptor_, &PBG2CCopymapSynBannerMegakill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCopymapSynGetBanner_descriptor_, &PBG2CCopymapSynGetBanner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCopymapSynBannerKill_descriptor_, &PBG2CCopymapSynBannerKill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSinglePvpMember_descriptor_, &PBSinglePvpMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2WSinglePvpExitMatch_descriptor_, &PBG2WSinglePvpExitMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCopymapSynSinglePvpResult_descriptor_, &PBG2CCopymapSynSinglePvpResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCAGSinglePvpDayPrize_descriptor_, &PBCAGSinglePvpDayPrize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CSinglePvpSynScore_descriptor_, &PBG2CSinglePvpSynScore::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PvpWar_2eproto() {
  delete PBPvpMember::default_instance_;
  delete PBPvpMember_reflection_;
  delete PBC2GPvpEnterMatchAsk::default_instance_;
  delete PBC2GPvpEnterMatchAsk_reflection_;
  delete PBG2CPvpEnterMatchAck::default_instance_;
  delete PBG2CPvpEnterMatchAck_reflection_;
  delete PBG2CPvpExitMatchAck::default_instance_;
  delete PBG2CPvpExitMatchAck_reflection_;
  delete PBS2C_PvpWar_ReadyAck::default_instance_;
  delete PBS2C_PvpWar_ReadyAck_reflection_;
  delete PBS2C_PvpWar_ExitReadyAck::default_instance_;
  delete PBS2C_PvpWar_ExitReadyAck_reflection_;
  delete PBW2BWPvpWarSingleMatchAsk::default_instance_;
  delete PBW2BWPvpWarSingleMatchAsk_reflection_;
  delete PBW2BWPvpWarTeamMatchAsk::default_instance_;
  delete PBW2BWPvpWarTeamMatchAsk_reflection_;
  delete PBW2BWPvpWarExitMatchAsk::default_instance_;
  delete PBW2BWPvpWarExitMatchAsk_reflection_;
  delete PBW2BWPvpWarReadyEnterAsk::default_instance_;
  delete PBW2BWPvpWarReadyEnterAsk_reflection_;
  delete PBW2BWPvpWarExitEnterAsk::default_instance_;
  delete PBW2BWPvpWarExitEnterAsk_reflection_;
  delete PBBW2WPvpWarExitMatchAck::default_instance_;
  delete PBBW2WPvpWarExitMatchAck_reflection_;
  delete PBBW2WPvpWarEnterMatchAck::default_instance_;
  delete PBBW2WPvpWarEnterMatchAck_reflection_;
  delete PBBW2WPvpWarReadyEnterAck::default_instance_;
  delete PBBW2WPvpWarReadyEnterAck_reflection_;
  delete PBBW2WPvpWarExitReadyEnterAck::default_instance_;
  delete PBBW2WPvpWarExitReadyEnterAck_reflection_;
  delete PBBW2WPvpWarCompleteMatchAck::default_instance_;
  delete PBBW2WPvpWarCompleteMatchAck_reflection_;
  delete PBPvpBannerCampScore::default_instance_;
  delete PBPvpBannerCampScore_reflection_;
  delete PBPvpBannerPlayerInfo::default_instance_;
  delete PBPvpBannerPlayerInfo_reflection_;
  delete PBG2CCopymapSynBannerScore::default_instance_;
  delete PBG2CCopymapSynBannerScore_reflection_;
  delete PBG2CCopymapSynBannerPlayerInfo::default_instance_;
  delete PBG2CCopymapSynBannerPlayerInfo_reflection_;
  delete PBG2CCopymapSynBannerResult::default_instance_;
  delete PBG2CCopymapSynBannerResult_reflection_;
  delete PBG2CCopymapSynBannerGodlike::default_instance_;
  delete PBG2CCopymapSynBannerGodlike_reflection_;
  delete PBG2CCopymapSynBannerMegakill::default_instance_;
  delete PBG2CCopymapSynBannerMegakill_reflection_;
  delete PBG2CCopymapSynGetBanner::default_instance_;
  delete PBG2CCopymapSynGetBanner_reflection_;
  delete PBG2CCopymapSynBannerKill::default_instance_;
  delete PBG2CCopymapSynBannerKill_reflection_;
  delete PBSinglePvpMember::default_instance_;
  delete PBSinglePvpMember_reflection_;
  delete PBG2WSinglePvpExitMatch::default_instance_;
  delete PBG2WSinglePvpExitMatch_reflection_;
  delete PBG2CCopymapSynSinglePvpResult::default_instance_;
  delete PBG2CCopymapSynSinglePvpResult_reflection_;
  delete PBCAGSinglePvpDayPrize::default_instance_;
  delete PBCAGSinglePvpDayPrize_reflection_;
  delete PBG2CSinglePvpSynScore::default_instance_;
  delete PBG2CSinglePvpSynScore_reflection_;
}

void protobuf_AddDesc_PvpWar_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_AccountStruct_2eproto();
  ::protobuf_AddDesc_PlayerStruct_2eproto();
  ::protobuf_AddDesc_GameStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014PvpWar.proto\032\023AccountStruct.proto\032\022Pla"
    "yerStruct.proto\032\020GameStruct.proto\"h\n\013PBP"
    "vpMember\022!\n\007display\030\001 \001(\0132\020.PBPlayerDisp"
    "lay\022\025\n\rmaxfightpower\030\002 \001(\004\022\016\n\006teamid\030\003 \001"
    "(\004\022\017\n\007isready\030\004 \001(\010\"#\n\025PBC2GPvpEnterMatc"
    "hAsk\022\n\n\002id\030\001 \001(\r\"#\n\025PBG2CPvpEnterMatchAc"
    "k\022\n\n\002id\030\001 \001(\r\"4\n\024PBG2CPvpExitMatchAck\022\n\n"
    "\002id\030\001 \001(\r\022\020\n\010playerid\030\002 \001(\r\")\n\025PBS2C_Pvp"
    "War_ReadyAck\022\020\n\010playerid\030\001 \001(\r\"D\n\031PBS2C_"
    "PvpWar_ExitReadyAck\022\020\n\010playerid\030\001 \001(\r\022\025\n"
    "\rnextentertime\030\002 \001(\r\":\n\032PBW2BWPvpWarSing"
    "leMatchAsk\022\034\n\006member\030\001 \001(\0132\014.PBPvpMember"
    "\"O\n\030PBW2BWPvpWarTeamMatchAsk\022\034\n\006member\030\001"
    " \003(\0132\014.PBPvpMember\022\025\n\rmaxfightpower\030\002 \001("
    "\r\"=\n\030PBW2BWPvpWarExitMatchAsk\022!\n\007display"
    "\030\001 \001(\0132\020.PBPlayerDisplay\">\n\031PBW2BWPvpWar"
    "ReadyEnterAsk\022!\n\007display\030\001 \001(\0132\020.PBPlaye"
    "rDisplay\"=\n\030PBW2BWPvpWarExitEnterAsk\022!\n\007"
    "display\030\001 \001(\0132\020.PBPlayerDisplay\",\n\030PBBW2"
    "WPvpWarExitMatchAck\022\020\n\010playerid\030\001 \001(\r\"*\n"
    "\031PBBW2WPvpWarEnterMatchAck\022\r\n\005warid\030\001 \001("
    "\r\"-\n\031PBBW2WPvpWarReadyEnterAck\022\020\n\010player"
    "id\030\001 \001(\r\"1\n\035PBBW2WPvpWarExitReadyEnterAc"
    "k\022\020\n\010playerid\030\001 \001(\r\"Y\n\034PBBW2WPvpWarCompl"
    "eteMatchAck\022\034\n\006friend\030\001 \003(\0132\014.PBPvpMembe"
    "r\022\033\n\005enemy\030\002 \003(\0132\014.PBPvpMember\"5\n\024PBPvpB"
    "annerCampScore\022\016\n\006campid\030\001 \001(\r\022\r\n\005score\030"
    "\002 \001(\r\"\305\001\n\025PBPvpBannerPlayerInfo\022!\n\007displ"
    "ay\030\001 \001(\0132\020.PBPlayerDisplay\022\021\n\tkillcount\030"
    "\002 \001(\r\022\021\n\tdeadcount\030\003 \001(\r\022\027\n\017assistkillco"
    "unt\030\004 \001(\r\022\016\n\006contri\030\005 \001(\r\022\024\n\014godlikecoun"
    "t\030\006 \001(\r\022\025\n\rmegakillcount\030\007 \001(\r\022\r\n\005ismvp\030"
    "\010 \001(\r\"l\n\032PBG2CCopymapSynBannerScore\022(\n\tc"
    "ampscore\030\001 \003(\0132\025.PBPvpBannerCampScore\022\024\n"
    "\014bannercampid\030\002 \003(\r\022\016\n\006buffID\030\003 \003(\r\"I\n\037P"
    "BG2CCopymapSynBannerPlayerInfo\022&\n\006pbinfo"
    "\030\001 \003(\0132\026.PBPvpBannerPlayerInfo\"o\n\033PBG2CC"
    "opymapSynBannerResult\022(\n\tcampscore\030\001 \003(\013"
    "2\025.PBPvpBannerCampScore\022&\n\006pbinfo\030\002 \003(\0132"
    "\026.PBPvpBannerPlayerInfo\"r\n\034PBG2CCopymapS"
    "ynBannerGodlike\022!\n\007display\030\001 \001(\0132\020.PBPla"
    "yerDisplay\022\r\n\005count\030\002 \001(\r\022 \n\006target\030\003 \001("
    "\0132\020.PBPlayerDisplay\"s\n\035PBG2CCopymapSynBa"
    "nnerMegakill\022!\n\007display\030\001 \001(\0132\020.PBPlayer"
    "Display\022\r\n\005count\030\002 \001(\r\022 \n\006target\030\003 \001(\0132\020"
    ".PBPlayerDisplay\"=\n\030PBG2CCopymapSynGetBa"
    "nner\022!\n\007display\030\001 \001(\0132\020.PBPlayerDisplay\""
    "_\n\031PBG2CCopymapSynBannerKill\022 \n\006source\030\001"
    " \001(\0132\020.PBPlayerDisplay\022 \n\006target\030\002 \001(\0132\020"
    ".PBPlayerDisplay\"\236\001\n\021PBSinglePvpMember\022!"
    "\n\007display\030\001 \001(\0132\020.PBPlayerDisplay\022\026\n\016sin"
    "glepvpscore\030\002 \001(\r\022\025\n\rmaxfightpower\030\003 \001(\r"
    "\022\020\n\010wincount\030\004 \001(\r\022\021\n\tfailcount\030\005 \001(\r\022\022\n"
    "\nequalcount\030\006 \001(\r\"<\n\027PBG2WSinglePvpExitM"
    "atch\022!\n\007display\030\001 \001(\0132\020.PBPlayerDisplay\""
    "a\n\036PBG2CCopymapSynSinglePvpResult\022\014\n\004typ"
    "e\030\001 \001(\r\022\020\n\010curscore\030\002 \001(\r\022\020\n\010oldscore\030\003 "
    "\001(\r\022\r\n\005honor\030\004 \001(\r\"*\n\026PBCAGSinglePvpDayP"
    "rize\022\020\n\010daycount\030\001 \001(\r\"0\n\026PBG2CSinglePvp"
    "SynScore\022\026\n\016singlepvpscore\030\001 \001(\r", 2392);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PvpWar.proto", &protobuf_RegisterTypes);
  PBPvpMember::default_instance_ = new PBPvpMember();
  PBC2GPvpEnterMatchAsk::default_instance_ = new PBC2GPvpEnterMatchAsk();
  PBG2CPvpEnterMatchAck::default_instance_ = new PBG2CPvpEnterMatchAck();
  PBG2CPvpExitMatchAck::default_instance_ = new PBG2CPvpExitMatchAck();
  PBS2C_PvpWar_ReadyAck::default_instance_ = new PBS2C_PvpWar_ReadyAck();
  PBS2C_PvpWar_ExitReadyAck::default_instance_ = new PBS2C_PvpWar_ExitReadyAck();
  PBW2BWPvpWarSingleMatchAsk::default_instance_ = new PBW2BWPvpWarSingleMatchAsk();
  PBW2BWPvpWarTeamMatchAsk::default_instance_ = new PBW2BWPvpWarTeamMatchAsk();
  PBW2BWPvpWarExitMatchAsk::default_instance_ = new PBW2BWPvpWarExitMatchAsk();
  PBW2BWPvpWarReadyEnterAsk::default_instance_ = new PBW2BWPvpWarReadyEnterAsk();
  PBW2BWPvpWarExitEnterAsk::default_instance_ = new PBW2BWPvpWarExitEnterAsk();
  PBBW2WPvpWarExitMatchAck::default_instance_ = new PBBW2WPvpWarExitMatchAck();
  PBBW2WPvpWarEnterMatchAck::default_instance_ = new PBBW2WPvpWarEnterMatchAck();
  PBBW2WPvpWarReadyEnterAck::default_instance_ = new PBBW2WPvpWarReadyEnterAck();
  PBBW2WPvpWarExitReadyEnterAck::default_instance_ = new PBBW2WPvpWarExitReadyEnterAck();
  PBBW2WPvpWarCompleteMatchAck::default_instance_ = new PBBW2WPvpWarCompleteMatchAck();
  PBPvpBannerCampScore::default_instance_ = new PBPvpBannerCampScore();
  PBPvpBannerPlayerInfo::default_instance_ = new PBPvpBannerPlayerInfo();
  PBG2CCopymapSynBannerScore::default_instance_ = new PBG2CCopymapSynBannerScore();
  PBG2CCopymapSynBannerPlayerInfo::default_instance_ = new PBG2CCopymapSynBannerPlayerInfo();
  PBG2CCopymapSynBannerResult::default_instance_ = new PBG2CCopymapSynBannerResult();
  PBG2CCopymapSynBannerGodlike::default_instance_ = new PBG2CCopymapSynBannerGodlike();
  PBG2CCopymapSynBannerMegakill::default_instance_ = new PBG2CCopymapSynBannerMegakill();
  PBG2CCopymapSynGetBanner::default_instance_ = new PBG2CCopymapSynGetBanner();
  PBG2CCopymapSynBannerKill::default_instance_ = new PBG2CCopymapSynBannerKill();
  PBSinglePvpMember::default_instance_ = new PBSinglePvpMember();
  PBG2WSinglePvpExitMatch::default_instance_ = new PBG2WSinglePvpExitMatch();
  PBG2CCopymapSynSinglePvpResult::default_instance_ = new PBG2CCopymapSynSinglePvpResult();
  PBCAGSinglePvpDayPrize::default_instance_ = new PBCAGSinglePvpDayPrize();
  PBG2CSinglePvpSynScore::default_instance_ = new PBG2CSinglePvpSynScore();
  PBPvpMember::default_instance_->InitAsDefaultInstance();
  PBC2GPvpEnterMatchAsk::default_instance_->InitAsDefaultInstance();
  PBG2CPvpEnterMatchAck::default_instance_->InitAsDefaultInstance();
  PBG2CPvpExitMatchAck::default_instance_->InitAsDefaultInstance();
  PBS2C_PvpWar_ReadyAck::default_instance_->InitAsDefaultInstance();
  PBS2C_PvpWar_ExitReadyAck::default_instance_->InitAsDefaultInstance();
  PBW2BWPvpWarSingleMatchAsk::default_instance_->InitAsDefaultInstance();
  PBW2BWPvpWarTeamMatchAsk::default_instance_->InitAsDefaultInstance();
  PBW2BWPvpWarExitMatchAsk::default_instance_->InitAsDefaultInstance();
  PBW2BWPvpWarReadyEnterAsk::default_instance_->InitAsDefaultInstance();
  PBW2BWPvpWarExitEnterAsk::default_instance_->InitAsDefaultInstance();
  PBBW2WPvpWarExitMatchAck::default_instance_->InitAsDefaultInstance();
  PBBW2WPvpWarEnterMatchAck::default_instance_->InitAsDefaultInstance();
  PBBW2WPvpWarReadyEnterAck::default_instance_->InitAsDefaultInstance();
  PBBW2WPvpWarExitReadyEnterAck::default_instance_->InitAsDefaultInstance();
  PBBW2WPvpWarCompleteMatchAck::default_instance_->InitAsDefaultInstance();
  PBPvpBannerCampScore::default_instance_->InitAsDefaultInstance();
  PBPvpBannerPlayerInfo::default_instance_->InitAsDefaultInstance();
  PBG2CCopymapSynBannerScore::default_instance_->InitAsDefaultInstance();
  PBG2CCopymapSynBannerPlayerInfo::default_instance_->InitAsDefaultInstance();
  PBG2CCopymapSynBannerResult::default_instance_->InitAsDefaultInstance();
  PBG2CCopymapSynBannerGodlike::default_instance_->InitAsDefaultInstance();
  PBG2CCopymapSynBannerMegakill::default_instance_->InitAsDefaultInstance();
  PBG2CCopymapSynGetBanner::default_instance_->InitAsDefaultInstance();
  PBG2CCopymapSynBannerKill::default_instance_->InitAsDefaultInstance();
  PBSinglePvpMember::default_instance_->InitAsDefaultInstance();
  PBG2WSinglePvpExitMatch::default_instance_->InitAsDefaultInstance();
  PBG2CCopymapSynSinglePvpResult::default_instance_->InitAsDefaultInstance();
  PBCAGSinglePvpDayPrize::default_instance_->InitAsDefaultInstance();
  PBG2CSinglePvpSynScore::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PvpWar_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PvpWar_2eproto {
  StaticDescriptorInitializer_PvpWar_2eproto() {
    protobuf_AddDesc_PvpWar_2eproto();
  }
} static_descriptor_initializer_PvpWar_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PBPvpMember::kDisplayFieldNumber;
const int PBPvpMember::kMaxfightpowerFieldNumber;
const int PBPvpMember::kTeamidFieldNumber;
const int PBPvpMember::kIsreadyFieldNumber;
#endif  // !_MSC_VER

PBPvpMember::PBPvpMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPvpMember::InitAsDefaultInstance() {
  display_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBPvpMember::PBPvpMember(const PBPvpMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPvpMember::SharedCtor() {
  _cached_size_ = 0;
  display_ = NULL;
  maxfightpower_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  isready_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPvpMember::~PBPvpMember() {
  SharedDtor();
}

void PBPvpMember::SharedDtor() {
  if (this != default_instance_) {
    delete display_;
  }
}

void PBPvpMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPvpMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPvpMember_descriptor_;
}

const PBPvpMember& PBPvpMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpWar_2eproto();  return *default_instance_;
}

PBPvpMember* PBPvpMember::default_instance_ = NULL;

PBPvpMember* PBPvpMember::New() const {
  return new PBPvpMember;
}

void PBPvpMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_display()) {
      if (display_ != NULL) display_->::PBPlayerDisplay::Clear();
    }
    maxfightpower_ = GOOGLE_ULONGLONG(0);
    teamid_ = GOOGLE_ULONGLONG(0);
    isready_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPvpMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay display = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_maxfightpower;
        break;
      }
      
      // optional uint64 maxfightpower = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxfightpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxfightpower_)));
          set_has_maxfightpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_teamid;
        break;
      }
      
      // optional uint64 teamid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isready;
        break;
      }
      
      // optional bool isready = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isready_)));
          set_has_isready();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPvpMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->display(), output);
  }
  
  // optional uint64 maxfightpower = 2;
  if (has_maxfightpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->maxfightpower(), output);
  }
  
  // optional uint64 teamid = 3;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->teamid(), output);
  }
  
  // optional bool isready = 4;
  if (has_isready()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isready(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPvpMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->display(), target);
  }
  
  // optional uint64 maxfightpower = 2;
  if (has_maxfightpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->maxfightpower(), target);
  }
  
  // optional uint64 teamid = 3;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->teamid(), target);
  }
  
  // optional bool isready = 4;
  if (has_isready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isready(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPvpMember::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay display = 1;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display());
    }
    
    // optional uint64 maxfightpower = 2;
    if (has_maxfightpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxfightpower());
    }
    
    // optional uint64 teamid = 3;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }
    
    // optional bool isready = 4;
    if (has_isready()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPvpMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPvpMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPvpMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPvpMember::MergeFrom(const PBPvpMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_display()) {
      mutable_display()->::PBPlayerDisplay::MergeFrom(from.display());
    }
    if (from.has_maxfightpower()) {
      set_maxfightpower(from.maxfightpower());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_isready()) {
      set_isready(from.isready());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPvpMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPvpMember::CopyFrom(const PBPvpMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPvpMember::IsInitialized() const {
  
  return true;
}

void PBPvpMember::Swap(PBPvpMember* other) {
  if (other != this) {
    std::swap(display_, other->display_);
    std::swap(maxfightpower_, other->maxfightpower_);
    std::swap(teamid_, other->teamid_);
    std::swap(isready_, other->isready_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPvpMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPvpMember_descriptor_;
  metadata.reflection = PBPvpMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GPvpEnterMatchAsk::kIdFieldNumber;
#endif  // !_MSC_VER

PBC2GPvpEnterMatchAsk::PBC2GPvpEnterMatchAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GPvpEnterMatchAsk::InitAsDefaultInstance() {
}

PBC2GPvpEnterMatchAsk::PBC2GPvpEnterMatchAsk(const PBC2GPvpEnterMatchAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GPvpEnterMatchAsk::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GPvpEnterMatchAsk::~PBC2GPvpEnterMatchAsk() {
  SharedDtor();
}

void PBC2GPvpEnterMatchAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GPvpEnterMatchAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GPvpEnterMatchAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GPvpEnterMatchAsk_descriptor_;
}

const PBC2GPvpEnterMatchAsk& PBC2GPvpEnterMatchAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpWar_2eproto();  return *default_instance_;
}

PBC2GPvpEnterMatchAsk* PBC2GPvpEnterMatchAsk::default_instance_ = NULL;

PBC2GPvpEnterMatchAsk* PBC2GPvpEnterMatchAsk::New() const {
  return new PBC2GPvpEnterMatchAsk;
}

void PBC2GPvpEnterMatchAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GPvpEnterMatchAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GPvpEnterMatchAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GPvpEnterMatchAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GPvpEnterMatchAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GPvpEnterMatchAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GPvpEnterMatchAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GPvpEnterMatchAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GPvpEnterMatchAsk::MergeFrom(const PBC2GPvpEnterMatchAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GPvpEnterMatchAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GPvpEnterMatchAsk::CopyFrom(const PBC2GPvpEnterMatchAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GPvpEnterMatchAsk::IsInitialized() const {
  
  return true;
}

void PBC2GPvpEnterMatchAsk::Swap(PBC2GPvpEnterMatchAsk* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GPvpEnterMatchAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GPvpEnterMatchAsk_descriptor_;
  metadata.reflection = PBC2GPvpEnterMatchAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CPvpEnterMatchAck::kIdFieldNumber;
#endif  // !_MSC_VER

PBG2CPvpEnterMatchAck::PBG2CPvpEnterMatchAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CPvpEnterMatchAck::InitAsDefaultInstance() {
}

PBG2CPvpEnterMatchAck::PBG2CPvpEnterMatchAck(const PBG2CPvpEnterMatchAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CPvpEnterMatchAck::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CPvpEnterMatchAck::~PBG2CPvpEnterMatchAck() {
  SharedDtor();
}

void PBG2CPvpEnterMatchAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CPvpEnterMatchAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CPvpEnterMatchAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CPvpEnterMatchAck_descriptor_;
}

const PBG2CPvpEnterMatchAck& PBG2CPvpEnterMatchAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpWar_2eproto();  return *default_instance_;
}

PBG2CPvpEnterMatchAck* PBG2CPvpEnterMatchAck::default_instance_ = NULL;

PBG2CPvpEnterMatchAck* PBG2CPvpEnterMatchAck::New() const {
  return new PBG2CPvpEnterMatchAck;
}

void PBG2CPvpEnterMatchAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CPvpEnterMatchAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CPvpEnterMatchAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CPvpEnterMatchAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CPvpEnterMatchAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CPvpEnterMatchAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CPvpEnterMatchAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CPvpEnterMatchAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CPvpEnterMatchAck::MergeFrom(const PBG2CPvpEnterMatchAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CPvpEnterMatchAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CPvpEnterMatchAck::CopyFrom(const PBG2CPvpEnterMatchAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CPvpEnterMatchAck::IsInitialized() const {
  
  return true;
}

void PBG2CPvpEnterMatchAck::Swap(PBG2CPvpEnterMatchAck* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CPvpEnterMatchAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CPvpEnterMatchAck_descriptor_;
  metadata.reflection = PBG2CPvpEnterMatchAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CPvpExitMatchAck::kIdFieldNumber;
const int PBG2CPvpExitMatchAck::kPlayeridFieldNumber;
#endif  // !_MSC_VER

PBG2CPvpExitMatchAck::PBG2CPvpExitMatchAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CPvpExitMatchAck::InitAsDefaultInstance() {
}

PBG2CPvpExitMatchAck::PBG2CPvpExitMatchAck(const PBG2CPvpExitMatchAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CPvpExitMatchAck::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CPvpExitMatchAck::~PBG2CPvpExitMatchAck() {
  SharedDtor();
}

void PBG2CPvpExitMatchAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CPvpExitMatchAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CPvpExitMatchAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CPvpExitMatchAck_descriptor_;
}

const PBG2CPvpExitMatchAck& PBG2CPvpExitMatchAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpWar_2eproto();  return *default_instance_;
}

PBG2CPvpExitMatchAck* PBG2CPvpExitMatchAck::default_instance_ = NULL;

PBG2CPvpExitMatchAck* PBG2CPvpExitMatchAck::New() const {
  return new PBG2CPvpExitMatchAck;
}

void PBG2CPvpExitMatchAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CPvpExitMatchAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }
      
      // optional uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CPvpExitMatchAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CPvpExitMatchAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CPvpExitMatchAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CPvpExitMatchAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CPvpExitMatchAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CPvpExitMatchAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CPvpExitMatchAck::MergeFrom(const PBG2CPvpExitMatchAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CPvpExitMatchAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CPvpExitMatchAck::CopyFrom(const PBG2CPvpExitMatchAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CPvpExitMatchAck::IsInitialized() const {
  
  return true;
}

void PBG2CPvpExitMatchAck::Swap(PBG2CPvpExitMatchAck* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CPvpExitMatchAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CPvpExitMatchAck_descriptor_;
  metadata.reflection = PBG2CPvpExitMatchAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBS2C_PvpWar_ReadyAck::kPlayeridFieldNumber;
#endif  // !_MSC_VER

PBS2C_PvpWar_ReadyAck::PBS2C_PvpWar_ReadyAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBS2C_PvpWar_ReadyAck::InitAsDefaultInstance() {
}

PBS2C_PvpWar_ReadyAck::PBS2C_PvpWar_ReadyAck(const PBS2C_PvpWar_ReadyAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBS2C_PvpWar_ReadyAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBS2C_PvpWar_ReadyAck::~PBS2C_PvpWar_ReadyAck() {
  SharedDtor();
}

void PBS2C_PvpWar_ReadyAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBS2C_PvpWar_ReadyAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBS2C_PvpWar_ReadyAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBS2C_PvpWar_ReadyAck_descriptor_;
}

const PBS2C_PvpWar_ReadyAck& PBS2C_PvpWar_ReadyAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpWar_2eproto();  return *default_instance_;
}

PBS2C_PvpWar_ReadyAck* PBS2C_PvpWar_ReadyAck::default_instance_ = NULL;

PBS2C_PvpWar_ReadyAck* PBS2C_PvpWar_ReadyAck::New() const {
  return new PBS2C_PvpWar_ReadyAck;
}

void PBS2C_PvpWar_ReadyAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBS2C_PvpWar_ReadyAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBS2C_PvpWar_ReadyAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBS2C_PvpWar_ReadyAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBS2C_PvpWar_ReadyAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBS2C_PvpWar_ReadyAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBS2C_PvpWar_ReadyAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBS2C_PvpWar_ReadyAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBS2C_PvpWar_ReadyAck::MergeFrom(const PBS2C_PvpWar_ReadyAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBS2C_PvpWar_ReadyAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBS2C_PvpWar_ReadyAck::CopyFrom(const PBS2C_PvpWar_ReadyAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBS2C_PvpWar_ReadyAck::IsInitialized() const {
  
  return true;
}

void PBS2C_PvpWar_ReadyAck::Swap(PBS2C_PvpWar_ReadyAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBS2C_PvpWar_ReadyAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBS2C_PvpWar_ReadyAck_descriptor_;
  metadata.reflection = PBS2C_PvpWar_ReadyAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBS2C_PvpWar_ExitReadyAck::kPlayeridFieldNumber;
const int PBS2C_PvpWar_ExitReadyAck::kNextentertimeFieldNumber;
#endif  // !_MSC_VER

PBS2C_PvpWar_ExitReadyAck::PBS2C_PvpWar_ExitReadyAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBS2C_PvpWar_ExitReadyAck::InitAsDefaultInstance() {
}

PBS2C_PvpWar_ExitReadyAck::PBS2C_PvpWar_ExitReadyAck(const PBS2C_PvpWar_ExitReadyAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBS2C_PvpWar_ExitReadyAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  nextentertime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBS2C_PvpWar_ExitReadyAck::~PBS2C_PvpWar_ExitReadyAck() {
  SharedDtor();
}

void PBS2C_PvpWar_ExitReadyAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBS2C_PvpWar_ExitReadyAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBS2C_PvpWar_ExitReadyAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBS2C_PvpWar_ExitReadyAck_descriptor_;
}

const PBS2C_PvpWar_ExitReadyAck& PBS2C_PvpWar_ExitReadyAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpWar_2eproto();  return *default_instance_;
}

PBS2C_PvpWar_ExitReadyAck* PBS2C_PvpWar_ExitReadyAck::default_instance_ = NULL;

PBS2C_PvpWar_ExitReadyAck* PBS2C_PvpWar_ExitReadyAck::New() const {
  return new PBS2C_PvpWar_ExitReadyAck;
}

void PBS2C_PvpWar_ExitReadyAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    nextentertime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBS2C_PvpWar_ExitReadyAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nextentertime;
        break;
      }
      
      // optional uint32 nextentertime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextentertime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextentertime_)));
          set_has_nextentertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBS2C_PvpWar_ExitReadyAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional uint32 nextentertime = 2;
  if (has_nextentertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nextentertime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBS2C_PvpWar_ExitReadyAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional uint32 nextentertime = 2;
  if (has_nextentertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nextentertime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBS2C_PvpWar_ExitReadyAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 nextentertime = 2;
    if (has_nextentertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextentertime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBS2C_PvpWar_ExitReadyAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBS2C_PvpWar_ExitReadyAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBS2C_PvpWar_ExitReadyAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBS2C_PvpWar_ExitReadyAck::MergeFrom(const PBS2C_PvpWar_ExitReadyAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_nextentertime()) {
      set_nextentertime(from.nextentertime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBS2C_PvpWar_ExitReadyAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBS2C_PvpWar_ExitReadyAck::CopyFrom(const PBS2C_PvpWar_ExitReadyAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBS2C_PvpWar_ExitReadyAck::IsInitialized() const {
  
  return true;
}

void PBS2C_PvpWar_ExitReadyAck::Swap(PBS2C_PvpWar_ExitReadyAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(nextentertime_, other->nextentertime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBS2C_PvpWar_ExitReadyAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBS2C_PvpWar_ExitReadyAck_descriptor_;
  metadata.reflection = PBS2C_PvpWar_ExitReadyAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBW2BWPvpWarSingleMatchAsk::kMemberFieldNumber;
#endif  // !_MSC_VER

PBW2BWPvpWarSingleMatchAsk::PBW2BWPvpWarSingleMatchAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBW2BWPvpWarSingleMatchAsk::InitAsDefaultInstance() {
  member_ = const_cast< ::PBPvpMember*>(&::PBPvpMember::default_instance());
}

PBW2BWPvpWarSingleMatchAsk::PBW2BWPvpWarSingleMatchAsk(const PBW2BWPvpWarSingleMatchAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBW2BWPvpWarSingleMatchAsk::SharedCtor() {
  _cached_size_ = 0;
  member_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBW2BWPvpWarSingleMatchAsk::~PBW2BWPvpWarSingleMatchAsk() {
  SharedDtor();
}

void PBW2BWPvpWarSingleMatchAsk::SharedDtor() {
  if (this != default_instance_) {
    delete member_;
  }
}

void PBW2BWPvpWarSingleMatchAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBW2BWPvpWarSingleMatchAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBW2BWPvpWarSingleMatchAsk_descriptor_;
}

const PBW2BWPvpWarSingleMatchAsk& PBW2BWPvpWarSingleMatchAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpWar_2eproto();  return *default_instance_;
}

PBW2BWPvpWarSingleMatchAsk* PBW2BWPvpWarSingleMatchAsk::default_instance_ = NULL;

PBW2BWPvpWarSingleMatchAsk* PBW2BWPvpWarSingleMatchAsk::New() const {
  return new PBW2BWPvpWarSingleMatchAsk;
}

void PBW2BWPvpWarSingleMatchAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_member()) {
      if (member_ != NULL) member_->::PBPvpMember::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBW2BWPvpWarSingleMatchAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPvpMember member = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBW2BWPvpWarSingleMatchAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPvpMember member = 1;
  if (has_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->member(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBW2BWPvpWarSingleMatchAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPvpMember member = 1;
  if (has_member()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->member(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBW2BWPvpWarSingleMatchAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPvpMember member = 1;
    if (has_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBW2BWPvpWarSingleMatchAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBW2BWPvpWarSingleMatchAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBW2BWPvpWarSingleMatchAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBW2BWPvpWarSingleMatchAsk::MergeFrom(const PBW2BWPvpWarSingleMatchAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_member()) {
      mutable_member()->::PBPvpMember::MergeFrom(from.member());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBW2BWPvpWarSingleMatchAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBW2BWPvpWarSingleMatchAsk::CopyFrom(const PBW2BWPvpWarSingleMatchAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBW2BWPvpWarSingleMatchAsk::IsInitialized() const {
  
  return true;
}

void PBW2BWPvpWarSingleMatchAsk::Swap(PBW2BWPvpWarSingleMatchAsk* other) {
  if (other != this) {
    std::swap(member_, other->member_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBW2BWPvpWarSingleMatchAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBW2BWPvpWarSingleMatchAsk_descriptor_;
  metadata.reflection = PBW2BWPvpWarSingleMatchAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBW2BWPvpWarTeamMatchAsk::kMemberFieldNumber;
const int PBW2BWPvpWarTeamMatchAsk::kMaxfightpowerFieldNumber;
#endif  // !_MSC_VER

PBW2BWPvpWarTeamMatchAsk::PBW2BWPvpWarTeamMatchAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBW2BWPvpWarTeamMatchAsk::InitAsDefaultInstance() {
}

PBW2BWPvpWarTeamMatchAsk::PBW2BWPvpWarTeamMatchAsk(const PBW2BWPvpWarTeamMatchAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBW2BWPvpWarTeamMatchAsk::SharedCtor() {
  _cached_size_ = 0;
  maxfightpower_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBW2BWPvpWarTeamMatchAsk::~PBW2BWPvpWarTeamMatchAsk() {
  SharedDtor();
}

void PBW2BWPvpWarTeamMatchAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBW2BWPvpWarTeamMatchAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBW2BWPvpWarTeamMatchAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBW2BWPvpWarTeamMatchAsk_descriptor_;
}

const PBW2BWPvpWarTeamMatchAsk& PBW2BWPvpWarTeamMatchAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpWar_2eproto();  return *default_instance_;
}

PBW2BWPvpWarTeamMatchAsk* PBW2BWPvpWarTeamMatchAsk::default_instance_ = NULL;

PBW2BWPvpWarTeamMatchAsk* PBW2BWPvpWarTeamMatchAsk::New() const {
  return new PBW2BWPvpWarTeamMatchAsk;
}

void PBW2BWPvpWarTeamMatchAsk::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    maxfightpower_ = 0u;
  }
  member_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBW2BWPvpWarTeamMatchAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBPvpMember member = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_member;
        if (input->ExpectTag(16)) goto parse_maxfightpower;
        break;
      }
      
      // optional uint32 maxfightpower = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxfightpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxfightpower_)));
          set_has_maxfightpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBW2BWPvpWarTeamMatchAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBPvpMember member = 1;
  for (int i = 0; i < this->member_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->member(i), output);
  }
  
  // optional uint32 maxfightpower = 2;
  if (has_maxfightpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maxfightpower(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBW2BWPvpWarTeamMatchAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBPvpMember member = 1;
  for (int i = 0; i < this->member_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->member(i), target);
  }
  
  // optional uint32 maxfightpower = 2;
  if (has_maxfightpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->maxfightpower(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBW2BWPvpWarTeamMatchAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 maxfightpower = 2;
    if (has_maxfightpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxfightpower());
    }
    
  }
  // repeated .PBPvpMember member = 1;
  total_size += 1 * this->member_size();
  for (int i = 0; i < this->member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBW2BWPvpWarTeamMatchAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBW2BWPvpWarTeamMatchAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBW2BWPvpWarTeamMatchAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBW2BWPvpWarTeamMatchAsk::MergeFrom(const PBW2BWPvpWarTeamMatchAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_.MergeFrom(from.member_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_maxfightpower()) {
      set_maxfightpower(from.maxfightpower());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBW2BWPvpWarTeamMatchAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBW2BWPvpWarTeamMatchAsk::CopyFrom(const PBW2BWPvpWarTeamMatchAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBW2BWPvpWarTeamMatchAsk::IsInitialized() const {
  
  return true;
}

void PBW2BWPvpWarTeamMatchAsk::Swap(PBW2BWPvpWarTeamMatchAsk* other) {
  if (other != this) {
    member_.Swap(&other->member_);
    std::swap(maxfightpower_, other->maxfightpower_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBW2BWPvpWarTeamMatchAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBW2BWPvpWarTeamMatchAsk_descriptor_;
  metadata.reflection = PBW2BWPvpWarTeamMatchAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBW2BWPvpWarExitMatchAsk::kDisplayFieldNumber;
#endif  // !_MSC_VER

PBW2BWPvpWarExitMatchAsk::PBW2BWPvpWarExitMatchAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBW2BWPvpWarExitMatchAsk::InitAsDefaultInstance() {
  display_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBW2BWPvpWarExitMatchAsk::PBW2BWPvpWarExitMatchAsk(const PBW2BWPvpWarExitMatchAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBW2BWPvpWarExitMatchAsk::SharedCtor() {
  _cached_size_ = 0;
  display_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBW2BWPvpWarExitMatchAsk::~PBW2BWPvpWarExitMatchAsk() {
  SharedDtor();
}

void PBW2BWPvpWarExitMatchAsk::SharedDtor() {
  if (this != default_instance_) {
    delete display_;
  }
}

void PBW2BWPvpWarExitMatchAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBW2BWPvpWarExitMatchAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBW2BWPvpWarExitMatchAsk_descriptor_;
}

const PBW2BWPvpWarExitMatchAsk& PBW2BWPvpWarExitMatchAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpWar_2eproto();  return *default_instance_;
}

PBW2BWPvpWarExitMatchAsk* PBW2BWPvpWarExitMatchAsk::default_instance_ = NULL;

PBW2BWPvpWarExitMatchAsk* PBW2BWPvpWarExitMatchAsk::New() const {
  return new PBW2BWPvpWarExitMatchAsk;
}

void PBW2BWPvpWarExitMatchAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_display()) {
      if (display_ != NULL) display_->::PBPlayerDisplay::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBW2BWPvpWarExitMatchAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay display = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBW2BWPvpWarExitMatchAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->display(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBW2BWPvpWarExitMatchAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->display(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBW2BWPvpWarExitMatchAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay display = 1;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBW2BWPvpWarExitMatchAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBW2BWPvpWarExitMatchAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBW2BWPvpWarExitMatchAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBW2BWPvpWarExitMatchAsk::MergeFrom(const PBW2BWPvpWarExitMatchAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_display()) {
      mutable_display()->::PBPlayerDisplay::MergeFrom(from.display());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBW2BWPvpWarExitMatchAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBW2BWPvpWarExitMatchAsk::CopyFrom(const PBW2BWPvpWarExitMatchAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBW2BWPvpWarExitMatchAsk::IsInitialized() const {
  
  return true;
}

void PBW2BWPvpWarExitMatchAsk::Swap(PBW2BWPvpWarExitMatchAsk* other) {
  if (other != this) {
    std::swap(display_, other->display_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBW2BWPvpWarExitMatchAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBW2BWPvpWarExitMatchAsk_descriptor_;
  metadata.reflection = PBW2BWPvpWarExitMatchAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBW2BWPvpWarReadyEnterAsk::kDisplayFieldNumber;
#endif  // !_MSC_VER

PBW2BWPvpWarReadyEnterAsk::PBW2BWPvpWarReadyEnterAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBW2BWPvpWarReadyEnterAsk::InitAsDefaultInstance() {
  display_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBW2BWPvpWarReadyEnterAsk::PBW2BWPvpWarReadyEnterAsk(const PBW2BWPvpWarReadyEnterAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBW2BWPvpWarReadyEnterAsk::SharedCtor() {
  _cached_size_ = 0;
  display_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBW2BWPvpWarReadyEnterAsk::~PBW2BWPvpWarReadyEnterAsk() {
  SharedDtor();
}

void PBW2BWPvpWarReadyEnterAsk::SharedDtor() {
  if (this != default_instance_) {
    delete display_;
  }
}

void PBW2BWPvpWarReadyEnterAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBW2BWPvpWarReadyEnterAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBW2BWPvpWarReadyEnterAsk_descriptor_;
}

const PBW2BWPvpWarReadyEnterAsk& PBW2BWPvpWarReadyEnterAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpWar_2eproto();  return *default_instance_;
}

PBW2BWPvpWarReadyEnterAsk* PBW2BWPvpWarReadyEnterAsk::default_instance_ = NULL;

PBW2BWPvpWarReadyEnterAsk* PBW2BWPvpWarReadyEnterAsk::New() const {
  return new PBW2BWPvpWarReadyEnterAsk;
}

void PBW2BWPvpWarReadyEnterAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_display()) {
      if (display_ != NULL) display_->::PBPlayerDisplay::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBW2BWPvpWarReadyEnterAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay display = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBW2BWPvpWarReadyEnterAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->display(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBW2BWPvpWarReadyEnterAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->display(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBW2BWPvpWarReadyEnterAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay display = 1;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBW2BWPvpWarReadyEnterAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBW2BWPvpWarReadyEnterAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBW2BWPvpWarReadyEnterAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBW2BWPvpWarReadyEnterAsk::MergeFrom(const PBW2BWPvpWarReadyEnterAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_display()) {
      mutable_display()->::PBPlayerDisplay::MergeFrom(from.display());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBW2BWPvpWarReadyEnterAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBW2BWPvpWarReadyEnterAsk::CopyFrom(const PBW2BWPvpWarReadyEnterAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBW2BWPvpWarReadyEnterAsk::IsInitialized() const {
  
  return true;
}

void PBW2BWPvpWarReadyEnterAsk::Swap(PBW2BWPvpWarReadyEnterAsk* other) {
  if (other != this) {
    std::swap(display_, other->display_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBW2BWPvpWarReadyEnterAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBW2BWPvpWarReadyEnterAsk_descriptor_;
  metadata.reflection = PBW2BWPvpWarReadyEnterAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBW2BWPvpWarExitEnterAsk::kDisplayFieldNumber;
#endif  // !_MSC_VER

PBW2BWPvpWarExitEnterAsk::PBW2BWPvpWarExitEnterAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBW2BWPvpWarExitEnterAsk::InitAsDefaultInstance() {
  display_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBW2BWPvpWarExitEnterAsk::PBW2BWPvpWarExitEnterAsk(const PBW2BWPvpWarExitEnterAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBW2BWPvpWarExitEnterAsk::SharedCtor() {
  _cached_size_ = 0;
  display_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBW2BWPvpWarExitEnterAsk::~PBW2BWPvpWarExitEnterAsk() {
  SharedDtor();
}

void PBW2BWPvpWarExitEnterAsk::SharedDtor() {
  if (this != default_instance_) {
    delete display_;
  }
}

void PBW2BWPvpWarExitEnterAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBW2BWPvpWarExitEnterAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBW2BWPvpWarExitEnterAsk_descriptor_;
}

const PBW2BWPvpWarExitEnterAsk& PBW2BWPvpWarExitEnterAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpWar_2eproto();  return *default_instance_;
}

PBW2BWPvpWarExitEnterAsk* PBW2BWPvpWarExitEnterAsk::default_instance_ = NULL;

PBW2BWPvpWarExitEnterAsk* PBW2BWPvpWarExitEnterAsk::New() const {
  return new PBW2BWPvpWarExitEnterAsk;
}

void PBW2BWPvpWarExitEnterAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_display()) {
      if (display_ != NULL) display_->::PBPlayerDisplay::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBW2BWPvpWarExitEnterAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay display = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBW2BWPvpWarExitEnterAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->display(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBW2BWPvpWarExitEnterAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->display(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBW2BWPvpWarExitEnterAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay display = 1;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBW2BWPvpWarExitEnterAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBW2BWPvpWarExitEnterAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBW2BWPvpWarExitEnterAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBW2BWPvpWarExitEnterAsk::MergeFrom(const PBW2BWPvpWarExitEnterAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_display()) {
      mutable_display()->::PBPlayerDisplay::MergeFrom(from.display());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBW2BWPvpWarExitEnterAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBW2BWPvpWarExitEnterAsk::CopyFrom(const PBW2BWPvpWarExitEnterAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBW2BWPvpWarExitEnterAsk::IsInitialized() const {
  
  return true;
}

void PBW2BWPvpWarExitEnterAsk::Swap(PBW2BWPvpWarExitEnterAsk* other) {
  if (other != this) {
    std::swap(display_, other->display_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBW2BWPvpWarExitEnterAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBW2BWPvpWarExitEnterAsk_descriptor_;
  metadata.reflection = PBW2BWPvpWarExitEnterAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBBW2WPvpWarExitMatchAck::kPlayeridFieldNumber;
#endif  // !_MSC_VER

PBBW2WPvpWarExitMatchAck::PBBW2WPvpWarExitMatchAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBW2WPvpWarExitMatchAck::InitAsDefaultInstance() {
}

PBBW2WPvpWarExitMatchAck::PBBW2WPvpWarExitMatchAck(const PBBW2WPvpWarExitMatchAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBW2WPvpWarExitMatchAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBW2WPvpWarExitMatchAck::~PBBW2WPvpWarExitMatchAck() {
  SharedDtor();
}

void PBBW2WPvpWarExitMatchAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBBW2WPvpWarExitMatchAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBBW2WPvpWarExitMatchAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBW2WPvpWarExitMatchAck_descriptor_;
}

const PBBW2WPvpWarExitMatchAck& PBBW2WPvpWarExitMatchAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpWar_2eproto();  return *default_instance_;
}

PBBW2WPvpWarExitMatchAck* PBBW2WPvpWarExitMatchAck::default_instance_ = NULL;

PBBW2WPvpWarExitMatchAck* PBBW2WPvpWarExitMatchAck::New() const {
  return new PBBW2WPvpWarExitMatchAck;
}

void PBBW2WPvpWarExitMatchAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBW2WPvpWarExitMatchAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBW2WPvpWarExitMatchAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBW2WPvpWarExitMatchAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBW2WPvpWarExitMatchAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBBW2WPvpWarExitMatchAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBW2WPvpWarExitMatchAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBW2WPvpWarExitMatchAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBW2WPvpWarExitMatchAck::MergeFrom(const PBBW2WPvpWarExitMatchAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBW2WPvpWarExitMatchAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBW2WPvpWarExitMatchAck::CopyFrom(const PBBW2WPvpWarExitMatchAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBBW2WPvpWarExitMatchAck::IsInitialized() const {
  
  return true;
}

void PBBW2WPvpWarExitMatchAck::Swap(PBBW2WPvpWarExitMatchAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBBW2WPvpWarExitMatchAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBBW2WPvpWarExitMatchAck_descriptor_;
  metadata.reflection = PBBW2WPvpWarExitMatchAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBBW2WPvpWarEnterMatchAck::kWaridFieldNumber;
#endif  // !_MSC_VER

PBBW2WPvpWarEnterMatchAck::PBBW2WPvpWarEnterMatchAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBW2WPvpWarEnterMatchAck::InitAsDefaultInstance() {
}

PBBW2WPvpWarEnterMatchAck::PBBW2WPvpWarEnterMatchAck(const PBBW2WPvpWarEnterMatchAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBW2WPvpWarEnterMatchAck::SharedCtor() {
  _cached_size_ = 0;
  warid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBW2WPvpWarEnterMatchAck::~PBBW2WPvpWarEnterMatchAck() {
  SharedDtor();
}

void PBBW2WPvpWarEnterMatchAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBBW2WPvpWarEnterMatchAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBBW2WPvpWarEnterMatchAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBW2WPvpWarEnterMatchAck_descriptor_;
}

const PBBW2WPvpWarEnterMatchAck& PBBW2WPvpWarEnterMatchAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpWar_2eproto();  return *default_instance_;
}

PBBW2WPvpWarEnterMatchAck* PBBW2WPvpWarEnterMatchAck::default_instance_ = NULL;

PBBW2WPvpWarEnterMatchAck* PBBW2WPvpWarEnterMatchAck::New() const {
  return new PBBW2WPvpWarEnterMatchAck;
}

void PBBW2WPvpWarEnterMatchAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    warid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBW2WPvpWarEnterMatchAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 warid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &warid_)));
          set_has_warid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBW2WPvpWarEnterMatchAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 warid = 1;
  if (has_warid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->warid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBW2WPvpWarEnterMatchAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 warid = 1;
  if (has_warid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->warid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBW2WPvpWarEnterMatchAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 warid = 1;
    if (has_warid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->warid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBBW2WPvpWarEnterMatchAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBW2WPvpWarEnterMatchAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBW2WPvpWarEnterMatchAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBW2WPvpWarEnterMatchAck::MergeFrom(const PBBW2WPvpWarEnterMatchAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_warid()) {
      set_warid(from.warid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBW2WPvpWarEnterMatchAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBW2WPvpWarEnterMatchAck::CopyFrom(const PBBW2WPvpWarEnterMatchAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBBW2WPvpWarEnterMatchAck::IsInitialized() const {
  
  return true;
}

void PBBW2WPvpWarEnterMatchAck::Swap(PBBW2WPvpWarEnterMatchAck* other) {
  if (other != this) {
    std::swap(warid_, other->warid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBBW2WPvpWarEnterMatchAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBBW2WPvpWarEnterMatchAck_descriptor_;
  metadata.reflection = PBBW2WPvpWarEnterMatchAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBBW2WPvpWarReadyEnterAck::kPlayeridFieldNumber;
#endif  // !_MSC_VER

PBBW2WPvpWarReadyEnterAck::PBBW2WPvpWarReadyEnterAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBW2WPvpWarReadyEnterAck::InitAsDefaultInstance() {
}

PBBW2WPvpWarReadyEnterAck::PBBW2WPvpWarReadyEnterAck(const PBBW2WPvpWarReadyEnterAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBW2WPvpWarReadyEnterAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBW2WPvpWarReadyEnterAck::~PBBW2WPvpWarReadyEnterAck() {
  SharedDtor();
}

void PBBW2WPvpWarReadyEnterAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBBW2WPvpWarReadyEnterAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBBW2WPvpWarReadyEnterAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBW2WPvpWarReadyEnterAck_descriptor_;
}

const PBBW2WPvpWarReadyEnterAck& PBBW2WPvpWarReadyEnterAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpWar_2eproto();  return *default_instance_;
}

PBBW2WPvpWarReadyEnterAck* PBBW2WPvpWarReadyEnterAck::default_instance_ = NULL;

PBBW2WPvpWarReadyEnterAck* PBBW2WPvpWarReadyEnterAck::New() const {
  return new PBBW2WPvpWarReadyEnterAck;
}

void PBBW2WPvpWarReadyEnterAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBW2WPvpWarReadyEnterAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBW2WPvpWarReadyEnterAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBW2WPvpWarReadyEnterAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBW2WPvpWarReadyEnterAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBBW2WPvpWarReadyEnterAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBW2WPvpWarReadyEnterAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBW2WPvpWarReadyEnterAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBW2WPvpWarReadyEnterAck::MergeFrom(const PBBW2WPvpWarReadyEnterAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBW2WPvpWarReadyEnterAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBW2WPvpWarReadyEnterAck::CopyFrom(const PBBW2WPvpWarReadyEnterAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBBW2WPvpWarReadyEnterAck::IsInitialized() const {
  
  return true;
}

void PBBW2WPvpWarReadyEnterAck::Swap(PBBW2WPvpWarReadyEnterAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBBW2WPvpWarReadyEnterAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBBW2WPvpWarReadyEnterAck_descriptor_;
  metadata.reflection = PBBW2WPvpWarReadyEnterAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBBW2WPvpWarExitReadyEnterAck::kPlayeridFieldNumber;
#endif  // !_MSC_VER

PBBW2WPvpWarExitReadyEnterAck::PBBW2WPvpWarExitReadyEnterAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBW2WPvpWarExitReadyEnterAck::InitAsDefaultInstance() {
}

PBBW2WPvpWarExitReadyEnterAck::PBBW2WPvpWarExitReadyEnterAck(const PBBW2WPvpWarExitReadyEnterAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBW2WPvpWarExitReadyEnterAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBW2WPvpWarExitReadyEnterAck::~PBBW2WPvpWarExitReadyEnterAck() {
  SharedDtor();
}

void PBBW2WPvpWarExitReadyEnterAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBBW2WPvpWarExitReadyEnterAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBBW2WPvpWarExitReadyEnterAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBW2WPvpWarExitReadyEnterAck_descriptor_;
}

const PBBW2WPvpWarExitReadyEnterAck& PBBW2WPvpWarExitReadyEnterAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpWar_2eproto();  return *default_instance_;
}

PBBW2WPvpWarExitReadyEnterAck* PBBW2WPvpWarExitReadyEnterAck::default_instance_ = NULL;

PBBW2WPvpWarExitReadyEnterAck* PBBW2WPvpWarExitReadyEnterAck::New() const {
  return new PBBW2WPvpWarExitReadyEnterAck;
}

void PBBW2WPvpWarExitReadyEnterAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBW2WPvpWarExitReadyEnterAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBW2WPvpWarExitReadyEnterAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBW2WPvpWarExitReadyEnterAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBW2WPvpWarExitReadyEnterAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBBW2WPvpWarExitReadyEnterAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBW2WPvpWarExitReadyEnterAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBW2WPvpWarExitReadyEnterAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBW2WPvpWarExitReadyEnterAck::MergeFrom(const PBBW2WPvpWarExitReadyEnterAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBW2WPvpWarExitReadyEnterAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBW2WPvpWarExitReadyEnterAck::CopyFrom(const PBBW2WPvpWarExitReadyEnterAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBBW2WPvpWarExitReadyEnterAck::IsInitialized() const {
  
  return true;
}

void PBBW2WPvpWarExitReadyEnterAck::Swap(PBBW2WPvpWarExitReadyEnterAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBBW2WPvpWarExitReadyEnterAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBBW2WPvpWarExitReadyEnterAck_descriptor_;
  metadata.reflection = PBBW2WPvpWarExitReadyEnterAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBBW2WPvpWarCompleteMatchAck::kFriendFieldNumber;
const int PBBW2WPvpWarCompleteMatchAck::kEnemyFieldNumber;
#endif  // !_MSC_VER

PBBW2WPvpWarCompleteMatchAck::PBBW2WPvpWarCompleteMatchAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBW2WPvpWarCompleteMatchAck::InitAsDefaultInstance() {
}

PBBW2WPvpWarCompleteMatchAck::PBBW2WPvpWarCompleteMatchAck(const PBBW2WPvpWarCompleteMatchAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBW2WPvpWarCompleteMatchAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBW2WPvpWarCompleteMatchAck::~PBBW2WPvpWarCompleteMatchAck() {
  SharedDtor();
}

void PBBW2WPvpWarCompleteMatchAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBBW2WPvpWarCompleteMatchAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBBW2WPvpWarCompleteMatchAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBW2WPvpWarCompleteMatchAck_descriptor_;
}

const PBBW2WPvpWarCompleteMatchAck& PBBW2WPvpWarCompleteMatchAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpWar_2eproto();  return *default_instance_;
}

PBBW2WPvpWarCompleteMatchAck* PBBW2WPvpWarCompleteMatchAck::default_instance_ = NULL;

PBBW2WPvpWarCompleteMatchAck* PBBW2WPvpWarCompleteMatchAck::New() const {
  return new PBBW2WPvpWarCompleteMatchAck;
}

void PBBW2WPvpWarCompleteMatchAck::Clear() {
  friend__.Clear();
  enemy_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBW2WPvpWarCompleteMatchAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBPvpMember friend = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friend_()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_friend;
        if (input->ExpectTag(18)) goto parse_enemy;
        break;
      }
      
      // repeated .PBPvpMember enemy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enemy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enemy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_enemy;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBW2WPvpWarCompleteMatchAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBPvpMember friend = 1;
  for (int i = 0; i < this->friend__size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friend_(i), output);
  }
  
  // repeated .PBPvpMember enemy = 2;
  for (int i = 0; i < this->enemy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->enemy(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBW2WPvpWarCompleteMatchAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBPvpMember friend = 1;
  for (int i = 0; i < this->friend__size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friend_(i), target);
  }
  
  // repeated .PBPvpMember enemy = 2;
  for (int i = 0; i < this->enemy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->enemy(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBW2WPvpWarCompleteMatchAck::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBPvpMember friend = 1;
  total_size += 1 * this->friend__size();
  for (int i = 0; i < this->friend__size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friend_(i));
  }
  
  // repeated .PBPvpMember enemy = 2;
  total_size += 1 * this->enemy_size();
  for (int i = 0; i < this->enemy_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enemy(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBBW2WPvpWarCompleteMatchAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBW2WPvpWarCompleteMatchAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBW2WPvpWarCompleteMatchAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBW2WPvpWarCompleteMatchAck::MergeFrom(const PBBW2WPvpWarCompleteMatchAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  friend__.MergeFrom(from.friend__);
  enemy_.MergeFrom(from.enemy_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBW2WPvpWarCompleteMatchAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBW2WPvpWarCompleteMatchAck::CopyFrom(const PBBW2WPvpWarCompleteMatchAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBBW2WPvpWarCompleteMatchAck::IsInitialized() const {
  
  return true;
}

void PBBW2WPvpWarCompleteMatchAck::Swap(PBBW2WPvpWarCompleteMatchAck* other) {
  if (other != this) {
    friend__.Swap(&other->friend__);
    enemy_.Swap(&other->enemy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBBW2WPvpWarCompleteMatchAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBBW2WPvpWarCompleteMatchAck_descriptor_;
  metadata.reflection = PBBW2WPvpWarCompleteMatchAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPvpBannerCampScore::kCampidFieldNumber;
const int PBPvpBannerCampScore::kScoreFieldNumber;
#endif  // !_MSC_VER

PBPvpBannerCampScore::PBPvpBannerCampScore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPvpBannerCampScore::InitAsDefaultInstance() {
}

PBPvpBannerCampScore::PBPvpBannerCampScore(const PBPvpBannerCampScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPvpBannerCampScore::SharedCtor() {
  _cached_size_ = 0;
  campid_ = 0u;
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPvpBannerCampScore::~PBPvpBannerCampScore() {
  SharedDtor();
}

void PBPvpBannerCampScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPvpBannerCampScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPvpBannerCampScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPvpBannerCampScore_descriptor_;
}

const PBPvpBannerCampScore& PBPvpBannerCampScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpWar_2eproto();  return *default_instance_;
}

PBPvpBannerCampScore* PBPvpBannerCampScore::default_instance_ = NULL;

PBPvpBannerCampScore* PBPvpBannerCampScore::New() const {
  return new PBPvpBannerCampScore;
}

void PBPvpBannerCampScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    campid_ = 0u;
    score_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPvpBannerCampScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 campid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }
      
      // optional uint32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPvpBannerCampScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 campid = 1;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->campid(), output);
  }
  
  // optional uint32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPvpBannerCampScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 campid = 1;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->campid(), target);
  }
  
  // optional uint32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPvpBannerCampScore::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 campid = 1;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }
    
    // optional uint32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPvpBannerCampScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPvpBannerCampScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPvpBannerCampScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPvpBannerCampScore::MergeFrom(const PBPvpBannerCampScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_campid()) {
      set_campid(from.campid());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPvpBannerCampScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPvpBannerCampScore::CopyFrom(const PBPvpBannerCampScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPvpBannerCampScore::IsInitialized() const {
  
  return true;
}

void PBPvpBannerCampScore::Swap(PBPvpBannerCampScore* other) {
  if (other != this) {
    std::swap(campid_, other->campid_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPvpBannerCampScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPvpBannerCampScore_descriptor_;
  metadata.reflection = PBPvpBannerCampScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPvpBannerPlayerInfo::kDisplayFieldNumber;
const int PBPvpBannerPlayerInfo::kKillcountFieldNumber;
const int PBPvpBannerPlayerInfo::kDeadcountFieldNumber;
const int PBPvpBannerPlayerInfo::kAssistkillcountFieldNumber;
const int PBPvpBannerPlayerInfo::kContriFieldNumber;
const int PBPvpBannerPlayerInfo::kGodlikecountFieldNumber;
const int PBPvpBannerPlayerInfo::kMegakillcountFieldNumber;
const int PBPvpBannerPlayerInfo::kIsmvpFieldNumber;
#endif  // !_MSC_VER

PBPvpBannerPlayerInfo::PBPvpBannerPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPvpBannerPlayerInfo::InitAsDefaultInstance() {
  display_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBPvpBannerPlayerInfo::PBPvpBannerPlayerInfo(const PBPvpBannerPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPvpBannerPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  display_ = NULL;
  killcount_ = 0u;
  deadcount_ = 0u;
  assistkillcount_ = 0u;
  contri_ = 0u;
  godlikecount_ = 0u;
  megakillcount_ = 0u;
  ismvp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPvpBannerPlayerInfo::~PBPvpBannerPlayerInfo() {
  SharedDtor();
}

void PBPvpBannerPlayerInfo::SharedDtor() {
  if (this != default_instance_) {
    delete display_;
  }
}

void PBPvpBannerPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPvpBannerPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPvpBannerPlayerInfo_descriptor_;
}

const PBPvpBannerPlayerInfo& PBPvpBannerPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpWar_2eproto();  return *default_instance_;
}

PBPvpBannerPlayerInfo* PBPvpBannerPlayerInfo::default_instance_ = NULL;

PBPvpBannerPlayerInfo* PBPvpBannerPlayerInfo::New() const {
  return new PBPvpBannerPlayerInfo;
}

void PBPvpBannerPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_display()) {
      if (display_ != NULL) display_->::PBPlayerDisplay::Clear();
    }
    killcount_ = 0u;
    deadcount_ = 0u;
    assistkillcount_ = 0u;
    contri_ = 0u;
    godlikecount_ = 0u;
    megakillcount_ = 0u;
    ismvp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPvpBannerPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay display = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_killcount;
        break;
      }
      
      // optional uint32 killcount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killcount_)));
          set_has_killcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_deadcount;
        break;
      }
      
      // optional uint32 deadcount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deadcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deadcount_)));
          set_has_deadcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_assistkillcount;
        break;
      }
      
      // optional uint32 assistkillcount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_assistkillcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assistkillcount_)));
          set_has_assistkillcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_contri;
        break;
      }
      
      // optional uint32 contri = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contri:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contri_)));
          set_has_contri();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_godlikecount;
        break;
      }
      
      // optional uint32 godlikecount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_godlikecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &godlikecount_)));
          set_has_godlikecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_megakillcount;
        break;
      }
      
      // optional uint32 megakillcount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_megakillcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &megakillcount_)));
          set_has_megakillcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ismvp;
        break;
      }
      
      // optional uint32 ismvp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ismvp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ismvp_)));
          set_has_ismvp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPvpBannerPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->display(), output);
  }
  
  // optional uint32 killcount = 2;
  if (has_killcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->killcount(), output);
  }
  
  // optional uint32 deadcount = 3;
  if (has_deadcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->deadcount(), output);
  }
  
  // optional uint32 assistkillcount = 4;
  if (has_assistkillcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->assistkillcount(), output);
  }
  
  // optional uint32 contri = 5;
  if (has_contri()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->contri(), output);
  }
  
  // optional uint32 godlikecount = 6;
  if (has_godlikecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->godlikecount(), output);
  }
  
  // optional uint32 megakillcount = 7;
  if (has_megakillcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->megakillcount(), output);
  }
  
  // optional uint32 ismvp = 8;
  if (has_ismvp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ismvp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPvpBannerPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->display(), target);
  }
  
  // optional uint32 killcount = 2;
  if (has_killcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->killcount(), target);
  }
  
  // optional uint32 deadcount = 3;
  if (has_deadcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->deadcount(), target);
  }
  
  // optional uint32 assistkillcount = 4;
  if (has_assistkillcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->assistkillcount(), target);
  }
  
  // optional uint32 contri = 5;
  if (has_contri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->contri(), target);
  }
  
  // optional uint32 godlikecount = 6;
  if (has_godlikecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->godlikecount(), target);
  }
  
  // optional uint32 megakillcount = 7;
  if (has_megakillcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->megakillcount(), target);
  }
  
  // optional uint32 ismvp = 8;
  if (has_ismvp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ismvp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPvpBannerPlayerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay display = 1;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display());
    }
    
    // optional uint32 killcount = 2;
    if (has_killcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killcount());
    }
    
    // optional uint32 deadcount = 3;
    if (has_deadcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deadcount());
    }
    
    // optional uint32 assistkillcount = 4;
    if (has_assistkillcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assistkillcount());
    }
    
    // optional uint32 contri = 5;
    if (has_contri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contri());
    }
    
    // optional uint32 godlikecount = 6;
    if (has_godlikecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->godlikecount());
    }
    
    // optional uint32 megakillcount = 7;
    if (has_megakillcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->megakillcount());
    }
    
    // optional uint32 ismvp = 8;
    if (has_ismvp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ismvp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPvpBannerPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPvpBannerPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPvpBannerPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPvpBannerPlayerInfo::MergeFrom(const PBPvpBannerPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_display()) {
      mutable_display()->::PBPlayerDisplay::MergeFrom(from.display());
    }
    if (from.has_killcount()) {
      set_killcount(from.killcount());
    }
    if (from.has_deadcount()) {
      set_deadcount(from.deadcount());
    }
    if (from.has_assistkillcount()) {
      set_assistkillcount(from.assistkillcount());
    }
    if (from.has_contri()) {
      set_contri(from.contri());
    }
    if (from.has_godlikecount()) {
      set_godlikecount(from.godlikecount());
    }
    if (from.has_megakillcount()) {
      set_megakillcount(from.megakillcount());
    }
    if (from.has_ismvp()) {
      set_ismvp(from.ismvp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPvpBannerPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPvpBannerPlayerInfo::CopyFrom(const PBPvpBannerPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPvpBannerPlayerInfo::IsInitialized() const {
  
  return true;
}

void PBPvpBannerPlayerInfo::Swap(PBPvpBannerPlayerInfo* other) {
  if (other != this) {
    std::swap(display_, other->display_);
    std::swap(killcount_, other->killcount_);
    std::swap(deadcount_, other->deadcount_);
    std::swap(assistkillcount_, other->assistkillcount_);
    std::swap(contri_, other->contri_);
    std::swap(godlikecount_, other->godlikecount_);
    std::swap(megakillcount_, other->megakillcount_);
    std::swap(ismvp_, other->ismvp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPvpBannerPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPvpBannerPlayerInfo_descriptor_;
  metadata.reflection = PBPvpBannerPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCopymapSynBannerScore::kCampscoreFieldNumber;
const int PBG2CCopymapSynBannerScore::kBannercampidFieldNumber;
const int PBG2CCopymapSynBannerScore::kBuffIDFieldNumber;
#endif  // !_MSC_VER

PBG2CCopymapSynBannerScore::PBG2CCopymapSynBannerScore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCopymapSynBannerScore::InitAsDefaultInstance() {
}

PBG2CCopymapSynBannerScore::PBG2CCopymapSynBannerScore(const PBG2CCopymapSynBannerScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCopymapSynBannerScore::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCopymapSynBannerScore::~PBG2CCopymapSynBannerScore() {
  SharedDtor();
}

void PBG2CCopymapSynBannerScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCopymapSynBannerScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCopymapSynBannerScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCopymapSynBannerScore_descriptor_;
}

const PBG2CCopymapSynBannerScore& PBG2CCopymapSynBannerScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpWar_2eproto();  return *default_instance_;
}

PBG2CCopymapSynBannerScore* PBG2CCopymapSynBannerScore::default_instance_ = NULL;

PBG2CCopymapSynBannerScore* PBG2CCopymapSynBannerScore::New() const {
  return new PBG2CCopymapSynBannerScore;
}

void PBG2CCopymapSynBannerScore::Clear() {
  campscore_.Clear();
  bannercampid_.Clear();
  buffid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCopymapSynBannerScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBPvpBannerCampScore campscore = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_campscore:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_campscore()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_campscore;
        if (input->ExpectTag(16)) goto parse_bannercampid;
        break;
      }
      
      // repeated uint32 bannercampid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bannercampid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_bannercampid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_bannercampid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bannercampid;
        if (input->ExpectTag(24)) goto parse_buffID;
        break;
      }
      
      // repeated uint32 buffID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buffID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_buffid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_buffid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buffID;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCopymapSynBannerScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBPvpBannerCampScore campscore = 1;
  for (int i = 0; i < this->campscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->campscore(i), output);
  }
  
  // repeated uint32 bannercampid = 2;
  for (int i = 0; i < this->bannercampid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->bannercampid(i), output);
  }
  
  // repeated uint32 buffID = 3;
  for (int i = 0; i < this->buffid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->buffid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCopymapSynBannerScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBPvpBannerCampScore campscore = 1;
  for (int i = 0; i < this->campscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->campscore(i), target);
  }
  
  // repeated uint32 bannercampid = 2;
  for (int i = 0; i < this->bannercampid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->bannercampid(i), target);
  }
  
  // repeated uint32 buffID = 3;
  for (int i = 0; i < this->buffid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->buffid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCopymapSynBannerScore::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBPvpBannerCampScore campscore = 1;
  total_size += 1 * this->campscore_size();
  for (int i = 0; i < this->campscore_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->campscore(i));
  }
  
  // repeated uint32 bannercampid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->bannercampid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->bannercampid(i));
    }
    total_size += 1 * this->bannercampid_size() + data_size;
  }
  
  // repeated uint32 buffID = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->buffid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->buffid(i));
    }
    total_size += 1 * this->buffid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCopymapSynBannerScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCopymapSynBannerScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCopymapSynBannerScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCopymapSynBannerScore::MergeFrom(const PBG2CCopymapSynBannerScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  campscore_.MergeFrom(from.campscore_);
  bannercampid_.MergeFrom(from.bannercampid_);
  buffid_.MergeFrom(from.buffid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCopymapSynBannerScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCopymapSynBannerScore::CopyFrom(const PBG2CCopymapSynBannerScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCopymapSynBannerScore::IsInitialized() const {
  
  return true;
}

void PBG2CCopymapSynBannerScore::Swap(PBG2CCopymapSynBannerScore* other) {
  if (other != this) {
    campscore_.Swap(&other->campscore_);
    bannercampid_.Swap(&other->bannercampid_);
    buffid_.Swap(&other->buffid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCopymapSynBannerScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCopymapSynBannerScore_descriptor_;
  metadata.reflection = PBG2CCopymapSynBannerScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCopymapSynBannerPlayerInfo::kPbinfoFieldNumber;
#endif  // !_MSC_VER

PBG2CCopymapSynBannerPlayerInfo::PBG2CCopymapSynBannerPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCopymapSynBannerPlayerInfo::InitAsDefaultInstance() {
}

PBG2CCopymapSynBannerPlayerInfo::PBG2CCopymapSynBannerPlayerInfo(const PBG2CCopymapSynBannerPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCopymapSynBannerPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCopymapSynBannerPlayerInfo::~PBG2CCopymapSynBannerPlayerInfo() {
  SharedDtor();
}

void PBG2CCopymapSynBannerPlayerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCopymapSynBannerPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCopymapSynBannerPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCopymapSynBannerPlayerInfo_descriptor_;
}

const PBG2CCopymapSynBannerPlayerInfo& PBG2CCopymapSynBannerPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpWar_2eproto();  return *default_instance_;
}

PBG2CCopymapSynBannerPlayerInfo* PBG2CCopymapSynBannerPlayerInfo::default_instance_ = NULL;

PBG2CCopymapSynBannerPlayerInfo* PBG2CCopymapSynBannerPlayerInfo::New() const {
  return new PBG2CCopymapSynBannerPlayerInfo;
}

void PBG2CCopymapSynBannerPlayerInfo::Clear() {
  pbinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCopymapSynBannerPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBPvpBannerPlayerInfo pbinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pbinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pbinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCopymapSynBannerPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBPvpBannerPlayerInfo pbinfo = 1;
  for (int i = 0; i < this->pbinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pbinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCopymapSynBannerPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBPvpBannerPlayerInfo pbinfo = 1;
  for (int i = 0; i < this->pbinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pbinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCopymapSynBannerPlayerInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBPvpBannerPlayerInfo pbinfo = 1;
  total_size += 1 * this->pbinfo_size();
  for (int i = 0; i < this->pbinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pbinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCopymapSynBannerPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCopymapSynBannerPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCopymapSynBannerPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCopymapSynBannerPlayerInfo::MergeFrom(const PBG2CCopymapSynBannerPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  pbinfo_.MergeFrom(from.pbinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCopymapSynBannerPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCopymapSynBannerPlayerInfo::CopyFrom(const PBG2CCopymapSynBannerPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCopymapSynBannerPlayerInfo::IsInitialized() const {
  
  return true;
}

void PBG2CCopymapSynBannerPlayerInfo::Swap(PBG2CCopymapSynBannerPlayerInfo* other) {
  if (other != this) {
    pbinfo_.Swap(&other->pbinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCopymapSynBannerPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCopymapSynBannerPlayerInfo_descriptor_;
  metadata.reflection = PBG2CCopymapSynBannerPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCopymapSynBannerResult::kCampscoreFieldNumber;
const int PBG2CCopymapSynBannerResult::kPbinfoFieldNumber;
#endif  // !_MSC_VER

PBG2CCopymapSynBannerResult::PBG2CCopymapSynBannerResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCopymapSynBannerResult::InitAsDefaultInstance() {
}

PBG2CCopymapSynBannerResult::PBG2CCopymapSynBannerResult(const PBG2CCopymapSynBannerResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCopymapSynBannerResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCopymapSynBannerResult::~PBG2CCopymapSynBannerResult() {
  SharedDtor();
}

void PBG2CCopymapSynBannerResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCopymapSynBannerResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCopymapSynBannerResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCopymapSynBannerResult_descriptor_;
}

const PBG2CCopymapSynBannerResult& PBG2CCopymapSynBannerResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpWar_2eproto();  return *default_instance_;
}

PBG2CCopymapSynBannerResult* PBG2CCopymapSynBannerResult::default_instance_ = NULL;

PBG2CCopymapSynBannerResult* PBG2CCopymapSynBannerResult::New() const {
  return new PBG2CCopymapSynBannerResult;
}

void PBG2CCopymapSynBannerResult::Clear() {
  campscore_.Clear();
  pbinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCopymapSynBannerResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBPvpBannerCampScore campscore = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_campscore:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_campscore()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_campscore;
        if (input->ExpectTag(18)) goto parse_pbinfo;
        break;
      }
      
      // repeated .PBPvpBannerPlayerInfo pbinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pbinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pbinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCopymapSynBannerResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBPvpBannerCampScore campscore = 1;
  for (int i = 0; i < this->campscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->campscore(i), output);
  }
  
  // repeated .PBPvpBannerPlayerInfo pbinfo = 2;
  for (int i = 0; i < this->pbinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pbinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCopymapSynBannerResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBPvpBannerCampScore campscore = 1;
  for (int i = 0; i < this->campscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->campscore(i), target);
  }
  
  // repeated .PBPvpBannerPlayerInfo pbinfo = 2;
  for (int i = 0; i < this->pbinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pbinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCopymapSynBannerResult::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBPvpBannerCampScore campscore = 1;
  total_size += 1 * this->campscore_size();
  for (int i = 0; i < this->campscore_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->campscore(i));
  }
  
  // repeated .PBPvpBannerPlayerInfo pbinfo = 2;
  total_size += 1 * this->pbinfo_size();
  for (int i = 0; i < this->pbinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pbinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCopymapSynBannerResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCopymapSynBannerResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCopymapSynBannerResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCopymapSynBannerResult::MergeFrom(const PBG2CCopymapSynBannerResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  campscore_.MergeFrom(from.campscore_);
  pbinfo_.MergeFrom(from.pbinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCopymapSynBannerResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCopymapSynBannerResult::CopyFrom(const PBG2CCopymapSynBannerResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCopymapSynBannerResult::IsInitialized() const {
  
  return true;
}

void PBG2CCopymapSynBannerResult::Swap(PBG2CCopymapSynBannerResult* other) {
  if (other != this) {
    campscore_.Swap(&other->campscore_);
    pbinfo_.Swap(&other->pbinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCopymapSynBannerResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCopymapSynBannerResult_descriptor_;
  metadata.reflection = PBG2CCopymapSynBannerResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCopymapSynBannerGodlike::kDisplayFieldNumber;
const int PBG2CCopymapSynBannerGodlike::kCountFieldNumber;
const int PBG2CCopymapSynBannerGodlike::kTargetFieldNumber;
#endif  // !_MSC_VER

PBG2CCopymapSynBannerGodlike::PBG2CCopymapSynBannerGodlike()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCopymapSynBannerGodlike::InitAsDefaultInstance() {
  display_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
  target_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBG2CCopymapSynBannerGodlike::PBG2CCopymapSynBannerGodlike(const PBG2CCopymapSynBannerGodlike& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCopymapSynBannerGodlike::SharedCtor() {
  _cached_size_ = 0;
  display_ = NULL;
  count_ = 0u;
  target_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCopymapSynBannerGodlike::~PBG2CCopymapSynBannerGodlike() {
  SharedDtor();
}

void PBG2CCopymapSynBannerGodlike::SharedDtor() {
  if (this != default_instance_) {
    delete display_;
    delete target_;
  }
}

void PBG2CCopymapSynBannerGodlike::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCopymapSynBannerGodlike::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCopymapSynBannerGodlike_descriptor_;
}

const PBG2CCopymapSynBannerGodlike& PBG2CCopymapSynBannerGodlike::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpWar_2eproto();  return *default_instance_;
}

PBG2CCopymapSynBannerGodlike* PBG2CCopymapSynBannerGodlike::default_instance_ = NULL;

PBG2CCopymapSynBannerGodlike* PBG2CCopymapSynBannerGodlike::New() const {
  return new PBG2CCopymapSynBannerGodlike;
}

void PBG2CCopymapSynBannerGodlike::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_display()) {
      if (display_ != NULL) display_->::PBPlayerDisplay::Clear();
    }
    count_ = 0u;
    if (has_target()) {
      if (target_ != NULL) target_->::PBPlayerDisplay::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCopymapSynBannerGodlike::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay display = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_target;
        break;
      }
      
      // optional .PBPlayerDisplay target = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCopymapSynBannerGodlike::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->display(), output);
  }
  
  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }
  
  // optional .PBPlayerDisplay target = 3;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->target(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCopymapSynBannerGodlike::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->display(), target);
  }
  
  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }
  
  // optional .PBPlayerDisplay target = 3;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->target(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCopymapSynBannerGodlike::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay display = 1;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display());
    }
    
    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
    // optional .PBPlayerDisplay target = 3;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCopymapSynBannerGodlike::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCopymapSynBannerGodlike* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCopymapSynBannerGodlike*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCopymapSynBannerGodlike::MergeFrom(const PBG2CCopymapSynBannerGodlike& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_display()) {
      mutable_display()->::PBPlayerDisplay::MergeFrom(from.display());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_target()) {
      mutable_target()->::PBPlayerDisplay::MergeFrom(from.target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCopymapSynBannerGodlike::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCopymapSynBannerGodlike::CopyFrom(const PBG2CCopymapSynBannerGodlike& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCopymapSynBannerGodlike::IsInitialized() const {
  
  return true;
}

void PBG2CCopymapSynBannerGodlike::Swap(PBG2CCopymapSynBannerGodlike* other) {
  if (other != this) {
    std::swap(display_, other->display_);
    std::swap(count_, other->count_);
    std::swap(target_, other->target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCopymapSynBannerGodlike::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCopymapSynBannerGodlike_descriptor_;
  metadata.reflection = PBG2CCopymapSynBannerGodlike_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCopymapSynBannerMegakill::kDisplayFieldNumber;
const int PBG2CCopymapSynBannerMegakill::kCountFieldNumber;
const int PBG2CCopymapSynBannerMegakill::kTargetFieldNumber;
#endif  // !_MSC_VER

PBG2CCopymapSynBannerMegakill::PBG2CCopymapSynBannerMegakill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCopymapSynBannerMegakill::InitAsDefaultInstance() {
  display_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
  target_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBG2CCopymapSynBannerMegakill::PBG2CCopymapSynBannerMegakill(const PBG2CCopymapSynBannerMegakill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCopymapSynBannerMegakill::SharedCtor() {
  _cached_size_ = 0;
  display_ = NULL;
  count_ = 0u;
  target_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCopymapSynBannerMegakill::~PBG2CCopymapSynBannerMegakill() {
  SharedDtor();
}

void PBG2CCopymapSynBannerMegakill::SharedDtor() {
  if (this != default_instance_) {
    delete display_;
    delete target_;
  }
}

void PBG2CCopymapSynBannerMegakill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCopymapSynBannerMegakill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCopymapSynBannerMegakill_descriptor_;
}

const PBG2CCopymapSynBannerMegakill& PBG2CCopymapSynBannerMegakill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpWar_2eproto();  return *default_instance_;
}

PBG2CCopymapSynBannerMegakill* PBG2CCopymapSynBannerMegakill::default_instance_ = NULL;

PBG2CCopymapSynBannerMegakill* PBG2CCopymapSynBannerMegakill::New() const {
  return new PBG2CCopymapSynBannerMegakill;
}

void PBG2CCopymapSynBannerMegakill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_display()) {
      if (display_ != NULL) display_->::PBPlayerDisplay::Clear();
    }
    count_ = 0u;
    if (has_target()) {
      if (target_ != NULL) target_->::PBPlayerDisplay::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCopymapSynBannerMegakill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay display = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_target;
        break;
      }
      
      // optional .PBPlayerDisplay target = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCopymapSynBannerMegakill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->display(), output);
  }
  
  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }
  
  // optional .PBPlayerDisplay target = 3;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->target(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCopymapSynBannerMegakill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->display(), target);
  }
  
  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }
  
  // optional .PBPlayerDisplay target = 3;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->target(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCopymapSynBannerMegakill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay display = 1;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display());
    }
    
    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
    // optional .PBPlayerDisplay target = 3;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCopymapSynBannerMegakill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCopymapSynBannerMegakill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCopymapSynBannerMegakill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCopymapSynBannerMegakill::MergeFrom(const PBG2CCopymapSynBannerMegakill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_display()) {
      mutable_display()->::PBPlayerDisplay::MergeFrom(from.display());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_target()) {
      mutable_target()->::PBPlayerDisplay::MergeFrom(from.target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCopymapSynBannerMegakill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCopymapSynBannerMegakill::CopyFrom(const PBG2CCopymapSynBannerMegakill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCopymapSynBannerMegakill::IsInitialized() const {
  
  return true;
}

void PBG2CCopymapSynBannerMegakill::Swap(PBG2CCopymapSynBannerMegakill* other) {
  if (other != this) {
    std::swap(display_, other->display_);
    std::swap(count_, other->count_);
    std::swap(target_, other->target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCopymapSynBannerMegakill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCopymapSynBannerMegakill_descriptor_;
  metadata.reflection = PBG2CCopymapSynBannerMegakill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCopymapSynGetBanner::kDisplayFieldNumber;
#endif  // !_MSC_VER

PBG2CCopymapSynGetBanner::PBG2CCopymapSynGetBanner()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCopymapSynGetBanner::InitAsDefaultInstance() {
  display_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBG2CCopymapSynGetBanner::PBG2CCopymapSynGetBanner(const PBG2CCopymapSynGetBanner& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCopymapSynGetBanner::SharedCtor() {
  _cached_size_ = 0;
  display_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCopymapSynGetBanner::~PBG2CCopymapSynGetBanner() {
  SharedDtor();
}

void PBG2CCopymapSynGetBanner::SharedDtor() {
  if (this != default_instance_) {
    delete display_;
  }
}

void PBG2CCopymapSynGetBanner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCopymapSynGetBanner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCopymapSynGetBanner_descriptor_;
}

const PBG2CCopymapSynGetBanner& PBG2CCopymapSynGetBanner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpWar_2eproto();  return *default_instance_;
}

PBG2CCopymapSynGetBanner* PBG2CCopymapSynGetBanner::default_instance_ = NULL;

PBG2CCopymapSynGetBanner* PBG2CCopymapSynGetBanner::New() const {
  return new PBG2CCopymapSynGetBanner;
}

void PBG2CCopymapSynGetBanner::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_display()) {
      if (display_ != NULL) display_->::PBPlayerDisplay::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCopymapSynGetBanner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay display = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCopymapSynGetBanner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->display(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCopymapSynGetBanner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->display(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCopymapSynGetBanner::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay display = 1;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCopymapSynGetBanner::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCopymapSynGetBanner* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCopymapSynGetBanner*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCopymapSynGetBanner::MergeFrom(const PBG2CCopymapSynGetBanner& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_display()) {
      mutable_display()->::PBPlayerDisplay::MergeFrom(from.display());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCopymapSynGetBanner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCopymapSynGetBanner::CopyFrom(const PBG2CCopymapSynGetBanner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCopymapSynGetBanner::IsInitialized() const {
  
  return true;
}

void PBG2CCopymapSynGetBanner::Swap(PBG2CCopymapSynGetBanner* other) {
  if (other != this) {
    std::swap(display_, other->display_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCopymapSynGetBanner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCopymapSynGetBanner_descriptor_;
  metadata.reflection = PBG2CCopymapSynGetBanner_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCopymapSynBannerKill::kSourceFieldNumber;
const int PBG2CCopymapSynBannerKill::kTargetFieldNumber;
#endif  // !_MSC_VER

PBG2CCopymapSynBannerKill::PBG2CCopymapSynBannerKill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCopymapSynBannerKill::InitAsDefaultInstance() {
  source_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
  target_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBG2CCopymapSynBannerKill::PBG2CCopymapSynBannerKill(const PBG2CCopymapSynBannerKill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCopymapSynBannerKill::SharedCtor() {
  _cached_size_ = 0;
  source_ = NULL;
  target_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCopymapSynBannerKill::~PBG2CCopymapSynBannerKill() {
  SharedDtor();
}

void PBG2CCopymapSynBannerKill::SharedDtor() {
  if (this != default_instance_) {
    delete source_;
    delete target_;
  }
}

void PBG2CCopymapSynBannerKill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCopymapSynBannerKill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCopymapSynBannerKill_descriptor_;
}

const PBG2CCopymapSynBannerKill& PBG2CCopymapSynBannerKill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpWar_2eproto();  return *default_instance_;
}

PBG2CCopymapSynBannerKill* PBG2CCopymapSynBannerKill::default_instance_ = NULL;

PBG2CCopymapSynBannerKill* PBG2CCopymapSynBannerKill::New() const {
  return new PBG2CCopymapSynBannerKill;
}

void PBG2CCopymapSynBannerKill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_source()) {
      if (source_ != NULL) source_->::PBPlayerDisplay::Clear();
    }
    if (has_target()) {
      if (target_ != NULL) target_->::PBPlayerDisplay::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCopymapSynBannerKill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay source = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_target;
        break;
      }
      
      // optional .PBPlayerDisplay target = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCopymapSynBannerKill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->source(), output);
  }
  
  // optional .PBPlayerDisplay target = 2;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->target(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCopymapSynBannerKill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay source = 1;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->source(), target);
  }
  
  // optional .PBPlayerDisplay target = 2;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->target(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCopymapSynBannerKill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->source());
    }
    
    // optional .PBPlayerDisplay target = 2;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCopymapSynBannerKill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCopymapSynBannerKill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCopymapSynBannerKill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCopymapSynBannerKill::MergeFrom(const PBG2CCopymapSynBannerKill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      mutable_source()->::PBPlayerDisplay::MergeFrom(from.source());
    }
    if (from.has_target()) {
      mutable_target()->::PBPlayerDisplay::MergeFrom(from.target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCopymapSynBannerKill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCopymapSynBannerKill::CopyFrom(const PBG2CCopymapSynBannerKill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCopymapSynBannerKill::IsInitialized() const {
  
  return true;
}

void PBG2CCopymapSynBannerKill::Swap(PBG2CCopymapSynBannerKill* other) {
  if (other != this) {
    std::swap(source_, other->source_);
    std::swap(target_, other->target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCopymapSynBannerKill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCopymapSynBannerKill_descriptor_;
  metadata.reflection = PBG2CCopymapSynBannerKill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSinglePvpMember::kDisplayFieldNumber;
const int PBSinglePvpMember::kSinglepvpscoreFieldNumber;
const int PBSinglePvpMember::kMaxfightpowerFieldNumber;
const int PBSinglePvpMember::kWincountFieldNumber;
const int PBSinglePvpMember::kFailcountFieldNumber;
const int PBSinglePvpMember::kEqualcountFieldNumber;
#endif  // !_MSC_VER

PBSinglePvpMember::PBSinglePvpMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSinglePvpMember::InitAsDefaultInstance() {
  display_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBSinglePvpMember::PBSinglePvpMember(const PBSinglePvpMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSinglePvpMember::SharedCtor() {
  _cached_size_ = 0;
  display_ = NULL;
  singlepvpscore_ = 0u;
  maxfightpower_ = 0u;
  wincount_ = 0u;
  failcount_ = 0u;
  equalcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSinglePvpMember::~PBSinglePvpMember() {
  SharedDtor();
}

void PBSinglePvpMember::SharedDtor() {
  if (this != default_instance_) {
    delete display_;
  }
}

void PBSinglePvpMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSinglePvpMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSinglePvpMember_descriptor_;
}

const PBSinglePvpMember& PBSinglePvpMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpWar_2eproto();  return *default_instance_;
}

PBSinglePvpMember* PBSinglePvpMember::default_instance_ = NULL;

PBSinglePvpMember* PBSinglePvpMember::New() const {
  return new PBSinglePvpMember;
}

void PBSinglePvpMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_display()) {
      if (display_ != NULL) display_->::PBPlayerDisplay::Clear();
    }
    singlepvpscore_ = 0u;
    maxfightpower_ = 0u;
    wincount_ = 0u;
    failcount_ = 0u;
    equalcount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSinglePvpMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay display = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_singlepvpscore;
        break;
      }
      
      // optional uint32 singlepvpscore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_singlepvpscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &singlepvpscore_)));
          set_has_singlepvpscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_maxfightpower;
        break;
      }
      
      // optional uint32 maxfightpower = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxfightpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxfightpower_)));
          set_has_maxfightpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_wincount;
        break;
      }
      
      // optional uint32 wincount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wincount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wincount_)));
          set_has_wincount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_failcount;
        break;
      }
      
      // optional uint32 failcount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_failcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &failcount_)));
          set_has_failcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_equalcount;
        break;
      }
      
      // optional uint32 equalcount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equalcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equalcount_)));
          set_has_equalcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSinglePvpMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->display(), output);
  }
  
  // optional uint32 singlepvpscore = 2;
  if (has_singlepvpscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->singlepvpscore(), output);
  }
  
  // optional uint32 maxfightpower = 3;
  if (has_maxfightpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maxfightpower(), output);
  }
  
  // optional uint32 wincount = 4;
  if (has_wincount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->wincount(), output);
  }
  
  // optional uint32 failcount = 5;
  if (has_failcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->failcount(), output);
  }
  
  // optional uint32 equalcount = 6;
  if (has_equalcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->equalcount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSinglePvpMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->display(), target);
  }
  
  // optional uint32 singlepvpscore = 2;
  if (has_singlepvpscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->singlepvpscore(), target);
  }
  
  // optional uint32 maxfightpower = 3;
  if (has_maxfightpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->maxfightpower(), target);
  }
  
  // optional uint32 wincount = 4;
  if (has_wincount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->wincount(), target);
  }
  
  // optional uint32 failcount = 5;
  if (has_failcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->failcount(), target);
  }
  
  // optional uint32 equalcount = 6;
  if (has_equalcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->equalcount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSinglePvpMember::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay display = 1;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display());
    }
    
    // optional uint32 singlepvpscore = 2;
    if (has_singlepvpscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->singlepvpscore());
    }
    
    // optional uint32 maxfightpower = 3;
    if (has_maxfightpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxfightpower());
    }
    
    // optional uint32 wincount = 4;
    if (has_wincount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wincount());
    }
    
    // optional uint32 failcount = 5;
    if (has_failcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->failcount());
    }
    
    // optional uint32 equalcount = 6;
    if (has_equalcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equalcount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSinglePvpMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSinglePvpMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSinglePvpMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSinglePvpMember::MergeFrom(const PBSinglePvpMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_display()) {
      mutable_display()->::PBPlayerDisplay::MergeFrom(from.display());
    }
    if (from.has_singlepvpscore()) {
      set_singlepvpscore(from.singlepvpscore());
    }
    if (from.has_maxfightpower()) {
      set_maxfightpower(from.maxfightpower());
    }
    if (from.has_wincount()) {
      set_wincount(from.wincount());
    }
    if (from.has_failcount()) {
      set_failcount(from.failcount());
    }
    if (from.has_equalcount()) {
      set_equalcount(from.equalcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSinglePvpMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSinglePvpMember::CopyFrom(const PBSinglePvpMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSinglePvpMember::IsInitialized() const {
  
  return true;
}

void PBSinglePvpMember::Swap(PBSinglePvpMember* other) {
  if (other != this) {
    std::swap(display_, other->display_);
    std::swap(singlepvpscore_, other->singlepvpscore_);
    std::swap(maxfightpower_, other->maxfightpower_);
    std::swap(wincount_, other->wincount_);
    std::swap(failcount_, other->failcount_);
    std::swap(equalcount_, other->equalcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSinglePvpMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSinglePvpMember_descriptor_;
  metadata.reflection = PBSinglePvpMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2WSinglePvpExitMatch::kDisplayFieldNumber;
#endif  // !_MSC_VER

PBG2WSinglePvpExitMatch::PBG2WSinglePvpExitMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2WSinglePvpExitMatch::InitAsDefaultInstance() {
  display_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBG2WSinglePvpExitMatch::PBG2WSinglePvpExitMatch(const PBG2WSinglePvpExitMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2WSinglePvpExitMatch::SharedCtor() {
  _cached_size_ = 0;
  display_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2WSinglePvpExitMatch::~PBG2WSinglePvpExitMatch() {
  SharedDtor();
}

void PBG2WSinglePvpExitMatch::SharedDtor() {
  if (this != default_instance_) {
    delete display_;
  }
}

void PBG2WSinglePvpExitMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2WSinglePvpExitMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2WSinglePvpExitMatch_descriptor_;
}

const PBG2WSinglePvpExitMatch& PBG2WSinglePvpExitMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpWar_2eproto();  return *default_instance_;
}

PBG2WSinglePvpExitMatch* PBG2WSinglePvpExitMatch::default_instance_ = NULL;

PBG2WSinglePvpExitMatch* PBG2WSinglePvpExitMatch::New() const {
  return new PBG2WSinglePvpExitMatch;
}

void PBG2WSinglePvpExitMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_display()) {
      if (display_ != NULL) display_->::PBPlayerDisplay::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2WSinglePvpExitMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay display = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2WSinglePvpExitMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->display(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2WSinglePvpExitMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->display(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2WSinglePvpExitMatch::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay display = 1;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2WSinglePvpExitMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2WSinglePvpExitMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2WSinglePvpExitMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2WSinglePvpExitMatch::MergeFrom(const PBG2WSinglePvpExitMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_display()) {
      mutable_display()->::PBPlayerDisplay::MergeFrom(from.display());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2WSinglePvpExitMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2WSinglePvpExitMatch::CopyFrom(const PBG2WSinglePvpExitMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2WSinglePvpExitMatch::IsInitialized() const {
  
  return true;
}

void PBG2WSinglePvpExitMatch::Swap(PBG2WSinglePvpExitMatch* other) {
  if (other != this) {
    std::swap(display_, other->display_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2WSinglePvpExitMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2WSinglePvpExitMatch_descriptor_;
  metadata.reflection = PBG2WSinglePvpExitMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCopymapSynSinglePvpResult::kTypeFieldNumber;
const int PBG2CCopymapSynSinglePvpResult::kCurscoreFieldNumber;
const int PBG2CCopymapSynSinglePvpResult::kOldscoreFieldNumber;
const int PBG2CCopymapSynSinglePvpResult::kHonorFieldNumber;
#endif  // !_MSC_VER

PBG2CCopymapSynSinglePvpResult::PBG2CCopymapSynSinglePvpResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCopymapSynSinglePvpResult::InitAsDefaultInstance() {
}

PBG2CCopymapSynSinglePvpResult::PBG2CCopymapSynSinglePvpResult(const PBG2CCopymapSynSinglePvpResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCopymapSynSinglePvpResult::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  curscore_ = 0u;
  oldscore_ = 0u;
  honor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCopymapSynSinglePvpResult::~PBG2CCopymapSynSinglePvpResult() {
  SharedDtor();
}

void PBG2CCopymapSynSinglePvpResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCopymapSynSinglePvpResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCopymapSynSinglePvpResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCopymapSynSinglePvpResult_descriptor_;
}

const PBG2CCopymapSynSinglePvpResult& PBG2CCopymapSynSinglePvpResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpWar_2eproto();  return *default_instance_;
}

PBG2CCopymapSynSinglePvpResult* PBG2CCopymapSynSinglePvpResult::default_instance_ = NULL;

PBG2CCopymapSynSinglePvpResult* PBG2CCopymapSynSinglePvpResult::New() const {
  return new PBG2CCopymapSynSinglePvpResult;
}

void PBG2CCopymapSynSinglePvpResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    curscore_ = 0u;
    oldscore_ = 0u;
    honor_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCopymapSynSinglePvpResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_curscore;
        break;
      }
      
      // optional uint32 curscore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curscore_)));
          set_has_curscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_oldscore;
        break;
      }
      
      // optional uint32 oldscore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oldscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oldscore_)));
          set_has_oldscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_honor;
        break;
      }
      
      // optional uint32 honor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_honor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &honor_)));
          set_has_honor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCopymapSynSinglePvpResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional uint32 curscore = 2;
  if (has_curscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curscore(), output);
  }
  
  // optional uint32 oldscore = 3;
  if (has_oldscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->oldscore(), output);
  }
  
  // optional uint32 honor = 4;
  if (has_honor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->honor(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCopymapSynSinglePvpResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional uint32 curscore = 2;
  if (has_curscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curscore(), target);
  }
  
  // optional uint32 oldscore = 3;
  if (has_oldscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->oldscore(), target);
  }
  
  // optional uint32 honor = 4;
  if (has_honor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->honor(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCopymapSynSinglePvpResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 curscore = 2;
    if (has_curscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curscore());
    }
    
    // optional uint32 oldscore = 3;
    if (has_oldscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oldscore());
    }
    
    // optional uint32 honor = 4;
    if (has_honor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->honor());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCopymapSynSinglePvpResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCopymapSynSinglePvpResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCopymapSynSinglePvpResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCopymapSynSinglePvpResult::MergeFrom(const PBG2CCopymapSynSinglePvpResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_curscore()) {
      set_curscore(from.curscore());
    }
    if (from.has_oldscore()) {
      set_oldscore(from.oldscore());
    }
    if (from.has_honor()) {
      set_honor(from.honor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCopymapSynSinglePvpResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCopymapSynSinglePvpResult::CopyFrom(const PBG2CCopymapSynSinglePvpResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCopymapSynSinglePvpResult::IsInitialized() const {
  
  return true;
}

void PBG2CCopymapSynSinglePvpResult::Swap(PBG2CCopymapSynSinglePvpResult* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(curscore_, other->curscore_);
    std::swap(oldscore_, other->oldscore_);
    std::swap(honor_, other->honor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCopymapSynSinglePvpResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCopymapSynSinglePvpResult_descriptor_;
  metadata.reflection = PBG2CCopymapSynSinglePvpResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCAGSinglePvpDayPrize::kDaycountFieldNumber;
#endif  // !_MSC_VER

PBCAGSinglePvpDayPrize::PBCAGSinglePvpDayPrize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCAGSinglePvpDayPrize::InitAsDefaultInstance() {
}

PBCAGSinglePvpDayPrize::PBCAGSinglePvpDayPrize(const PBCAGSinglePvpDayPrize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCAGSinglePvpDayPrize::SharedCtor() {
  _cached_size_ = 0;
  daycount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCAGSinglePvpDayPrize::~PBCAGSinglePvpDayPrize() {
  SharedDtor();
}

void PBCAGSinglePvpDayPrize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBCAGSinglePvpDayPrize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCAGSinglePvpDayPrize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCAGSinglePvpDayPrize_descriptor_;
}

const PBCAGSinglePvpDayPrize& PBCAGSinglePvpDayPrize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpWar_2eproto();  return *default_instance_;
}

PBCAGSinglePvpDayPrize* PBCAGSinglePvpDayPrize::default_instance_ = NULL;

PBCAGSinglePvpDayPrize* PBCAGSinglePvpDayPrize::New() const {
  return new PBCAGSinglePvpDayPrize;
}

void PBCAGSinglePvpDayPrize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    daycount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCAGSinglePvpDayPrize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 daycount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daycount_)));
          set_has_daycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCAGSinglePvpDayPrize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 daycount = 1;
  if (has_daycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->daycount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCAGSinglePvpDayPrize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 daycount = 1;
  if (has_daycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->daycount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCAGSinglePvpDayPrize::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 daycount = 1;
    if (has_daycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daycount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCAGSinglePvpDayPrize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCAGSinglePvpDayPrize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCAGSinglePvpDayPrize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCAGSinglePvpDayPrize::MergeFrom(const PBCAGSinglePvpDayPrize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_daycount()) {
      set_daycount(from.daycount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCAGSinglePvpDayPrize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCAGSinglePvpDayPrize::CopyFrom(const PBCAGSinglePvpDayPrize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCAGSinglePvpDayPrize::IsInitialized() const {
  
  return true;
}

void PBCAGSinglePvpDayPrize::Swap(PBCAGSinglePvpDayPrize* other) {
  if (other != this) {
    std::swap(daycount_, other->daycount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCAGSinglePvpDayPrize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCAGSinglePvpDayPrize_descriptor_;
  metadata.reflection = PBCAGSinglePvpDayPrize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CSinglePvpSynScore::kSinglepvpscoreFieldNumber;
#endif  // !_MSC_VER

PBG2CSinglePvpSynScore::PBG2CSinglePvpSynScore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CSinglePvpSynScore::InitAsDefaultInstance() {
}

PBG2CSinglePvpSynScore::PBG2CSinglePvpSynScore(const PBG2CSinglePvpSynScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CSinglePvpSynScore::SharedCtor() {
  _cached_size_ = 0;
  singlepvpscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CSinglePvpSynScore::~PBG2CSinglePvpSynScore() {
  SharedDtor();
}

void PBG2CSinglePvpSynScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CSinglePvpSynScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CSinglePvpSynScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CSinglePvpSynScore_descriptor_;
}

const PBG2CSinglePvpSynScore& PBG2CSinglePvpSynScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PvpWar_2eproto();  return *default_instance_;
}

PBG2CSinglePvpSynScore* PBG2CSinglePvpSynScore::default_instance_ = NULL;

PBG2CSinglePvpSynScore* PBG2CSinglePvpSynScore::New() const {
  return new PBG2CSinglePvpSynScore;
}

void PBG2CSinglePvpSynScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    singlepvpscore_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CSinglePvpSynScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 singlepvpscore = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &singlepvpscore_)));
          set_has_singlepvpscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CSinglePvpSynScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 singlepvpscore = 1;
  if (has_singlepvpscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->singlepvpscore(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CSinglePvpSynScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 singlepvpscore = 1;
  if (has_singlepvpscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->singlepvpscore(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CSinglePvpSynScore::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 singlepvpscore = 1;
    if (has_singlepvpscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->singlepvpscore());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CSinglePvpSynScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CSinglePvpSynScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CSinglePvpSynScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CSinglePvpSynScore::MergeFrom(const PBG2CSinglePvpSynScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_singlepvpscore()) {
      set_singlepvpscore(from.singlepvpscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CSinglePvpSynScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CSinglePvpSynScore::CopyFrom(const PBG2CSinglePvpSynScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CSinglePvpSynScore::IsInitialized() const {
  
  return true;
}

void PBG2CSinglePvpSynScore::Swap(PBG2CSinglePvpSynScore* other) {
  if (other != this) {
    std::swap(singlepvpscore_, other->singlepvpscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CSinglePvpSynScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CSinglePvpSynScore_descriptor_;
  metadata.reflection = PBG2CSinglePvpSynScore_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
