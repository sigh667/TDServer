// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WAGMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PBCreateCellParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCreateCellParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBW2GSceneCreateCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBW2GSceneCreateCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2WSceneRegisterCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2WSceneRegisterCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2WSceneCloseCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2WSceneCloseCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2WScenePlayerCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2WScenePlayerCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2WPlayerFlyMapAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2WPlayerFlyMapAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBW2GPlayerFlyMapAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBW2GPlayerFlyMapAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBW2GPlayerExitAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBW2GPlayerExitAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2WPlayerExitAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2WPlayerExitAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2WPlayerLogout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2WPlayerLogout_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBW2GPlayerSaveDone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBW2GPlayerSaveDone_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2WCopymapCreate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2WCopymapCreate_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2WCopymapUpdateState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2WCopymapUpdateState_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBW2GCopymapEnter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBW2GCopymapEnter_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBW2GCopymapExit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBW2GCopymapExit_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBW2GCopymapPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBW2GCopymapPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBW2GCopymapKickPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBW2GCopymapKickPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2WCopymapInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2WCopymapInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2WCopymapAcceptInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2WCopymapAcceptInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2WCopymapTeamMemberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2WCopymapTeamMemberInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2WCopymapAllCopymapCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2WCopymapAllCopymapCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2WCopymapOneCopymapCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2WCopymapOneCopymapCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2WGMWorldStartTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2WGMWorldStartTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2WPlayerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2WPlayerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDartBuffInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDartBuffInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDartMemberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDartMemberInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDartCarInfoRT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDartCarInfoRT_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDartFlyTarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDartFlyTarget_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2WDartCarFlyAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2WDartCarFlyAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBW2GDartCarFlyAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBW2GDartCarFlyAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBW2GDartCarFlyCreateNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBW2GDartCarFlyCreateNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2WDartCarUpdateAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2WDartCarUpdateAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2WDartCarDeleteAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2WDartCarDeleteAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBW2GDartCarRobFinishedAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBW2GDartCarRobFinishedAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2WDartCarRobFinishedAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2WDartCarRobFinishedAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2WDartCarLeaveRobAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2WDartCarLeaveRobAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBW2GDartCarMemberLeaveNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBW2GDartCarMemberLeaveNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2WFindDartCarAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2WFindDartCarAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBW2GFindDartCarAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBW2GFindDartCarAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2WFactionBossHurtUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2WFactionBossHurtUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2WCommonTreasurePrizeAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2WCommonTreasurePrizeAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBW2GCommonTreasurePrizeAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBW2GCommonTreasurePrizeAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBW2GCorpsChangeJobAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBW2GCorpsChangeJobAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBW2GCommonForbitSpeak_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBW2GCommonForbitSpeak_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2WManorBattleFieldFighterCountAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2WManorBattleFieldFighterCountAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2WManorBattleFieldEnterAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2WManorBattleFieldEnterAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBW2GManorBattleFieldFightCountNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBW2GManorBattleFieldFightCountNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBW2GManorBattleFieldEnterAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBW2GManorBattleFieldEnterAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2WManorSetActivityAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2WManorSetActivityAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ManorCopymapNtfElites_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ManorCopymapNtfElites_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBW2GManorCopymapNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBW2GManorCopymapNtf_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_WAGMsg_2eproto() {
  protobuf_AddDesc_WAGMsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "WAGMsg.proto");
  GOOGLE_CHECK(file != NULL);
  PBCreateCellParam_descriptor_ = file->message_type(0);
  static const int PBCreateCellParam_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCreateCellParam, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCreateCellParam, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCreateCellParam, dartinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCreateCellParam, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCreateCellParam, isteamfore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCreateCellParam, friend__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCreateCellParam, enermy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCreateCellParam, pvpwarid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCreateCellParam, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCreateCellParam, manor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCreateCellParam, ismanordefender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCreateCellParam, manorregionid_),
  };
  PBCreateCellParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCreateCellParam_descriptor_,
      PBCreateCellParam::default_instance_,
      PBCreateCellParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCreateCellParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCreateCellParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCreateCellParam));
  PBW2GSceneCreateCell_descriptor_ = file->message_type(1);
  static const int PBW2GSceneCreateCell_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GSceneCreateCell, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GSceneCreateCell, scenecellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GSceneCreateCell, scenedynid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GSceneCreateCell, param_),
  };
  PBW2GSceneCreateCell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBW2GSceneCreateCell_descriptor_,
      PBW2GSceneCreateCell::default_instance_,
      PBW2GSceneCreateCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GSceneCreateCell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GSceneCreateCell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBW2GSceneCreateCell));
  PBG2WSceneRegisterCell_descriptor_ = file->message_type(2);
  static const int PBG2WSceneRegisterCell_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WSceneRegisterCell, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WSceneRegisterCell, scenedynid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WSceneRegisterCell, scenecellid_),
  };
  PBG2WSceneRegisterCell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2WSceneRegisterCell_descriptor_,
      PBG2WSceneRegisterCell::default_instance_,
      PBG2WSceneRegisterCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WSceneRegisterCell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WSceneRegisterCell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2WSceneRegisterCell));
  PBG2WSceneCloseCell_descriptor_ = file->message_type(3);
  static const int PBG2WSceneCloseCell_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WSceneCloseCell, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WSceneCloseCell, scenedynid_),
  };
  PBG2WSceneCloseCell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2WSceneCloseCell_descriptor_,
      PBG2WSceneCloseCell::default_instance_,
      PBG2WSceneCloseCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WSceneCloseCell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WSceneCloseCell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2WSceneCloseCell));
  PBG2WScenePlayerCount_descriptor_ = file->message_type(4);
  static const int PBG2WScenePlayerCount_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WScenePlayerCount, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WScenePlayerCount, scenedynid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WScenePlayerCount, playercount_),
  };
  PBG2WScenePlayerCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2WScenePlayerCount_descriptor_,
      PBG2WScenePlayerCount::default_instance_,
      PBG2WScenePlayerCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WScenePlayerCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WScenePlayerCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2WScenePlayerCount));
  PBG2WPlayerFlyMapAsk_descriptor_ = file->message_type(5);
  static const int PBG2WPlayerFlyMapAsk_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WPlayerFlyMapAsk, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WPlayerFlyMapAsk, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WPlayerFlyMapAsk, scenedynid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WPlayerFlyMapAsk, scenecellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WPlayerFlyMapAsk, sceneregionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WPlayerFlyMapAsk, fixpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WPlayerFlyMapAsk, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WPlayerFlyMapAsk, posy_),
  };
  PBG2WPlayerFlyMapAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2WPlayerFlyMapAsk_descriptor_,
      PBG2WPlayerFlyMapAsk::default_instance_,
      PBG2WPlayerFlyMapAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WPlayerFlyMapAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WPlayerFlyMapAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2WPlayerFlyMapAsk));
  PBW2GPlayerFlyMapAck_descriptor_ = file->message_type(6);
  static const int PBW2GPlayerFlyMapAck_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GPlayerFlyMapAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GPlayerFlyMapAck, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GPlayerFlyMapAck, scenedynid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GPlayerFlyMapAck, scenecellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GPlayerFlyMapAck, sceneregionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GPlayerFlyMapAck, fixpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GPlayerFlyMapAck, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GPlayerFlyMapAck, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GPlayerFlyMapAck, pbsvrinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GPlayerFlyMapAck, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GPlayerFlyMapAck, port_),
  };
  PBW2GPlayerFlyMapAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBW2GPlayerFlyMapAck_descriptor_,
      PBW2GPlayerFlyMapAck::default_instance_,
      PBW2GPlayerFlyMapAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GPlayerFlyMapAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GPlayerFlyMapAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBW2GPlayerFlyMapAck));
  PBW2GPlayerExitAsk_descriptor_ = file->message_type(7);
  static const int PBW2GPlayerExitAsk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GPlayerExitAsk, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GPlayerExitAsk, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GPlayerExitAsk, loginsn_),
  };
  PBW2GPlayerExitAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBW2GPlayerExitAsk_descriptor_,
      PBW2GPlayerExitAsk::default_instance_,
      PBW2GPlayerExitAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GPlayerExitAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GPlayerExitAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBW2GPlayerExitAsk));
  PBG2WPlayerExitAck_descriptor_ = file->message_type(8);
  static const int PBG2WPlayerExitAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WPlayerExitAck, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WPlayerExitAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WPlayerExitAck, loginsn_),
  };
  PBG2WPlayerExitAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2WPlayerExitAck_descriptor_,
      PBG2WPlayerExitAck::default_instance_,
      PBG2WPlayerExitAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WPlayerExitAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WPlayerExitAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2WPlayerExitAck));
  PBG2WPlayerLogout_descriptor_ = file->message_type(9);
  static const int PBG2WPlayerLogout_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WPlayerLogout, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WPlayerLogout, loginsn_),
  };
  PBG2WPlayerLogout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2WPlayerLogout_descriptor_,
      PBG2WPlayerLogout::default_instance_,
      PBG2WPlayerLogout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WPlayerLogout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WPlayerLogout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2WPlayerLogout));
  PBW2GPlayerSaveDone_descriptor_ = file->message_type(10);
  static const int PBW2GPlayerSaveDone_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GPlayerSaveDone, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GPlayerSaveDone, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GPlayerSaveDone, saveorder_),
  };
  PBW2GPlayerSaveDone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBW2GPlayerSaveDone_descriptor_,
      PBW2GPlayerSaveDone::default_instance_,
      PBW2GPlayerSaveDone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GPlayerSaveDone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GPlayerSaveDone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBW2GPlayerSaveDone));
  PBG2WCopymapCreate_descriptor_ = file->message_type(11);
  static const int PBG2WCopymapCreate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WCopymapCreate, copymapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WCopymapCreate, param_),
  };
  PBG2WCopymapCreate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2WCopymapCreate_descriptor_,
      PBG2WCopymapCreate::default_instance_,
      PBG2WCopymapCreate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WCopymapCreate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WCopymapCreate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2WCopymapCreate));
  PBG2WCopymapUpdateState_descriptor_ = file->message_type(12);
  static const int PBG2WCopymapUpdateState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WCopymapUpdateState, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WCopymapUpdateState, dynid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WCopymapUpdateState, state_),
  };
  PBG2WCopymapUpdateState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2WCopymapUpdateState_descriptor_,
      PBG2WCopymapUpdateState::default_instance_,
      PBG2WCopymapUpdateState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WCopymapUpdateState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WCopymapUpdateState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2WCopymapUpdateState));
  PBW2GCopymapEnter_descriptor_ = file->message_type(13);
  static const int PBW2GCopymapEnter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GCopymapEnter, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GCopymapEnter, cellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GCopymapEnter, dynid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GCopymapEnter, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GCopymapEnter, reason_),
  };
  PBW2GCopymapEnter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBW2GCopymapEnter_descriptor_,
      PBW2GCopymapEnter::default_instance_,
      PBW2GCopymapEnter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GCopymapEnter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GCopymapEnter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBW2GCopymapEnter));
  PBW2GCopymapExit_descriptor_ = file->message_type(14);
  static const int PBW2GCopymapExit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GCopymapExit, playerid_),
  };
  PBW2GCopymapExit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBW2GCopymapExit_descriptor_,
      PBW2GCopymapExit::default_instance_,
      PBW2GCopymapExit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GCopymapExit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GCopymapExit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBW2GCopymapExit));
  PBW2GCopymapPlayerInfo_descriptor_ = file->message_type(15);
  static const int PBW2GCopymapPlayerInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GCopymapPlayerInfo, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GCopymapPlayerInfo, dynid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GCopymapPlayerInfo, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GCopymapPlayerInfo, reason_),
  };
  PBW2GCopymapPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBW2GCopymapPlayerInfo_descriptor_,
      PBW2GCopymapPlayerInfo::default_instance_,
      PBW2GCopymapPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GCopymapPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GCopymapPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBW2GCopymapPlayerInfo));
  PBW2GCopymapKickPlayer_descriptor_ = file->message_type(16);
  static const int PBW2GCopymapKickPlayer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GCopymapKickPlayer, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GCopymapKickPlayer, dynid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GCopymapKickPlayer, playerid_),
  };
  PBW2GCopymapKickPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBW2GCopymapKickPlayer_descriptor_,
      PBW2GCopymapKickPlayer::default_instance_,
      PBW2GCopymapKickPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GCopymapKickPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GCopymapKickPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBW2GCopymapKickPlayer));
  PBG2WCopymapInvite_descriptor_ = file->message_type(17);
  static const int PBG2WCopymapInvite_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WCopymapInvite, copymapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WCopymapInvite, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WCopymapInvite, targetid_),
  };
  PBG2WCopymapInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2WCopymapInvite_descriptor_,
      PBG2WCopymapInvite::default_instance_,
      PBG2WCopymapInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WCopymapInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WCopymapInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2WCopymapInvite));
  PBG2WCopymapAcceptInvite_descriptor_ = file->message_type(18);
  static const int PBG2WCopymapAcceptInvite_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WCopymapAcceptInvite, copymapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WCopymapAcceptInvite, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WCopymapAcceptInvite, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WCopymapAcceptInvite, accept_),
  };
  PBG2WCopymapAcceptInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2WCopymapAcceptInvite_descriptor_,
      PBG2WCopymapAcceptInvite::default_instance_,
      PBG2WCopymapAcceptInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WCopymapAcceptInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WCopymapAcceptInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2WCopymapAcceptInvite));
  PBG2WCopymapTeamMemberInfo_descriptor_ = file->message_type(19);
  static const int PBG2WCopymapTeamMemberInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WCopymapTeamMemberInfo, copymapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WCopymapTeamMemberInfo, playerid_),
  };
  PBG2WCopymapTeamMemberInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2WCopymapTeamMemberInfo_descriptor_,
      PBG2WCopymapTeamMemberInfo::default_instance_,
      PBG2WCopymapTeamMemberInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WCopymapTeamMemberInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WCopymapTeamMemberInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2WCopymapTeamMemberInfo));
  PBG2WCopymapAllCopymapCount_descriptor_ = file->message_type(20);
  static const int PBG2WCopymapAllCopymapCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WCopymapAllCopymapCount, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WCopymapAllCopymapCount, info_),
  };
  PBG2WCopymapAllCopymapCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2WCopymapAllCopymapCount_descriptor_,
      PBG2WCopymapAllCopymapCount::default_instance_,
      PBG2WCopymapAllCopymapCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WCopymapAllCopymapCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WCopymapAllCopymapCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2WCopymapAllCopymapCount));
  PBG2WCopymapOneCopymapCount_descriptor_ = file->message_type(21);
  static const int PBG2WCopymapOneCopymapCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WCopymapOneCopymapCount, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WCopymapOneCopymapCount, info_),
  };
  PBG2WCopymapOneCopymapCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2WCopymapOneCopymapCount_descriptor_,
      PBG2WCopymapOneCopymapCount::default_instance_,
      PBG2WCopymapOneCopymapCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WCopymapOneCopymapCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WCopymapOneCopymapCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2WCopymapOneCopymapCount));
  PBG2WGMWorldStartTime_descriptor_ = file->message_type(22);
  static const int PBG2WGMWorldStartTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WGMWorldStartTime, stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WGMWorldStartTime, logicworldid_),
  };
  PBG2WGMWorldStartTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2WGMWorldStartTime_descriptor_,
      PBG2WGMWorldStartTime::default_instance_,
      PBG2WGMWorldStartTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WGMWorldStartTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WGMWorldStartTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2WGMWorldStartTime));
  PBG2WPlayerData_descriptor_ = file->message_type(23);
  static const int PBG2WPlayerData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WPlayerData, playerdisplay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WPlayerData, fightpowr_),
  };
  PBG2WPlayerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2WPlayerData_descriptor_,
      PBG2WPlayerData::default_instance_,
      PBG2WPlayerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WPlayerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WPlayerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2WPlayerData));
  PBDartBuffInfo_descriptor_ = file->message_type(24);
  static const int PBDartBuffInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartBuffInfo, dartbuffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartBuffInfo, removetime_),
  };
  PBDartBuffInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDartBuffInfo_descriptor_,
      PBDartBuffInfo::default_instance_,
      PBDartBuffInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartBuffInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartBuffInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDartBuffInfo));
  PBDartMemberInfo_descriptor_ = file->message_type(25);
  static const int PBDartMemberInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartMemberInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartMemberInfo, addsupply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartMemberInfo, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartMemberInfo, identitypersonalprize_),
  };
  PBDartMemberInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDartMemberInfo_descriptor_,
      PBDartMemberInfo::default_instance_,
      PBDartMemberInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartMemberInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartMemberInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDartMemberInfo));
  PBDartCarInfoRT_descriptor_ = file->message_type(26);
  static const int PBDartCarInfoRT_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartCarInfoRT, globaldartid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartCarInfoRT, dartid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartCarInfoRT, dartleaderplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartCarInfoRT, lastchecktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartCarInfoRT, leftsecond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartCarInfoRT, totalsecond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartCarInfoRT, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartCarInfoRT, prizetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartCarInfoRT, robtriggertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartCarInfoRT, dartmembersinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartCarInfoRT, dartpathindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartCarInfoRT, gaineddartbuffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartCarInfoRT, enterscenetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartCarInfoRT, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartCarInfoRT, scenecellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartCarInfoRT, scenedynid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartCarInfoRT, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartCarInfoRT, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartCarInfoRT, dir_),
  };
  PBDartCarInfoRT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDartCarInfoRT_descriptor_,
      PBDartCarInfoRT::default_instance_,
      PBDartCarInfoRT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartCarInfoRT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartCarInfoRT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDartCarInfoRT));
  PBDartFlyTarget_descriptor_ = file->message_type(27);
  static const int PBDartFlyTarget_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartFlyTarget, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartFlyTarget, cellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartFlyTarget, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartFlyTarget, y_),
  };
  PBDartFlyTarget_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDartFlyTarget_descriptor_,
      PBDartFlyTarget::default_instance_,
      PBDartFlyTarget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartFlyTarget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartFlyTarget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDartFlyTarget));
  PBG2WDartCarFlyAsk_descriptor_ = file->message_type(28);
  static const int PBG2WDartCarFlyAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WDartCarFlyAsk, flypoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WDartCarFlyAsk, dartcarinfort_),
  };
  PBG2WDartCarFlyAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2WDartCarFlyAsk_descriptor_,
      PBG2WDartCarFlyAsk::default_instance_,
      PBG2WDartCarFlyAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WDartCarFlyAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WDartCarFlyAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2WDartCarFlyAsk));
  PBW2GDartCarFlyAck_descriptor_ = file->message_type(29);
  static const int PBW2GDartCarFlyAck_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GDartCarFlyAck, targetsceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GDartCarFlyAck, targetscenedynid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GDartCarFlyAck, sourcesceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GDartCarFlyAck, sourcescenedynid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GDartCarFlyAck, globaldartid_),
  };
  PBW2GDartCarFlyAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBW2GDartCarFlyAck_descriptor_,
      PBW2GDartCarFlyAck::default_instance_,
      PBW2GDartCarFlyAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GDartCarFlyAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GDartCarFlyAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBW2GDartCarFlyAck));
  PBW2GDartCarFlyCreateNtf_descriptor_ = file->message_type(30);
  static const int PBW2GDartCarFlyCreateNtf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GDartCarFlyCreateNtf, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GDartCarFlyCreateNtf, scenedynid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GDartCarFlyCreateNtf, dartcarinfort_),
  };
  PBW2GDartCarFlyCreateNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBW2GDartCarFlyCreateNtf_descriptor_,
      PBW2GDartCarFlyCreateNtf::default_instance_,
      PBW2GDartCarFlyCreateNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GDartCarFlyCreateNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GDartCarFlyCreateNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBW2GDartCarFlyCreateNtf));
  PBG2WDartCarUpdateAsk_descriptor_ = file->message_type(31);
  static const int PBG2WDartCarUpdateAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WDartCarUpdateAsk, dartcarinfort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WDartCarUpdateAsk, leftmembersplayerid_),
  };
  PBG2WDartCarUpdateAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2WDartCarUpdateAsk_descriptor_,
      PBG2WDartCarUpdateAsk::default_instance_,
      PBG2WDartCarUpdateAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WDartCarUpdateAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WDartCarUpdateAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2WDartCarUpdateAsk));
  PBG2WDartCarDeleteAsk_descriptor_ = file->message_type(32);
  static const int PBG2WDartCarDeleteAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WDartCarDeleteAsk, globaldartid_),
  };
  PBG2WDartCarDeleteAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2WDartCarDeleteAsk_descriptor_,
      PBG2WDartCarDeleteAsk::default_instance_,
      PBG2WDartCarDeleteAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WDartCarDeleteAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WDartCarDeleteAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2WDartCarDeleteAsk));
  PBW2GDartCarRobFinishedAck_descriptor_ = file->message_type(33);
  static const int PBW2GDartCarRobFinishedAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GDartCarRobFinishedAck, globaldartid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GDartCarRobFinishedAck, newstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GDartCarRobFinishedAck, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GDartCarRobFinishedAck, scenedynid_),
  };
  PBW2GDartCarRobFinishedAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBW2GDartCarRobFinishedAck_descriptor_,
      PBW2GDartCarRobFinishedAck::default_instance_,
      PBW2GDartCarRobFinishedAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GDartCarRobFinishedAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GDartCarRobFinishedAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBW2GDartCarRobFinishedAck));
  PBG2WDartCarRobFinishedAsk_descriptor_ = file->message_type(34);
  static const int PBG2WDartCarRobFinishedAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WDartCarRobFinishedAsk, globaldartid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WDartCarRobFinishedAsk, newstatus_),
  };
  PBG2WDartCarRobFinishedAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2WDartCarRobFinishedAsk_descriptor_,
      PBG2WDartCarRobFinishedAsk::default_instance_,
      PBG2WDartCarRobFinishedAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WDartCarRobFinishedAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WDartCarRobFinishedAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2WDartCarRobFinishedAsk));
  PBG2WDartCarLeaveRobAsk_descriptor_ = file->message_type(35);
  static const int PBG2WDartCarLeaveRobAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WDartCarLeaveRobAsk, globaldartid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WDartCarLeaveRobAsk, playerid_),
  };
  PBG2WDartCarLeaveRobAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2WDartCarLeaveRobAsk_descriptor_,
      PBG2WDartCarLeaveRobAsk::default_instance_,
      PBG2WDartCarLeaveRobAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WDartCarLeaveRobAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WDartCarLeaveRobAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2WDartCarLeaveRobAsk));
  PBW2GDartCarMemberLeaveNtf_descriptor_ = file->message_type(36);
  static const int PBW2GDartCarMemberLeaveNtf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GDartCarMemberLeaveNtf, globaldartid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GDartCarMemberLeaveNtf, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GDartCarMemberLeaveNtf, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GDartCarMemberLeaveNtf, scenedynid_),
  };
  PBW2GDartCarMemberLeaveNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBW2GDartCarMemberLeaveNtf_descriptor_,
      PBW2GDartCarMemberLeaveNtf::default_instance_,
      PBW2GDartCarMemberLeaveNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GDartCarMemberLeaveNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GDartCarMemberLeaveNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBW2GDartCarMemberLeaveNtf));
  PBG2WFindDartCarAsk_descriptor_ = file->message_type(37);
  static const int PBG2WFindDartCarAsk_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WFindDartCarAsk, globaldartid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WFindDartCarAsk, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WFindDartCarAsk, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WFindDartCarAsk, scenedynid_),
  };
  PBG2WFindDartCarAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2WFindDartCarAsk_descriptor_,
      PBG2WFindDartCarAsk::default_instance_,
      PBG2WFindDartCarAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WFindDartCarAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WFindDartCarAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2WFindDartCarAsk));
  PBW2GFindDartCarAck_descriptor_ = file->message_type(38);
  static const int PBW2GFindDartCarAck_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GFindDartCarAck, globaldartid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GFindDartCarAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GFindDartCarAck, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GFindDartCarAck, scenedynid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GFindDartCarAck, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GFindDartCarAck, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GFindDartCarAck, targetsceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GFindDartCarAck, targetscenedynid_),
  };
  PBW2GFindDartCarAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBW2GFindDartCarAck_descriptor_,
      PBW2GFindDartCarAck::default_instance_,
      PBW2GFindDartCarAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GFindDartCarAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GFindDartCarAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBW2GFindDartCarAck));
  PBG2WFactionBossHurtUpdate_descriptor_ = file->message_type(39);
  static const int PBG2WFactionBossHurtUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WFactionBossHurtUpdate, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WFactionBossHurtUpdate, hurt_),
  };
  PBG2WFactionBossHurtUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2WFactionBossHurtUpdate_descriptor_,
      PBG2WFactionBossHurtUpdate::default_instance_,
      PBG2WFactionBossHurtUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WFactionBossHurtUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WFactionBossHurtUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2WFactionBossHurtUpdate));
  PBG2WCommonTreasurePrizeAsk_descriptor_ = file->message_type(40);
  static const int PBG2WCommonTreasurePrizeAsk_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WCommonTreasurePrizeAsk, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WCommonTreasurePrizeAsk, treasuretype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WCommonTreasurePrizeAsk, treasureid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WCommonTreasurePrizeAsk, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WCommonTreasurePrizeAsk, posy_),
  };
  PBG2WCommonTreasurePrizeAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2WCommonTreasurePrizeAsk_descriptor_,
      PBG2WCommonTreasurePrizeAsk::default_instance_,
      PBG2WCommonTreasurePrizeAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WCommonTreasurePrizeAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WCommonTreasurePrizeAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2WCommonTreasurePrizeAsk));
  PBW2GCommonTreasurePrizeAck_descriptor_ = file->message_type(41);
  static const int PBW2GCommonTreasurePrizeAck_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GCommonTreasurePrizeAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GCommonTreasurePrizeAck, prizeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GCommonTreasurePrizeAck, treasureid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GCommonTreasurePrizeAck, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GCommonTreasurePrizeAck, posy_),
  };
  PBW2GCommonTreasurePrizeAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBW2GCommonTreasurePrizeAck_descriptor_,
      PBW2GCommonTreasurePrizeAck::default_instance_,
      PBW2GCommonTreasurePrizeAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GCommonTreasurePrizeAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GCommonTreasurePrizeAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBW2GCommonTreasurePrizeAck));
  PBW2GCorpsChangeJobAck_descriptor_ = file->message_type(42);
  static const int PBW2GCorpsChangeJobAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GCorpsChangeJobAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GCorpsChangeJobAck, addjob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GCorpsChangeJobAck, deljob_),
  };
  PBW2GCorpsChangeJobAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBW2GCorpsChangeJobAck_descriptor_,
      PBW2GCorpsChangeJobAck::default_instance_,
      PBW2GCorpsChangeJobAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GCorpsChangeJobAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GCorpsChangeJobAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBW2GCorpsChangeJobAck));
  PBW2GCommonForbitSpeak_descriptor_ = file->message_type(43);
  static const int PBW2GCommonForbitSpeak_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GCommonForbitSpeak, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GCommonForbitSpeak, forbittime_),
  };
  PBW2GCommonForbitSpeak_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBW2GCommonForbitSpeak_descriptor_,
      PBW2GCommonForbitSpeak::default_instance_,
      PBW2GCommonForbitSpeak_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GCommonForbitSpeak, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GCommonForbitSpeak, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBW2GCommonForbitSpeak));
  PBG2WManorBattleFieldFighterCountAsk_descriptor_ = file->message_type(44);
  static const int PBG2WManorBattleFieldFighterCountAsk_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WManorBattleFieldFighterCountAsk, manorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WManorBattleFieldFighterCountAsk, regionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WManorBattleFieldFighterCountAsk, defenderreport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WManorBattleFieldFighterCountAsk, challengerreport_),
  };
  PBG2WManorBattleFieldFighterCountAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2WManorBattleFieldFighterCountAsk_descriptor_,
      PBG2WManorBattleFieldFighterCountAsk::default_instance_,
      PBG2WManorBattleFieldFighterCountAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WManorBattleFieldFighterCountAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WManorBattleFieldFighterCountAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2WManorBattleFieldFighterCountAsk));
  PBG2WManorBattleFieldEnterAsk_descriptor_ = file->message_type(45);
  static const int PBG2WManorBattleFieldEnterAsk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WManorBattleFieldEnterAsk, manorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WManorBattleFieldEnterAsk, regionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WManorBattleFieldEnterAsk, playerid_),
  };
  PBG2WManorBattleFieldEnterAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2WManorBattleFieldEnterAsk_descriptor_,
      PBG2WManorBattleFieldEnterAsk::default_instance_,
      PBG2WManorBattleFieldEnterAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WManorBattleFieldEnterAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WManorBattleFieldEnterAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2WManorBattleFieldEnterAsk));
  PBW2GManorBattleFieldFightCountNtf_descriptor_ = file->message_type(46);
  static const int PBW2GManorBattleFieldFightCountNtf_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GManorBattleFieldFightCountNtf, manorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GManorBattleFieldFightCountNtf, regionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GManorBattleFieldFightCountNtf, defendercount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GManorBattleFieldFightCountNtf, challengercount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GManorBattleFieldFightCountNtf, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GManorBattleFieldFightCountNtf, dynid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GManorBattleFieldFightCountNtf, defenderscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GManorBattleFieldFightCountNtf, challengerscore_),
  };
  PBW2GManorBattleFieldFightCountNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBW2GManorBattleFieldFightCountNtf_descriptor_,
      PBW2GManorBattleFieldFightCountNtf::default_instance_,
      PBW2GManorBattleFieldFightCountNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GManorBattleFieldFightCountNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GManorBattleFieldFightCountNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBW2GManorBattleFieldFightCountNtf));
  PBW2GManorBattleFieldEnterAck_descriptor_ = file->message_type(47);
  static const int PBW2GManorBattleFieldEnterAck_offsets_[1] = {
  };
  PBW2GManorBattleFieldEnterAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBW2GManorBattleFieldEnterAck_descriptor_,
      PBW2GManorBattleFieldEnterAck::default_instance_,
      PBW2GManorBattleFieldEnterAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GManorBattleFieldEnterAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GManorBattleFieldEnterAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBW2GManorBattleFieldEnterAck));
  PBG2WManorSetActivityAsk_descriptor_ = file->message_type(48);
  static const int PBG2WManorSetActivityAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WManorSetActivityAsk, setapply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WManorSetActivityAsk, setfight_),
  };
  PBG2WManorSetActivityAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2WManorSetActivityAsk_descriptor_,
      PBG2WManorSetActivityAsk::default_instance_,
      PBG2WManorSetActivityAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WManorSetActivityAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WManorSetActivityAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2WManorSetActivityAsk));
  ManorCopymapNtfElites_descriptor_ = file->message_type(49);
  static const int ManorCopymapNtfElites_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManorCopymapNtfElites, elite_),
  };
  ManorCopymapNtfElites_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ManorCopymapNtfElites_descriptor_,
      ManorCopymapNtfElites::default_instance_,
      ManorCopymapNtfElites_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManorCopymapNtfElites, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManorCopymapNtfElites, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ManorCopymapNtfElites));
  PBW2GManorCopymapNtf_descriptor_ = file->message_type(50);
  static const int PBW2GManorCopymapNtf_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GManorCopymapNtf, manorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GManorCopymapNtf, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GManorCopymapNtf, dynid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GManorCopymapNtf, cellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GManorCopymapNtf, elites_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GManorCopymapNtf, manorinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GManorCopymapNtf, closeactivity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GManorCopymapNtf, stopfight_),
  };
  PBW2GManorCopymapNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBW2GManorCopymapNtf_descriptor_,
      PBW2GManorCopymapNtf::default_instance_,
      PBW2GManorCopymapNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GManorCopymapNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GManorCopymapNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBW2GManorCopymapNtf));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_WAGMsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCreateCellParam_descriptor_, &PBCreateCellParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBW2GSceneCreateCell_descriptor_, &PBW2GSceneCreateCell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2WSceneRegisterCell_descriptor_, &PBG2WSceneRegisterCell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2WSceneCloseCell_descriptor_, &PBG2WSceneCloseCell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2WScenePlayerCount_descriptor_, &PBG2WScenePlayerCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2WPlayerFlyMapAsk_descriptor_, &PBG2WPlayerFlyMapAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBW2GPlayerFlyMapAck_descriptor_, &PBW2GPlayerFlyMapAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBW2GPlayerExitAsk_descriptor_, &PBW2GPlayerExitAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2WPlayerExitAck_descriptor_, &PBG2WPlayerExitAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2WPlayerLogout_descriptor_, &PBG2WPlayerLogout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBW2GPlayerSaveDone_descriptor_, &PBW2GPlayerSaveDone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2WCopymapCreate_descriptor_, &PBG2WCopymapCreate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2WCopymapUpdateState_descriptor_, &PBG2WCopymapUpdateState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBW2GCopymapEnter_descriptor_, &PBW2GCopymapEnter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBW2GCopymapExit_descriptor_, &PBW2GCopymapExit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBW2GCopymapPlayerInfo_descriptor_, &PBW2GCopymapPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBW2GCopymapKickPlayer_descriptor_, &PBW2GCopymapKickPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2WCopymapInvite_descriptor_, &PBG2WCopymapInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2WCopymapAcceptInvite_descriptor_, &PBG2WCopymapAcceptInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2WCopymapTeamMemberInfo_descriptor_, &PBG2WCopymapTeamMemberInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2WCopymapAllCopymapCount_descriptor_, &PBG2WCopymapAllCopymapCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2WCopymapOneCopymapCount_descriptor_, &PBG2WCopymapOneCopymapCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2WGMWorldStartTime_descriptor_, &PBG2WGMWorldStartTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2WPlayerData_descriptor_, &PBG2WPlayerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDartBuffInfo_descriptor_, &PBDartBuffInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDartMemberInfo_descriptor_, &PBDartMemberInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDartCarInfoRT_descriptor_, &PBDartCarInfoRT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDartFlyTarget_descriptor_, &PBDartFlyTarget::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2WDartCarFlyAsk_descriptor_, &PBG2WDartCarFlyAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBW2GDartCarFlyAck_descriptor_, &PBW2GDartCarFlyAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBW2GDartCarFlyCreateNtf_descriptor_, &PBW2GDartCarFlyCreateNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2WDartCarUpdateAsk_descriptor_, &PBG2WDartCarUpdateAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2WDartCarDeleteAsk_descriptor_, &PBG2WDartCarDeleteAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBW2GDartCarRobFinishedAck_descriptor_, &PBW2GDartCarRobFinishedAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2WDartCarRobFinishedAsk_descriptor_, &PBG2WDartCarRobFinishedAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2WDartCarLeaveRobAsk_descriptor_, &PBG2WDartCarLeaveRobAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBW2GDartCarMemberLeaveNtf_descriptor_, &PBW2GDartCarMemberLeaveNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2WFindDartCarAsk_descriptor_, &PBG2WFindDartCarAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBW2GFindDartCarAck_descriptor_, &PBW2GFindDartCarAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2WFactionBossHurtUpdate_descriptor_, &PBG2WFactionBossHurtUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2WCommonTreasurePrizeAsk_descriptor_, &PBG2WCommonTreasurePrizeAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBW2GCommonTreasurePrizeAck_descriptor_, &PBW2GCommonTreasurePrizeAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBW2GCorpsChangeJobAck_descriptor_, &PBW2GCorpsChangeJobAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBW2GCommonForbitSpeak_descriptor_, &PBW2GCommonForbitSpeak::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2WManorBattleFieldFighterCountAsk_descriptor_, &PBG2WManorBattleFieldFighterCountAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2WManorBattleFieldEnterAsk_descriptor_, &PBG2WManorBattleFieldEnterAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBW2GManorBattleFieldFightCountNtf_descriptor_, &PBW2GManorBattleFieldFightCountNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBW2GManorBattleFieldEnterAck_descriptor_, &PBW2GManorBattleFieldEnterAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2WManorSetActivityAsk_descriptor_, &PBG2WManorSetActivityAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ManorCopymapNtfElites_descriptor_, &ManorCopymapNtfElites::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBW2GManorCopymapNtf_descriptor_, &PBW2GManorCopymapNtf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_WAGMsg_2eproto() {
  delete PBCreateCellParam::default_instance_;
  delete PBCreateCellParam_reflection_;
  delete PBW2GSceneCreateCell::default_instance_;
  delete PBW2GSceneCreateCell_reflection_;
  delete PBG2WSceneRegisterCell::default_instance_;
  delete PBG2WSceneRegisterCell_reflection_;
  delete PBG2WSceneCloseCell::default_instance_;
  delete PBG2WSceneCloseCell_reflection_;
  delete PBG2WScenePlayerCount::default_instance_;
  delete PBG2WScenePlayerCount_reflection_;
  delete PBG2WPlayerFlyMapAsk::default_instance_;
  delete PBG2WPlayerFlyMapAsk_reflection_;
  delete PBW2GPlayerFlyMapAck::default_instance_;
  delete PBW2GPlayerFlyMapAck_reflection_;
  delete PBW2GPlayerExitAsk::default_instance_;
  delete PBW2GPlayerExitAsk_reflection_;
  delete PBG2WPlayerExitAck::default_instance_;
  delete PBG2WPlayerExitAck_reflection_;
  delete PBG2WPlayerLogout::default_instance_;
  delete PBG2WPlayerLogout_reflection_;
  delete PBW2GPlayerSaveDone::default_instance_;
  delete PBW2GPlayerSaveDone_reflection_;
  delete PBG2WCopymapCreate::default_instance_;
  delete PBG2WCopymapCreate_reflection_;
  delete PBG2WCopymapUpdateState::default_instance_;
  delete PBG2WCopymapUpdateState_reflection_;
  delete PBW2GCopymapEnter::default_instance_;
  delete PBW2GCopymapEnter_reflection_;
  delete PBW2GCopymapExit::default_instance_;
  delete PBW2GCopymapExit_reflection_;
  delete PBW2GCopymapPlayerInfo::default_instance_;
  delete PBW2GCopymapPlayerInfo_reflection_;
  delete PBW2GCopymapKickPlayer::default_instance_;
  delete PBW2GCopymapKickPlayer_reflection_;
  delete PBG2WCopymapInvite::default_instance_;
  delete PBG2WCopymapInvite_reflection_;
  delete PBG2WCopymapAcceptInvite::default_instance_;
  delete PBG2WCopymapAcceptInvite_reflection_;
  delete PBG2WCopymapTeamMemberInfo::default_instance_;
  delete PBG2WCopymapTeamMemberInfo_reflection_;
  delete PBG2WCopymapAllCopymapCount::default_instance_;
  delete PBG2WCopymapAllCopymapCount_reflection_;
  delete PBG2WCopymapOneCopymapCount::default_instance_;
  delete PBG2WCopymapOneCopymapCount_reflection_;
  delete PBG2WGMWorldStartTime::default_instance_;
  delete PBG2WGMWorldStartTime_reflection_;
  delete PBG2WPlayerData::default_instance_;
  delete PBG2WPlayerData_reflection_;
  delete PBDartBuffInfo::default_instance_;
  delete PBDartBuffInfo_reflection_;
  delete PBDartMemberInfo::default_instance_;
  delete PBDartMemberInfo_reflection_;
  delete PBDartCarInfoRT::default_instance_;
  delete PBDartCarInfoRT_reflection_;
  delete PBDartFlyTarget::default_instance_;
  delete PBDartFlyTarget_reflection_;
  delete PBG2WDartCarFlyAsk::default_instance_;
  delete PBG2WDartCarFlyAsk_reflection_;
  delete PBW2GDartCarFlyAck::default_instance_;
  delete PBW2GDartCarFlyAck_reflection_;
  delete PBW2GDartCarFlyCreateNtf::default_instance_;
  delete PBW2GDartCarFlyCreateNtf_reflection_;
  delete PBG2WDartCarUpdateAsk::default_instance_;
  delete PBG2WDartCarUpdateAsk_reflection_;
  delete PBG2WDartCarDeleteAsk::default_instance_;
  delete PBG2WDartCarDeleteAsk_reflection_;
  delete PBW2GDartCarRobFinishedAck::default_instance_;
  delete PBW2GDartCarRobFinishedAck_reflection_;
  delete PBG2WDartCarRobFinishedAsk::default_instance_;
  delete PBG2WDartCarRobFinishedAsk_reflection_;
  delete PBG2WDartCarLeaveRobAsk::default_instance_;
  delete PBG2WDartCarLeaveRobAsk_reflection_;
  delete PBW2GDartCarMemberLeaveNtf::default_instance_;
  delete PBW2GDartCarMemberLeaveNtf_reflection_;
  delete PBG2WFindDartCarAsk::default_instance_;
  delete PBG2WFindDartCarAsk_reflection_;
  delete PBW2GFindDartCarAck::default_instance_;
  delete PBW2GFindDartCarAck_reflection_;
  delete PBG2WFactionBossHurtUpdate::default_instance_;
  delete PBG2WFactionBossHurtUpdate_reflection_;
  delete PBG2WCommonTreasurePrizeAsk::default_instance_;
  delete PBG2WCommonTreasurePrizeAsk_reflection_;
  delete PBW2GCommonTreasurePrizeAck::default_instance_;
  delete PBW2GCommonTreasurePrizeAck_reflection_;
  delete PBW2GCorpsChangeJobAck::default_instance_;
  delete PBW2GCorpsChangeJobAck_reflection_;
  delete PBW2GCommonForbitSpeak::default_instance_;
  delete PBW2GCommonForbitSpeak_reflection_;
  delete PBG2WManorBattleFieldFighterCountAsk::default_instance_;
  delete PBG2WManorBattleFieldFighterCountAsk_reflection_;
  delete PBG2WManorBattleFieldEnterAsk::default_instance_;
  delete PBG2WManorBattleFieldEnterAsk_reflection_;
  delete PBW2GManorBattleFieldFightCountNtf::default_instance_;
  delete PBW2GManorBattleFieldFightCountNtf_reflection_;
  delete PBW2GManorBattleFieldEnterAck::default_instance_;
  delete PBW2GManorBattleFieldEnterAck_reflection_;
  delete PBG2WManorSetActivityAsk::default_instance_;
  delete PBG2WManorSetActivityAsk_reflection_;
  delete ManorCopymapNtfElites::default_instance_;
  delete ManorCopymapNtfElites_reflection_;
  delete PBW2GManorCopymapNtf::default_instance_;
  delete PBW2GManorCopymapNtf_reflection_;
}

void protobuf_AddDesc_WAGMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PlayerStruct_2eproto();
  ::protobuf_AddDesc_GameStruct_2eproto();
  ::protobuf_AddDesc_GhostStruct_2eproto();
  ::protobuf_AddDesc_Faction_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014WAGMsg.proto\032\022PlayerStruct.proto\032\020Game"
    "Struct.proto\032\021GhostStruct.proto\032\rFaction"
    ".proto\"\275\002\n\021PBCreateCellParam\022!\n\007display\030"
    "\001 \001(\0132\020.PBPlayerDisplay\022\r\n\005npcid\030\002 \001(\r\022\""
    "\n\010dartInfo\030\003 \001(\0132\020.PBDartCarInfoRT\022\r\n\005le"
    "vel\030\004 \001(\r\022\022\n\nisteamfore\030\005 \001(\010\022 \n\006friend\030"
    "\006 \003(\0132\020.PBPlayerDisplay\022 \n\006enermy\030\007 \003(\0132"
    "\020.PBPlayerDisplay\022\020\n\010pvpwarid\030\010 \001(\r\022\014\n\004c"
    "ash\030\t \001(\r\022\033\n\005manor\030\n \001(\0132\014.PBManorInfo\022\027"
    "\n\017ismanordefender\030\013 \001(\010\022\025\n\rmanorregionid"
    "\030\014 \001(\r\"s\n\024PBW2GSceneCreateCell\022\017\n\007sceneI"
    "D\030\001 \001(\r\022\023\n\013sceneCellID\030\002 \001(\r\022\022\n\nsceneDyn"
    "ID\030\003 \001(\004\022!\n\005param\030\004 \001(\0132\022.PBCreateCellPa"
    "ram\"R\n\026PBG2WSceneRegisterCell\022\017\n\007sceneID"
    "\030\001 \001(\r\022\022\n\nsceneDynID\030\003 \001(\004\022\023\n\013sceneCellI"
    "D\030\002 \001(\r\":\n\023PBG2WSceneCloseCell\022\017\n\007sceneI"
    "D\030\001 \001(\r\022\022\n\nsceneDynID\030\002 \001(\004\"Q\n\025PBG2WScen"
    "ePlayerCount\022\017\n\007sceneID\030\001 \001(\r\022\022\n\nsceneDy"
    "nID\030\002 \001(\004\022\023\n\013playerCount\030\003 \001(\r\"\245\001\n\024PBG2W"
    "PlayerFlyMapAsk\022\020\n\010playerID\030\001 \001(\r\022\017\n\007sce"
    "neID\030\002 \001(\r\022\022\n\nsceneDynID\030\003 \001(\004\022\023\n\013sceneC"
    "ellID\030\004 \001(\r\022\025\n\rsceneRegionID\030\005 \001(\r\022\016\n\006fi"
    "xpos\030\006 \001(\010\022\014\n\004posx\030\007 \001(\002\022\014\n\004posy\030\010 \001(\002\"\343"
    "\001\n\024PBW2GPlayerFlyMapAck\022\020\n\010playerID\030\001 \001("
    "\r\022\017\n\007sceneID\030\002 \001(\r\022\022\n\nsceneDynID\030\003 \001(\004\022\023"
    "\n\013sceneCellID\030\004 \001(\r\022\025\n\rsceneRegionID\030\005 \001"
    "(\r\022\016\n\006fixpos\030\006 \001(\010\022\014\n\004posx\030\007 \001(\002\022\014\n\004posy"
    "\030\010 \001(\002\022 \n\tpbSvrInfo\030\t \001(\0132\r.PBServerInfo"
    "\022\014\n\004host\030\n \001(\t\022\014\n\004port\030\013 \001(\r\"J\n\022PBW2GPla"
    "yerExitAsk\022\021\n\taccountid\030\001 \001(\r\022\020\n\010playeri"
    "d\030\002 \001(\r\022\017\n\007loginsn\030\003 \001(\004\"J\n\022PBG2WPlayerE"
    "xitAck\022\021\n\taccountid\030\001 \001(\r\022\020\n\010playerid\030\002 "
    "\001(\r\022\017\n\007loginsn\030\003 \001(\004\"6\n\021PBG2WPlayerLogou"
    "t\022\020\n\010playerid\030\001 \001(\r\022\017\n\007loginsn\030\002 \001(\004\"H\n\023"
    "PBW2GPlayerSaveDone\022\020\n\010playerid\030\001 \001(\r\022\014\n"
    "\004type\030\002 \001(\r\022\021\n\tsaveorder\030\003 \001(\r\"J\n\022PBG2WC"
    "opymapCreate\022\021\n\tcopymapid\030\001 \001(\r\022!\n\005param"
    "\030\002 \001(\0132\022.PBCreateCellParam\"H\n\027PBG2WCopym"
    "apUpdateState\022\017\n\007sceneid\030\001 \001(\r\022\r\n\005dynid\030"
    "\002 \001(\004\022\r\n\005state\030\003 \001(\r\"e\n\021PBW2GCopymapEnte"
    "r\022\017\n\007sceneid\030\001 \001(\r\022\016\n\006cellid\030\002 \001(\r\022\r\n\005dy"
    "nid\030\003 \001(\004\022\020\n\010playerid\030\004 \001(\r\022\016\n\006reason\030\005 "
    "\001(\r\"$\n\020PBW2GCopymapExit\022\020\n\010playerid\030\001 \001("
    "\r\"k\n\026PBW2GCopymapPlayerInfo\022\017\n\007sceneid\030\001"
    " \001(\r\022\r\n\005dynid\030\002 \001(\004\022!\n\007display\030\003 \001(\0132\020.P"
    "BPlayerDisplay\022\016\n\006reason\030\004 \001(\r\"J\n\026PBW2GC"
    "opymapKickPlayer\022\017\n\007sceneid\030\001 \001(\r\022\r\n\005dyn"
    "id\030\002 \001(\004\022\020\n\010playerid\030\003 \001(\r\"K\n\022PBG2WCopym"
    "apInvite\022\021\n\tcopymapid\030\001 \001(\r\022\020\n\010playerid\030"
    "\002 \001(\r\022\020\n\010targetid\030\003 \001(\r\"a\n\030PBG2WCopymapA"
    "cceptInvite\022\021\n\tcopymapid\030\001 \001(\r\022\020\n\010player"
    "id\030\002 \001(\r\022\020\n\010targetid\030\003 \001(\r\022\016\n\006accept\030\004 \001"
    "(\010\"A\n\032PBG2WCopymapTeamMemberInfo\022\021\n\tcopy"
    "mapid\030\001 \001(\r\022\020\n\010playerid\030\002 \001(\r\"O\n\033PBG2WCo"
    "pymapAllCopymapCount\022\020\n\010playerid\030\001 \001(\r\022\036"
    "\n\004info\030\002 \001(\0132\020.PBPlayerCopymap\"M\n\033PBG2WC"
    "opymapOneCopymapCount\022\020\n\010playerid\030\001 \001(\r\022"
    "\034\n\004info\030\002 \001(\0132\016.PBCopymapInfo\"<\n\025PBG2WGM"
    "WorldStartTime\022\r\n\005stamp\030\001 \001(\004\022\024\n\014logicwo"
    "rldid\030\002 \001(\r\"M\n\017PBG2WPlayerData\022\'\n\rplayer"
    "display\030\001 \001(\0132\020.PBPlayerDisplay\022\021\n\tfight"
    "powr\030\002 \001(\r\"8\n\016PBDartBuffInfo\022\022\n\nDartBuff"
    "Id\030\001 \001(\r\022\022\n\nRemoveTime\030\002 \001(\004\"w\n\020PBDartMe"
    "mberInfo\022\020\n\010PlayerId\030\001 \001(\r\022\021\n\taddSupply\030"
    "\002 \001(\r\022\037\n\006avatar\030\003 \001(\0132\017.PBPlayerAvatar\022\035"
    "\n\025identitypersonalprize\030\004 \001(\r\"\262\003\n\017PBDart"
    "CarInfoRT\022\024\n\014globalDartID\030\001 \001(\004\022\016\n\006dartI"
    "D\030\002 \001(\r\022\032\n\022dartLeaderPlayerID\030\003 \001(\r\022\025\n\rl"
    "astCheckTime\030\004 \001(\004\022\022\n\nleftSecond\030\005 \001(\r\022\023"
    "\n\013totalSecond\030\006 \001(\r\022\016\n\006status\030\007 \001(\r\022\022\n\np"
    "rizeTimes\030\010 \001(\r\022\026\n\016robTriggerTime\030\t \001(\r\022"
    "*\n\017dartMembersInfo\030\n \003(\0132\021.PBDartMemberI"
    "nfo\022\025\n\rdartPathIndex\030\013 \001(\r\022)\n\020gainedDart"
    "BuffID\030\014 \003(\0132\017.PBDartBuffInfo\022\026\n\016enterSc"
    "eneTime\030\r \001(\r\022\017\n\007sceneID\030\016 \001(\r\022\023\n\013sceneC"
    "ellID\030\017 \001(\r\022\022\n\nsceneDynID\030\020 \001(\004\022\t\n\001x\030\021 \001"
    "(\002\022\t\n\001y\030\022 \001(\002\022\013\n\003dir\030\023 \001(\002\"H\n\017PBDartFlyT"
    "arget\022\017\n\007sceneID\030\001 \001(\r\022\016\n\006cellID\030\002 \001(\r\022\t"
    "\n\001x\030\003 \001(\002\022\t\n\001y\030\004 \001(\002\"a\n\022PBG2WDartCarFlyA"
    "sk\022\"\n\010flyPoint\030\001 \001(\0132\020.PBDartFlyTarget\022\'"
    "\n\rdartCarInfoRT\030\002 \001(\0132\020.PBDartCarInfoRT\""
    "\214\001\n\022PBW2GDartCarFlyAck\022\025\n\rtargetSceneID\030"
    "\001 \001(\r\022\030\n\020targetSceneDynID\030\002 \001(\004\022\025\n\rsourc"
    "eSceneID\030\003 \001(\r\022\030\n\020sourceSceneDynID\030\004 \001(\004"
    "\022\024\n\014globalDartID\030\005 \001(\004\"h\n\030PBW2GDartCarFl"
    "yCreateNtf\022\017\n\007sceneID\030\001 \001(\r\022\022\n\nsceneDynI"
    "D\030\002 \001(\004\022\'\n\rdartCarInfoRT\030\003 \001(\0132\020.PBDartC"
    "arInfoRT\"]\n\025PBG2WDartCarUpdateAsk\022\'\n\rdar"
    "tCarInfoRT\030\001 \001(\0132\020.PBDartCarInfoRT\022\033\n\023le"
    "ftMembersPlayerID\030\002 \003(\r\"-\n\025PBG2WDartCarD"
    "eleteAsk\022\024\n\014globalDartID\030\001 \001(\004\"j\n\032PBW2GD"
    "artCarRobFinishedAck\022\024\n\014globalDartID\030\001 \001"
    "(\004\022\021\n\tnewStatus\030\002 \001(\r\022\017\n\007sceneID\030\003 \001(\r\022\022"
    "\n\nsceneDynID\030\004 \001(\004\"E\n\032PBG2WDartCarRobFin"
    "ishedAsk\022\024\n\014globalDartID\030\001 \001(\004\022\021\n\tnewSta"
    "tus\030\002 \001(\r\"A\n\027PBG2WDartCarLeaveRobAsk\022\024\n\014"
    "globalDartID\030\001 \001(\004\022\020\n\010playerID\030\002 \001(\r\"i\n\032"
    "PBW2GDartCarMemberLeaveNtf\022\024\n\014globalDart"
    "ID\030\001 \001(\004\022\020\n\010playerID\030\002 \001(\r\022\017\n\007sceneID\030\003 "
    "\001(\r\022\022\n\nsceneDynID\030\004 \001(\004\"b\n\023PBG2WFindDart"
    "CarAsk\022\024\n\014globalDartID\030\001 \001(\004\022\020\n\010playerID"
    "\030\002 \001(\r\022\017\n\007sceneID\030\003 \001(\r\022\022\n\nsceneDynID\030\004 "
    "\001(\004\"\251\001\n\023PBW2GFindDartCarAck\022\024\n\014globalDar"
    "tID\030\001 \001(\004\022\020\n\010playerID\030\002 \001(\r\022\017\n\007sceneID\030\003"
    " \001(\r\022\022\n\nsceneDynID\030\004 \001(\004\022\t\n\001x\030\005 \001(\002\022\t\n\001y"
    "\030\006 \001(\002\022\025\n\rtargetsceneID\030\007 \001(\r\022\030\n\020targets"
    "ceneDynID\030\010 \001(\004\"M\n\032PBG2WFactionBossHurtU"
    "pdate\022!\n\007display\030\001 \001(\0132\020.PBPlayerDisplay"
    "\022\014\n\004hurt\030\002 \001(\004\"u\n\033PBG2WCommonTreasurePri"
    "zeAsk\022\020\n\010playerid\030\001 \001(\r\022\024\n\014treasuretype\030"
    "\002 \001(\r\022\022\n\ntreasureid\030\003 \001(\r\022\014\n\004posx\030\004 \001(\002\022"
    "\014\n\004posy\030\005 \001(\002\"p\n\033PBW2GCommonTreasurePriz"
    "eAck\022\020\n\010playerid\030\001 \001(\r\022\017\n\007prizeid\030\002 \001(\r\022"
    "\022\n\ntreasureid\030\003 \001(\r\022\014\n\004posx\030\004 \001(\002\022\014\n\004pos"
    "y\030\005 \001(\002\"J\n\026PBW2GCorpsChangeJobAck\022\020\n\010pla"
    "yerid\030\001 \001(\r\022\016\n\006addjob\030\002 \001(\r\022\016\n\006deljob\030\003 "
    "\001(\r\"=\n\026PBW2GCommonForbitSpeak\022\017\n\007channel"
    "\030\001 \001(\r\022\022\n\nforbittime\030\002 \001(\r\"\261\001\n$PBG2WMano"
    "rBattleFieldFighterCountAsk\022\017\n\007manorid\030\001"
    " \001(\r\022\020\n\010regionid\030\002 \001(\r\0221\n\016defenderreport"
    "\030\003 \001(\0132\031.PBManorBattleFieldReport\0223\n\020cha"
    "llengerreport\030\004 \001(\0132\031.PBManorBattleField"
    "Report\"T\n\035PBG2WManorBattleFieldEnterAsk\022"
    "\017\n\007manorid\030\001 \001(\r\022\020\n\010regionid\030\002 \001(\r\022\020\n\010pl"
    "ayerid\030\003 \001(\r\"\307\001\n\"PBW2GManorBattleFieldFi"
    "ghtCountNtf\022\017\n\007manorid\030\001 \001(\r\022\020\n\010regionid"
    "\030\002 \001(\r\022\025\n\rdefendercount\030\003 \001(\r\022\027\n\017challen"
    "gercount\030\004 \001(\r\022\017\n\007sceneid\030\005 \001(\r\022\r\n\005dynid"
    "\030\006 \001(\004\022\025\n\rdefenderscore\030\007 \001(\r\022\027\n\017challen"
    "gerscore\030\010 \001(\r\"\037\n\035PBW2GManorBattleFieldE"
    "nterAck\">\n\030PBG2WManorSetActivityAsk\022\020\n\010s"
    "etapply\030\001 \001(\010\022\020\n\010setfight\030\002 \001(\010\"&\n\025Manor"
    "CopymapNtfElites\022\r\n\005elite\030\001 \003(\r\"\312\001\n\024PBW2"
    "GManorCopymapNtf\022\017\n\007manorid\030\001 \001(\r\022\017\n\007sce"
    "neid\030\002 \001(\r\022\r\n\005dynid\030\003 \001(\004\022\016\n\006cellid\030\004 \001("
    "\r\022&\n\006elites\030\005 \001(\0132\026.ManorCopymapNtfElite"
    "s\022\037\n\tmanorInfo\030\006 \001(\0132\014.PBManorInfo\022\025\n\rcl"
    "oseactivity\030\007 \001(\010\022\021\n\tstopfight\030\010 \001(\010", 5516);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "WAGMsg.proto", &protobuf_RegisterTypes);
  PBCreateCellParam::default_instance_ = new PBCreateCellParam();
  PBW2GSceneCreateCell::default_instance_ = new PBW2GSceneCreateCell();
  PBG2WSceneRegisterCell::default_instance_ = new PBG2WSceneRegisterCell();
  PBG2WSceneCloseCell::default_instance_ = new PBG2WSceneCloseCell();
  PBG2WScenePlayerCount::default_instance_ = new PBG2WScenePlayerCount();
  PBG2WPlayerFlyMapAsk::default_instance_ = new PBG2WPlayerFlyMapAsk();
  PBW2GPlayerFlyMapAck::default_instance_ = new PBW2GPlayerFlyMapAck();
  PBW2GPlayerExitAsk::default_instance_ = new PBW2GPlayerExitAsk();
  PBG2WPlayerExitAck::default_instance_ = new PBG2WPlayerExitAck();
  PBG2WPlayerLogout::default_instance_ = new PBG2WPlayerLogout();
  PBW2GPlayerSaveDone::default_instance_ = new PBW2GPlayerSaveDone();
  PBG2WCopymapCreate::default_instance_ = new PBG2WCopymapCreate();
  PBG2WCopymapUpdateState::default_instance_ = new PBG2WCopymapUpdateState();
  PBW2GCopymapEnter::default_instance_ = new PBW2GCopymapEnter();
  PBW2GCopymapExit::default_instance_ = new PBW2GCopymapExit();
  PBW2GCopymapPlayerInfo::default_instance_ = new PBW2GCopymapPlayerInfo();
  PBW2GCopymapKickPlayer::default_instance_ = new PBW2GCopymapKickPlayer();
  PBG2WCopymapInvite::default_instance_ = new PBG2WCopymapInvite();
  PBG2WCopymapAcceptInvite::default_instance_ = new PBG2WCopymapAcceptInvite();
  PBG2WCopymapTeamMemberInfo::default_instance_ = new PBG2WCopymapTeamMemberInfo();
  PBG2WCopymapAllCopymapCount::default_instance_ = new PBG2WCopymapAllCopymapCount();
  PBG2WCopymapOneCopymapCount::default_instance_ = new PBG2WCopymapOneCopymapCount();
  PBG2WGMWorldStartTime::default_instance_ = new PBG2WGMWorldStartTime();
  PBG2WPlayerData::default_instance_ = new PBG2WPlayerData();
  PBDartBuffInfo::default_instance_ = new PBDartBuffInfo();
  PBDartMemberInfo::default_instance_ = new PBDartMemberInfo();
  PBDartCarInfoRT::default_instance_ = new PBDartCarInfoRT();
  PBDartFlyTarget::default_instance_ = new PBDartFlyTarget();
  PBG2WDartCarFlyAsk::default_instance_ = new PBG2WDartCarFlyAsk();
  PBW2GDartCarFlyAck::default_instance_ = new PBW2GDartCarFlyAck();
  PBW2GDartCarFlyCreateNtf::default_instance_ = new PBW2GDartCarFlyCreateNtf();
  PBG2WDartCarUpdateAsk::default_instance_ = new PBG2WDartCarUpdateAsk();
  PBG2WDartCarDeleteAsk::default_instance_ = new PBG2WDartCarDeleteAsk();
  PBW2GDartCarRobFinishedAck::default_instance_ = new PBW2GDartCarRobFinishedAck();
  PBG2WDartCarRobFinishedAsk::default_instance_ = new PBG2WDartCarRobFinishedAsk();
  PBG2WDartCarLeaveRobAsk::default_instance_ = new PBG2WDartCarLeaveRobAsk();
  PBW2GDartCarMemberLeaveNtf::default_instance_ = new PBW2GDartCarMemberLeaveNtf();
  PBG2WFindDartCarAsk::default_instance_ = new PBG2WFindDartCarAsk();
  PBW2GFindDartCarAck::default_instance_ = new PBW2GFindDartCarAck();
  PBG2WFactionBossHurtUpdate::default_instance_ = new PBG2WFactionBossHurtUpdate();
  PBG2WCommonTreasurePrizeAsk::default_instance_ = new PBG2WCommonTreasurePrizeAsk();
  PBW2GCommonTreasurePrizeAck::default_instance_ = new PBW2GCommonTreasurePrizeAck();
  PBW2GCorpsChangeJobAck::default_instance_ = new PBW2GCorpsChangeJobAck();
  PBW2GCommonForbitSpeak::default_instance_ = new PBW2GCommonForbitSpeak();
  PBG2WManorBattleFieldFighterCountAsk::default_instance_ = new PBG2WManorBattleFieldFighterCountAsk();
  PBG2WManorBattleFieldEnterAsk::default_instance_ = new PBG2WManorBattleFieldEnterAsk();
  PBW2GManorBattleFieldFightCountNtf::default_instance_ = new PBW2GManorBattleFieldFightCountNtf();
  PBW2GManorBattleFieldEnterAck::default_instance_ = new PBW2GManorBattleFieldEnterAck();
  PBG2WManorSetActivityAsk::default_instance_ = new PBG2WManorSetActivityAsk();
  ManorCopymapNtfElites::default_instance_ = new ManorCopymapNtfElites();
  PBW2GManorCopymapNtf::default_instance_ = new PBW2GManorCopymapNtf();
  PBCreateCellParam::default_instance_->InitAsDefaultInstance();
  PBW2GSceneCreateCell::default_instance_->InitAsDefaultInstance();
  PBG2WSceneRegisterCell::default_instance_->InitAsDefaultInstance();
  PBG2WSceneCloseCell::default_instance_->InitAsDefaultInstance();
  PBG2WScenePlayerCount::default_instance_->InitAsDefaultInstance();
  PBG2WPlayerFlyMapAsk::default_instance_->InitAsDefaultInstance();
  PBW2GPlayerFlyMapAck::default_instance_->InitAsDefaultInstance();
  PBW2GPlayerExitAsk::default_instance_->InitAsDefaultInstance();
  PBG2WPlayerExitAck::default_instance_->InitAsDefaultInstance();
  PBG2WPlayerLogout::default_instance_->InitAsDefaultInstance();
  PBW2GPlayerSaveDone::default_instance_->InitAsDefaultInstance();
  PBG2WCopymapCreate::default_instance_->InitAsDefaultInstance();
  PBG2WCopymapUpdateState::default_instance_->InitAsDefaultInstance();
  PBW2GCopymapEnter::default_instance_->InitAsDefaultInstance();
  PBW2GCopymapExit::default_instance_->InitAsDefaultInstance();
  PBW2GCopymapPlayerInfo::default_instance_->InitAsDefaultInstance();
  PBW2GCopymapKickPlayer::default_instance_->InitAsDefaultInstance();
  PBG2WCopymapInvite::default_instance_->InitAsDefaultInstance();
  PBG2WCopymapAcceptInvite::default_instance_->InitAsDefaultInstance();
  PBG2WCopymapTeamMemberInfo::default_instance_->InitAsDefaultInstance();
  PBG2WCopymapAllCopymapCount::default_instance_->InitAsDefaultInstance();
  PBG2WCopymapOneCopymapCount::default_instance_->InitAsDefaultInstance();
  PBG2WGMWorldStartTime::default_instance_->InitAsDefaultInstance();
  PBG2WPlayerData::default_instance_->InitAsDefaultInstance();
  PBDartBuffInfo::default_instance_->InitAsDefaultInstance();
  PBDartMemberInfo::default_instance_->InitAsDefaultInstance();
  PBDartCarInfoRT::default_instance_->InitAsDefaultInstance();
  PBDartFlyTarget::default_instance_->InitAsDefaultInstance();
  PBG2WDartCarFlyAsk::default_instance_->InitAsDefaultInstance();
  PBW2GDartCarFlyAck::default_instance_->InitAsDefaultInstance();
  PBW2GDartCarFlyCreateNtf::default_instance_->InitAsDefaultInstance();
  PBG2WDartCarUpdateAsk::default_instance_->InitAsDefaultInstance();
  PBG2WDartCarDeleteAsk::default_instance_->InitAsDefaultInstance();
  PBW2GDartCarRobFinishedAck::default_instance_->InitAsDefaultInstance();
  PBG2WDartCarRobFinishedAsk::default_instance_->InitAsDefaultInstance();
  PBG2WDartCarLeaveRobAsk::default_instance_->InitAsDefaultInstance();
  PBW2GDartCarMemberLeaveNtf::default_instance_->InitAsDefaultInstance();
  PBG2WFindDartCarAsk::default_instance_->InitAsDefaultInstance();
  PBW2GFindDartCarAck::default_instance_->InitAsDefaultInstance();
  PBG2WFactionBossHurtUpdate::default_instance_->InitAsDefaultInstance();
  PBG2WCommonTreasurePrizeAsk::default_instance_->InitAsDefaultInstance();
  PBW2GCommonTreasurePrizeAck::default_instance_->InitAsDefaultInstance();
  PBW2GCorpsChangeJobAck::default_instance_->InitAsDefaultInstance();
  PBW2GCommonForbitSpeak::default_instance_->InitAsDefaultInstance();
  PBG2WManorBattleFieldFighterCountAsk::default_instance_->InitAsDefaultInstance();
  PBG2WManorBattleFieldEnterAsk::default_instance_->InitAsDefaultInstance();
  PBW2GManorBattleFieldFightCountNtf::default_instance_->InitAsDefaultInstance();
  PBW2GManorBattleFieldEnterAck::default_instance_->InitAsDefaultInstance();
  PBG2WManorSetActivityAsk::default_instance_->InitAsDefaultInstance();
  ManorCopymapNtfElites::default_instance_->InitAsDefaultInstance();
  PBW2GManorCopymapNtf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WAGMsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WAGMsg_2eproto {
  StaticDescriptorInitializer_WAGMsg_2eproto() {
    protobuf_AddDesc_WAGMsg_2eproto();
  }
} static_descriptor_initializer_WAGMsg_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PBCreateCellParam::kDisplayFieldNumber;
const int PBCreateCellParam::kNpcidFieldNumber;
const int PBCreateCellParam::kDartInfoFieldNumber;
const int PBCreateCellParam::kLevelFieldNumber;
const int PBCreateCellParam::kIsteamforeFieldNumber;
const int PBCreateCellParam::kFriendFieldNumber;
const int PBCreateCellParam::kEnermyFieldNumber;
const int PBCreateCellParam::kPvpwaridFieldNumber;
const int PBCreateCellParam::kCashFieldNumber;
const int PBCreateCellParam::kManorFieldNumber;
const int PBCreateCellParam::kIsmanordefenderFieldNumber;
const int PBCreateCellParam::kManorregionidFieldNumber;
#endif  // !_MSC_VER

PBCreateCellParam::PBCreateCellParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCreateCellParam::InitAsDefaultInstance() {
  display_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
  dartinfo_ = const_cast< ::PBDartCarInfoRT*>(&::PBDartCarInfoRT::default_instance());
  manor_ = const_cast< ::PBManorInfo*>(&::PBManorInfo::default_instance());
}

PBCreateCellParam::PBCreateCellParam(const PBCreateCellParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCreateCellParam::SharedCtor() {
  _cached_size_ = 0;
  display_ = NULL;
  npcid_ = 0u;
  dartinfo_ = NULL;
  level_ = 0u;
  isteamfore_ = false;
  pvpwarid_ = 0u;
  cash_ = 0u;
  manor_ = NULL;
  ismanordefender_ = false;
  manorregionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCreateCellParam::~PBCreateCellParam() {
  SharedDtor();
}

void PBCreateCellParam::SharedDtor() {
  if (this != default_instance_) {
    delete display_;
    delete dartinfo_;
    delete manor_;
  }
}

void PBCreateCellParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCreateCellParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCreateCellParam_descriptor_;
}

const PBCreateCellParam& PBCreateCellParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBCreateCellParam* PBCreateCellParam::default_instance_ = NULL;

PBCreateCellParam* PBCreateCellParam::New() const {
  return new PBCreateCellParam;
}

void PBCreateCellParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_display()) {
      if (display_ != NULL) display_->::PBPlayerDisplay::Clear();
    }
    npcid_ = 0u;
    if (has_dartinfo()) {
      if (dartinfo_ != NULL) dartinfo_->::PBDartCarInfoRT::Clear();
    }
    level_ = 0u;
    isteamfore_ = false;
    pvpwarid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cash_ = 0u;
    if (has_manor()) {
      if (manor_ != NULL) manor_->::PBManorInfo::Clear();
    }
    ismanordefender_ = false;
    manorregionid_ = 0u;
  }
  friend__.Clear();
  enermy_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCreateCellParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay display = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_npcid;
        break;
      }
      
      // optional uint32 npcid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dartInfo;
        break;
      }
      
      // optional .PBDartCarInfoRT dartInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dartInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dartinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isteamfore;
        break;
      }
      
      // optional bool isteamfore = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isteamfore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isteamfore_)));
          set_has_isteamfore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_friend;
        break;
      }
      
      // repeated .PBPlayerDisplay friend = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friend_()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_friend;
        if (input->ExpectTag(58)) goto parse_enermy;
        break;
      }
      
      // repeated .PBPlayerDisplay enermy = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enermy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enermy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_enermy;
        if (input->ExpectTag(64)) goto parse_pvpwarid;
        break;
      }
      
      // optional uint32 pvpwarid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pvpwarid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pvpwarid_)));
          set_has_pvpwarid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cash;
        break;
      }
      
      // optional uint32 cash = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_manor;
        break;
      }
      
      // optional .PBManorInfo manor = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_manor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_ismanordefender;
        break;
      }
      
      // optional bool ismanordefender = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ismanordefender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismanordefender_)));
          set_has_ismanordefender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_manorregionid;
        break;
      }
      
      // optional uint32 manorregionid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manorregionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manorregionid_)));
          set_has_manorregionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCreateCellParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->display(), output);
  }
  
  // optional uint32 npcid = 2;
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->npcid(), output);
  }
  
  // optional .PBDartCarInfoRT dartInfo = 3;
  if (has_dartinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dartinfo(), output);
  }
  
  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }
  
  // optional bool isteamfore = 5;
  if (has_isteamfore()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isteamfore(), output);
  }
  
  // repeated .PBPlayerDisplay friend = 6;
  for (int i = 0; i < this->friend__size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->friend_(i), output);
  }
  
  // repeated .PBPlayerDisplay enermy = 7;
  for (int i = 0; i < this->enermy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->enermy(i), output);
  }
  
  // optional uint32 pvpwarid = 8;
  if (has_pvpwarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->pvpwarid(), output);
  }
  
  // optional uint32 cash = 9;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->cash(), output);
  }
  
  // optional .PBManorInfo manor = 10;
  if (has_manor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->manor(), output);
  }
  
  // optional bool ismanordefender = 11;
  if (has_ismanordefender()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->ismanordefender(), output);
  }
  
  // optional uint32 manorregionid = 12;
  if (has_manorregionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->manorregionid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCreateCellParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->display(), target);
  }
  
  // optional uint32 npcid = 2;
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->npcid(), target);
  }
  
  // optional .PBDartCarInfoRT dartInfo = 3;
  if (has_dartinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dartinfo(), target);
  }
  
  // optional uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }
  
  // optional bool isteamfore = 5;
  if (has_isteamfore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isteamfore(), target);
  }
  
  // repeated .PBPlayerDisplay friend = 6;
  for (int i = 0; i < this->friend__size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->friend_(i), target);
  }
  
  // repeated .PBPlayerDisplay enermy = 7;
  for (int i = 0; i < this->enermy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->enermy(i), target);
  }
  
  // optional uint32 pvpwarid = 8;
  if (has_pvpwarid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->pvpwarid(), target);
  }
  
  // optional uint32 cash = 9;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->cash(), target);
  }
  
  // optional .PBManorInfo manor = 10;
  if (has_manor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->manor(), target);
  }
  
  // optional bool ismanordefender = 11;
  if (has_ismanordefender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->ismanordefender(), target);
  }
  
  // optional uint32 manorregionid = 12;
  if (has_manorregionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->manorregionid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCreateCellParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay display = 1;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display());
    }
    
    // optional uint32 npcid = 2;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcid());
    }
    
    // optional .PBDartCarInfoRT dartInfo = 3;
    if (has_dartinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dartinfo());
    }
    
    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // optional bool isteamfore = 5;
    if (has_isteamfore()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 pvpwarid = 8;
    if (has_pvpwarid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pvpwarid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 cash = 9;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }
    
    // optional .PBManorInfo manor = 10;
    if (has_manor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->manor());
    }
    
    // optional bool ismanordefender = 11;
    if (has_ismanordefender()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 manorregionid = 12;
    if (has_manorregionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manorregionid());
    }
    
  }
  // repeated .PBPlayerDisplay friend = 6;
  total_size += 1 * this->friend__size();
  for (int i = 0; i < this->friend__size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friend_(i));
  }
  
  // repeated .PBPlayerDisplay enermy = 7;
  total_size += 1 * this->enermy_size();
  for (int i = 0; i < this->enermy_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enermy(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCreateCellParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCreateCellParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCreateCellParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCreateCellParam::MergeFrom(const PBCreateCellParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  friend__.MergeFrom(from.friend__);
  enermy_.MergeFrom(from.enermy_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_display()) {
      mutable_display()->::PBPlayerDisplay::MergeFrom(from.display());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
    if (from.has_dartinfo()) {
      mutable_dartinfo()->::PBDartCarInfoRT::MergeFrom(from.dartinfo());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_isteamfore()) {
      set_isteamfore(from.isteamfore());
    }
    if (from.has_pvpwarid()) {
      set_pvpwarid(from.pvpwarid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_manor()) {
      mutable_manor()->::PBManorInfo::MergeFrom(from.manor());
    }
    if (from.has_ismanordefender()) {
      set_ismanordefender(from.ismanordefender());
    }
    if (from.has_manorregionid()) {
      set_manorregionid(from.manorregionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCreateCellParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCreateCellParam::CopyFrom(const PBCreateCellParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCreateCellParam::IsInitialized() const {
  
  return true;
}

void PBCreateCellParam::Swap(PBCreateCellParam* other) {
  if (other != this) {
    std::swap(display_, other->display_);
    std::swap(npcid_, other->npcid_);
    std::swap(dartinfo_, other->dartinfo_);
    std::swap(level_, other->level_);
    std::swap(isteamfore_, other->isteamfore_);
    friend__.Swap(&other->friend__);
    enermy_.Swap(&other->enermy_);
    std::swap(pvpwarid_, other->pvpwarid_);
    std::swap(cash_, other->cash_);
    std::swap(manor_, other->manor_);
    std::swap(ismanordefender_, other->ismanordefender_);
    std::swap(manorregionid_, other->manorregionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCreateCellParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCreateCellParam_descriptor_;
  metadata.reflection = PBCreateCellParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBW2GSceneCreateCell::kSceneIDFieldNumber;
const int PBW2GSceneCreateCell::kSceneCellIDFieldNumber;
const int PBW2GSceneCreateCell::kSceneDynIDFieldNumber;
const int PBW2GSceneCreateCell::kParamFieldNumber;
#endif  // !_MSC_VER

PBW2GSceneCreateCell::PBW2GSceneCreateCell()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBW2GSceneCreateCell::InitAsDefaultInstance() {
  param_ = const_cast< ::PBCreateCellParam*>(&::PBCreateCellParam::default_instance());
}

PBW2GSceneCreateCell::PBW2GSceneCreateCell(const PBW2GSceneCreateCell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBW2GSceneCreateCell::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0u;
  scenecellid_ = 0u;
  scenedynid_ = GOOGLE_ULONGLONG(0);
  param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBW2GSceneCreateCell::~PBW2GSceneCreateCell() {
  SharedDtor();
}

void PBW2GSceneCreateCell::SharedDtor() {
  if (this != default_instance_) {
    delete param_;
  }
}

void PBW2GSceneCreateCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBW2GSceneCreateCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBW2GSceneCreateCell_descriptor_;
}

const PBW2GSceneCreateCell& PBW2GSceneCreateCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBW2GSceneCreateCell* PBW2GSceneCreateCell::default_instance_ = NULL;

PBW2GSceneCreateCell* PBW2GSceneCreateCell::New() const {
  return new PBW2GSceneCreateCell;
}

void PBW2GSceneCreateCell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = 0u;
    scenecellid_ = 0u;
    scenedynid_ = GOOGLE_ULONGLONG(0);
    if (has_param()) {
      if (param_ != NULL) param_->::PBCreateCellParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBW2GSceneCreateCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sceneID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sceneCellID;
        break;
      }
      
      // optional uint32 sceneCellID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneCellID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scenecellid_)));
          set_has_scenecellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sceneDynID;
        break;
      }
      
      // optional uint64 sceneDynID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneDynID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scenedynid_)));
          set_has_scenedynid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_param;
        break;
      }
      
      // optional .PBCreateCellParam param = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBW2GSceneCreateCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sceneID = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sceneid(), output);
  }
  
  // optional uint32 sceneCellID = 2;
  if (has_scenecellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->scenecellid(), output);
  }
  
  // optional uint64 sceneDynID = 3;
  if (has_scenedynid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->scenedynid(), output);
  }
  
  // optional .PBCreateCellParam param = 4;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->param(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBW2GSceneCreateCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sceneID = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sceneid(), target);
  }
  
  // optional uint32 sceneCellID = 2;
  if (has_scenecellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->scenecellid(), target);
  }
  
  // optional uint64 sceneDynID = 3;
  if (has_scenedynid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->scenedynid(), target);
  }
  
  // optional .PBCreateCellParam param = 4;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->param(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBW2GSceneCreateCell::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sceneID = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }
    
    // optional uint32 sceneCellID = 2;
    if (has_scenecellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scenecellid());
    }
    
    // optional uint64 sceneDynID = 3;
    if (has_scenedynid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scenedynid());
    }
    
    // optional .PBCreateCellParam param = 4;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->param());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBW2GSceneCreateCell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBW2GSceneCreateCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBW2GSceneCreateCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBW2GSceneCreateCell::MergeFrom(const PBW2GSceneCreateCell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_scenecellid()) {
      set_scenecellid(from.scenecellid());
    }
    if (from.has_scenedynid()) {
      set_scenedynid(from.scenedynid());
    }
    if (from.has_param()) {
      mutable_param()->::PBCreateCellParam::MergeFrom(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBW2GSceneCreateCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBW2GSceneCreateCell::CopyFrom(const PBW2GSceneCreateCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBW2GSceneCreateCell::IsInitialized() const {
  
  return true;
}

void PBW2GSceneCreateCell::Swap(PBW2GSceneCreateCell* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(scenecellid_, other->scenecellid_);
    std::swap(scenedynid_, other->scenedynid_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBW2GSceneCreateCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBW2GSceneCreateCell_descriptor_;
  metadata.reflection = PBW2GSceneCreateCell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2WSceneRegisterCell::kSceneIDFieldNumber;
const int PBG2WSceneRegisterCell::kSceneDynIDFieldNumber;
const int PBG2WSceneRegisterCell::kSceneCellIDFieldNumber;
#endif  // !_MSC_VER

PBG2WSceneRegisterCell::PBG2WSceneRegisterCell()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2WSceneRegisterCell::InitAsDefaultInstance() {
}

PBG2WSceneRegisterCell::PBG2WSceneRegisterCell(const PBG2WSceneRegisterCell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2WSceneRegisterCell::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0u;
  scenedynid_ = GOOGLE_ULONGLONG(0);
  scenecellid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2WSceneRegisterCell::~PBG2WSceneRegisterCell() {
  SharedDtor();
}

void PBG2WSceneRegisterCell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2WSceneRegisterCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2WSceneRegisterCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2WSceneRegisterCell_descriptor_;
}

const PBG2WSceneRegisterCell& PBG2WSceneRegisterCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBG2WSceneRegisterCell* PBG2WSceneRegisterCell::default_instance_ = NULL;

PBG2WSceneRegisterCell* PBG2WSceneRegisterCell::New() const {
  return new PBG2WSceneRegisterCell;
}

void PBG2WSceneRegisterCell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = 0u;
    scenedynid_ = GOOGLE_ULONGLONG(0);
    scenecellid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2WSceneRegisterCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sceneID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sceneCellID;
        break;
      }
      
      // optional uint32 sceneCellID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneCellID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scenecellid_)));
          set_has_scenecellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sceneDynID;
        break;
      }
      
      // optional uint64 sceneDynID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneDynID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scenedynid_)));
          set_has_scenedynid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2WSceneRegisterCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sceneID = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sceneid(), output);
  }
  
  // optional uint32 sceneCellID = 2;
  if (has_scenecellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->scenecellid(), output);
  }
  
  // optional uint64 sceneDynID = 3;
  if (has_scenedynid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->scenedynid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2WSceneRegisterCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sceneID = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sceneid(), target);
  }
  
  // optional uint32 sceneCellID = 2;
  if (has_scenecellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->scenecellid(), target);
  }
  
  // optional uint64 sceneDynID = 3;
  if (has_scenedynid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->scenedynid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2WSceneRegisterCell::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sceneID = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }
    
    // optional uint64 sceneDynID = 3;
    if (has_scenedynid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scenedynid());
    }
    
    // optional uint32 sceneCellID = 2;
    if (has_scenecellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scenecellid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2WSceneRegisterCell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2WSceneRegisterCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2WSceneRegisterCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2WSceneRegisterCell::MergeFrom(const PBG2WSceneRegisterCell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_scenedynid()) {
      set_scenedynid(from.scenedynid());
    }
    if (from.has_scenecellid()) {
      set_scenecellid(from.scenecellid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2WSceneRegisterCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2WSceneRegisterCell::CopyFrom(const PBG2WSceneRegisterCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2WSceneRegisterCell::IsInitialized() const {
  
  return true;
}

void PBG2WSceneRegisterCell::Swap(PBG2WSceneRegisterCell* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(scenedynid_, other->scenedynid_);
    std::swap(scenecellid_, other->scenecellid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2WSceneRegisterCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2WSceneRegisterCell_descriptor_;
  metadata.reflection = PBG2WSceneRegisterCell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2WSceneCloseCell::kSceneIDFieldNumber;
const int PBG2WSceneCloseCell::kSceneDynIDFieldNumber;
#endif  // !_MSC_VER

PBG2WSceneCloseCell::PBG2WSceneCloseCell()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2WSceneCloseCell::InitAsDefaultInstance() {
}

PBG2WSceneCloseCell::PBG2WSceneCloseCell(const PBG2WSceneCloseCell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2WSceneCloseCell::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0u;
  scenedynid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2WSceneCloseCell::~PBG2WSceneCloseCell() {
  SharedDtor();
}

void PBG2WSceneCloseCell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2WSceneCloseCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2WSceneCloseCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2WSceneCloseCell_descriptor_;
}

const PBG2WSceneCloseCell& PBG2WSceneCloseCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBG2WSceneCloseCell* PBG2WSceneCloseCell::default_instance_ = NULL;

PBG2WSceneCloseCell* PBG2WSceneCloseCell::New() const {
  return new PBG2WSceneCloseCell;
}

void PBG2WSceneCloseCell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = 0u;
    scenedynid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2WSceneCloseCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sceneID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sceneDynID;
        break;
      }
      
      // optional uint64 sceneDynID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneDynID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scenedynid_)));
          set_has_scenedynid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2WSceneCloseCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sceneID = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sceneid(), output);
  }
  
  // optional uint64 sceneDynID = 2;
  if (has_scenedynid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->scenedynid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2WSceneCloseCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sceneID = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sceneid(), target);
  }
  
  // optional uint64 sceneDynID = 2;
  if (has_scenedynid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->scenedynid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2WSceneCloseCell::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sceneID = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }
    
    // optional uint64 sceneDynID = 2;
    if (has_scenedynid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scenedynid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2WSceneCloseCell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2WSceneCloseCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2WSceneCloseCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2WSceneCloseCell::MergeFrom(const PBG2WSceneCloseCell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_scenedynid()) {
      set_scenedynid(from.scenedynid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2WSceneCloseCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2WSceneCloseCell::CopyFrom(const PBG2WSceneCloseCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2WSceneCloseCell::IsInitialized() const {
  
  return true;
}

void PBG2WSceneCloseCell::Swap(PBG2WSceneCloseCell* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(scenedynid_, other->scenedynid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2WSceneCloseCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2WSceneCloseCell_descriptor_;
  metadata.reflection = PBG2WSceneCloseCell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2WScenePlayerCount::kSceneIDFieldNumber;
const int PBG2WScenePlayerCount::kSceneDynIDFieldNumber;
const int PBG2WScenePlayerCount::kPlayerCountFieldNumber;
#endif  // !_MSC_VER

PBG2WScenePlayerCount::PBG2WScenePlayerCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2WScenePlayerCount::InitAsDefaultInstance() {
}

PBG2WScenePlayerCount::PBG2WScenePlayerCount(const PBG2WScenePlayerCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2WScenePlayerCount::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0u;
  scenedynid_ = GOOGLE_ULONGLONG(0);
  playercount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2WScenePlayerCount::~PBG2WScenePlayerCount() {
  SharedDtor();
}

void PBG2WScenePlayerCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2WScenePlayerCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2WScenePlayerCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2WScenePlayerCount_descriptor_;
}

const PBG2WScenePlayerCount& PBG2WScenePlayerCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBG2WScenePlayerCount* PBG2WScenePlayerCount::default_instance_ = NULL;

PBG2WScenePlayerCount* PBG2WScenePlayerCount::New() const {
  return new PBG2WScenePlayerCount;
}

void PBG2WScenePlayerCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = 0u;
    scenedynid_ = GOOGLE_ULONGLONG(0);
    playercount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2WScenePlayerCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sceneID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sceneDynID;
        break;
      }
      
      // optional uint64 sceneDynID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneDynID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scenedynid_)));
          set_has_scenedynid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerCount;
        break;
      }
      
      // optional uint32 playerCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playercount_)));
          set_has_playercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2WScenePlayerCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sceneID = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sceneid(), output);
  }
  
  // optional uint64 sceneDynID = 2;
  if (has_scenedynid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->scenedynid(), output);
  }
  
  // optional uint32 playerCount = 3;
  if (has_playercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->playercount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2WScenePlayerCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sceneID = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sceneid(), target);
  }
  
  // optional uint64 sceneDynID = 2;
  if (has_scenedynid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->scenedynid(), target);
  }
  
  // optional uint32 playerCount = 3;
  if (has_playercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->playercount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2WScenePlayerCount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sceneID = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }
    
    // optional uint64 sceneDynID = 2;
    if (has_scenedynid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scenedynid());
    }
    
    // optional uint32 playerCount = 3;
    if (has_playercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playercount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2WScenePlayerCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2WScenePlayerCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2WScenePlayerCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2WScenePlayerCount::MergeFrom(const PBG2WScenePlayerCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_scenedynid()) {
      set_scenedynid(from.scenedynid());
    }
    if (from.has_playercount()) {
      set_playercount(from.playercount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2WScenePlayerCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2WScenePlayerCount::CopyFrom(const PBG2WScenePlayerCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2WScenePlayerCount::IsInitialized() const {
  
  return true;
}

void PBG2WScenePlayerCount::Swap(PBG2WScenePlayerCount* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(scenedynid_, other->scenedynid_);
    std::swap(playercount_, other->playercount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2WScenePlayerCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2WScenePlayerCount_descriptor_;
  metadata.reflection = PBG2WScenePlayerCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2WPlayerFlyMapAsk::kPlayerIDFieldNumber;
const int PBG2WPlayerFlyMapAsk::kSceneIDFieldNumber;
const int PBG2WPlayerFlyMapAsk::kSceneDynIDFieldNumber;
const int PBG2WPlayerFlyMapAsk::kSceneCellIDFieldNumber;
const int PBG2WPlayerFlyMapAsk::kSceneRegionIDFieldNumber;
const int PBG2WPlayerFlyMapAsk::kFixposFieldNumber;
const int PBG2WPlayerFlyMapAsk::kPosxFieldNumber;
const int PBG2WPlayerFlyMapAsk::kPosyFieldNumber;
#endif  // !_MSC_VER

PBG2WPlayerFlyMapAsk::PBG2WPlayerFlyMapAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2WPlayerFlyMapAsk::InitAsDefaultInstance() {
}

PBG2WPlayerFlyMapAsk::PBG2WPlayerFlyMapAsk(const PBG2WPlayerFlyMapAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2WPlayerFlyMapAsk::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  sceneid_ = 0u;
  scenedynid_ = GOOGLE_ULONGLONG(0);
  scenecellid_ = 0u;
  sceneregionid_ = 0u;
  fixpos_ = false;
  posx_ = 0;
  posy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2WPlayerFlyMapAsk::~PBG2WPlayerFlyMapAsk() {
  SharedDtor();
}

void PBG2WPlayerFlyMapAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2WPlayerFlyMapAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2WPlayerFlyMapAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2WPlayerFlyMapAsk_descriptor_;
}

const PBG2WPlayerFlyMapAsk& PBG2WPlayerFlyMapAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBG2WPlayerFlyMapAsk* PBG2WPlayerFlyMapAsk::default_instance_ = NULL;

PBG2WPlayerFlyMapAsk* PBG2WPlayerFlyMapAsk::New() const {
  return new PBG2WPlayerFlyMapAsk;
}

void PBG2WPlayerFlyMapAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    sceneid_ = 0u;
    scenedynid_ = GOOGLE_ULONGLONG(0);
    scenecellid_ = 0u;
    sceneregionid_ = 0u;
    fixpos_ = false;
    posx_ = 0;
    posy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2WPlayerFlyMapAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sceneID;
        break;
      }
      
      // optional uint32 sceneID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sceneDynID;
        break;
      }
      
      // optional uint64 sceneDynID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneDynID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scenedynid_)));
          set_has_scenedynid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sceneCellID;
        break;
      }
      
      // optional uint32 sceneCellID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneCellID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scenecellid_)));
          set_has_scenecellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sceneRegionID;
        break;
      }
      
      // optional uint32 sceneRegionID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneRegionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneregionid_)));
          set_has_sceneregionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fixpos;
        break;
      }
      
      // optional bool fixpos = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fixpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fixpos_)));
          set_has_fixpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_posx;
        break;
      }
      
      // optional float posx = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_posy;
        break;
      }
      
      // optional float posy = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2WPlayerFlyMapAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional uint32 sceneID = 2;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sceneid(), output);
  }
  
  // optional uint64 sceneDynID = 3;
  if (has_scenedynid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->scenedynid(), output);
  }
  
  // optional uint32 sceneCellID = 4;
  if (has_scenecellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->scenecellid(), output);
  }
  
  // optional uint32 sceneRegionID = 5;
  if (has_sceneregionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sceneregionid(), output);
  }
  
  // optional bool fixpos = 6;
  if (has_fixpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->fixpos(), output);
  }
  
  // optional float posx = 7;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->posx(), output);
  }
  
  // optional float posy = 8;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->posy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2WPlayerFlyMapAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional uint32 sceneID = 2;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sceneid(), target);
  }
  
  // optional uint64 sceneDynID = 3;
  if (has_scenedynid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->scenedynid(), target);
  }
  
  // optional uint32 sceneCellID = 4;
  if (has_scenecellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->scenecellid(), target);
  }
  
  // optional uint32 sceneRegionID = 5;
  if (has_sceneregionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sceneregionid(), target);
  }
  
  // optional bool fixpos = 6;
  if (has_fixpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->fixpos(), target);
  }
  
  // optional float posx = 7;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->posx(), target);
  }
  
  // optional float posy = 8;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->posy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2WPlayerFlyMapAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 sceneID = 2;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }
    
    // optional uint64 sceneDynID = 3;
    if (has_scenedynid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scenedynid());
    }
    
    // optional uint32 sceneCellID = 4;
    if (has_scenecellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scenecellid());
    }
    
    // optional uint32 sceneRegionID = 5;
    if (has_sceneregionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneregionid());
    }
    
    // optional bool fixpos = 6;
    if (has_fixpos()) {
      total_size += 1 + 1;
    }
    
    // optional float posx = 7;
    if (has_posx()) {
      total_size += 1 + 4;
    }
    
    // optional float posy = 8;
    if (has_posy()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2WPlayerFlyMapAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2WPlayerFlyMapAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2WPlayerFlyMapAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2WPlayerFlyMapAsk::MergeFrom(const PBG2WPlayerFlyMapAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_scenedynid()) {
      set_scenedynid(from.scenedynid());
    }
    if (from.has_scenecellid()) {
      set_scenecellid(from.scenecellid());
    }
    if (from.has_sceneregionid()) {
      set_sceneregionid(from.sceneregionid());
    }
    if (from.has_fixpos()) {
      set_fixpos(from.fixpos());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2WPlayerFlyMapAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2WPlayerFlyMapAsk::CopyFrom(const PBG2WPlayerFlyMapAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2WPlayerFlyMapAsk::IsInitialized() const {
  
  return true;
}

void PBG2WPlayerFlyMapAsk::Swap(PBG2WPlayerFlyMapAsk* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(scenedynid_, other->scenedynid_);
    std::swap(scenecellid_, other->scenecellid_);
    std::swap(sceneregionid_, other->sceneregionid_);
    std::swap(fixpos_, other->fixpos_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2WPlayerFlyMapAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2WPlayerFlyMapAsk_descriptor_;
  metadata.reflection = PBG2WPlayerFlyMapAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBW2GPlayerFlyMapAck::kPlayerIDFieldNumber;
const int PBW2GPlayerFlyMapAck::kSceneIDFieldNumber;
const int PBW2GPlayerFlyMapAck::kSceneDynIDFieldNumber;
const int PBW2GPlayerFlyMapAck::kSceneCellIDFieldNumber;
const int PBW2GPlayerFlyMapAck::kSceneRegionIDFieldNumber;
const int PBW2GPlayerFlyMapAck::kFixposFieldNumber;
const int PBW2GPlayerFlyMapAck::kPosxFieldNumber;
const int PBW2GPlayerFlyMapAck::kPosyFieldNumber;
const int PBW2GPlayerFlyMapAck::kPbSvrInfoFieldNumber;
const int PBW2GPlayerFlyMapAck::kHostFieldNumber;
const int PBW2GPlayerFlyMapAck::kPortFieldNumber;
#endif  // !_MSC_VER

PBW2GPlayerFlyMapAck::PBW2GPlayerFlyMapAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBW2GPlayerFlyMapAck::InitAsDefaultInstance() {
  pbsvrinfo_ = const_cast< ::PBServerInfo*>(&::PBServerInfo::default_instance());
}

PBW2GPlayerFlyMapAck::PBW2GPlayerFlyMapAck(const PBW2GPlayerFlyMapAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBW2GPlayerFlyMapAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  sceneid_ = 0u;
  scenedynid_ = GOOGLE_ULONGLONG(0);
  scenecellid_ = 0u;
  sceneregionid_ = 0u;
  fixpos_ = false;
  posx_ = 0;
  posy_ = 0;
  pbsvrinfo_ = NULL;
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBW2GPlayerFlyMapAck::~PBW2GPlayerFlyMapAck() {
  SharedDtor();
}

void PBW2GPlayerFlyMapAck::SharedDtor() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (this != default_instance_) {
    delete pbsvrinfo_;
  }
}

void PBW2GPlayerFlyMapAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBW2GPlayerFlyMapAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBW2GPlayerFlyMapAck_descriptor_;
}

const PBW2GPlayerFlyMapAck& PBW2GPlayerFlyMapAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBW2GPlayerFlyMapAck* PBW2GPlayerFlyMapAck::default_instance_ = NULL;

PBW2GPlayerFlyMapAck* PBW2GPlayerFlyMapAck::New() const {
  return new PBW2GPlayerFlyMapAck;
}

void PBW2GPlayerFlyMapAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    sceneid_ = 0u;
    scenedynid_ = GOOGLE_ULONGLONG(0);
    scenecellid_ = 0u;
    sceneregionid_ = 0u;
    fixpos_ = false;
    posx_ = 0;
    posy_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_pbsvrinfo()) {
      if (pbsvrinfo_ != NULL) pbsvrinfo_->::PBServerInfo::Clear();
    }
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBW2GPlayerFlyMapAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sceneID;
        break;
      }
      
      // optional uint32 sceneID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sceneDynID;
        break;
      }
      
      // optional uint64 sceneDynID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneDynID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scenedynid_)));
          set_has_scenedynid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sceneCellID;
        break;
      }
      
      // optional uint32 sceneCellID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneCellID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scenecellid_)));
          set_has_scenecellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sceneRegionID;
        break;
      }
      
      // optional uint32 sceneRegionID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneRegionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneregionid_)));
          set_has_sceneregionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fixpos;
        break;
      }
      
      // optional bool fixpos = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fixpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fixpos_)));
          set_has_fixpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_posx;
        break;
      }
      
      // optional float posx = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_posy;
        break;
      }
      
      // optional float posy = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_pbSvrInfo;
        break;
      }
      
      // optional .PBServerInfo pbSvrInfo = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbSvrInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbsvrinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_host;
        break;
      }
      
      // optional string host = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_port;
        break;
      }
      
      // optional uint32 port = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBW2GPlayerFlyMapAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional uint32 sceneID = 2;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sceneid(), output);
  }
  
  // optional uint64 sceneDynID = 3;
  if (has_scenedynid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->scenedynid(), output);
  }
  
  // optional uint32 sceneCellID = 4;
  if (has_scenecellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->scenecellid(), output);
  }
  
  // optional uint32 sceneRegionID = 5;
  if (has_sceneregionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sceneregionid(), output);
  }
  
  // optional bool fixpos = 6;
  if (has_fixpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->fixpos(), output);
  }
  
  // optional float posx = 7;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->posx(), output);
  }
  
  // optional float posy = 8;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->posy(), output);
  }
  
  // optional .PBServerInfo pbSvrInfo = 9;
  if (has_pbsvrinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->pbsvrinfo(), output);
  }
  
  // optional string host = 10;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->host(), output);
  }
  
  // optional uint32 port = 11;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBW2GPlayerFlyMapAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional uint32 sceneID = 2;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sceneid(), target);
  }
  
  // optional uint64 sceneDynID = 3;
  if (has_scenedynid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->scenedynid(), target);
  }
  
  // optional uint32 sceneCellID = 4;
  if (has_scenecellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->scenecellid(), target);
  }
  
  // optional uint32 sceneRegionID = 5;
  if (has_sceneregionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sceneregionid(), target);
  }
  
  // optional bool fixpos = 6;
  if (has_fixpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->fixpos(), target);
  }
  
  // optional float posx = 7;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->posx(), target);
  }
  
  // optional float posy = 8;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->posy(), target);
  }
  
  // optional .PBServerInfo pbSvrInfo = 9;
  if (has_pbsvrinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->pbsvrinfo(), target);
  }
  
  // optional string host = 10;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->host(), target);
  }
  
  // optional uint32 port = 11;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBW2GPlayerFlyMapAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 sceneID = 2;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }
    
    // optional uint64 sceneDynID = 3;
    if (has_scenedynid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scenedynid());
    }
    
    // optional uint32 sceneCellID = 4;
    if (has_scenecellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scenecellid());
    }
    
    // optional uint32 sceneRegionID = 5;
    if (has_sceneregionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneregionid());
    }
    
    // optional bool fixpos = 6;
    if (has_fixpos()) {
      total_size += 1 + 1;
    }
    
    // optional float posx = 7;
    if (has_posx()) {
      total_size += 1 + 4;
    }
    
    // optional float posy = 8;
    if (has_posy()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .PBServerInfo pbSvrInfo = 9;
    if (has_pbsvrinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbsvrinfo());
    }
    
    // optional string host = 10;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }
    
    // optional uint32 port = 11;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBW2GPlayerFlyMapAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBW2GPlayerFlyMapAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBW2GPlayerFlyMapAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBW2GPlayerFlyMapAck::MergeFrom(const PBW2GPlayerFlyMapAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_scenedynid()) {
      set_scenedynid(from.scenedynid());
    }
    if (from.has_scenecellid()) {
      set_scenecellid(from.scenecellid());
    }
    if (from.has_sceneregionid()) {
      set_sceneregionid(from.sceneregionid());
    }
    if (from.has_fixpos()) {
      set_fixpos(from.fixpos());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pbsvrinfo()) {
      mutable_pbsvrinfo()->::PBServerInfo::MergeFrom(from.pbsvrinfo());
    }
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBW2GPlayerFlyMapAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBW2GPlayerFlyMapAck::CopyFrom(const PBW2GPlayerFlyMapAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBW2GPlayerFlyMapAck::IsInitialized() const {
  
  return true;
}

void PBW2GPlayerFlyMapAck::Swap(PBW2GPlayerFlyMapAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(scenedynid_, other->scenedynid_);
    std::swap(scenecellid_, other->scenecellid_);
    std::swap(sceneregionid_, other->sceneregionid_);
    std::swap(fixpos_, other->fixpos_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(pbsvrinfo_, other->pbsvrinfo_);
    std::swap(host_, other->host_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBW2GPlayerFlyMapAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBW2GPlayerFlyMapAck_descriptor_;
  metadata.reflection = PBW2GPlayerFlyMapAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBW2GPlayerExitAsk::kAccountidFieldNumber;
const int PBW2GPlayerExitAsk::kPlayeridFieldNumber;
const int PBW2GPlayerExitAsk::kLoginsnFieldNumber;
#endif  // !_MSC_VER

PBW2GPlayerExitAsk::PBW2GPlayerExitAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBW2GPlayerExitAsk::InitAsDefaultInstance() {
}

PBW2GPlayerExitAsk::PBW2GPlayerExitAsk(const PBW2GPlayerExitAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBW2GPlayerExitAsk::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  playerid_ = 0u;
  loginsn_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBW2GPlayerExitAsk::~PBW2GPlayerExitAsk() {
  SharedDtor();
}

void PBW2GPlayerExitAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBW2GPlayerExitAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBW2GPlayerExitAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBW2GPlayerExitAsk_descriptor_;
}

const PBW2GPlayerExitAsk& PBW2GPlayerExitAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBW2GPlayerExitAsk* PBW2GPlayerExitAsk::default_instance_ = NULL;

PBW2GPlayerExitAsk* PBW2GPlayerExitAsk::New() const {
  return new PBW2GPlayerExitAsk;
}

void PBW2GPlayerExitAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
    playerid_ = 0u;
    loginsn_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBW2GPlayerExitAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }
      
      // optional uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_loginsn;
        break;
      }
      
      // optional uint64 loginsn = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginsn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &loginsn_)));
          set_has_loginsn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBW2GPlayerExitAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }
  
  // optional uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }
  
  // optional uint64 loginsn = 3;
  if (has_loginsn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->loginsn(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBW2GPlayerExitAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }
  
  // optional uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  // optional uint64 loginsn = 3;
  if (has_loginsn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->loginsn(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBW2GPlayerExitAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint64 loginsn = 3;
    if (has_loginsn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->loginsn());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBW2GPlayerExitAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBW2GPlayerExitAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBW2GPlayerExitAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBW2GPlayerExitAsk::MergeFrom(const PBW2GPlayerExitAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_loginsn()) {
      set_loginsn(from.loginsn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBW2GPlayerExitAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBW2GPlayerExitAsk::CopyFrom(const PBW2GPlayerExitAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBW2GPlayerExitAsk::IsInitialized() const {
  
  return true;
}

void PBW2GPlayerExitAsk::Swap(PBW2GPlayerExitAsk* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(playerid_, other->playerid_);
    std::swap(loginsn_, other->loginsn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBW2GPlayerExitAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBW2GPlayerExitAsk_descriptor_;
  metadata.reflection = PBW2GPlayerExitAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2WPlayerExitAck::kAccountidFieldNumber;
const int PBG2WPlayerExitAck::kPlayeridFieldNumber;
const int PBG2WPlayerExitAck::kLoginsnFieldNumber;
#endif  // !_MSC_VER

PBG2WPlayerExitAck::PBG2WPlayerExitAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2WPlayerExitAck::InitAsDefaultInstance() {
}

PBG2WPlayerExitAck::PBG2WPlayerExitAck(const PBG2WPlayerExitAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2WPlayerExitAck::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  playerid_ = 0u;
  loginsn_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2WPlayerExitAck::~PBG2WPlayerExitAck() {
  SharedDtor();
}

void PBG2WPlayerExitAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2WPlayerExitAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2WPlayerExitAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2WPlayerExitAck_descriptor_;
}

const PBG2WPlayerExitAck& PBG2WPlayerExitAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBG2WPlayerExitAck* PBG2WPlayerExitAck::default_instance_ = NULL;

PBG2WPlayerExitAck* PBG2WPlayerExitAck::New() const {
  return new PBG2WPlayerExitAck;
}

void PBG2WPlayerExitAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
    playerid_ = 0u;
    loginsn_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2WPlayerExitAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }
      
      // optional uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_loginsn;
        break;
      }
      
      // optional uint64 loginsn = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginsn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &loginsn_)));
          set_has_loginsn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2WPlayerExitAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }
  
  // optional uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }
  
  // optional uint64 loginsn = 3;
  if (has_loginsn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->loginsn(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2WPlayerExitAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }
  
  // optional uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  // optional uint64 loginsn = 3;
  if (has_loginsn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->loginsn(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2WPlayerExitAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint64 loginsn = 3;
    if (has_loginsn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->loginsn());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2WPlayerExitAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2WPlayerExitAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2WPlayerExitAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2WPlayerExitAck::MergeFrom(const PBG2WPlayerExitAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_loginsn()) {
      set_loginsn(from.loginsn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2WPlayerExitAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2WPlayerExitAck::CopyFrom(const PBG2WPlayerExitAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2WPlayerExitAck::IsInitialized() const {
  
  return true;
}

void PBG2WPlayerExitAck::Swap(PBG2WPlayerExitAck* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(playerid_, other->playerid_);
    std::swap(loginsn_, other->loginsn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2WPlayerExitAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2WPlayerExitAck_descriptor_;
  metadata.reflection = PBG2WPlayerExitAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2WPlayerLogout::kPlayeridFieldNumber;
const int PBG2WPlayerLogout::kLoginsnFieldNumber;
#endif  // !_MSC_VER

PBG2WPlayerLogout::PBG2WPlayerLogout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2WPlayerLogout::InitAsDefaultInstance() {
}

PBG2WPlayerLogout::PBG2WPlayerLogout(const PBG2WPlayerLogout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2WPlayerLogout::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  loginsn_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2WPlayerLogout::~PBG2WPlayerLogout() {
  SharedDtor();
}

void PBG2WPlayerLogout::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2WPlayerLogout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2WPlayerLogout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2WPlayerLogout_descriptor_;
}

const PBG2WPlayerLogout& PBG2WPlayerLogout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBG2WPlayerLogout* PBG2WPlayerLogout::default_instance_ = NULL;

PBG2WPlayerLogout* PBG2WPlayerLogout::New() const {
  return new PBG2WPlayerLogout;
}

void PBG2WPlayerLogout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    loginsn_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2WPlayerLogout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_loginsn;
        break;
      }
      
      // optional uint64 loginsn = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginsn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &loginsn_)));
          set_has_loginsn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2WPlayerLogout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional uint64 loginsn = 2;
  if (has_loginsn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->loginsn(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2WPlayerLogout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional uint64 loginsn = 2;
  if (has_loginsn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->loginsn(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2WPlayerLogout::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint64 loginsn = 2;
    if (has_loginsn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->loginsn());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2WPlayerLogout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2WPlayerLogout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2WPlayerLogout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2WPlayerLogout::MergeFrom(const PBG2WPlayerLogout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_loginsn()) {
      set_loginsn(from.loginsn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2WPlayerLogout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2WPlayerLogout::CopyFrom(const PBG2WPlayerLogout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2WPlayerLogout::IsInitialized() const {
  
  return true;
}

void PBG2WPlayerLogout::Swap(PBG2WPlayerLogout* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(loginsn_, other->loginsn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2WPlayerLogout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2WPlayerLogout_descriptor_;
  metadata.reflection = PBG2WPlayerLogout_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBW2GPlayerSaveDone::kPlayeridFieldNumber;
const int PBW2GPlayerSaveDone::kTypeFieldNumber;
const int PBW2GPlayerSaveDone::kSaveorderFieldNumber;
#endif  // !_MSC_VER

PBW2GPlayerSaveDone::PBW2GPlayerSaveDone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBW2GPlayerSaveDone::InitAsDefaultInstance() {
}

PBW2GPlayerSaveDone::PBW2GPlayerSaveDone(const PBW2GPlayerSaveDone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBW2GPlayerSaveDone::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  type_ = 0u;
  saveorder_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBW2GPlayerSaveDone::~PBW2GPlayerSaveDone() {
  SharedDtor();
}

void PBW2GPlayerSaveDone::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBW2GPlayerSaveDone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBW2GPlayerSaveDone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBW2GPlayerSaveDone_descriptor_;
}

const PBW2GPlayerSaveDone& PBW2GPlayerSaveDone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBW2GPlayerSaveDone* PBW2GPlayerSaveDone::default_instance_ = NULL;

PBW2GPlayerSaveDone* PBW2GPlayerSaveDone::New() const {
  return new PBW2GPlayerSaveDone;
}

void PBW2GPlayerSaveDone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    type_ = 0u;
    saveorder_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBW2GPlayerSaveDone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_saveorder;
        break;
      }
      
      // optional uint32 saveorder = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_saveorder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &saveorder_)));
          set_has_saveorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBW2GPlayerSaveDone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }
  
  // optional uint32 saveorder = 3;
  if (has_saveorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->saveorder(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBW2GPlayerSaveDone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }
  
  // optional uint32 saveorder = 3;
  if (has_saveorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->saveorder(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBW2GPlayerSaveDone::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 saveorder = 3;
    if (has_saveorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->saveorder());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBW2GPlayerSaveDone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBW2GPlayerSaveDone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBW2GPlayerSaveDone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBW2GPlayerSaveDone::MergeFrom(const PBW2GPlayerSaveDone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_saveorder()) {
      set_saveorder(from.saveorder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBW2GPlayerSaveDone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBW2GPlayerSaveDone::CopyFrom(const PBW2GPlayerSaveDone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBW2GPlayerSaveDone::IsInitialized() const {
  
  return true;
}

void PBW2GPlayerSaveDone::Swap(PBW2GPlayerSaveDone* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(type_, other->type_);
    std::swap(saveorder_, other->saveorder_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBW2GPlayerSaveDone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBW2GPlayerSaveDone_descriptor_;
  metadata.reflection = PBW2GPlayerSaveDone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2WCopymapCreate::kCopymapidFieldNumber;
const int PBG2WCopymapCreate::kParamFieldNumber;
#endif  // !_MSC_VER

PBG2WCopymapCreate::PBG2WCopymapCreate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2WCopymapCreate::InitAsDefaultInstance() {
  param_ = const_cast< ::PBCreateCellParam*>(&::PBCreateCellParam::default_instance());
}

PBG2WCopymapCreate::PBG2WCopymapCreate(const PBG2WCopymapCreate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2WCopymapCreate::SharedCtor() {
  _cached_size_ = 0;
  copymapid_ = 0u;
  param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2WCopymapCreate::~PBG2WCopymapCreate() {
  SharedDtor();
}

void PBG2WCopymapCreate::SharedDtor() {
  if (this != default_instance_) {
    delete param_;
  }
}

void PBG2WCopymapCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2WCopymapCreate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2WCopymapCreate_descriptor_;
}

const PBG2WCopymapCreate& PBG2WCopymapCreate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBG2WCopymapCreate* PBG2WCopymapCreate::default_instance_ = NULL;

PBG2WCopymapCreate* PBG2WCopymapCreate::New() const {
  return new PBG2WCopymapCreate;
}

void PBG2WCopymapCreate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copymapid_ = 0u;
    if (has_param()) {
      if (param_ != NULL) param_->::PBCreateCellParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2WCopymapCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 copymapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_param;
        break;
      }
      
      // optional .PBCreateCellParam param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2WCopymapCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->copymapid(), output);
  }
  
  // optional .PBCreateCellParam param = 2;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->param(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2WCopymapCreate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->copymapid(), target);
  }
  
  // optional .PBCreateCellParam param = 2;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->param(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2WCopymapCreate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 copymapid = 1;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }
    
    // optional .PBCreateCellParam param = 2;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->param());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2WCopymapCreate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2WCopymapCreate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2WCopymapCreate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2WCopymapCreate::MergeFrom(const PBG2WCopymapCreate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
    if (from.has_param()) {
      mutable_param()->::PBCreateCellParam::MergeFrom(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2WCopymapCreate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2WCopymapCreate::CopyFrom(const PBG2WCopymapCreate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2WCopymapCreate::IsInitialized() const {
  
  return true;
}

void PBG2WCopymapCreate::Swap(PBG2WCopymapCreate* other) {
  if (other != this) {
    std::swap(copymapid_, other->copymapid_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2WCopymapCreate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2WCopymapCreate_descriptor_;
  metadata.reflection = PBG2WCopymapCreate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2WCopymapUpdateState::kSceneidFieldNumber;
const int PBG2WCopymapUpdateState::kDynidFieldNumber;
const int PBG2WCopymapUpdateState::kStateFieldNumber;
#endif  // !_MSC_VER

PBG2WCopymapUpdateState::PBG2WCopymapUpdateState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2WCopymapUpdateState::InitAsDefaultInstance() {
}

PBG2WCopymapUpdateState::PBG2WCopymapUpdateState(const PBG2WCopymapUpdateState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2WCopymapUpdateState::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0u;
  dynid_ = GOOGLE_ULONGLONG(0);
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2WCopymapUpdateState::~PBG2WCopymapUpdateState() {
  SharedDtor();
}

void PBG2WCopymapUpdateState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2WCopymapUpdateState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2WCopymapUpdateState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2WCopymapUpdateState_descriptor_;
}

const PBG2WCopymapUpdateState& PBG2WCopymapUpdateState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBG2WCopymapUpdateState* PBG2WCopymapUpdateState::default_instance_ = NULL;

PBG2WCopymapUpdateState* PBG2WCopymapUpdateState::New() const {
  return new PBG2WCopymapUpdateState;
}

void PBG2WCopymapUpdateState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = 0u;
    dynid_ = GOOGLE_ULONGLONG(0);
    state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2WCopymapUpdateState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sceneid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dynid;
        break;
      }
      
      // optional uint64 dynid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dynid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dynid_)));
          set_has_dynid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }
      
      // optional uint32 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2WCopymapUpdateState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sceneid = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sceneid(), output);
  }
  
  // optional uint64 dynid = 2;
  if (has_dynid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dynid(), output);
  }
  
  // optional uint32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2WCopymapUpdateState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sceneid = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sceneid(), target);
  }
  
  // optional uint64 dynid = 2;
  if (has_dynid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dynid(), target);
  }
  
  // optional uint32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2WCopymapUpdateState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sceneid = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }
    
    // optional uint64 dynid = 2;
    if (has_dynid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dynid());
    }
    
    // optional uint32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2WCopymapUpdateState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2WCopymapUpdateState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2WCopymapUpdateState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2WCopymapUpdateState::MergeFrom(const PBG2WCopymapUpdateState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_dynid()) {
      set_dynid(from.dynid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2WCopymapUpdateState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2WCopymapUpdateState::CopyFrom(const PBG2WCopymapUpdateState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2WCopymapUpdateState::IsInitialized() const {
  
  return true;
}

void PBG2WCopymapUpdateState::Swap(PBG2WCopymapUpdateState* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(dynid_, other->dynid_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2WCopymapUpdateState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2WCopymapUpdateState_descriptor_;
  metadata.reflection = PBG2WCopymapUpdateState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBW2GCopymapEnter::kSceneidFieldNumber;
const int PBW2GCopymapEnter::kCellidFieldNumber;
const int PBW2GCopymapEnter::kDynidFieldNumber;
const int PBW2GCopymapEnter::kPlayeridFieldNumber;
const int PBW2GCopymapEnter::kReasonFieldNumber;
#endif  // !_MSC_VER

PBW2GCopymapEnter::PBW2GCopymapEnter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBW2GCopymapEnter::InitAsDefaultInstance() {
}

PBW2GCopymapEnter::PBW2GCopymapEnter(const PBW2GCopymapEnter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBW2GCopymapEnter::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0u;
  cellid_ = 0u;
  dynid_ = GOOGLE_ULONGLONG(0);
  playerid_ = 0u;
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBW2GCopymapEnter::~PBW2GCopymapEnter() {
  SharedDtor();
}

void PBW2GCopymapEnter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBW2GCopymapEnter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBW2GCopymapEnter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBW2GCopymapEnter_descriptor_;
}

const PBW2GCopymapEnter& PBW2GCopymapEnter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBW2GCopymapEnter* PBW2GCopymapEnter::default_instance_ = NULL;

PBW2GCopymapEnter* PBW2GCopymapEnter::New() const {
  return new PBW2GCopymapEnter;
}

void PBW2GCopymapEnter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = 0u;
    cellid_ = 0u;
    dynid_ = GOOGLE_ULONGLONG(0);
    playerid_ = 0u;
    reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBW2GCopymapEnter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sceneid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cellid;
        break;
      }
      
      // optional uint32 cellid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cellid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
          set_has_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dynid;
        break;
      }
      
      // optional uint64 dynid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dynid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dynid_)));
          set_has_dynid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_playerid;
        break;
      }
      
      // optional uint32 playerid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reason;
        break;
      }
      
      // optional uint32 reason = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBW2GCopymapEnter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sceneid = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sceneid(), output);
  }
  
  // optional uint32 cellid = 2;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cellid(), output);
  }
  
  // optional uint64 dynid = 3;
  if (has_dynid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->dynid(), output);
  }
  
  // optional uint32 playerid = 4;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->playerid(), output);
  }
  
  // optional uint32 reason = 5;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->reason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBW2GCopymapEnter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sceneid = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sceneid(), target);
  }
  
  // optional uint32 cellid = 2;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cellid(), target);
  }
  
  // optional uint64 dynid = 3;
  if (has_dynid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->dynid(), target);
  }
  
  // optional uint32 playerid = 4;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->playerid(), target);
  }
  
  // optional uint32 reason = 5;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->reason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBW2GCopymapEnter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sceneid = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }
    
    // optional uint32 cellid = 2;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cellid());
    }
    
    // optional uint64 dynid = 3;
    if (has_dynid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dynid());
    }
    
    // optional uint32 playerid = 4;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 reason = 5;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBW2GCopymapEnter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBW2GCopymapEnter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBW2GCopymapEnter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBW2GCopymapEnter::MergeFrom(const PBW2GCopymapEnter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_cellid()) {
      set_cellid(from.cellid());
    }
    if (from.has_dynid()) {
      set_dynid(from.dynid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBW2GCopymapEnter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBW2GCopymapEnter::CopyFrom(const PBW2GCopymapEnter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBW2GCopymapEnter::IsInitialized() const {
  
  return true;
}

void PBW2GCopymapEnter::Swap(PBW2GCopymapEnter* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(cellid_, other->cellid_);
    std::swap(dynid_, other->dynid_);
    std::swap(playerid_, other->playerid_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBW2GCopymapEnter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBW2GCopymapEnter_descriptor_;
  metadata.reflection = PBW2GCopymapEnter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBW2GCopymapExit::kPlayeridFieldNumber;
#endif  // !_MSC_VER

PBW2GCopymapExit::PBW2GCopymapExit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBW2GCopymapExit::InitAsDefaultInstance() {
}

PBW2GCopymapExit::PBW2GCopymapExit(const PBW2GCopymapExit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBW2GCopymapExit::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBW2GCopymapExit::~PBW2GCopymapExit() {
  SharedDtor();
}

void PBW2GCopymapExit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBW2GCopymapExit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBW2GCopymapExit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBW2GCopymapExit_descriptor_;
}

const PBW2GCopymapExit& PBW2GCopymapExit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBW2GCopymapExit* PBW2GCopymapExit::default_instance_ = NULL;

PBW2GCopymapExit* PBW2GCopymapExit::New() const {
  return new PBW2GCopymapExit;
}

void PBW2GCopymapExit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBW2GCopymapExit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBW2GCopymapExit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBW2GCopymapExit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBW2GCopymapExit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBW2GCopymapExit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBW2GCopymapExit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBW2GCopymapExit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBW2GCopymapExit::MergeFrom(const PBW2GCopymapExit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBW2GCopymapExit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBW2GCopymapExit::CopyFrom(const PBW2GCopymapExit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBW2GCopymapExit::IsInitialized() const {
  
  return true;
}

void PBW2GCopymapExit::Swap(PBW2GCopymapExit* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBW2GCopymapExit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBW2GCopymapExit_descriptor_;
  metadata.reflection = PBW2GCopymapExit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBW2GCopymapPlayerInfo::kSceneidFieldNumber;
const int PBW2GCopymapPlayerInfo::kDynidFieldNumber;
const int PBW2GCopymapPlayerInfo::kDisplayFieldNumber;
const int PBW2GCopymapPlayerInfo::kReasonFieldNumber;
#endif  // !_MSC_VER

PBW2GCopymapPlayerInfo::PBW2GCopymapPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBW2GCopymapPlayerInfo::InitAsDefaultInstance() {
  display_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBW2GCopymapPlayerInfo::PBW2GCopymapPlayerInfo(const PBW2GCopymapPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBW2GCopymapPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0u;
  dynid_ = GOOGLE_ULONGLONG(0);
  display_ = NULL;
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBW2GCopymapPlayerInfo::~PBW2GCopymapPlayerInfo() {
  SharedDtor();
}

void PBW2GCopymapPlayerInfo::SharedDtor() {
  if (this != default_instance_) {
    delete display_;
  }
}

void PBW2GCopymapPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBW2GCopymapPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBW2GCopymapPlayerInfo_descriptor_;
}

const PBW2GCopymapPlayerInfo& PBW2GCopymapPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBW2GCopymapPlayerInfo* PBW2GCopymapPlayerInfo::default_instance_ = NULL;

PBW2GCopymapPlayerInfo* PBW2GCopymapPlayerInfo::New() const {
  return new PBW2GCopymapPlayerInfo;
}

void PBW2GCopymapPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = 0u;
    dynid_ = GOOGLE_ULONGLONG(0);
    if (has_display()) {
      if (display_ != NULL) display_->::PBPlayerDisplay::Clear();
    }
    reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBW2GCopymapPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sceneid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dynid;
        break;
      }
      
      // optional uint64 dynid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dynid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dynid_)));
          set_has_dynid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_display;
        break;
      }
      
      // optional .PBPlayerDisplay display = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_display:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reason;
        break;
      }
      
      // optional uint32 reason = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBW2GCopymapPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sceneid = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sceneid(), output);
  }
  
  // optional uint64 dynid = 2;
  if (has_dynid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dynid(), output);
  }
  
  // optional .PBPlayerDisplay display = 3;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->display(), output);
  }
  
  // optional uint32 reason = 4;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->reason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBW2GCopymapPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sceneid = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sceneid(), target);
  }
  
  // optional uint64 dynid = 2;
  if (has_dynid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dynid(), target);
  }
  
  // optional .PBPlayerDisplay display = 3;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->display(), target);
  }
  
  // optional uint32 reason = 4;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->reason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBW2GCopymapPlayerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sceneid = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }
    
    // optional uint64 dynid = 2;
    if (has_dynid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dynid());
    }
    
    // optional .PBPlayerDisplay display = 3;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display());
    }
    
    // optional uint32 reason = 4;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBW2GCopymapPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBW2GCopymapPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBW2GCopymapPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBW2GCopymapPlayerInfo::MergeFrom(const PBW2GCopymapPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_dynid()) {
      set_dynid(from.dynid());
    }
    if (from.has_display()) {
      mutable_display()->::PBPlayerDisplay::MergeFrom(from.display());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBW2GCopymapPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBW2GCopymapPlayerInfo::CopyFrom(const PBW2GCopymapPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBW2GCopymapPlayerInfo::IsInitialized() const {
  
  return true;
}

void PBW2GCopymapPlayerInfo::Swap(PBW2GCopymapPlayerInfo* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(dynid_, other->dynid_);
    std::swap(display_, other->display_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBW2GCopymapPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBW2GCopymapPlayerInfo_descriptor_;
  metadata.reflection = PBW2GCopymapPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBW2GCopymapKickPlayer::kSceneidFieldNumber;
const int PBW2GCopymapKickPlayer::kDynidFieldNumber;
const int PBW2GCopymapKickPlayer::kPlayeridFieldNumber;
#endif  // !_MSC_VER

PBW2GCopymapKickPlayer::PBW2GCopymapKickPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBW2GCopymapKickPlayer::InitAsDefaultInstance() {
}

PBW2GCopymapKickPlayer::PBW2GCopymapKickPlayer(const PBW2GCopymapKickPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBW2GCopymapKickPlayer::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0u;
  dynid_ = GOOGLE_ULONGLONG(0);
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBW2GCopymapKickPlayer::~PBW2GCopymapKickPlayer() {
  SharedDtor();
}

void PBW2GCopymapKickPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBW2GCopymapKickPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBW2GCopymapKickPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBW2GCopymapKickPlayer_descriptor_;
}

const PBW2GCopymapKickPlayer& PBW2GCopymapKickPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBW2GCopymapKickPlayer* PBW2GCopymapKickPlayer::default_instance_ = NULL;

PBW2GCopymapKickPlayer* PBW2GCopymapKickPlayer::New() const {
  return new PBW2GCopymapKickPlayer;
}

void PBW2GCopymapKickPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = 0u;
    dynid_ = GOOGLE_ULONGLONG(0);
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBW2GCopymapKickPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sceneid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dynid;
        break;
      }
      
      // optional uint64 dynid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dynid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dynid_)));
          set_has_dynid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerid;
        break;
      }
      
      // optional uint32 playerid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBW2GCopymapKickPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sceneid = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sceneid(), output);
  }
  
  // optional uint64 dynid = 2;
  if (has_dynid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dynid(), output);
  }
  
  // optional uint32 playerid = 3;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBW2GCopymapKickPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sceneid = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sceneid(), target);
  }
  
  // optional uint64 dynid = 2;
  if (has_dynid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dynid(), target);
  }
  
  // optional uint32 playerid = 3;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBW2GCopymapKickPlayer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sceneid = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }
    
    // optional uint64 dynid = 2;
    if (has_dynid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dynid());
    }
    
    // optional uint32 playerid = 3;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBW2GCopymapKickPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBW2GCopymapKickPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBW2GCopymapKickPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBW2GCopymapKickPlayer::MergeFrom(const PBW2GCopymapKickPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_dynid()) {
      set_dynid(from.dynid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBW2GCopymapKickPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBW2GCopymapKickPlayer::CopyFrom(const PBW2GCopymapKickPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBW2GCopymapKickPlayer::IsInitialized() const {
  
  return true;
}

void PBW2GCopymapKickPlayer::Swap(PBW2GCopymapKickPlayer* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(dynid_, other->dynid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBW2GCopymapKickPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBW2GCopymapKickPlayer_descriptor_;
  metadata.reflection = PBW2GCopymapKickPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2WCopymapInvite::kCopymapidFieldNumber;
const int PBG2WCopymapInvite::kPlayeridFieldNumber;
const int PBG2WCopymapInvite::kTargetidFieldNumber;
#endif  // !_MSC_VER

PBG2WCopymapInvite::PBG2WCopymapInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2WCopymapInvite::InitAsDefaultInstance() {
}

PBG2WCopymapInvite::PBG2WCopymapInvite(const PBG2WCopymapInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2WCopymapInvite::SharedCtor() {
  _cached_size_ = 0;
  copymapid_ = 0u;
  playerid_ = 0u;
  targetid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2WCopymapInvite::~PBG2WCopymapInvite() {
  SharedDtor();
}

void PBG2WCopymapInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2WCopymapInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2WCopymapInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2WCopymapInvite_descriptor_;
}

const PBG2WCopymapInvite& PBG2WCopymapInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBG2WCopymapInvite* PBG2WCopymapInvite::default_instance_ = NULL;

PBG2WCopymapInvite* PBG2WCopymapInvite::New() const {
  return new PBG2WCopymapInvite;
}

void PBG2WCopymapInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copymapid_ = 0u;
    playerid_ = 0u;
    targetid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2WCopymapInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 copymapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }
      
      // optional uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_targetid;
        break;
      }
      
      // optional uint32 targetid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2WCopymapInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->copymapid(), output);
  }
  
  // optional uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }
  
  // optional uint32 targetid = 3;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->targetid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2WCopymapInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->copymapid(), target);
  }
  
  // optional uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  // optional uint32 targetid = 3;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->targetid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2WCopymapInvite::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 copymapid = 1;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }
    
    // optional uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 targetid = 3;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2WCopymapInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2WCopymapInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2WCopymapInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2WCopymapInvite::MergeFrom(const PBG2WCopymapInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2WCopymapInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2WCopymapInvite::CopyFrom(const PBG2WCopymapInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2WCopymapInvite::IsInitialized() const {
  
  return true;
}

void PBG2WCopymapInvite::Swap(PBG2WCopymapInvite* other) {
  if (other != this) {
    std::swap(copymapid_, other->copymapid_);
    std::swap(playerid_, other->playerid_);
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2WCopymapInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2WCopymapInvite_descriptor_;
  metadata.reflection = PBG2WCopymapInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2WCopymapAcceptInvite::kCopymapidFieldNumber;
const int PBG2WCopymapAcceptInvite::kPlayeridFieldNumber;
const int PBG2WCopymapAcceptInvite::kTargetidFieldNumber;
const int PBG2WCopymapAcceptInvite::kAcceptFieldNumber;
#endif  // !_MSC_VER

PBG2WCopymapAcceptInvite::PBG2WCopymapAcceptInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2WCopymapAcceptInvite::InitAsDefaultInstance() {
}

PBG2WCopymapAcceptInvite::PBG2WCopymapAcceptInvite(const PBG2WCopymapAcceptInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2WCopymapAcceptInvite::SharedCtor() {
  _cached_size_ = 0;
  copymapid_ = 0u;
  playerid_ = 0u;
  targetid_ = 0u;
  accept_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2WCopymapAcceptInvite::~PBG2WCopymapAcceptInvite() {
  SharedDtor();
}

void PBG2WCopymapAcceptInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2WCopymapAcceptInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2WCopymapAcceptInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2WCopymapAcceptInvite_descriptor_;
}

const PBG2WCopymapAcceptInvite& PBG2WCopymapAcceptInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBG2WCopymapAcceptInvite* PBG2WCopymapAcceptInvite::default_instance_ = NULL;

PBG2WCopymapAcceptInvite* PBG2WCopymapAcceptInvite::New() const {
  return new PBG2WCopymapAcceptInvite;
}

void PBG2WCopymapAcceptInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copymapid_ = 0u;
    playerid_ = 0u;
    targetid_ = 0u;
    accept_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2WCopymapAcceptInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 copymapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }
      
      // optional uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_targetid;
        break;
      }
      
      // optional uint32 targetid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_accept;
        break;
      }
      
      // optional bool accept = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accept:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accept_)));
          set_has_accept();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2WCopymapAcceptInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->copymapid(), output);
  }
  
  // optional uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }
  
  // optional uint32 targetid = 3;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->targetid(), output);
  }
  
  // optional bool accept = 4;
  if (has_accept()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->accept(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2WCopymapAcceptInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->copymapid(), target);
  }
  
  // optional uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  // optional uint32 targetid = 3;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->targetid(), target);
  }
  
  // optional bool accept = 4;
  if (has_accept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->accept(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2WCopymapAcceptInvite::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 copymapid = 1;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }
    
    // optional uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 targetid = 3;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetid());
    }
    
    // optional bool accept = 4;
    if (has_accept()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2WCopymapAcceptInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2WCopymapAcceptInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2WCopymapAcceptInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2WCopymapAcceptInvite::MergeFrom(const PBG2WCopymapAcceptInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_accept()) {
      set_accept(from.accept());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2WCopymapAcceptInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2WCopymapAcceptInvite::CopyFrom(const PBG2WCopymapAcceptInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2WCopymapAcceptInvite::IsInitialized() const {
  
  return true;
}

void PBG2WCopymapAcceptInvite::Swap(PBG2WCopymapAcceptInvite* other) {
  if (other != this) {
    std::swap(copymapid_, other->copymapid_);
    std::swap(playerid_, other->playerid_);
    std::swap(targetid_, other->targetid_);
    std::swap(accept_, other->accept_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2WCopymapAcceptInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2WCopymapAcceptInvite_descriptor_;
  metadata.reflection = PBG2WCopymapAcceptInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2WCopymapTeamMemberInfo::kCopymapidFieldNumber;
const int PBG2WCopymapTeamMemberInfo::kPlayeridFieldNumber;
#endif  // !_MSC_VER

PBG2WCopymapTeamMemberInfo::PBG2WCopymapTeamMemberInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2WCopymapTeamMemberInfo::InitAsDefaultInstance() {
}

PBG2WCopymapTeamMemberInfo::PBG2WCopymapTeamMemberInfo(const PBG2WCopymapTeamMemberInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2WCopymapTeamMemberInfo::SharedCtor() {
  _cached_size_ = 0;
  copymapid_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2WCopymapTeamMemberInfo::~PBG2WCopymapTeamMemberInfo() {
  SharedDtor();
}

void PBG2WCopymapTeamMemberInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2WCopymapTeamMemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2WCopymapTeamMemberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2WCopymapTeamMemberInfo_descriptor_;
}

const PBG2WCopymapTeamMemberInfo& PBG2WCopymapTeamMemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBG2WCopymapTeamMemberInfo* PBG2WCopymapTeamMemberInfo::default_instance_ = NULL;

PBG2WCopymapTeamMemberInfo* PBG2WCopymapTeamMemberInfo::New() const {
  return new PBG2WCopymapTeamMemberInfo;
}

void PBG2WCopymapTeamMemberInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copymapid_ = 0u;
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2WCopymapTeamMemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 copymapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }
      
      // optional uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2WCopymapTeamMemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->copymapid(), output);
  }
  
  // optional uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2WCopymapTeamMemberInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->copymapid(), target);
  }
  
  // optional uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2WCopymapTeamMemberInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 copymapid = 1;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }
    
    // optional uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2WCopymapTeamMemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2WCopymapTeamMemberInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2WCopymapTeamMemberInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2WCopymapTeamMemberInfo::MergeFrom(const PBG2WCopymapTeamMemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2WCopymapTeamMemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2WCopymapTeamMemberInfo::CopyFrom(const PBG2WCopymapTeamMemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2WCopymapTeamMemberInfo::IsInitialized() const {
  
  return true;
}

void PBG2WCopymapTeamMemberInfo::Swap(PBG2WCopymapTeamMemberInfo* other) {
  if (other != this) {
    std::swap(copymapid_, other->copymapid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2WCopymapTeamMemberInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2WCopymapTeamMemberInfo_descriptor_;
  metadata.reflection = PBG2WCopymapTeamMemberInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2WCopymapAllCopymapCount::kPlayeridFieldNumber;
const int PBG2WCopymapAllCopymapCount::kInfoFieldNumber;
#endif  // !_MSC_VER

PBG2WCopymapAllCopymapCount::PBG2WCopymapAllCopymapCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2WCopymapAllCopymapCount::InitAsDefaultInstance() {
  info_ = const_cast< ::PBPlayerCopymap*>(&::PBPlayerCopymap::default_instance());
}

PBG2WCopymapAllCopymapCount::PBG2WCopymapAllCopymapCount(const PBG2WCopymapAllCopymapCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2WCopymapAllCopymapCount::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2WCopymapAllCopymapCount::~PBG2WCopymapAllCopymapCount() {
  SharedDtor();
}

void PBG2WCopymapAllCopymapCount::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void PBG2WCopymapAllCopymapCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2WCopymapAllCopymapCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2WCopymapAllCopymapCount_descriptor_;
}

const PBG2WCopymapAllCopymapCount& PBG2WCopymapAllCopymapCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBG2WCopymapAllCopymapCount* PBG2WCopymapAllCopymapCount::default_instance_ = NULL;

PBG2WCopymapAllCopymapCount* PBG2WCopymapAllCopymapCount::New() const {
  return new PBG2WCopymapAllCopymapCount;
}

void PBG2WCopymapAllCopymapCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::PBPlayerCopymap::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2WCopymapAllCopymapCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }
      
      // optional .PBPlayerCopymap info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2WCopymapAllCopymapCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional .PBPlayerCopymap info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2WCopymapAllCopymapCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional .PBPlayerCopymap info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2WCopymapAllCopymapCount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional .PBPlayerCopymap info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2WCopymapAllCopymapCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2WCopymapAllCopymapCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2WCopymapAllCopymapCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2WCopymapAllCopymapCount::MergeFrom(const PBG2WCopymapAllCopymapCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_info()) {
      mutable_info()->::PBPlayerCopymap::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2WCopymapAllCopymapCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2WCopymapAllCopymapCount::CopyFrom(const PBG2WCopymapAllCopymapCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2WCopymapAllCopymapCount::IsInitialized() const {
  
  return true;
}

void PBG2WCopymapAllCopymapCount::Swap(PBG2WCopymapAllCopymapCount* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2WCopymapAllCopymapCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2WCopymapAllCopymapCount_descriptor_;
  metadata.reflection = PBG2WCopymapAllCopymapCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2WCopymapOneCopymapCount::kPlayeridFieldNumber;
const int PBG2WCopymapOneCopymapCount::kInfoFieldNumber;
#endif  // !_MSC_VER

PBG2WCopymapOneCopymapCount::PBG2WCopymapOneCopymapCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2WCopymapOneCopymapCount::InitAsDefaultInstance() {
  info_ = const_cast< ::PBCopymapInfo*>(&::PBCopymapInfo::default_instance());
}

PBG2WCopymapOneCopymapCount::PBG2WCopymapOneCopymapCount(const PBG2WCopymapOneCopymapCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2WCopymapOneCopymapCount::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2WCopymapOneCopymapCount::~PBG2WCopymapOneCopymapCount() {
  SharedDtor();
}

void PBG2WCopymapOneCopymapCount::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void PBG2WCopymapOneCopymapCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2WCopymapOneCopymapCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2WCopymapOneCopymapCount_descriptor_;
}

const PBG2WCopymapOneCopymapCount& PBG2WCopymapOneCopymapCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBG2WCopymapOneCopymapCount* PBG2WCopymapOneCopymapCount::default_instance_ = NULL;

PBG2WCopymapOneCopymapCount* PBG2WCopymapOneCopymapCount::New() const {
  return new PBG2WCopymapOneCopymapCount;
}

void PBG2WCopymapOneCopymapCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::PBCopymapInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2WCopymapOneCopymapCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }
      
      // optional .PBCopymapInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2WCopymapOneCopymapCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional .PBCopymapInfo info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2WCopymapOneCopymapCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional .PBCopymapInfo info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2WCopymapOneCopymapCount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional .PBCopymapInfo info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2WCopymapOneCopymapCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2WCopymapOneCopymapCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2WCopymapOneCopymapCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2WCopymapOneCopymapCount::MergeFrom(const PBG2WCopymapOneCopymapCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_info()) {
      mutable_info()->::PBCopymapInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2WCopymapOneCopymapCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2WCopymapOneCopymapCount::CopyFrom(const PBG2WCopymapOneCopymapCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2WCopymapOneCopymapCount::IsInitialized() const {
  
  return true;
}

void PBG2WCopymapOneCopymapCount::Swap(PBG2WCopymapOneCopymapCount* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2WCopymapOneCopymapCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2WCopymapOneCopymapCount_descriptor_;
  metadata.reflection = PBG2WCopymapOneCopymapCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2WGMWorldStartTime::kStampFieldNumber;
const int PBG2WGMWorldStartTime::kLogicworldidFieldNumber;
#endif  // !_MSC_VER

PBG2WGMWorldStartTime::PBG2WGMWorldStartTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2WGMWorldStartTime::InitAsDefaultInstance() {
}

PBG2WGMWorldStartTime::PBG2WGMWorldStartTime(const PBG2WGMWorldStartTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2WGMWorldStartTime::SharedCtor() {
  _cached_size_ = 0;
  stamp_ = GOOGLE_ULONGLONG(0);
  logicworldid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2WGMWorldStartTime::~PBG2WGMWorldStartTime() {
  SharedDtor();
}

void PBG2WGMWorldStartTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2WGMWorldStartTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2WGMWorldStartTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2WGMWorldStartTime_descriptor_;
}

const PBG2WGMWorldStartTime& PBG2WGMWorldStartTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBG2WGMWorldStartTime* PBG2WGMWorldStartTime::default_instance_ = NULL;

PBG2WGMWorldStartTime* PBG2WGMWorldStartTime::New() const {
  return new PBG2WGMWorldStartTime;
}

void PBG2WGMWorldStartTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stamp_ = GOOGLE_ULONGLONG(0);
    logicworldid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2WGMWorldStartTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 stamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stamp_)));
          set_has_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_logicworldid;
        break;
      }
      
      // optional uint32 logicworldid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logicworldid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logicworldid_)));
          set_has_logicworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2WGMWorldStartTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 stamp = 1;
  if (has_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->stamp(), output);
  }
  
  // optional uint32 logicworldid = 2;
  if (has_logicworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->logicworldid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2WGMWorldStartTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 stamp = 1;
  if (has_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->stamp(), target);
  }
  
  // optional uint32 logicworldid = 2;
  if (has_logicworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->logicworldid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2WGMWorldStartTime::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 stamp = 1;
    if (has_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stamp());
    }
    
    // optional uint32 logicworldid = 2;
    if (has_logicworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logicworldid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2WGMWorldStartTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2WGMWorldStartTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2WGMWorldStartTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2WGMWorldStartTime::MergeFrom(const PBG2WGMWorldStartTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stamp()) {
      set_stamp(from.stamp());
    }
    if (from.has_logicworldid()) {
      set_logicworldid(from.logicworldid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2WGMWorldStartTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2WGMWorldStartTime::CopyFrom(const PBG2WGMWorldStartTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2WGMWorldStartTime::IsInitialized() const {
  
  return true;
}

void PBG2WGMWorldStartTime::Swap(PBG2WGMWorldStartTime* other) {
  if (other != this) {
    std::swap(stamp_, other->stamp_);
    std::swap(logicworldid_, other->logicworldid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2WGMWorldStartTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2WGMWorldStartTime_descriptor_;
  metadata.reflection = PBG2WGMWorldStartTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2WPlayerData::kPlayerdisplayFieldNumber;
const int PBG2WPlayerData::kFightpowrFieldNumber;
#endif  // !_MSC_VER

PBG2WPlayerData::PBG2WPlayerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2WPlayerData::InitAsDefaultInstance() {
  playerdisplay_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBG2WPlayerData::PBG2WPlayerData(const PBG2WPlayerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2WPlayerData::SharedCtor() {
  _cached_size_ = 0;
  playerdisplay_ = NULL;
  fightpowr_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2WPlayerData::~PBG2WPlayerData() {
  SharedDtor();
}

void PBG2WPlayerData::SharedDtor() {
  if (this != default_instance_) {
    delete playerdisplay_;
  }
}

void PBG2WPlayerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2WPlayerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2WPlayerData_descriptor_;
}

const PBG2WPlayerData& PBG2WPlayerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBG2WPlayerData* PBG2WPlayerData::default_instance_ = NULL;

PBG2WPlayerData* PBG2WPlayerData::New() const {
  return new PBG2WPlayerData;
}

void PBG2WPlayerData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerdisplay()) {
      if (playerdisplay_ != NULL) playerdisplay_->::PBPlayerDisplay::Clear();
    }
    fightpowr_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2WPlayerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay playerdisplay = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerdisplay()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fightpowr;
        break;
      }
      
      // optional uint32 fightpowr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightpowr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fightpowr_)));
          set_has_fightpowr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2WPlayerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay playerdisplay = 1;
  if (has_playerdisplay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->playerdisplay(), output);
  }
  
  // optional uint32 fightpowr = 2;
  if (has_fightpowr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fightpowr(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2WPlayerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay playerdisplay = 1;
  if (has_playerdisplay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->playerdisplay(), target);
  }
  
  // optional uint32 fightpowr = 2;
  if (has_fightpowr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fightpowr(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2WPlayerData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay playerdisplay = 1;
    if (has_playerdisplay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerdisplay());
    }
    
    // optional uint32 fightpowr = 2;
    if (has_fightpowr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fightpowr());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2WPlayerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2WPlayerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2WPlayerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2WPlayerData::MergeFrom(const PBG2WPlayerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerdisplay()) {
      mutable_playerdisplay()->::PBPlayerDisplay::MergeFrom(from.playerdisplay());
    }
    if (from.has_fightpowr()) {
      set_fightpowr(from.fightpowr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2WPlayerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2WPlayerData::CopyFrom(const PBG2WPlayerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2WPlayerData::IsInitialized() const {
  
  return true;
}

void PBG2WPlayerData::Swap(PBG2WPlayerData* other) {
  if (other != this) {
    std::swap(playerdisplay_, other->playerdisplay_);
    std::swap(fightpowr_, other->fightpowr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2WPlayerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2WPlayerData_descriptor_;
  metadata.reflection = PBG2WPlayerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBDartBuffInfo::kDartBuffIdFieldNumber;
const int PBDartBuffInfo::kRemoveTimeFieldNumber;
#endif  // !_MSC_VER

PBDartBuffInfo::PBDartBuffInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBDartBuffInfo::InitAsDefaultInstance() {
}

PBDartBuffInfo::PBDartBuffInfo(const PBDartBuffInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBDartBuffInfo::SharedCtor() {
  _cached_size_ = 0;
  dartbuffid_ = 0u;
  removetime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDartBuffInfo::~PBDartBuffInfo() {
  SharedDtor();
}

void PBDartBuffInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBDartBuffInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBDartBuffInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDartBuffInfo_descriptor_;
}

const PBDartBuffInfo& PBDartBuffInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBDartBuffInfo* PBDartBuffInfo::default_instance_ = NULL;

PBDartBuffInfo* PBDartBuffInfo::New() const {
  return new PBDartBuffInfo;
}

void PBDartBuffInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dartbuffid_ = 0u;
    removetime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDartBuffInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 DartBuffId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dartbuffid_)));
          set_has_dartbuffid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RemoveTime;
        break;
      }
      
      // optional uint64 RemoveTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RemoveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &removetime_)));
          set_has_removetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBDartBuffInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 DartBuffId = 1;
  if (has_dartbuffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dartbuffid(), output);
  }
  
  // optional uint64 RemoveTime = 2;
  if (has_removetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->removetime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBDartBuffInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 DartBuffId = 1;
  if (has_dartbuffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dartbuffid(), target);
  }
  
  // optional uint64 RemoveTime = 2;
  if (has_removetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->removetime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBDartBuffInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 DartBuffId = 1;
    if (has_dartbuffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dartbuffid());
    }
    
    // optional uint64 RemoveTime = 2;
    if (has_removetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->removetime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBDartBuffInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDartBuffInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDartBuffInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDartBuffInfo::MergeFrom(const PBDartBuffInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dartbuffid()) {
      set_dartbuffid(from.dartbuffid());
    }
    if (from.has_removetime()) {
      set_removetime(from.removetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDartBuffInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDartBuffInfo::CopyFrom(const PBDartBuffInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBDartBuffInfo::IsInitialized() const {
  
  return true;
}

void PBDartBuffInfo::Swap(PBDartBuffInfo* other) {
  if (other != this) {
    std::swap(dartbuffid_, other->dartbuffid_);
    std::swap(removetime_, other->removetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBDartBuffInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBDartBuffInfo_descriptor_;
  metadata.reflection = PBDartBuffInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBDartMemberInfo::kPlayerIdFieldNumber;
const int PBDartMemberInfo::kAddSupplyFieldNumber;
const int PBDartMemberInfo::kAvatarFieldNumber;
const int PBDartMemberInfo::kIdentitypersonalprizeFieldNumber;
#endif  // !_MSC_VER

PBDartMemberInfo::PBDartMemberInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBDartMemberInfo::InitAsDefaultInstance() {
  avatar_ = const_cast< ::PBPlayerAvatar*>(&::PBPlayerAvatar::default_instance());
}

PBDartMemberInfo::PBDartMemberInfo(const PBDartMemberInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBDartMemberInfo::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  addsupply_ = 0u;
  avatar_ = NULL;
  identitypersonalprize_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDartMemberInfo::~PBDartMemberInfo() {
  SharedDtor();
}

void PBDartMemberInfo::SharedDtor() {
  if (this != default_instance_) {
    delete avatar_;
  }
}

void PBDartMemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBDartMemberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDartMemberInfo_descriptor_;
}

const PBDartMemberInfo& PBDartMemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBDartMemberInfo* PBDartMemberInfo::default_instance_ = NULL;

PBDartMemberInfo* PBDartMemberInfo::New() const {
  return new PBDartMemberInfo;
}

void PBDartMemberInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    addsupply_ = 0u;
    if (has_avatar()) {
      if (avatar_ != NULL) avatar_->::PBPlayerAvatar::Clear();
    }
    identitypersonalprize_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDartMemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 PlayerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_addSupply;
        break;
      }
      
      // optional uint32 addSupply = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addSupply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addsupply_)));
          set_has_addsupply();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_avatar;
        break;
      }
      
      // optional .PBPlayerAvatar avatar = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avatar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_identitypersonalprize;
        break;
      }
      
      // optional uint32 identitypersonalprize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_identitypersonalprize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &identitypersonalprize_)));
          set_has_identitypersonalprize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBDartMemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 PlayerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional uint32 addSupply = 2;
  if (has_addsupply()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->addsupply(), output);
  }
  
  // optional .PBPlayerAvatar avatar = 3;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->avatar(), output);
  }
  
  // optional uint32 identitypersonalprize = 4;
  if (has_identitypersonalprize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->identitypersonalprize(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBDartMemberInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 PlayerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional uint32 addSupply = 2;
  if (has_addsupply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->addsupply(), target);
  }
  
  // optional .PBPlayerAvatar avatar = 3;
  if (has_avatar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->avatar(), target);
  }
  
  // optional uint32 identitypersonalprize = 4;
  if (has_identitypersonalprize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->identitypersonalprize(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBDartMemberInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 PlayerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 addSupply = 2;
    if (has_addsupply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addsupply());
    }
    
    // optional .PBPlayerAvatar avatar = 3;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->avatar());
    }
    
    // optional uint32 identitypersonalprize = 4;
    if (has_identitypersonalprize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->identitypersonalprize());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBDartMemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDartMemberInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDartMemberInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDartMemberInfo::MergeFrom(const PBDartMemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_addsupply()) {
      set_addsupply(from.addsupply());
    }
    if (from.has_avatar()) {
      mutable_avatar()->::PBPlayerAvatar::MergeFrom(from.avatar());
    }
    if (from.has_identitypersonalprize()) {
      set_identitypersonalprize(from.identitypersonalprize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDartMemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDartMemberInfo::CopyFrom(const PBDartMemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBDartMemberInfo::IsInitialized() const {
  
  return true;
}

void PBDartMemberInfo::Swap(PBDartMemberInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(addsupply_, other->addsupply_);
    std::swap(avatar_, other->avatar_);
    std::swap(identitypersonalprize_, other->identitypersonalprize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBDartMemberInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBDartMemberInfo_descriptor_;
  metadata.reflection = PBDartMemberInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBDartCarInfoRT::kGlobalDartIDFieldNumber;
const int PBDartCarInfoRT::kDartIDFieldNumber;
const int PBDartCarInfoRT::kDartLeaderPlayerIDFieldNumber;
const int PBDartCarInfoRT::kLastCheckTimeFieldNumber;
const int PBDartCarInfoRT::kLeftSecondFieldNumber;
const int PBDartCarInfoRT::kTotalSecondFieldNumber;
const int PBDartCarInfoRT::kStatusFieldNumber;
const int PBDartCarInfoRT::kPrizeTimesFieldNumber;
const int PBDartCarInfoRT::kRobTriggerTimeFieldNumber;
const int PBDartCarInfoRT::kDartMembersInfoFieldNumber;
const int PBDartCarInfoRT::kDartPathIndexFieldNumber;
const int PBDartCarInfoRT::kGainedDartBuffIDFieldNumber;
const int PBDartCarInfoRT::kEnterSceneTimeFieldNumber;
const int PBDartCarInfoRT::kSceneIDFieldNumber;
const int PBDartCarInfoRT::kSceneCellIDFieldNumber;
const int PBDartCarInfoRT::kSceneDynIDFieldNumber;
const int PBDartCarInfoRT::kXFieldNumber;
const int PBDartCarInfoRT::kYFieldNumber;
const int PBDartCarInfoRT::kDirFieldNumber;
#endif  // !_MSC_VER

PBDartCarInfoRT::PBDartCarInfoRT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBDartCarInfoRT::InitAsDefaultInstance() {
}

PBDartCarInfoRT::PBDartCarInfoRT(const PBDartCarInfoRT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBDartCarInfoRT::SharedCtor() {
  _cached_size_ = 0;
  globaldartid_ = GOOGLE_ULONGLONG(0);
  dartid_ = 0u;
  dartleaderplayerid_ = 0u;
  lastchecktime_ = GOOGLE_ULONGLONG(0);
  leftsecond_ = 0u;
  totalsecond_ = 0u;
  status_ = 0u;
  prizetimes_ = 0u;
  robtriggertime_ = 0u;
  dartpathindex_ = 0u;
  enterscenetime_ = 0u;
  sceneid_ = 0u;
  scenecellid_ = 0u;
  scenedynid_ = GOOGLE_ULONGLONG(0);
  x_ = 0;
  y_ = 0;
  dir_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDartCarInfoRT::~PBDartCarInfoRT() {
  SharedDtor();
}

void PBDartCarInfoRT::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBDartCarInfoRT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBDartCarInfoRT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDartCarInfoRT_descriptor_;
}

const PBDartCarInfoRT& PBDartCarInfoRT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBDartCarInfoRT* PBDartCarInfoRT::default_instance_ = NULL;

PBDartCarInfoRT* PBDartCarInfoRT::New() const {
  return new PBDartCarInfoRT;
}

void PBDartCarInfoRT::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    globaldartid_ = GOOGLE_ULONGLONG(0);
    dartid_ = 0u;
    dartleaderplayerid_ = 0u;
    lastchecktime_ = GOOGLE_ULONGLONG(0);
    leftsecond_ = 0u;
    totalsecond_ = 0u;
    status_ = 0u;
    prizetimes_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    robtriggertime_ = 0u;
    dartpathindex_ = 0u;
    enterscenetime_ = 0u;
    sceneid_ = 0u;
    scenecellid_ = 0u;
    scenedynid_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    x_ = 0;
    y_ = 0;
    dir_ = 0;
  }
  dartmembersinfo_.Clear();
  gaineddartbuffid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDartCarInfoRT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 globalDartID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &globaldartid_)));
          set_has_globaldartid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dartID;
        break;
      }
      
      // optional uint32 dartID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dartID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dartid_)));
          set_has_dartid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dartLeaderPlayerID;
        break;
      }
      
      // optional uint32 dartLeaderPlayerID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dartLeaderPlayerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dartleaderplayerid_)));
          set_has_dartleaderplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lastCheckTime;
        break;
      }
      
      // optional uint64 lastCheckTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastCheckTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastchecktime_)));
          set_has_lastchecktime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_leftSecond;
        break;
      }
      
      // optional uint32 leftSecond = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftSecond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leftsecond_)));
          set_has_leftsecond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_totalSecond;
        break;
      }
      
      // optional uint32 totalSecond = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalSecond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalsecond_)));
          set_has_totalsecond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_status;
        break;
      }
      
      // optional uint32 status = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_prizeTimes;
        break;
      }
      
      // optional uint32 prizeTimes = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prizeTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prizetimes_)));
          set_has_prizetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_robTriggerTime;
        break;
      }
      
      // optional uint32 robTriggerTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robTriggerTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &robtriggertime_)));
          set_has_robtriggertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_dartMembersInfo;
        break;
      }
      
      // repeated .PBDartMemberInfo dartMembersInfo = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dartMembersInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dartmembersinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_dartMembersInfo;
        if (input->ExpectTag(88)) goto parse_dartPathIndex;
        break;
      }
      
      // optional uint32 dartPathIndex = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dartPathIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dartpathindex_)));
          set_has_dartpathindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_gainedDartBuffID;
        break;
      }
      
      // repeated .PBDartBuffInfo gainedDartBuffID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gainedDartBuffID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gaineddartbuffid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_gainedDartBuffID;
        if (input->ExpectTag(104)) goto parse_enterSceneTime;
        break;
      }
      
      // optional uint32 enterSceneTime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enterSceneTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enterscenetime_)));
          set_has_enterscenetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_sceneID;
        break;
      }
      
      // optional uint32 sceneID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_sceneCellID;
        break;
      }
      
      // optional uint32 sceneCellID = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneCellID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scenecellid_)));
          set_has_scenecellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_sceneDynID;
        break;
      }
      
      // optional uint64 sceneDynID = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneDynID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scenedynid_)));
          set_has_scenedynid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_x;
        break;
      }
      
      // optional float x = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_y;
        break;
      }
      
      // optional float y = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_dir;
        break;
      }
      
      // optional float dir = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBDartCarInfoRT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 globalDartID = 1;
  if (has_globaldartid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->globaldartid(), output);
  }
  
  // optional uint32 dartID = 2;
  if (has_dartid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dartid(), output);
  }
  
  // optional uint32 dartLeaderPlayerID = 3;
  if (has_dartleaderplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dartleaderplayerid(), output);
  }
  
  // optional uint64 lastCheckTime = 4;
  if (has_lastchecktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->lastchecktime(), output);
  }
  
  // optional uint32 leftSecond = 5;
  if (has_leftsecond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->leftsecond(), output);
  }
  
  // optional uint32 totalSecond = 6;
  if (has_totalsecond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->totalsecond(), output);
  }
  
  // optional uint32 status = 7;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->status(), output);
  }
  
  // optional uint32 prizeTimes = 8;
  if (has_prizetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->prizetimes(), output);
  }
  
  // optional uint32 robTriggerTime = 9;
  if (has_robtriggertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->robtriggertime(), output);
  }
  
  // repeated .PBDartMemberInfo dartMembersInfo = 10;
  for (int i = 0; i < this->dartmembersinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->dartmembersinfo(i), output);
  }
  
  // optional uint32 dartPathIndex = 11;
  if (has_dartpathindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->dartpathindex(), output);
  }
  
  // repeated .PBDartBuffInfo gainedDartBuffID = 12;
  for (int i = 0; i < this->gaineddartbuffid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->gaineddartbuffid(i), output);
  }
  
  // optional uint32 enterSceneTime = 13;
  if (has_enterscenetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->enterscenetime(), output);
  }
  
  // optional uint32 sceneID = 14;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->sceneid(), output);
  }
  
  // optional uint32 sceneCellID = 15;
  if (has_scenecellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->scenecellid(), output);
  }
  
  // optional uint64 sceneDynID = 16;
  if (has_scenedynid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->scenedynid(), output);
  }
  
  // optional float x = 17;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->x(), output);
  }
  
  // optional float y = 18;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->y(), output);
  }
  
  // optional float dir = 19;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->dir(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBDartCarInfoRT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 globalDartID = 1;
  if (has_globaldartid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->globaldartid(), target);
  }
  
  // optional uint32 dartID = 2;
  if (has_dartid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dartid(), target);
  }
  
  // optional uint32 dartLeaderPlayerID = 3;
  if (has_dartleaderplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dartleaderplayerid(), target);
  }
  
  // optional uint64 lastCheckTime = 4;
  if (has_lastchecktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->lastchecktime(), target);
  }
  
  // optional uint32 leftSecond = 5;
  if (has_leftsecond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->leftsecond(), target);
  }
  
  // optional uint32 totalSecond = 6;
  if (has_totalsecond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->totalsecond(), target);
  }
  
  // optional uint32 status = 7;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->status(), target);
  }
  
  // optional uint32 prizeTimes = 8;
  if (has_prizetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->prizetimes(), target);
  }
  
  // optional uint32 robTriggerTime = 9;
  if (has_robtriggertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->robtriggertime(), target);
  }
  
  // repeated .PBDartMemberInfo dartMembersInfo = 10;
  for (int i = 0; i < this->dartmembersinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->dartmembersinfo(i), target);
  }
  
  // optional uint32 dartPathIndex = 11;
  if (has_dartpathindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->dartpathindex(), target);
  }
  
  // repeated .PBDartBuffInfo gainedDartBuffID = 12;
  for (int i = 0; i < this->gaineddartbuffid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->gaineddartbuffid(i), target);
  }
  
  // optional uint32 enterSceneTime = 13;
  if (has_enterscenetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->enterscenetime(), target);
  }
  
  // optional uint32 sceneID = 14;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->sceneid(), target);
  }
  
  // optional uint32 sceneCellID = 15;
  if (has_scenecellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->scenecellid(), target);
  }
  
  // optional uint64 sceneDynID = 16;
  if (has_scenedynid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->scenedynid(), target);
  }
  
  // optional float x = 17;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->x(), target);
  }
  
  // optional float y = 18;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->y(), target);
  }
  
  // optional float dir = 19;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->dir(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBDartCarInfoRT::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 globalDartID = 1;
    if (has_globaldartid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->globaldartid());
    }
    
    // optional uint32 dartID = 2;
    if (has_dartid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dartid());
    }
    
    // optional uint32 dartLeaderPlayerID = 3;
    if (has_dartleaderplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dartleaderplayerid());
    }
    
    // optional uint64 lastCheckTime = 4;
    if (has_lastchecktime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastchecktime());
    }
    
    // optional uint32 leftSecond = 5;
    if (has_leftsecond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leftsecond());
    }
    
    // optional uint32 totalSecond = 6;
    if (has_totalsecond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalsecond());
    }
    
    // optional uint32 status = 7;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }
    
    // optional uint32 prizeTimes = 8;
    if (has_prizetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prizetimes());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 robTriggerTime = 9;
    if (has_robtriggertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->robtriggertime());
    }
    
    // optional uint32 dartPathIndex = 11;
    if (has_dartpathindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dartpathindex());
    }
    
    // optional uint32 enterSceneTime = 13;
    if (has_enterscenetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enterscenetime());
    }
    
    // optional uint32 sceneID = 14;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }
    
    // optional uint32 sceneCellID = 15;
    if (has_scenecellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scenecellid());
    }
    
    // optional uint64 sceneDynID = 16;
    if (has_scenedynid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scenedynid());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float x = 17;
    if (has_x()) {
      total_size += 2 + 4;
    }
    
    // optional float y = 18;
    if (has_y()) {
      total_size += 2 + 4;
    }
    
    // optional float dir = 19;
    if (has_dir()) {
      total_size += 2 + 4;
    }
    
  }
  // repeated .PBDartMemberInfo dartMembersInfo = 10;
  total_size += 1 * this->dartmembersinfo_size();
  for (int i = 0; i < this->dartmembersinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dartmembersinfo(i));
  }
  
  // repeated .PBDartBuffInfo gainedDartBuffID = 12;
  total_size += 1 * this->gaineddartbuffid_size();
  for (int i = 0; i < this->gaineddartbuffid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gaineddartbuffid(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBDartCarInfoRT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDartCarInfoRT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDartCarInfoRT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDartCarInfoRT::MergeFrom(const PBDartCarInfoRT& from) {
  GOOGLE_CHECK_NE(&from, this);
  dartmembersinfo_.MergeFrom(from.dartmembersinfo_);
  gaineddartbuffid_.MergeFrom(from.gaineddartbuffid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_globaldartid()) {
      set_globaldartid(from.globaldartid());
    }
    if (from.has_dartid()) {
      set_dartid(from.dartid());
    }
    if (from.has_dartleaderplayerid()) {
      set_dartleaderplayerid(from.dartleaderplayerid());
    }
    if (from.has_lastchecktime()) {
      set_lastchecktime(from.lastchecktime());
    }
    if (from.has_leftsecond()) {
      set_leftsecond(from.leftsecond());
    }
    if (from.has_totalsecond()) {
      set_totalsecond(from.totalsecond());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_prizetimes()) {
      set_prizetimes(from.prizetimes());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_robtriggertime()) {
      set_robtriggertime(from.robtriggertime());
    }
    if (from.has_dartpathindex()) {
      set_dartpathindex(from.dartpathindex());
    }
    if (from.has_enterscenetime()) {
      set_enterscenetime(from.enterscenetime());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_scenecellid()) {
      set_scenecellid(from.scenecellid());
    }
    if (from.has_scenedynid()) {
      set_scenedynid(from.scenedynid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDartCarInfoRT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDartCarInfoRT::CopyFrom(const PBDartCarInfoRT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBDartCarInfoRT::IsInitialized() const {
  
  return true;
}

void PBDartCarInfoRT::Swap(PBDartCarInfoRT* other) {
  if (other != this) {
    std::swap(globaldartid_, other->globaldartid_);
    std::swap(dartid_, other->dartid_);
    std::swap(dartleaderplayerid_, other->dartleaderplayerid_);
    std::swap(lastchecktime_, other->lastchecktime_);
    std::swap(leftsecond_, other->leftsecond_);
    std::swap(totalsecond_, other->totalsecond_);
    std::swap(status_, other->status_);
    std::swap(prizetimes_, other->prizetimes_);
    std::swap(robtriggertime_, other->robtriggertime_);
    dartmembersinfo_.Swap(&other->dartmembersinfo_);
    std::swap(dartpathindex_, other->dartpathindex_);
    gaineddartbuffid_.Swap(&other->gaineddartbuffid_);
    std::swap(enterscenetime_, other->enterscenetime_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(scenecellid_, other->scenecellid_);
    std::swap(scenedynid_, other->scenedynid_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(dir_, other->dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBDartCarInfoRT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBDartCarInfoRT_descriptor_;
  metadata.reflection = PBDartCarInfoRT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBDartFlyTarget::kSceneIDFieldNumber;
const int PBDartFlyTarget::kCellIDFieldNumber;
const int PBDartFlyTarget::kXFieldNumber;
const int PBDartFlyTarget::kYFieldNumber;
#endif  // !_MSC_VER

PBDartFlyTarget::PBDartFlyTarget()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBDartFlyTarget::InitAsDefaultInstance() {
}

PBDartFlyTarget::PBDartFlyTarget(const PBDartFlyTarget& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBDartFlyTarget::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0u;
  cellid_ = 0u;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDartFlyTarget::~PBDartFlyTarget() {
  SharedDtor();
}

void PBDartFlyTarget::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBDartFlyTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBDartFlyTarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDartFlyTarget_descriptor_;
}

const PBDartFlyTarget& PBDartFlyTarget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBDartFlyTarget* PBDartFlyTarget::default_instance_ = NULL;

PBDartFlyTarget* PBDartFlyTarget::New() const {
  return new PBDartFlyTarget;
}

void PBDartFlyTarget::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = 0u;
    cellid_ = 0u;
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDartFlyTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sceneID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cellID;
        break;
      }
      
      // optional uint32 cellID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cellID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
          set_has_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_x;
        break;
      }
      
      // optional float x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_y;
        break;
      }
      
      // optional float y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBDartFlyTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sceneID = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sceneid(), output);
  }
  
  // optional uint32 cellID = 2;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cellid(), output);
  }
  
  // optional float x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->x(), output);
  }
  
  // optional float y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBDartFlyTarget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sceneID = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sceneid(), target);
  }
  
  // optional uint32 cellID = 2;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cellid(), target);
  }
  
  // optional float x = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->x(), target);
  }
  
  // optional float y = 4;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBDartFlyTarget::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sceneID = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }
    
    // optional uint32 cellID = 2;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cellid());
    }
    
    // optional float x = 3;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // optional float y = 4;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBDartFlyTarget::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDartFlyTarget* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDartFlyTarget*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDartFlyTarget::MergeFrom(const PBDartFlyTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_cellid()) {
      set_cellid(from.cellid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDartFlyTarget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDartFlyTarget::CopyFrom(const PBDartFlyTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBDartFlyTarget::IsInitialized() const {
  
  return true;
}

void PBDartFlyTarget::Swap(PBDartFlyTarget* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(cellid_, other->cellid_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBDartFlyTarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBDartFlyTarget_descriptor_;
  metadata.reflection = PBDartFlyTarget_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2WDartCarFlyAsk::kFlyPointFieldNumber;
const int PBG2WDartCarFlyAsk::kDartCarInfoRTFieldNumber;
#endif  // !_MSC_VER

PBG2WDartCarFlyAsk::PBG2WDartCarFlyAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2WDartCarFlyAsk::InitAsDefaultInstance() {
  flypoint_ = const_cast< ::PBDartFlyTarget*>(&::PBDartFlyTarget::default_instance());
  dartcarinfort_ = const_cast< ::PBDartCarInfoRT*>(&::PBDartCarInfoRT::default_instance());
}

PBG2WDartCarFlyAsk::PBG2WDartCarFlyAsk(const PBG2WDartCarFlyAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2WDartCarFlyAsk::SharedCtor() {
  _cached_size_ = 0;
  flypoint_ = NULL;
  dartcarinfort_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2WDartCarFlyAsk::~PBG2WDartCarFlyAsk() {
  SharedDtor();
}

void PBG2WDartCarFlyAsk::SharedDtor() {
  if (this != default_instance_) {
    delete flypoint_;
    delete dartcarinfort_;
  }
}

void PBG2WDartCarFlyAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2WDartCarFlyAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2WDartCarFlyAsk_descriptor_;
}

const PBG2WDartCarFlyAsk& PBG2WDartCarFlyAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBG2WDartCarFlyAsk* PBG2WDartCarFlyAsk::default_instance_ = NULL;

PBG2WDartCarFlyAsk* PBG2WDartCarFlyAsk::New() const {
  return new PBG2WDartCarFlyAsk;
}

void PBG2WDartCarFlyAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_flypoint()) {
      if (flypoint_ != NULL) flypoint_->::PBDartFlyTarget::Clear();
    }
    if (has_dartcarinfort()) {
      if (dartcarinfort_ != NULL) dartcarinfort_->::PBDartCarInfoRT::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2WDartCarFlyAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBDartFlyTarget flyPoint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flypoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dartCarInfoRT;
        break;
      }
      
      // optional .PBDartCarInfoRT dartCarInfoRT = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dartCarInfoRT:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dartcarinfort()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2WDartCarFlyAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBDartFlyTarget flyPoint = 1;
  if (has_flypoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->flypoint(), output);
  }
  
  // optional .PBDartCarInfoRT dartCarInfoRT = 2;
  if (has_dartcarinfort()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dartcarinfort(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2WDartCarFlyAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBDartFlyTarget flyPoint = 1;
  if (has_flypoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->flypoint(), target);
  }
  
  // optional .PBDartCarInfoRT dartCarInfoRT = 2;
  if (has_dartcarinfort()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dartcarinfort(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2WDartCarFlyAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBDartFlyTarget flyPoint = 1;
    if (has_flypoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flypoint());
    }
    
    // optional .PBDartCarInfoRT dartCarInfoRT = 2;
    if (has_dartcarinfort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dartcarinfort());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2WDartCarFlyAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2WDartCarFlyAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2WDartCarFlyAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2WDartCarFlyAsk::MergeFrom(const PBG2WDartCarFlyAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flypoint()) {
      mutable_flypoint()->::PBDartFlyTarget::MergeFrom(from.flypoint());
    }
    if (from.has_dartcarinfort()) {
      mutable_dartcarinfort()->::PBDartCarInfoRT::MergeFrom(from.dartcarinfort());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2WDartCarFlyAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2WDartCarFlyAsk::CopyFrom(const PBG2WDartCarFlyAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2WDartCarFlyAsk::IsInitialized() const {
  
  return true;
}

void PBG2WDartCarFlyAsk::Swap(PBG2WDartCarFlyAsk* other) {
  if (other != this) {
    std::swap(flypoint_, other->flypoint_);
    std::swap(dartcarinfort_, other->dartcarinfort_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2WDartCarFlyAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2WDartCarFlyAsk_descriptor_;
  metadata.reflection = PBG2WDartCarFlyAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBW2GDartCarFlyAck::kTargetSceneIDFieldNumber;
const int PBW2GDartCarFlyAck::kTargetSceneDynIDFieldNumber;
const int PBW2GDartCarFlyAck::kSourceSceneIDFieldNumber;
const int PBW2GDartCarFlyAck::kSourceSceneDynIDFieldNumber;
const int PBW2GDartCarFlyAck::kGlobalDartIDFieldNumber;
#endif  // !_MSC_VER

PBW2GDartCarFlyAck::PBW2GDartCarFlyAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBW2GDartCarFlyAck::InitAsDefaultInstance() {
}

PBW2GDartCarFlyAck::PBW2GDartCarFlyAck(const PBW2GDartCarFlyAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBW2GDartCarFlyAck::SharedCtor() {
  _cached_size_ = 0;
  targetsceneid_ = 0u;
  targetscenedynid_ = GOOGLE_ULONGLONG(0);
  sourcesceneid_ = 0u;
  sourcescenedynid_ = GOOGLE_ULONGLONG(0);
  globaldartid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBW2GDartCarFlyAck::~PBW2GDartCarFlyAck() {
  SharedDtor();
}

void PBW2GDartCarFlyAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBW2GDartCarFlyAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBW2GDartCarFlyAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBW2GDartCarFlyAck_descriptor_;
}

const PBW2GDartCarFlyAck& PBW2GDartCarFlyAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBW2GDartCarFlyAck* PBW2GDartCarFlyAck::default_instance_ = NULL;

PBW2GDartCarFlyAck* PBW2GDartCarFlyAck::New() const {
  return new PBW2GDartCarFlyAck;
}

void PBW2GDartCarFlyAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    targetsceneid_ = 0u;
    targetscenedynid_ = GOOGLE_ULONGLONG(0);
    sourcesceneid_ = 0u;
    sourcescenedynid_ = GOOGLE_ULONGLONG(0);
    globaldartid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBW2GDartCarFlyAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 targetSceneID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetsceneid_)));
          set_has_targetsceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targetSceneDynID;
        break;
      }
      
      // optional uint64 targetSceneDynID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetSceneDynID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetscenedynid_)));
          set_has_targetscenedynid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sourceSceneID;
        break;
      }
      
      // optional uint32 sourceSceneID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sourceSceneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sourcesceneid_)));
          set_has_sourcesceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sourceSceneDynID;
        break;
      }
      
      // optional uint64 sourceSceneDynID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sourceSceneDynID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sourcescenedynid_)));
          set_has_sourcescenedynid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_globalDartID;
        break;
      }
      
      // optional uint64 globalDartID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_globalDartID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &globaldartid_)));
          set_has_globaldartid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBW2GDartCarFlyAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 targetSceneID = 1;
  if (has_targetsceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->targetsceneid(), output);
  }
  
  // optional uint64 targetSceneDynID = 2;
  if (has_targetscenedynid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->targetscenedynid(), output);
  }
  
  // optional uint32 sourceSceneID = 3;
  if (has_sourcesceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sourcesceneid(), output);
  }
  
  // optional uint64 sourceSceneDynID = 4;
  if (has_sourcescenedynid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->sourcescenedynid(), output);
  }
  
  // optional uint64 globalDartID = 5;
  if (has_globaldartid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->globaldartid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBW2GDartCarFlyAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 targetSceneID = 1;
  if (has_targetsceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->targetsceneid(), target);
  }
  
  // optional uint64 targetSceneDynID = 2;
  if (has_targetscenedynid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->targetscenedynid(), target);
  }
  
  // optional uint32 sourceSceneID = 3;
  if (has_sourcesceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sourcesceneid(), target);
  }
  
  // optional uint64 sourceSceneDynID = 4;
  if (has_sourcescenedynid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->sourcescenedynid(), target);
  }
  
  // optional uint64 globalDartID = 5;
  if (has_globaldartid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->globaldartid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBW2GDartCarFlyAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 targetSceneID = 1;
    if (has_targetsceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetsceneid());
    }
    
    // optional uint64 targetSceneDynID = 2;
    if (has_targetscenedynid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetscenedynid());
    }
    
    // optional uint32 sourceSceneID = 3;
    if (has_sourcesceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sourcesceneid());
    }
    
    // optional uint64 sourceSceneDynID = 4;
    if (has_sourcescenedynid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sourcescenedynid());
    }
    
    // optional uint64 globalDartID = 5;
    if (has_globaldartid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->globaldartid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBW2GDartCarFlyAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBW2GDartCarFlyAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBW2GDartCarFlyAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBW2GDartCarFlyAck::MergeFrom(const PBW2GDartCarFlyAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetsceneid()) {
      set_targetsceneid(from.targetsceneid());
    }
    if (from.has_targetscenedynid()) {
      set_targetscenedynid(from.targetscenedynid());
    }
    if (from.has_sourcesceneid()) {
      set_sourcesceneid(from.sourcesceneid());
    }
    if (from.has_sourcescenedynid()) {
      set_sourcescenedynid(from.sourcescenedynid());
    }
    if (from.has_globaldartid()) {
      set_globaldartid(from.globaldartid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBW2GDartCarFlyAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBW2GDartCarFlyAck::CopyFrom(const PBW2GDartCarFlyAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBW2GDartCarFlyAck::IsInitialized() const {
  
  return true;
}

void PBW2GDartCarFlyAck::Swap(PBW2GDartCarFlyAck* other) {
  if (other != this) {
    std::swap(targetsceneid_, other->targetsceneid_);
    std::swap(targetscenedynid_, other->targetscenedynid_);
    std::swap(sourcesceneid_, other->sourcesceneid_);
    std::swap(sourcescenedynid_, other->sourcescenedynid_);
    std::swap(globaldartid_, other->globaldartid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBW2GDartCarFlyAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBW2GDartCarFlyAck_descriptor_;
  metadata.reflection = PBW2GDartCarFlyAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBW2GDartCarFlyCreateNtf::kSceneIDFieldNumber;
const int PBW2GDartCarFlyCreateNtf::kSceneDynIDFieldNumber;
const int PBW2GDartCarFlyCreateNtf::kDartCarInfoRTFieldNumber;
#endif  // !_MSC_VER

PBW2GDartCarFlyCreateNtf::PBW2GDartCarFlyCreateNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBW2GDartCarFlyCreateNtf::InitAsDefaultInstance() {
  dartcarinfort_ = const_cast< ::PBDartCarInfoRT*>(&::PBDartCarInfoRT::default_instance());
}

PBW2GDartCarFlyCreateNtf::PBW2GDartCarFlyCreateNtf(const PBW2GDartCarFlyCreateNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBW2GDartCarFlyCreateNtf::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0u;
  scenedynid_ = GOOGLE_ULONGLONG(0);
  dartcarinfort_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBW2GDartCarFlyCreateNtf::~PBW2GDartCarFlyCreateNtf() {
  SharedDtor();
}

void PBW2GDartCarFlyCreateNtf::SharedDtor() {
  if (this != default_instance_) {
    delete dartcarinfort_;
  }
}

void PBW2GDartCarFlyCreateNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBW2GDartCarFlyCreateNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBW2GDartCarFlyCreateNtf_descriptor_;
}

const PBW2GDartCarFlyCreateNtf& PBW2GDartCarFlyCreateNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBW2GDartCarFlyCreateNtf* PBW2GDartCarFlyCreateNtf::default_instance_ = NULL;

PBW2GDartCarFlyCreateNtf* PBW2GDartCarFlyCreateNtf::New() const {
  return new PBW2GDartCarFlyCreateNtf;
}

void PBW2GDartCarFlyCreateNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = 0u;
    scenedynid_ = GOOGLE_ULONGLONG(0);
    if (has_dartcarinfort()) {
      if (dartcarinfort_ != NULL) dartcarinfort_->::PBDartCarInfoRT::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBW2GDartCarFlyCreateNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sceneID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sceneDynID;
        break;
      }
      
      // optional uint64 sceneDynID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneDynID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scenedynid_)));
          set_has_scenedynid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dartCarInfoRT;
        break;
      }
      
      // optional .PBDartCarInfoRT dartCarInfoRT = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dartCarInfoRT:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dartcarinfort()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBW2GDartCarFlyCreateNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sceneID = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sceneid(), output);
  }
  
  // optional uint64 sceneDynID = 2;
  if (has_scenedynid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->scenedynid(), output);
  }
  
  // optional .PBDartCarInfoRT dartCarInfoRT = 3;
  if (has_dartcarinfort()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dartcarinfort(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBW2GDartCarFlyCreateNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sceneID = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sceneid(), target);
  }
  
  // optional uint64 sceneDynID = 2;
  if (has_scenedynid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->scenedynid(), target);
  }
  
  // optional .PBDartCarInfoRT dartCarInfoRT = 3;
  if (has_dartcarinfort()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dartcarinfort(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBW2GDartCarFlyCreateNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sceneID = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }
    
    // optional uint64 sceneDynID = 2;
    if (has_scenedynid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scenedynid());
    }
    
    // optional .PBDartCarInfoRT dartCarInfoRT = 3;
    if (has_dartcarinfort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dartcarinfort());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBW2GDartCarFlyCreateNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBW2GDartCarFlyCreateNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBW2GDartCarFlyCreateNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBW2GDartCarFlyCreateNtf::MergeFrom(const PBW2GDartCarFlyCreateNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_scenedynid()) {
      set_scenedynid(from.scenedynid());
    }
    if (from.has_dartcarinfort()) {
      mutable_dartcarinfort()->::PBDartCarInfoRT::MergeFrom(from.dartcarinfort());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBW2GDartCarFlyCreateNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBW2GDartCarFlyCreateNtf::CopyFrom(const PBW2GDartCarFlyCreateNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBW2GDartCarFlyCreateNtf::IsInitialized() const {
  
  return true;
}

void PBW2GDartCarFlyCreateNtf::Swap(PBW2GDartCarFlyCreateNtf* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(scenedynid_, other->scenedynid_);
    std::swap(dartcarinfort_, other->dartcarinfort_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBW2GDartCarFlyCreateNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBW2GDartCarFlyCreateNtf_descriptor_;
  metadata.reflection = PBW2GDartCarFlyCreateNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2WDartCarUpdateAsk::kDartCarInfoRTFieldNumber;
const int PBG2WDartCarUpdateAsk::kLeftMembersPlayerIDFieldNumber;
#endif  // !_MSC_VER

PBG2WDartCarUpdateAsk::PBG2WDartCarUpdateAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2WDartCarUpdateAsk::InitAsDefaultInstance() {
  dartcarinfort_ = const_cast< ::PBDartCarInfoRT*>(&::PBDartCarInfoRT::default_instance());
}

PBG2WDartCarUpdateAsk::PBG2WDartCarUpdateAsk(const PBG2WDartCarUpdateAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2WDartCarUpdateAsk::SharedCtor() {
  _cached_size_ = 0;
  dartcarinfort_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2WDartCarUpdateAsk::~PBG2WDartCarUpdateAsk() {
  SharedDtor();
}

void PBG2WDartCarUpdateAsk::SharedDtor() {
  if (this != default_instance_) {
    delete dartcarinfort_;
  }
}

void PBG2WDartCarUpdateAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2WDartCarUpdateAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2WDartCarUpdateAsk_descriptor_;
}

const PBG2WDartCarUpdateAsk& PBG2WDartCarUpdateAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBG2WDartCarUpdateAsk* PBG2WDartCarUpdateAsk::default_instance_ = NULL;

PBG2WDartCarUpdateAsk* PBG2WDartCarUpdateAsk::New() const {
  return new PBG2WDartCarUpdateAsk;
}

void PBG2WDartCarUpdateAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dartcarinfort()) {
      if (dartcarinfort_ != NULL) dartcarinfort_->::PBDartCarInfoRT::Clear();
    }
  }
  leftmembersplayerid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2WDartCarUpdateAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBDartCarInfoRT dartCarInfoRT = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dartcarinfort()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_leftMembersPlayerID;
        break;
      }
      
      // repeated uint32 leftMembersPlayerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftMembersPlayerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_leftmembersplayerid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_leftmembersplayerid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_leftMembersPlayerID;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2WDartCarUpdateAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBDartCarInfoRT dartCarInfoRT = 1;
  if (has_dartcarinfort()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dartcarinfort(), output);
  }
  
  // repeated uint32 leftMembersPlayerID = 2;
  for (int i = 0; i < this->leftmembersplayerid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->leftmembersplayerid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2WDartCarUpdateAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBDartCarInfoRT dartCarInfoRT = 1;
  if (has_dartcarinfort()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dartcarinfort(), target);
  }
  
  // repeated uint32 leftMembersPlayerID = 2;
  for (int i = 0; i < this->leftmembersplayerid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->leftmembersplayerid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2WDartCarUpdateAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBDartCarInfoRT dartCarInfoRT = 1;
    if (has_dartcarinfort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dartcarinfort());
    }
    
  }
  // repeated uint32 leftMembersPlayerID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->leftmembersplayerid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->leftmembersplayerid(i));
    }
    total_size += 1 * this->leftmembersplayerid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2WDartCarUpdateAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2WDartCarUpdateAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2WDartCarUpdateAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2WDartCarUpdateAsk::MergeFrom(const PBG2WDartCarUpdateAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  leftmembersplayerid_.MergeFrom(from.leftmembersplayerid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dartcarinfort()) {
      mutable_dartcarinfort()->::PBDartCarInfoRT::MergeFrom(from.dartcarinfort());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2WDartCarUpdateAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2WDartCarUpdateAsk::CopyFrom(const PBG2WDartCarUpdateAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2WDartCarUpdateAsk::IsInitialized() const {
  
  return true;
}

void PBG2WDartCarUpdateAsk::Swap(PBG2WDartCarUpdateAsk* other) {
  if (other != this) {
    std::swap(dartcarinfort_, other->dartcarinfort_);
    leftmembersplayerid_.Swap(&other->leftmembersplayerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2WDartCarUpdateAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2WDartCarUpdateAsk_descriptor_;
  metadata.reflection = PBG2WDartCarUpdateAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2WDartCarDeleteAsk::kGlobalDartIDFieldNumber;
#endif  // !_MSC_VER

PBG2WDartCarDeleteAsk::PBG2WDartCarDeleteAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2WDartCarDeleteAsk::InitAsDefaultInstance() {
}

PBG2WDartCarDeleteAsk::PBG2WDartCarDeleteAsk(const PBG2WDartCarDeleteAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2WDartCarDeleteAsk::SharedCtor() {
  _cached_size_ = 0;
  globaldartid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2WDartCarDeleteAsk::~PBG2WDartCarDeleteAsk() {
  SharedDtor();
}

void PBG2WDartCarDeleteAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2WDartCarDeleteAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2WDartCarDeleteAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2WDartCarDeleteAsk_descriptor_;
}

const PBG2WDartCarDeleteAsk& PBG2WDartCarDeleteAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBG2WDartCarDeleteAsk* PBG2WDartCarDeleteAsk::default_instance_ = NULL;

PBG2WDartCarDeleteAsk* PBG2WDartCarDeleteAsk::New() const {
  return new PBG2WDartCarDeleteAsk;
}

void PBG2WDartCarDeleteAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    globaldartid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2WDartCarDeleteAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 globalDartID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &globaldartid_)));
          set_has_globaldartid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2WDartCarDeleteAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 globalDartID = 1;
  if (has_globaldartid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->globaldartid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2WDartCarDeleteAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 globalDartID = 1;
  if (has_globaldartid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->globaldartid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2WDartCarDeleteAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 globalDartID = 1;
    if (has_globaldartid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->globaldartid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2WDartCarDeleteAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2WDartCarDeleteAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2WDartCarDeleteAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2WDartCarDeleteAsk::MergeFrom(const PBG2WDartCarDeleteAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_globaldartid()) {
      set_globaldartid(from.globaldartid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2WDartCarDeleteAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2WDartCarDeleteAsk::CopyFrom(const PBG2WDartCarDeleteAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2WDartCarDeleteAsk::IsInitialized() const {
  
  return true;
}

void PBG2WDartCarDeleteAsk::Swap(PBG2WDartCarDeleteAsk* other) {
  if (other != this) {
    std::swap(globaldartid_, other->globaldartid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2WDartCarDeleteAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2WDartCarDeleteAsk_descriptor_;
  metadata.reflection = PBG2WDartCarDeleteAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBW2GDartCarRobFinishedAck::kGlobalDartIDFieldNumber;
const int PBW2GDartCarRobFinishedAck::kNewStatusFieldNumber;
const int PBW2GDartCarRobFinishedAck::kSceneIDFieldNumber;
const int PBW2GDartCarRobFinishedAck::kSceneDynIDFieldNumber;
#endif  // !_MSC_VER

PBW2GDartCarRobFinishedAck::PBW2GDartCarRobFinishedAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBW2GDartCarRobFinishedAck::InitAsDefaultInstance() {
}

PBW2GDartCarRobFinishedAck::PBW2GDartCarRobFinishedAck(const PBW2GDartCarRobFinishedAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBW2GDartCarRobFinishedAck::SharedCtor() {
  _cached_size_ = 0;
  globaldartid_ = GOOGLE_ULONGLONG(0);
  newstatus_ = 0u;
  sceneid_ = 0u;
  scenedynid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBW2GDartCarRobFinishedAck::~PBW2GDartCarRobFinishedAck() {
  SharedDtor();
}

void PBW2GDartCarRobFinishedAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBW2GDartCarRobFinishedAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBW2GDartCarRobFinishedAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBW2GDartCarRobFinishedAck_descriptor_;
}

const PBW2GDartCarRobFinishedAck& PBW2GDartCarRobFinishedAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBW2GDartCarRobFinishedAck* PBW2GDartCarRobFinishedAck::default_instance_ = NULL;

PBW2GDartCarRobFinishedAck* PBW2GDartCarRobFinishedAck::New() const {
  return new PBW2GDartCarRobFinishedAck;
}

void PBW2GDartCarRobFinishedAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    globaldartid_ = GOOGLE_ULONGLONG(0);
    newstatus_ = 0u;
    sceneid_ = 0u;
    scenedynid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBW2GDartCarRobFinishedAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 globalDartID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &globaldartid_)));
          set_has_globaldartid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_newStatus;
        break;
      }
      
      // optional uint32 newStatus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newstatus_)));
          set_has_newstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sceneID;
        break;
      }
      
      // optional uint32 sceneID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sceneDynID;
        break;
      }
      
      // optional uint64 sceneDynID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneDynID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scenedynid_)));
          set_has_scenedynid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBW2GDartCarRobFinishedAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 globalDartID = 1;
  if (has_globaldartid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->globaldartid(), output);
  }
  
  // optional uint32 newStatus = 2;
  if (has_newstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->newstatus(), output);
  }
  
  // optional uint32 sceneID = 3;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sceneid(), output);
  }
  
  // optional uint64 sceneDynID = 4;
  if (has_scenedynid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->scenedynid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBW2GDartCarRobFinishedAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 globalDartID = 1;
  if (has_globaldartid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->globaldartid(), target);
  }
  
  // optional uint32 newStatus = 2;
  if (has_newstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->newstatus(), target);
  }
  
  // optional uint32 sceneID = 3;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sceneid(), target);
  }
  
  // optional uint64 sceneDynID = 4;
  if (has_scenedynid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->scenedynid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBW2GDartCarRobFinishedAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 globalDartID = 1;
    if (has_globaldartid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->globaldartid());
    }
    
    // optional uint32 newStatus = 2;
    if (has_newstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newstatus());
    }
    
    // optional uint32 sceneID = 3;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }
    
    // optional uint64 sceneDynID = 4;
    if (has_scenedynid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scenedynid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBW2GDartCarRobFinishedAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBW2GDartCarRobFinishedAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBW2GDartCarRobFinishedAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBW2GDartCarRobFinishedAck::MergeFrom(const PBW2GDartCarRobFinishedAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_globaldartid()) {
      set_globaldartid(from.globaldartid());
    }
    if (from.has_newstatus()) {
      set_newstatus(from.newstatus());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_scenedynid()) {
      set_scenedynid(from.scenedynid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBW2GDartCarRobFinishedAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBW2GDartCarRobFinishedAck::CopyFrom(const PBW2GDartCarRobFinishedAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBW2GDartCarRobFinishedAck::IsInitialized() const {
  
  return true;
}

void PBW2GDartCarRobFinishedAck::Swap(PBW2GDartCarRobFinishedAck* other) {
  if (other != this) {
    std::swap(globaldartid_, other->globaldartid_);
    std::swap(newstatus_, other->newstatus_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(scenedynid_, other->scenedynid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBW2GDartCarRobFinishedAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBW2GDartCarRobFinishedAck_descriptor_;
  metadata.reflection = PBW2GDartCarRobFinishedAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2WDartCarRobFinishedAsk::kGlobalDartIDFieldNumber;
const int PBG2WDartCarRobFinishedAsk::kNewStatusFieldNumber;
#endif  // !_MSC_VER

PBG2WDartCarRobFinishedAsk::PBG2WDartCarRobFinishedAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2WDartCarRobFinishedAsk::InitAsDefaultInstance() {
}

PBG2WDartCarRobFinishedAsk::PBG2WDartCarRobFinishedAsk(const PBG2WDartCarRobFinishedAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2WDartCarRobFinishedAsk::SharedCtor() {
  _cached_size_ = 0;
  globaldartid_ = GOOGLE_ULONGLONG(0);
  newstatus_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2WDartCarRobFinishedAsk::~PBG2WDartCarRobFinishedAsk() {
  SharedDtor();
}

void PBG2WDartCarRobFinishedAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2WDartCarRobFinishedAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2WDartCarRobFinishedAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2WDartCarRobFinishedAsk_descriptor_;
}

const PBG2WDartCarRobFinishedAsk& PBG2WDartCarRobFinishedAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBG2WDartCarRobFinishedAsk* PBG2WDartCarRobFinishedAsk::default_instance_ = NULL;

PBG2WDartCarRobFinishedAsk* PBG2WDartCarRobFinishedAsk::New() const {
  return new PBG2WDartCarRobFinishedAsk;
}

void PBG2WDartCarRobFinishedAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    globaldartid_ = GOOGLE_ULONGLONG(0);
    newstatus_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2WDartCarRobFinishedAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 globalDartID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &globaldartid_)));
          set_has_globaldartid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_newStatus;
        break;
      }
      
      // optional uint32 newStatus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newstatus_)));
          set_has_newstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2WDartCarRobFinishedAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 globalDartID = 1;
  if (has_globaldartid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->globaldartid(), output);
  }
  
  // optional uint32 newStatus = 2;
  if (has_newstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->newstatus(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2WDartCarRobFinishedAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 globalDartID = 1;
  if (has_globaldartid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->globaldartid(), target);
  }
  
  // optional uint32 newStatus = 2;
  if (has_newstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->newstatus(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2WDartCarRobFinishedAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 globalDartID = 1;
    if (has_globaldartid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->globaldartid());
    }
    
    // optional uint32 newStatus = 2;
    if (has_newstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newstatus());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2WDartCarRobFinishedAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2WDartCarRobFinishedAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2WDartCarRobFinishedAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2WDartCarRobFinishedAsk::MergeFrom(const PBG2WDartCarRobFinishedAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_globaldartid()) {
      set_globaldartid(from.globaldartid());
    }
    if (from.has_newstatus()) {
      set_newstatus(from.newstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2WDartCarRobFinishedAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2WDartCarRobFinishedAsk::CopyFrom(const PBG2WDartCarRobFinishedAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2WDartCarRobFinishedAsk::IsInitialized() const {
  
  return true;
}

void PBG2WDartCarRobFinishedAsk::Swap(PBG2WDartCarRobFinishedAsk* other) {
  if (other != this) {
    std::swap(globaldartid_, other->globaldartid_);
    std::swap(newstatus_, other->newstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2WDartCarRobFinishedAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2WDartCarRobFinishedAsk_descriptor_;
  metadata.reflection = PBG2WDartCarRobFinishedAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2WDartCarLeaveRobAsk::kGlobalDartIDFieldNumber;
const int PBG2WDartCarLeaveRobAsk::kPlayerIDFieldNumber;
#endif  // !_MSC_VER

PBG2WDartCarLeaveRobAsk::PBG2WDartCarLeaveRobAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2WDartCarLeaveRobAsk::InitAsDefaultInstance() {
}

PBG2WDartCarLeaveRobAsk::PBG2WDartCarLeaveRobAsk(const PBG2WDartCarLeaveRobAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2WDartCarLeaveRobAsk::SharedCtor() {
  _cached_size_ = 0;
  globaldartid_ = GOOGLE_ULONGLONG(0);
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2WDartCarLeaveRobAsk::~PBG2WDartCarLeaveRobAsk() {
  SharedDtor();
}

void PBG2WDartCarLeaveRobAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2WDartCarLeaveRobAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2WDartCarLeaveRobAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2WDartCarLeaveRobAsk_descriptor_;
}

const PBG2WDartCarLeaveRobAsk& PBG2WDartCarLeaveRobAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBG2WDartCarLeaveRobAsk* PBG2WDartCarLeaveRobAsk::default_instance_ = NULL;

PBG2WDartCarLeaveRobAsk* PBG2WDartCarLeaveRobAsk::New() const {
  return new PBG2WDartCarLeaveRobAsk;
}

void PBG2WDartCarLeaveRobAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    globaldartid_ = GOOGLE_ULONGLONG(0);
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2WDartCarLeaveRobAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 globalDartID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &globaldartid_)));
          set_has_globaldartid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerID;
        break;
      }
      
      // optional uint32 playerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2WDartCarLeaveRobAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 globalDartID = 1;
  if (has_globaldartid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->globaldartid(), output);
  }
  
  // optional uint32 playerID = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2WDartCarLeaveRobAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 globalDartID = 1;
  if (has_globaldartid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->globaldartid(), target);
  }
  
  // optional uint32 playerID = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2WDartCarLeaveRobAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 globalDartID = 1;
    if (has_globaldartid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->globaldartid());
    }
    
    // optional uint32 playerID = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2WDartCarLeaveRobAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2WDartCarLeaveRobAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2WDartCarLeaveRobAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2WDartCarLeaveRobAsk::MergeFrom(const PBG2WDartCarLeaveRobAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_globaldartid()) {
      set_globaldartid(from.globaldartid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2WDartCarLeaveRobAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2WDartCarLeaveRobAsk::CopyFrom(const PBG2WDartCarLeaveRobAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2WDartCarLeaveRobAsk::IsInitialized() const {
  
  return true;
}

void PBG2WDartCarLeaveRobAsk::Swap(PBG2WDartCarLeaveRobAsk* other) {
  if (other != this) {
    std::swap(globaldartid_, other->globaldartid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2WDartCarLeaveRobAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2WDartCarLeaveRobAsk_descriptor_;
  metadata.reflection = PBG2WDartCarLeaveRobAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBW2GDartCarMemberLeaveNtf::kGlobalDartIDFieldNumber;
const int PBW2GDartCarMemberLeaveNtf::kPlayerIDFieldNumber;
const int PBW2GDartCarMemberLeaveNtf::kSceneIDFieldNumber;
const int PBW2GDartCarMemberLeaveNtf::kSceneDynIDFieldNumber;
#endif  // !_MSC_VER

PBW2GDartCarMemberLeaveNtf::PBW2GDartCarMemberLeaveNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBW2GDartCarMemberLeaveNtf::InitAsDefaultInstance() {
}

PBW2GDartCarMemberLeaveNtf::PBW2GDartCarMemberLeaveNtf(const PBW2GDartCarMemberLeaveNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBW2GDartCarMemberLeaveNtf::SharedCtor() {
  _cached_size_ = 0;
  globaldartid_ = GOOGLE_ULONGLONG(0);
  playerid_ = 0u;
  sceneid_ = 0u;
  scenedynid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBW2GDartCarMemberLeaveNtf::~PBW2GDartCarMemberLeaveNtf() {
  SharedDtor();
}

void PBW2GDartCarMemberLeaveNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBW2GDartCarMemberLeaveNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBW2GDartCarMemberLeaveNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBW2GDartCarMemberLeaveNtf_descriptor_;
}

const PBW2GDartCarMemberLeaveNtf& PBW2GDartCarMemberLeaveNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBW2GDartCarMemberLeaveNtf* PBW2GDartCarMemberLeaveNtf::default_instance_ = NULL;

PBW2GDartCarMemberLeaveNtf* PBW2GDartCarMemberLeaveNtf::New() const {
  return new PBW2GDartCarMemberLeaveNtf;
}

void PBW2GDartCarMemberLeaveNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    globaldartid_ = GOOGLE_ULONGLONG(0);
    playerid_ = 0u;
    sceneid_ = 0u;
    scenedynid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBW2GDartCarMemberLeaveNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 globalDartID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &globaldartid_)));
          set_has_globaldartid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerID;
        break;
      }
      
      // optional uint32 playerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sceneID;
        break;
      }
      
      // optional uint32 sceneID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sceneDynID;
        break;
      }
      
      // optional uint64 sceneDynID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneDynID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scenedynid_)));
          set_has_scenedynid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBW2GDartCarMemberLeaveNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 globalDartID = 1;
  if (has_globaldartid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->globaldartid(), output);
  }
  
  // optional uint32 playerID = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }
  
  // optional uint32 sceneID = 3;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sceneid(), output);
  }
  
  // optional uint64 sceneDynID = 4;
  if (has_scenedynid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->scenedynid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBW2GDartCarMemberLeaveNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 globalDartID = 1;
  if (has_globaldartid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->globaldartid(), target);
  }
  
  // optional uint32 playerID = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  // optional uint32 sceneID = 3;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sceneid(), target);
  }
  
  // optional uint64 sceneDynID = 4;
  if (has_scenedynid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->scenedynid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBW2GDartCarMemberLeaveNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 globalDartID = 1;
    if (has_globaldartid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->globaldartid());
    }
    
    // optional uint32 playerID = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 sceneID = 3;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }
    
    // optional uint64 sceneDynID = 4;
    if (has_scenedynid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scenedynid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBW2GDartCarMemberLeaveNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBW2GDartCarMemberLeaveNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBW2GDartCarMemberLeaveNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBW2GDartCarMemberLeaveNtf::MergeFrom(const PBW2GDartCarMemberLeaveNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_globaldartid()) {
      set_globaldartid(from.globaldartid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_scenedynid()) {
      set_scenedynid(from.scenedynid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBW2GDartCarMemberLeaveNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBW2GDartCarMemberLeaveNtf::CopyFrom(const PBW2GDartCarMemberLeaveNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBW2GDartCarMemberLeaveNtf::IsInitialized() const {
  
  return true;
}

void PBW2GDartCarMemberLeaveNtf::Swap(PBW2GDartCarMemberLeaveNtf* other) {
  if (other != this) {
    std::swap(globaldartid_, other->globaldartid_);
    std::swap(playerid_, other->playerid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(scenedynid_, other->scenedynid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBW2GDartCarMemberLeaveNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBW2GDartCarMemberLeaveNtf_descriptor_;
  metadata.reflection = PBW2GDartCarMemberLeaveNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2WFindDartCarAsk::kGlobalDartIDFieldNumber;
const int PBG2WFindDartCarAsk::kPlayerIDFieldNumber;
const int PBG2WFindDartCarAsk::kSceneIDFieldNumber;
const int PBG2WFindDartCarAsk::kSceneDynIDFieldNumber;
#endif  // !_MSC_VER

PBG2WFindDartCarAsk::PBG2WFindDartCarAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2WFindDartCarAsk::InitAsDefaultInstance() {
}

PBG2WFindDartCarAsk::PBG2WFindDartCarAsk(const PBG2WFindDartCarAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2WFindDartCarAsk::SharedCtor() {
  _cached_size_ = 0;
  globaldartid_ = GOOGLE_ULONGLONG(0);
  playerid_ = 0u;
  sceneid_ = 0u;
  scenedynid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2WFindDartCarAsk::~PBG2WFindDartCarAsk() {
  SharedDtor();
}

void PBG2WFindDartCarAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2WFindDartCarAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2WFindDartCarAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2WFindDartCarAsk_descriptor_;
}

const PBG2WFindDartCarAsk& PBG2WFindDartCarAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBG2WFindDartCarAsk* PBG2WFindDartCarAsk::default_instance_ = NULL;

PBG2WFindDartCarAsk* PBG2WFindDartCarAsk::New() const {
  return new PBG2WFindDartCarAsk;
}

void PBG2WFindDartCarAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    globaldartid_ = GOOGLE_ULONGLONG(0);
    playerid_ = 0u;
    sceneid_ = 0u;
    scenedynid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2WFindDartCarAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 globalDartID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &globaldartid_)));
          set_has_globaldartid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerID;
        break;
      }
      
      // optional uint32 playerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sceneID;
        break;
      }
      
      // optional uint32 sceneID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sceneDynID;
        break;
      }
      
      // optional uint64 sceneDynID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneDynID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scenedynid_)));
          set_has_scenedynid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2WFindDartCarAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 globalDartID = 1;
  if (has_globaldartid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->globaldartid(), output);
  }
  
  // optional uint32 playerID = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }
  
  // optional uint32 sceneID = 3;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sceneid(), output);
  }
  
  // optional uint64 sceneDynID = 4;
  if (has_scenedynid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->scenedynid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2WFindDartCarAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 globalDartID = 1;
  if (has_globaldartid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->globaldartid(), target);
  }
  
  // optional uint32 playerID = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  // optional uint32 sceneID = 3;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sceneid(), target);
  }
  
  // optional uint64 sceneDynID = 4;
  if (has_scenedynid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->scenedynid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2WFindDartCarAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 globalDartID = 1;
    if (has_globaldartid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->globaldartid());
    }
    
    // optional uint32 playerID = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 sceneID = 3;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }
    
    // optional uint64 sceneDynID = 4;
    if (has_scenedynid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scenedynid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2WFindDartCarAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2WFindDartCarAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2WFindDartCarAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2WFindDartCarAsk::MergeFrom(const PBG2WFindDartCarAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_globaldartid()) {
      set_globaldartid(from.globaldartid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_scenedynid()) {
      set_scenedynid(from.scenedynid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2WFindDartCarAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2WFindDartCarAsk::CopyFrom(const PBG2WFindDartCarAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2WFindDartCarAsk::IsInitialized() const {
  
  return true;
}

void PBG2WFindDartCarAsk::Swap(PBG2WFindDartCarAsk* other) {
  if (other != this) {
    std::swap(globaldartid_, other->globaldartid_);
    std::swap(playerid_, other->playerid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(scenedynid_, other->scenedynid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2WFindDartCarAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2WFindDartCarAsk_descriptor_;
  metadata.reflection = PBG2WFindDartCarAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBW2GFindDartCarAck::kGlobalDartIDFieldNumber;
const int PBW2GFindDartCarAck::kPlayerIDFieldNumber;
const int PBW2GFindDartCarAck::kSceneIDFieldNumber;
const int PBW2GFindDartCarAck::kSceneDynIDFieldNumber;
const int PBW2GFindDartCarAck::kXFieldNumber;
const int PBW2GFindDartCarAck::kYFieldNumber;
const int PBW2GFindDartCarAck::kTargetsceneIDFieldNumber;
const int PBW2GFindDartCarAck::kTargetsceneDynIDFieldNumber;
#endif  // !_MSC_VER

PBW2GFindDartCarAck::PBW2GFindDartCarAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBW2GFindDartCarAck::InitAsDefaultInstance() {
}

PBW2GFindDartCarAck::PBW2GFindDartCarAck(const PBW2GFindDartCarAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBW2GFindDartCarAck::SharedCtor() {
  _cached_size_ = 0;
  globaldartid_ = GOOGLE_ULONGLONG(0);
  playerid_ = 0u;
  sceneid_ = 0u;
  scenedynid_ = GOOGLE_ULONGLONG(0);
  x_ = 0;
  y_ = 0;
  targetsceneid_ = 0u;
  targetscenedynid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBW2GFindDartCarAck::~PBW2GFindDartCarAck() {
  SharedDtor();
}

void PBW2GFindDartCarAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBW2GFindDartCarAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBW2GFindDartCarAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBW2GFindDartCarAck_descriptor_;
}

const PBW2GFindDartCarAck& PBW2GFindDartCarAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBW2GFindDartCarAck* PBW2GFindDartCarAck::default_instance_ = NULL;

PBW2GFindDartCarAck* PBW2GFindDartCarAck::New() const {
  return new PBW2GFindDartCarAck;
}

void PBW2GFindDartCarAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    globaldartid_ = GOOGLE_ULONGLONG(0);
    playerid_ = 0u;
    sceneid_ = 0u;
    scenedynid_ = GOOGLE_ULONGLONG(0);
    x_ = 0;
    y_ = 0;
    targetsceneid_ = 0u;
    targetscenedynid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBW2GFindDartCarAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 globalDartID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &globaldartid_)));
          set_has_globaldartid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerID;
        break;
      }
      
      // optional uint32 playerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sceneID;
        break;
      }
      
      // optional uint32 sceneID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sceneDynID;
        break;
      }
      
      // optional uint64 sceneDynID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneDynID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scenedynid_)));
          set_has_scenedynid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_x;
        break;
      }
      
      // optional float x = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_y;
        break;
      }
      
      // optional float y = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_targetsceneID;
        break;
      }
      
      // optional uint32 targetsceneID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetsceneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetsceneid_)));
          set_has_targetsceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_targetsceneDynID;
        break;
      }
      
      // optional uint64 targetsceneDynID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetsceneDynID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetscenedynid_)));
          set_has_targetscenedynid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBW2GFindDartCarAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 globalDartID = 1;
  if (has_globaldartid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->globaldartid(), output);
  }
  
  // optional uint32 playerID = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }
  
  // optional uint32 sceneID = 3;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sceneid(), output);
  }
  
  // optional uint64 sceneDynID = 4;
  if (has_scenedynid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->scenedynid(), output);
  }
  
  // optional float x = 5;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->x(), output);
  }
  
  // optional float y = 6;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->y(), output);
  }
  
  // optional uint32 targetsceneID = 7;
  if (has_targetsceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->targetsceneid(), output);
  }
  
  // optional uint64 targetsceneDynID = 8;
  if (has_targetscenedynid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->targetscenedynid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBW2GFindDartCarAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 globalDartID = 1;
  if (has_globaldartid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->globaldartid(), target);
  }
  
  // optional uint32 playerID = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  // optional uint32 sceneID = 3;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sceneid(), target);
  }
  
  // optional uint64 sceneDynID = 4;
  if (has_scenedynid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->scenedynid(), target);
  }
  
  // optional float x = 5;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->x(), target);
  }
  
  // optional float y = 6;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->y(), target);
  }
  
  // optional uint32 targetsceneID = 7;
  if (has_targetsceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->targetsceneid(), target);
  }
  
  // optional uint64 targetsceneDynID = 8;
  if (has_targetscenedynid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->targetscenedynid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBW2GFindDartCarAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 globalDartID = 1;
    if (has_globaldartid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->globaldartid());
    }
    
    // optional uint32 playerID = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 sceneID = 3;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }
    
    // optional uint64 sceneDynID = 4;
    if (has_scenedynid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scenedynid());
    }
    
    // optional float x = 5;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // optional float y = 6;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 targetsceneID = 7;
    if (has_targetsceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetsceneid());
    }
    
    // optional uint64 targetsceneDynID = 8;
    if (has_targetscenedynid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetscenedynid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBW2GFindDartCarAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBW2GFindDartCarAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBW2GFindDartCarAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBW2GFindDartCarAck::MergeFrom(const PBW2GFindDartCarAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_globaldartid()) {
      set_globaldartid(from.globaldartid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_scenedynid()) {
      set_scenedynid(from.scenedynid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_targetsceneid()) {
      set_targetsceneid(from.targetsceneid());
    }
    if (from.has_targetscenedynid()) {
      set_targetscenedynid(from.targetscenedynid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBW2GFindDartCarAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBW2GFindDartCarAck::CopyFrom(const PBW2GFindDartCarAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBW2GFindDartCarAck::IsInitialized() const {
  
  return true;
}

void PBW2GFindDartCarAck::Swap(PBW2GFindDartCarAck* other) {
  if (other != this) {
    std::swap(globaldartid_, other->globaldartid_);
    std::swap(playerid_, other->playerid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(scenedynid_, other->scenedynid_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(targetsceneid_, other->targetsceneid_);
    std::swap(targetscenedynid_, other->targetscenedynid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBW2GFindDartCarAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBW2GFindDartCarAck_descriptor_;
  metadata.reflection = PBW2GFindDartCarAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2WFactionBossHurtUpdate::kDisplayFieldNumber;
const int PBG2WFactionBossHurtUpdate::kHurtFieldNumber;
#endif  // !_MSC_VER

PBG2WFactionBossHurtUpdate::PBG2WFactionBossHurtUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2WFactionBossHurtUpdate::InitAsDefaultInstance() {
  display_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBG2WFactionBossHurtUpdate::PBG2WFactionBossHurtUpdate(const PBG2WFactionBossHurtUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2WFactionBossHurtUpdate::SharedCtor() {
  _cached_size_ = 0;
  display_ = NULL;
  hurt_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2WFactionBossHurtUpdate::~PBG2WFactionBossHurtUpdate() {
  SharedDtor();
}

void PBG2WFactionBossHurtUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete display_;
  }
}

void PBG2WFactionBossHurtUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2WFactionBossHurtUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2WFactionBossHurtUpdate_descriptor_;
}

const PBG2WFactionBossHurtUpdate& PBG2WFactionBossHurtUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBG2WFactionBossHurtUpdate* PBG2WFactionBossHurtUpdate::default_instance_ = NULL;

PBG2WFactionBossHurtUpdate* PBG2WFactionBossHurtUpdate::New() const {
  return new PBG2WFactionBossHurtUpdate;
}

void PBG2WFactionBossHurtUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_display()) {
      if (display_ != NULL) display_->::PBPlayerDisplay::Clear();
    }
    hurt_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2WFactionBossHurtUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay display = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hurt;
        break;
      }
      
      // optional uint64 hurt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hurt_)));
          set_has_hurt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2WFactionBossHurtUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->display(), output);
  }
  
  // optional uint64 hurt = 2;
  if (has_hurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hurt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2WFactionBossHurtUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->display(), target);
  }
  
  // optional uint64 hurt = 2;
  if (has_hurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hurt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2WFactionBossHurtUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay display = 1;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display());
    }
    
    // optional uint64 hurt = 2;
    if (has_hurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hurt());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2WFactionBossHurtUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2WFactionBossHurtUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2WFactionBossHurtUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2WFactionBossHurtUpdate::MergeFrom(const PBG2WFactionBossHurtUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_display()) {
      mutable_display()->::PBPlayerDisplay::MergeFrom(from.display());
    }
    if (from.has_hurt()) {
      set_hurt(from.hurt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2WFactionBossHurtUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2WFactionBossHurtUpdate::CopyFrom(const PBG2WFactionBossHurtUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2WFactionBossHurtUpdate::IsInitialized() const {
  
  return true;
}

void PBG2WFactionBossHurtUpdate::Swap(PBG2WFactionBossHurtUpdate* other) {
  if (other != this) {
    std::swap(display_, other->display_);
    std::swap(hurt_, other->hurt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2WFactionBossHurtUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2WFactionBossHurtUpdate_descriptor_;
  metadata.reflection = PBG2WFactionBossHurtUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2WCommonTreasurePrizeAsk::kPlayeridFieldNumber;
const int PBG2WCommonTreasurePrizeAsk::kTreasuretypeFieldNumber;
const int PBG2WCommonTreasurePrizeAsk::kTreasureidFieldNumber;
const int PBG2WCommonTreasurePrizeAsk::kPosxFieldNumber;
const int PBG2WCommonTreasurePrizeAsk::kPosyFieldNumber;
#endif  // !_MSC_VER

PBG2WCommonTreasurePrizeAsk::PBG2WCommonTreasurePrizeAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2WCommonTreasurePrizeAsk::InitAsDefaultInstance() {
}

PBG2WCommonTreasurePrizeAsk::PBG2WCommonTreasurePrizeAsk(const PBG2WCommonTreasurePrizeAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2WCommonTreasurePrizeAsk::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  treasuretype_ = 0u;
  treasureid_ = 0u;
  posx_ = 0;
  posy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2WCommonTreasurePrizeAsk::~PBG2WCommonTreasurePrizeAsk() {
  SharedDtor();
}

void PBG2WCommonTreasurePrizeAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2WCommonTreasurePrizeAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2WCommonTreasurePrizeAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2WCommonTreasurePrizeAsk_descriptor_;
}

const PBG2WCommonTreasurePrizeAsk& PBG2WCommonTreasurePrizeAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBG2WCommonTreasurePrizeAsk* PBG2WCommonTreasurePrizeAsk::default_instance_ = NULL;

PBG2WCommonTreasurePrizeAsk* PBG2WCommonTreasurePrizeAsk::New() const {
  return new PBG2WCommonTreasurePrizeAsk;
}

void PBG2WCommonTreasurePrizeAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    treasuretype_ = 0u;
    treasureid_ = 0u;
    posx_ = 0;
    posy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2WCommonTreasurePrizeAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_treasuretype;
        break;
      }
      
      // optional uint32 treasuretype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_treasuretype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &treasuretype_)));
          set_has_treasuretype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_treasureid;
        break;
      }
      
      // optional uint32 treasureid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_treasureid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &treasureid_)));
          set_has_treasureid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_posx;
        break;
      }
      
      // optional float posx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_posy;
        break;
      }
      
      // optional float posy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2WCommonTreasurePrizeAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional uint32 treasuretype = 2;
  if (has_treasuretype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->treasuretype(), output);
  }
  
  // optional uint32 treasureid = 3;
  if (has_treasureid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->treasureid(), output);
  }
  
  // optional float posx = 4;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->posx(), output);
  }
  
  // optional float posy = 5;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->posy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2WCommonTreasurePrizeAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional uint32 treasuretype = 2;
  if (has_treasuretype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->treasuretype(), target);
  }
  
  // optional uint32 treasureid = 3;
  if (has_treasureid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->treasureid(), target);
  }
  
  // optional float posx = 4;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->posx(), target);
  }
  
  // optional float posy = 5;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->posy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2WCommonTreasurePrizeAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 treasuretype = 2;
    if (has_treasuretype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->treasuretype());
    }
    
    // optional uint32 treasureid = 3;
    if (has_treasureid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->treasureid());
    }
    
    // optional float posx = 4;
    if (has_posx()) {
      total_size += 1 + 4;
    }
    
    // optional float posy = 5;
    if (has_posy()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2WCommonTreasurePrizeAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2WCommonTreasurePrizeAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2WCommonTreasurePrizeAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2WCommonTreasurePrizeAsk::MergeFrom(const PBG2WCommonTreasurePrizeAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_treasuretype()) {
      set_treasuretype(from.treasuretype());
    }
    if (from.has_treasureid()) {
      set_treasureid(from.treasureid());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2WCommonTreasurePrizeAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2WCommonTreasurePrizeAsk::CopyFrom(const PBG2WCommonTreasurePrizeAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2WCommonTreasurePrizeAsk::IsInitialized() const {
  
  return true;
}

void PBG2WCommonTreasurePrizeAsk::Swap(PBG2WCommonTreasurePrizeAsk* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(treasuretype_, other->treasuretype_);
    std::swap(treasureid_, other->treasureid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2WCommonTreasurePrizeAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2WCommonTreasurePrizeAsk_descriptor_;
  metadata.reflection = PBG2WCommonTreasurePrizeAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBW2GCommonTreasurePrizeAck::kPlayeridFieldNumber;
const int PBW2GCommonTreasurePrizeAck::kPrizeidFieldNumber;
const int PBW2GCommonTreasurePrizeAck::kTreasureidFieldNumber;
const int PBW2GCommonTreasurePrizeAck::kPosxFieldNumber;
const int PBW2GCommonTreasurePrizeAck::kPosyFieldNumber;
#endif  // !_MSC_VER

PBW2GCommonTreasurePrizeAck::PBW2GCommonTreasurePrizeAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBW2GCommonTreasurePrizeAck::InitAsDefaultInstance() {
}

PBW2GCommonTreasurePrizeAck::PBW2GCommonTreasurePrizeAck(const PBW2GCommonTreasurePrizeAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBW2GCommonTreasurePrizeAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  prizeid_ = 0u;
  treasureid_ = 0u;
  posx_ = 0;
  posy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBW2GCommonTreasurePrizeAck::~PBW2GCommonTreasurePrizeAck() {
  SharedDtor();
}

void PBW2GCommonTreasurePrizeAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBW2GCommonTreasurePrizeAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBW2GCommonTreasurePrizeAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBW2GCommonTreasurePrizeAck_descriptor_;
}

const PBW2GCommonTreasurePrizeAck& PBW2GCommonTreasurePrizeAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBW2GCommonTreasurePrizeAck* PBW2GCommonTreasurePrizeAck::default_instance_ = NULL;

PBW2GCommonTreasurePrizeAck* PBW2GCommonTreasurePrizeAck::New() const {
  return new PBW2GCommonTreasurePrizeAck;
}

void PBW2GCommonTreasurePrizeAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    prizeid_ = 0u;
    treasureid_ = 0u;
    posx_ = 0;
    posy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBW2GCommonTreasurePrizeAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_prizeid;
        break;
      }
      
      // optional uint32 prizeid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prizeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prizeid_)));
          set_has_prizeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_treasureid;
        break;
      }
      
      // optional uint32 treasureid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_treasureid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &treasureid_)));
          set_has_treasureid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_posx;
        break;
      }
      
      // optional float posx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_posy;
        break;
      }
      
      // optional float posy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBW2GCommonTreasurePrizeAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional uint32 prizeid = 2;
  if (has_prizeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->prizeid(), output);
  }
  
  // optional uint32 treasureid = 3;
  if (has_treasureid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->treasureid(), output);
  }
  
  // optional float posx = 4;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->posx(), output);
  }
  
  // optional float posy = 5;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->posy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBW2GCommonTreasurePrizeAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional uint32 prizeid = 2;
  if (has_prizeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->prizeid(), target);
  }
  
  // optional uint32 treasureid = 3;
  if (has_treasureid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->treasureid(), target);
  }
  
  // optional float posx = 4;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->posx(), target);
  }
  
  // optional float posy = 5;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->posy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBW2GCommonTreasurePrizeAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 prizeid = 2;
    if (has_prizeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prizeid());
    }
    
    // optional uint32 treasureid = 3;
    if (has_treasureid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->treasureid());
    }
    
    // optional float posx = 4;
    if (has_posx()) {
      total_size += 1 + 4;
    }
    
    // optional float posy = 5;
    if (has_posy()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBW2GCommonTreasurePrizeAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBW2GCommonTreasurePrizeAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBW2GCommonTreasurePrizeAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBW2GCommonTreasurePrizeAck::MergeFrom(const PBW2GCommonTreasurePrizeAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_prizeid()) {
      set_prizeid(from.prizeid());
    }
    if (from.has_treasureid()) {
      set_treasureid(from.treasureid());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBW2GCommonTreasurePrizeAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBW2GCommonTreasurePrizeAck::CopyFrom(const PBW2GCommonTreasurePrizeAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBW2GCommonTreasurePrizeAck::IsInitialized() const {
  
  return true;
}

void PBW2GCommonTreasurePrizeAck::Swap(PBW2GCommonTreasurePrizeAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(prizeid_, other->prizeid_);
    std::swap(treasureid_, other->treasureid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBW2GCommonTreasurePrizeAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBW2GCommonTreasurePrizeAck_descriptor_;
  metadata.reflection = PBW2GCommonTreasurePrizeAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBW2GCorpsChangeJobAck::kPlayeridFieldNumber;
const int PBW2GCorpsChangeJobAck::kAddjobFieldNumber;
const int PBW2GCorpsChangeJobAck::kDeljobFieldNumber;
#endif  // !_MSC_VER

PBW2GCorpsChangeJobAck::PBW2GCorpsChangeJobAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBW2GCorpsChangeJobAck::InitAsDefaultInstance() {
}

PBW2GCorpsChangeJobAck::PBW2GCorpsChangeJobAck(const PBW2GCorpsChangeJobAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBW2GCorpsChangeJobAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  addjob_ = 0u;
  deljob_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBW2GCorpsChangeJobAck::~PBW2GCorpsChangeJobAck() {
  SharedDtor();
}

void PBW2GCorpsChangeJobAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBW2GCorpsChangeJobAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBW2GCorpsChangeJobAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBW2GCorpsChangeJobAck_descriptor_;
}

const PBW2GCorpsChangeJobAck& PBW2GCorpsChangeJobAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBW2GCorpsChangeJobAck* PBW2GCorpsChangeJobAck::default_instance_ = NULL;

PBW2GCorpsChangeJobAck* PBW2GCorpsChangeJobAck::New() const {
  return new PBW2GCorpsChangeJobAck;
}

void PBW2GCorpsChangeJobAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    addjob_ = 0u;
    deljob_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBW2GCorpsChangeJobAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_addjob;
        break;
      }
      
      // optional uint32 addjob = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addjob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addjob_)));
          set_has_addjob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_deljob;
        break;
      }
      
      // optional uint32 deljob = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deljob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deljob_)));
          set_has_deljob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBW2GCorpsChangeJobAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional uint32 addjob = 2;
  if (has_addjob()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->addjob(), output);
  }
  
  // optional uint32 deljob = 3;
  if (has_deljob()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->deljob(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBW2GCorpsChangeJobAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional uint32 addjob = 2;
  if (has_addjob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->addjob(), target);
  }
  
  // optional uint32 deljob = 3;
  if (has_deljob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->deljob(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBW2GCorpsChangeJobAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 addjob = 2;
    if (has_addjob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addjob());
    }
    
    // optional uint32 deljob = 3;
    if (has_deljob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deljob());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBW2GCorpsChangeJobAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBW2GCorpsChangeJobAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBW2GCorpsChangeJobAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBW2GCorpsChangeJobAck::MergeFrom(const PBW2GCorpsChangeJobAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_addjob()) {
      set_addjob(from.addjob());
    }
    if (from.has_deljob()) {
      set_deljob(from.deljob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBW2GCorpsChangeJobAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBW2GCorpsChangeJobAck::CopyFrom(const PBW2GCorpsChangeJobAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBW2GCorpsChangeJobAck::IsInitialized() const {
  
  return true;
}

void PBW2GCorpsChangeJobAck::Swap(PBW2GCorpsChangeJobAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(addjob_, other->addjob_);
    std::swap(deljob_, other->deljob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBW2GCorpsChangeJobAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBW2GCorpsChangeJobAck_descriptor_;
  metadata.reflection = PBW2GCorpsChangeJobAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBW2GCommonForbitSpeak::kChannelFieldNumber;
const int PBW2GCommonForbitSpeak::kForbittimeFieldNumber;
#endif  // !_MSC_VER

PBW2GCommonForbitSpeak::PBW2GCommonForbitSpeak()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBW2GCommonForbitSpeak::InitAsDefaultInstance() {
}

PBW2GCommonForbitSpeak::PBW2GCommonForbitSpeak(const PBW2GCommonForbitSpeak& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBW2GCommonForbitSpeak::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 0u;
  forbittime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBW2GCommonForbitSpeak::~PBW2GCommonForbitSpeak() {
  SharedDtor();
}

void PBW2GCommonForbitSpeak::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBW2GCommonForbitSpeak::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBW2GCommonForbitSpeak::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBW2GCommonForbitSpeak_descriptor_;
}

const PBW2GCommonForbitSpeak& PBW2GCommonForbitSpeak::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBW2GCommonForbitSpeak* PBW2GCommonForbitSpeak::default_instance_ = NULL;

PBW2GCommonForbitSpeak* PBW2GCommonForbitSpeak::New() const {
  return new PBW2GCommonForbitSpeak;
}

void PBW2GCommonForbitSpeak::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_ = 0u;
    forbittime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBW2GCommonForbitSpeak::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_forbittime;
        break;
      }
      
      // optional uint32 forbittime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forbittime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forbittime_)));
          set_has_forbittime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBW2GCommonForbitSpeak::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel(), output);
  }
  
  // optional uint32 forbittime = 2;
  if (has_forbittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->forbittime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBW2GCommonForbitSpeak::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel(), target);
  }
  
  // optional uint32 forbittime = 2;
  if (has_forbittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->forbittime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBW2GCommonForbitSpeak::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }
    
    // optional uint32 forbittime = 2;
    if (has_forbittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forbittime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBW2GCommonForbitSpeak::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBW2GCommonForbitSpeak* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBW2GCommonForbitSpeak*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBW2GCommonForbitSpeak::MergeFrom(const PBW2GCommonForbitSpeak& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_forbittime()) {
      set_forbittime(from.forbittime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBW2GCommonForbitSpeak::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBW2GCommonForbitSpeak::CopyFrom(const PBW2GCommonForbitSpeak& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBW2GCommonForbitSpeak::IsInitialized() const {
  
  return true;
}

void PBW2GCommonForbitSpeak::Swap(PBW2GCommonForbitSpeak* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(forbittime_, other->forbittime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBW2GCommonForbitSpeak::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBW2GCommonForbitSpeak_descriptor_;
  metadata.reflection = PBW2GCommonForbitSpeak_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2WManorBattleFieldFighterCountAsk::kManoridFieldNumber;
const int PBG2WManorBattleFieldFighterCountAsk::kRegionidFieldNumber;
const int PBG2WManorBattleFieldFighterCountAsk::kDefenderreportFieldNumber;
const int PBG2WManorBattleFieldFighterCountAsk::kChallengerreportFieldNumber;
#endif  // !_MSC_VER

PBG2WManorBattleFieldFighterCountAsk::PBG2WManorBattleFieldFighterCountAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2WManorBattleFieldFighterCountAsk::InitAsDefaultInstance() {
  defenderreport_ = const_cast< ::PBManorBattleFieldReport*>(&::PBManorBattleFieldReport::default_instance());
  challengerreport_ = const_cast< ::PBManorBattleFieldReport*>(&::PBManorBattleFieldReport::default_instance());
}

PBG2WManorBattleFieldFighterCountAsk::PBG2WManorBattleFieldFighterCountAsk(const PBG2WManorBattleFieldFighterCountAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2WManorBattleFieldFighterCountAsk::SharedCtor() {
  _cached_size_ = 0;
  manorid_ = 0u;
  regionid_ = 0u;
  defenderreport_ = NULL;
  challengerreport_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2WManorBattleFieldFighterCountAsk::~PBG2WManorBattleFieldFighterCountAsk() {
  SharedDtor();
}

void PBG2WManorBattleFieldFighterCountAsk::SharedDtor() {
  if (this != default_instance_) {
    delete defenderreport_;
    delete challengerreport_;
  }
}

void PBG2WManorBattleFieldFighterCountAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2WManorBattleFieldFighterCountAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2WManorBattleFieldFighterCountAsk_descriptor_;
}

const PBG2WManorBattleFieldFighterCountAsk& PBG2WManorBattleFieldFighterCountAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBG2WManorBattleFieldFighterCountAsk* PBG2WManorBattleFieldFighterCountAsk::default_instance_ = NULL;

PBG2WManorBattleFieldFighterCountAsk* PBG2WManorBattleFieldFighterCountAsk::New() const {
  return new PBG2WManorBattleFieldFighterCountAsk;
}

void PBG2WManorBattleFieldFighterCountAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    manorid_ = 0u;
    regionid_ = 0u;
    if (has_defenderreport()) {
      if (defenderreport_ != NULL) defenderreport_->::PBManorBattleFieldReport::Clear();
    }
    if (has_challengerreport()) {
      if (challengerreport_ != NULL) challengerreport_->::PBManorBattleFieldReport::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2WManorBattleFieldFighterCountAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 manorid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manorid_)));
          set_has_manorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_regionid;
        break;
      }
      
      // optional uint32 regionid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_regionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &regionid_)));
          set_has_regionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_defenderreport;
        break;
      }
      
      // optional .PBManorBattleFieldReport defenderreport = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defenderreport:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defenderreport()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_challengerreport;
        break;
      }
      
      // optional .PBManorBattleFieldReport challengerreport = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_challengerreport:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_challengerreport()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2WManorBattleFieldFighterCountAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 manorid = 1;
  if (has_manorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->manorid(), output);
  }
  
  // optional uint32 regionid = 2;
  if (has_regionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->regionid(), output);
  }
  
  // optional .PBManorBattleFieldReport defenderreport = 3;
  if (has_defenderreport()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->defenderreport(), output);
  }
  
  // optional .PBManorBattleFieldReport challengerreport = 4;
  if (has_challengerreport()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->challengerreport(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2WManorBattleFieldFighterCountAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 manorid = 1;
  if (has_manorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->manorid(), target);
  }
  
  // optional uint32 regionid = 2;
  if (has_regionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->regionid(), target);
  }
  
  // optional .PBManorBattleFieldReport defenderreport = 3;
  if (has_defenderreport()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->defenderreport(), target);
  }
  
  // optional .PBManorBattleFieldReport challengerreport = 4;
  if (has_challengerreport()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->challengerreport(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2WManorBattleFieldFighterCountAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 manorid = 1;
    if (has_manorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manorid());
    }
    
    // optional uint32 regionid = 2;
    if (has_regionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->regionid());
    }
    
    // optional .PBManorBattleFieldReport defenderreport = 3;
    if (has_defenderreport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defenderreport());
    }
    
    // optional .PBManorBattleFieldReport challengerreport = 4;
    if (has_challengerreport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->challengerreport());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2WManorBattleFieldFighterCountAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2WManorBattleFieldFighterCountAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2WManorBattleFieldFighterCountAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2WManorBattleFieldFighterCountAsk::MergeFrom(const PBG2WManorBattleFieldFighterCountAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_manorid()) {
      set_manorid(from.manorid());
    }
    if (from.has_regionid()) {
      set_regionid(from.regionid());
    }
    if (from.has_defenderreport()) {
      mutable_defenderreport()->::PBManorBattleFieldReport::MergeFrom(from.defenderreport());
    }
    if (from.has_challengerreport()) {
      mutable_challengerreport()->::PBManorBattleFieldReport::MergeFrom(from.challengerreport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2WManorBattleFieldFighterCountAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2WManorBattleFieldFighterCountAsk::CopyFrom(const PBG2WManorBattleFieldFighterCountAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2WManorBattleFieldFighterCountAsk::IsInitialized() const {
  
  return true;
}

void PBG2WManorBattleFieldFighterCountAsk::Swap(PBG2WManorBattleFieldFighterCountAsk* other) {
  if (other != this) {
    std::swap(manorid_, other->manorid_);
    std::swap(regionid_, other->regionid_);
    std::swap(defenderreport_, other->defenderreport_);
    std::swap(challengerreport_, other->challengerreport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2WManorBattleFieldFighterCountAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2WManorBattleFieldFighterCountAsk_descriptor_;
  metadata.reflection = PBG2WManorBattleFieldFighterCountAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2WManorBattleFieldEnterAsk::kManoridFieldNumber;
const int PBG2WManorBattleFieldEnterAsk::kRegionidFieldNumber;
const int PBG2WManorBattleFieldEnterAsk::kPlayeridFieldNumber;
#endif  // !_MSC_VER

PBG2WManorBattleFieldEnterAsk::PBG2WManorBattleFieldEnterAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2WManorBattleFieldEnterAsk::InitAsDefaultInstance() {
}

PBG2WManorBattleFieldEnterAsk::PBG2WManorBattleFieldEnterAsk(const PBG2WManorBattleFieldEnterAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2WManorBattleFieldEnterAsk::SharedCtor() {
  _cached_size_ = 0;
  manorid_ = 0u;
  regionid_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2WManorBattleFieldEnterAsk::~PBG2WManorBattleFieldEnterAsk() {
  SharedDtor();
}

void PBG2WManorBattleFieldEnterAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2WManorBattleFieldEnterAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2WManorBattleFieldEnterAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2WManorBattleFieldEnterAsk_descriptor_;
}

const PBG2WManorBattleFieldEnterAsk& PBG2WManorBattleFieldEnterAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBG2WManorBattleFieldEnterAsk* PBG2WManorBattleFieldEnterAsk::default_instance_ = NULL;

PBG2WManorBattleFieldEnterAsk* PBG2WManorBattleFieldEnterAsk::New() const {
  return new PBG2WManorBattleFieldEnterAsk;
}

void PBG2WManorBattleFieldEnterAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    manorid_ = 0u;
    regionid_ = 0u;
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2WManorBattleFieldEnterAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 manorid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manorid_)));
          set_has_manorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_regionid;
        break;
      }
      
      // optional uint32 regionid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_regionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &regionid_)));
          set_has_regionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerid;
        break;
      }
      
      // optional uint32 playerid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2WManorBattleFieldEnterAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 manorid = 1;
  if (has_manorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->manorid(), output);
  }
  
  // optional uint32 regionid = 2;
  if (has_regionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->regionid(), output);
  }
  
  // optional uint32 playerid = 3;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2WManorBattleFieldEnterAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 manorid = 1;
  if (has_manorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->manorid(), target);
  }
  
  // optional uint32 regionid = 2;
  if (has_regionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->regionid(), target);
  }
  
  // optional uint32 playerid = 3;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2WManorBattleFieldEnterAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 manorid = 1;
    if (has_manorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manorid());
    }
    
    // optional uint32 regionid = 2;
    if (has_regionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->regionid());
    }
    
    // optional uint32 playerid = 3;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2WManorBattleFieldEnterAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2WManorBattleFieldEnterAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2WManorBattleFieldEnterAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2WManorBattleFieldEnterAsk::MergeFrom(const PBG2WManorBattleFieldEnterAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_manorid()) {
      set_manorid(from.manorid());
    }
    if (from.has_regionid()) {
      set_regionid(from.regionid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2WManorBattleFieldEnterAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2WManorBattleFieldEnterAsk::CopyFrom(const PBG2WManorBattleFieldEnterAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2WManorBattleFieldEnterAsk::IsInitialized() const {
  
  return true;
}

void PBG2WManorBattleFieldEnterAsk::Swap(PBG2WManorBattleFieldEnterAsk* other) {
  if (other != this) {
    std::swap(manorid_, other->manorid_);
    std::swap(regionid_, other->regionid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2WManorBattleFieldEnterAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2WManorBattleFieldEnterAsk_descriptor_;
  metadata.reflection = PBG2WManorBattleFieldEnterAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBW2GManorBattleFieldFightCountNtf::kManoridFieldNumber;
const int PBW2GManorBattleFieldFightCountNtf::kRegionidFieldNumber;
const int PBW2GManorBattleFieldFightCountNtf::kDefendercountFieldNumber;
const int PBW2GManorBattleFieldFightCountNtf::kChallengercountFieldNumber;
const int PBW2GManorBattleFieldFightCountNtf::kSceneidFieldNumber;
const int PBW2GManorBattleFieldFightCountNtf::kDynidFieldNumber;
const int PBW2GManorBattleFieldFightCountNtf::kDefenderscoreFieldNumber;
const int PBW2GManorBattleFieldFightCountNtf::kChallengerscoreFieldNumber;
#endif  // !_MSC_VER

PBW2GManorBattleFieldFightCountNtf::PBW2GManorBattleFieldFightCountNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBW2GManorBattleFieldFightCountNtf::InitAsDefaultInstance() {
}

PBW2GManorBattleFieldFightCountNtf::PBW2GManorBattleFieldFightCountNtf(const PBW2GManorBattleFieldFightCountNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBW2GManorBattleFieldFightCountNtf::SharedCtor() {
  _cached_size_ = 0;
  manorid_ = 0u;
  regionid_ = 0u;
  defendercount_ = 0u;
  challengercount_ = 0u;
  sceneid_ = 0u;
  dynid_ = GOOGLE_ULONGLONG(0);
  defenderscore_ = 0u;
  challengerscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBW2GManorBattleFieldFightCountNtf::~PBW2GManorBattleFieldFightCountNtf() {
  SharedDtor();
}

void PBW2GManorBattleFieldFightCountNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBW2GManorBattleFieldFightCountNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBW2GManorBattleFieldFightCountNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBW2GManorBattleFieldFightCountNtf_descriptor_;
}

const PBW2GManorBattleFieldFightCountNtf& PBW2GManorBattleFieldFightCountNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBW2GManorBattleFieldFightCountNtf* PBW2GManorBattleFieldFightCountNtf::default_instance_ = NULL;

PBW2GManorBattleFieldFightCountNtf* PBW2GManorBattleFieldFightCountNtf::New() const {
  return new PBW2GManorBattleFieldFightCountNtf;
}

void PBW2GManorBattleFieldFightCountNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    manorid_ = 0u;
    regionid_ = 0u;
    defendercount_ = 0u;
    challengercount_ = 0u;
    sceneid_ = 0u;
    dynid_ = GOOGLE_ULONGLONG(0);
    defenderscore_ = 0u;
    challengerscore_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBW2GManorBattleFieldFightCountNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 manorid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manorid_)));
          set_has_manorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_regionid;
        break;
      }
      
      // optional uint32 regionid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_regionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &regionid_)));
          set_has_regionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_defendercount;
        break;
      }
      
      // optional uint32 defendercount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defendercount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defendercount_)));
          set_has_defendercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_challengercount;
        break;
      }
      
      // optional uint32 challengercount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challengercount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challengercount_)));
          set_has_challengercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sceneid;
        break;
      }
      
      // optional uint32 sceneid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dynid;
        break;
      }
      
      // optional uint64 dynid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dynid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dynid_)));
          set_has_dynid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_defenderscore;
        break;
      }
      
      // optional uint32 defenderscore = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defenderscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defenderscore_)));
          set_has_defenderscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_challengerscore;
        break;
      }
      
      // optional uint32 challengerscore = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challengerscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challengerscore_)));
          set_has_challengerscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBW2GManorBattleFieldFightCountNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 manorid = 1;
  if (has_manorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->manorid(), output);
  }
  
  // optional uint32 regionid = 2;
  if (has_regionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->regionid(), output);
  }
  
  // optional uint32 defendercount = 3;
  if (has_defendercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->defendercount(), output);
  }
  
  // optional uint32 challengercount = 4;
  if (has_challengercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->challengercount(), output);
  }
  
  // optional uint32 sceneid = 5;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sceneid(), output);
  }
  
  // optional uint64 dynid = 6;
  if (has_dynid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->dynid(), output);
  }
  
  // optional uint32 defenderscore = 7;
  if (has_defenderscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->defenderscore(), output);
  }
  
  // optional uint32 challengerscore = 8;
  if (has_challengerscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->challengerscore(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBW2GManorBattleFieldFightCountNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 manorid = 1;
  if (has_manorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->manorid(), target);
  }
  
  // optional uint32 regionid = 2;
  if (has_regionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->regionid(), target);
  }
  
  // optional uint32 defendercount = 3;
  if (has_defendercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->defendercount(), target);
  }
  
  // optional uint32 challengercount = 4;
  if (has_challengercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->challengercount(), target);
  }
  
  // optional uint32 sceneid = 5;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sceneid(), target);
  }
  
  // optional uint64 dynid = 6;
  if (has_dynid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->dynid(), target);
  }
  
  // optional uint32 defenderscore = 7;
  if (has_defenderscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->defenderscore(), target);
  }
  
  // optional uint32 challengerscore = 8;
  if (has_challengerscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->challengerscore(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBW2GManorBattleFieldFightCountNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 manorid = 1;
    if (has_manorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manorid());
    }
    
    // optional uint32 regionid = 2;
    if (has_regionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->regionid());
    }
    
    // optional uint32 defendercount = 3;
    if (has_defendercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defendercount());
    }
    
    // optional uint32 challengercount = 4;
    if (has_challengercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challengercount());
    }
    
    // optional uint32 sceneid = 5;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }
    
    // optional uint64 dynid = 6;
    if (has_dynid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dynid());
    }
    
    // optional uint32 defenderscore = 7;
    if (has_defenderscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defenderscore());
    }
    
    // optional uint32 challengerscore = 8;
    if (has_challengerscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challengerscore());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBW2GManorBattleFieldFightCountNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBW2GManorBattleFieldFightCountNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBW2GManorBattleFieldFightCountNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBW2GManorBattleFieldFightCountNtf::MergeFrom(const PBW2GManorBattleFieldFightCountNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_manorid()) {
      set_manorid(from.manorid());
    }
    if (from.has_regionid()) {
      set_regionid(from.regionid());
    }
    if (from.has_defendercount()) {
      set_defendercount(from.defendercount());
    }
    if (from.has_challengercount()) {
      set_challengercount(from.challengercount());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_dynid()) {
      set_dynid(from.dynid());
    }
    if (from.has_defenderscore()) {
      set_defenderscore(from.defenderscore());
    }
    if (from.has_challengerscore()) {
      set_challengerscore(from.challengerscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBW2GManorBattleFieldFightCountNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBW2GManorBattleFieldFightCountNtf::CopyFrom(const PBW2GManorBattleFieldFightCountNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBW2GManorBattleFieldFightCountNtf::IsInitialized() const {
  
  return true;
}

void PBW2GManorBattleFieldFightCountNtf::Swap(PBW2GManorBattleFieldFightCountNtf* other) {
  if (other != this) {
    std::swap(manorid_, other->manorid_);
    std::swap(regionid_, other->regionid_);
    std::swap(defendercount_, other->defendercount_);
    std::swap(challengercount_, other->challengercount_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(dynid_, other->dynid_);
    std::swap(defenderscore_, other->defenderscore_);
    std::swap(challengerscore_, other->challengerscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBW2GManorBattleFieldFightCountNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBW2GManorBattleFieldFightCountNtf_descriptor_;
  metadata.reflection = PBW2GManorBattleFieldFightCountNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBW2GManorBattleFieldEnterAck::PBW2GManorBattleFieldEnterAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBW2GManorBattleFieldEnterAck::InitAsDefaultInstance() {
}

PBW2GManorBattleFieldEnterAck::PBW2GManorBattleFieldEnterAck(const PBW2GManorBattleFieldEnterAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBW2GManorBattleFieldEnterAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBW2GManorBattleFieldEnterAck::~PBW2GManorBattleFieldEnterAck() {
  SharedDtor();
}

void PBW2GManorBattleFieldEnterAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBW2GManorBattleFieldEnterAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBW2GManorBattleFieldEnterAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBW2GManorBattleFieldEnterAck_descriptor_;
}

const PBW2GManorBattleFieldEnterAck& PBW2GManorBattleFieldEnterAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBW2GManorBattleFieldEnterAck* PBW2GManorBattleFieldEnterAck::default_instance_ = NULL;

PBW2GManorBattleFieldEnterAck* PBW2GManorBattleFieldEnterAck::New() const {
  return new PBW2GManorBattleFieldEnterAck;
}

void PBW2GManorBattleFieldEnterAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBW2GManorBattleFieldEnterAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBW2GManorBattleFieldEnterAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBW2GManorBattleFieldEnterAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBW2GManorBattleFieldEnterAck::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBW2GManorBattleFieldEnterAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBW2GManorBattleFieldEnterAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBW2GManorBattleFieldEnterAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBW2GManorBattleFieldEnterAck::MergeFrom(const PBW2GManorBattleFieldEnterAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBW2GManorBattleFieldEnterAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBW2GManorBattleFieldEnterAck::CopyFrom(const PBW2GManorBattleFieldEnterAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBW2GManorBattleFieldEnterAck::IsInitialized() const {
  
  return true;
}

void PBW2GManorBattleFieldEnterAck::Swap(PBW2GManorBattleFieldEnterAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBW2GManorBattleFieldEnterAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBW2GManorBattleFieldEnterAck_descriptor_;
  metadata.reflection = PBW2GManorBattleFieldEnterAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2WManorSetActivityAsk::kSetapplyFieldNumber;
const int PBG2WManorSetActivityAsk::kSetfightFieldNumber;
#endif  // !_MSC_VER

PBG2WManorSetActivityAsk::PBG2WManorSetActivityAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2WManorSetActivityAsk::InitAsDefaultInstance() {
}

PBG2WManorSetActivityAsk::PBG2WManorSetActivityAsk(const PBG2WManorSetActivityAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2WManorSetActivityAsk::SharedCtor() {
  _cached_size_ = 0;
  setapply_ = false;
  setfight_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2WManorSetActivityAsk::~PBG2WManorSetActivityAsk() {
  SharedDtor();
}

void PBG2WManorSetActivityAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2WManorSetActivityAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2WManorSetActivityAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2WManorSetActivityAsk_descriptor_;
}

const PBG2WManorSetActivityAsk& PBG2WManorSetActivityAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBG2WManorSetActivityAsk* PBG2WManorSetActivityAsk::default_instance_ = NULL;

PBG2WManorSetActivityAsk* PBG2WManorSetActivityAsk::New() const {
  return new PBG2WManorSetActivityAsk;
}

void PBG2WManorSetActivityAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    setapply_ = false;
    setfight_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2WManorSetActivityAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool setapply = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setapply_)));
          set_has_setapply();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_setfight;
        break;
      }
      
      // optional bool setfight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_setfight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setfight_)));
          set_has_setfight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2WManorSetActivityAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool setapply = 1;
  if (has_setapply()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->setapply(), output);
  }
  
  // optional bool setfight = 2;
  if (has_setfight()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->setfight(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2WManorSetActivityAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool setapply = 1;
  if (has_setapply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->setapply(), target);
  }
  
  // optional bool setfight = 2;
  if (has_setfight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->setfight(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2WManorSetActivityAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool setapply = 1;
    if (has_setapply()) {
      total_size += 1 + 1;
    }
    
    // optional bool setfight = 2;
    if (has_setfight()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2WManorSetActivityAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2WManorSetActivityAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2WManorSetActivityAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2WManorSetActivityAsk::MergeFrom(const PBG2WManorSetActivityAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_setapply()) {
      set_setapply(from.setapply());
    }
    if (from.has_setfight()) {
      set_setfight(from.setfight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2WManorSetActivityAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2WManorSetActivityAsk::CopyFrom(const PBG2WManorSetActivityAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2WManorSetActivityAsk::IsInitialized() const {
  
  return true;
}

void PBG2WManorSetActivityAsk::Swap(PBG2WManorSetActivityAsk* other) {
  if (other != this) {
    std::swap(setapply_, other->setapply_);
    std::swap(setfight_, other->setfight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2WManorSetActivityAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2WManorSetActivityAsk_descriptor_;
  metadata.reflection = PBG2WManorSetActivityAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ManorCopymapNtfElites::kEliteFieldNumber;
#endif  // !_MSC_VER

ManorCopymapNtfElites::ManorCopymapNtfElites()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ManorCopymapNtfElites::InitAsDefaultInstance() {
}

ManorCopymapNtfElites::ManorCopymapNtfElites(const ManorCopymapNtfElites& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ManorCopymapNtfElites::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ManorCopymapNtfElites::~ManorCopymapNtfElites() {
  SharedDtor();
}

void ManorCopymapNtfElites::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ManorCopymapNtfElites::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManorCopymapNtfElites::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ManorCopymapNtfElites_descriptor_;
}

const ManorCopymapNtfElites& ManorCopymapNtfElites::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

ManorCopymapNtfElites* ManorCopymapNtfElites::default_instance_ = NULL;

ManorCopymapNtfElites* ManorCopymapNtfElites::New() const {
  return new ManorCopymapNtfElites;
}

void ManorCopymapNtfElites::Clear() {
  elite_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ManorCopymapNtfElites::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 elite = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_elite())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_elite())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_elite;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ManorCopymapNtfElites::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 elite = 1;
  for (int i = 0; i < this->elite_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->elite(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ManorCopymapNtfElites::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 elite = 1;
  for (int i = 0; i < this->elite_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->elite(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ManorCopymapNtfElites::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 elite = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->elite_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->elite(i));
    }
    total_size += 1 * this->elite_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManorCopymapNtfElites::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ManorCopymapNtfElites* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ManorCopymapNtfElites*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ManorCopymapNtfElites::MergeFrom(const ManorCopymapNtfElites& from) {
  GOOGLE_CHECK_NE(&from, this);
  elite_.MergeFrom(from.elite_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ManorCopymapNtfElites::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManorCopymapNtfElites::CopyFrom(const ManorCopymapNtfElites& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManorCopymapNtfElites::IsInitialized() const {
  
  return true;
}

void ManorCopymapNtfElites::Swap(ManorCopymapNtfElites* other) {
  if (other != this) {
    elite_.Swap(&other->elite_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ManorCopymapNtfElites::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ManorCopymapNtfElites_descriptor_;
  metadata.reflection = ManorCopymapNtfElites_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBW2GManorCopymapNtf::kManoridFieldNumber;
const int PBW2GManorCopymapNtf::kSceneidFieldNumber;
const int PBW2GManorCopymapNtf::kDynidFieldNumber;
const int PBW2GManorCopymapNtf::kCellidFieldNumber;
const int PBW2GManorCopymapNtf::kElitesFieldNumber;
const int PBW2GManorCopymapNtf::kManorInfoFieldNumber;
const int PBW2GManorCopymapNtf::kCloseactivityFieldNumber;
const int PBW2GManorCopymapNtf::kStopfightFieldNumber;
#endif  // !_MSC_VER

PBW2GManorCopymapNtf::PBW2GManorCopymapNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBW2GManorCopymapNtf::InitAsDefaultInstance() {
  elites_ = const_cast< ::ManorCopymapNtfElites*>(&::ManorCopymapNtfElites::default_instance());
  manorinfo_ = const_cast< ::PBManorInfo*>(&::PBManorInfo::default_instance());
}

PBW2GManorCopymapNtf::PBW2GManorCopymapNtf(const PBW2GManorCopymapNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBW2GManorCopymapNtf::SharedCtor() {
  _cached_size_ = 0;
  manorid_ = 0u;
  sceneid_ = 0u;
  dynid_ = GOOGLE_ULONGLONG(0);
  cellid_ = 0u;
  elites_ = NULL;
  manorinfo_ = NULL;
  closeactivity_ = false;
  stopfight_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBW2GManorCopymapNtf::~PBW2GManorCopymapNtf() {
  SharedDtor();
}

void PBW2GManorCopymapNtf::SharedDtor() {
  if (this != default_instance_) {
    delete elites_;
    delete manorinfo_;
  }
}

void PBW2GManorCopymapNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBW2GManorCopymapNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBW2GManorCopymapNtf_descriptor_;
}

const PBW2GManorCopymapNtf& PBW2GManorCopymapNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGMsg_2eproto();  return *default_instance_;
}

PBW2GManorCopymapNtf* PBW2GManorCopymapNtf::default_instance_ = NULL;

PBW2GManorCopymapNtf* PBW2GManorCopymapNtf::New() const {
  return new PBW2GManorCopymapNtf;
}

void PBW2GManorCopymapNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    manorid_ = 0u;
    sceneid_ = 0u;
    dynid_ = GOOGLE_ULONGLONG(0);
    cellid_ = 0u;
    if (has_elites()) {
      if (elites_ != NULL) elites_->::ManorCopymapNtfElites::Clear();
    }
    if (has_manorinfo()) {
      if (manorinfo_ != NULL) manorinfo_->::PBManorInfo::Clear();
    }
    closeactivity_ = false;
    stopfight_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBW2GManorCopymapNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 manorid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manorid_)));
          set_has_manorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sceneid;
        break;
      }
      
      // optional uint32 sceneid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dynid;
        break;
      }
      
      // optional uint64 dynid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dynid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dynid_)));
          set_has_dynid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cellid;
        break;
      }
      
      // optional uint32 cellid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cellid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
          set_has_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_elites;
        break;
      }
      
      // optional .ManorCopymapNtfElites elites = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_elites:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_elites()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_manorInfo;
        break;
      }
      
      // optional .PBManorInfo manorInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manorInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_manorinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_closeactivity;
        break;
      }
      
      // optional bool closeactivity = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_closeactivity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &closeactivity_)));
          set_has_closeactivity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_stopfight;
        break;
      }
      
      // optional bool stopfight = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stopfight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stopfight_)));
          set_has_stopfight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBW2GManorCopymapNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 manorid = 1;
  if (has_manorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->manorid(), output);
  }
  
  // optional uint32 sceneid = 2;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sceneid(), output);
  }
  
  // optional uint64 dynid = 3;
  if (has_dynid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->dynid(), output);
  }
  
  // optional uint32 cellid = 4;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cellid(), output);
  }
  
  // optional .ManorCopymapNtfElites elites = 5;
  if (has_elites()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->elites(), output);
  }
  
  // optional .PBManorInfo manorInfo = 6;
  if (has_manorinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->manorinfo(), output);
  }
  
  // optional bool closeactivity = 7;
  if (has_closeactivity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->closeactivity(), output);
  }
  
  // optional bool stopfight = 8;
  if (has_stopfight()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->stopfight(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBW2GManorCopymapNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 manorid = 1;
  if (has_manorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->manorid(), target);
  }
  
  // optional uint32 sceneid = 2;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sceneid(), target);
  }
  
  // optional uint64 dynid = 3;
  if (has_dynid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->dynid(), target);
  }
  
  // optional uint32 cellid = 4;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cellid(), target);
  }
  
  // optional .ManorCopymapNtfElites elites = 5;
  if (has_elites()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->elites(), target);
  }
  
  // optional .PBManorInfo manorInfo = 6;
  if (has_manorinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->manorinfo(), target);
  }
  
  // optional bool closeactivity = 7;
  if (has_closeactivity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->closeactivity(), target);
  }
  
  // optional bool stopfight = 8;
  if (has_stopfight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->stopfight(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBW2GManorCopymapNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 manorid = 1;
    if (has_manorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manorid());
    }
    
    // optional uint32 sceneid = 2;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }
    
    // optional uint64 dynid = 3;
    if (has_dynid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dynid());
    }
    
    // optional uint32 cellid = 4;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cellid());
    }
    
    // optional .ManorCopymapNtfElites elites = 5;
    if (has_elites()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->elites());
    }
    
    // optional .PBManorInfo manorInfo = 6;
    if (has_manorinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->manorinfo());
    }
    
    // optional bool closeactivity = 7;
    if (has_closeactivity()) {
      total_size += 1 + 1;
    }
    
    // optional bool stopfight = 8;
    if (has_stopfight()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBW2GManorCopymapNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBW2GManorCopymapNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBW2GManorCopymapNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBW2GManorCopymapNtf::MergeFrom(const PBW2GManorCopymapNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_manorid()) {
      set_manorid(from.manorid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_dynid()) {
      set_dynid(from.dynid());
    }
    if (from.has_cellid()) {
      set_cellid(from.cellid());
    }
    if (from.has_elites()) {
      mutable_elites()->::ManorCopymapNtfElites::MergeFrom(from.elites());
    }
    if (from.has_manorinfo()) {
      mutable_manorinfo()->::PBManorInfo::MergeFrom(from.manorinfo());
    }
    if (from.has_closeactivity()) {
      set_closeactivity(from.closeactivity());
    }
    if (from.has_stopfight()) {
      set_stopfight(from.stopfight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBW2GManorCopymapNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBW2GManorCopymapNtf::CopyFrom(const PBW2GManorCopymapNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBW2GManorCopymapNtf::IsInitialized() const {
  
  return true;
}

void PBW2GManorCopymapNtf::Swap(PBW2GManorCopymapNtf* other) {
  if (other != this) {
    std::swap(manorid_, other->manorid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(dynid_, other->dynid_);
    std::swap(cellid_, other->cellid_);
    std::swap(elites_, other->elites_);
    std::swap(manorinfo_, other->manorinfo_);
    std::swap(closeactivity_, other->closeactivity_);
    std::swap(stopfight_, other->stopfight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBW2GManorCopymapNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBW2GManorCopymapNtf_descriptor_;
  metadata.reflection = PBW2GManorCopymapNtf_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
