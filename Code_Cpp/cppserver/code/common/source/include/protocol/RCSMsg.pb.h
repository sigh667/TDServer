// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RCSMsg.proto

#ifndef PROTOBUF_RCSMsg_2eproto__INCLUDED
#define PROTOBUF_RCSMsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RCSMsg_2eproto();
void protobuf_AssignDesc_RCSMsg_2eproto();
void protobuf_ShutdownFile_RCSMsg_2eproto();

class PBC2RSTextCmdAsk;
class PBRS2CTextCmdAck;
class PBC2RSAccountUpdateAsk;
class PBRS2CAccountUpdateAck;
class PBRS2CAccountUpdateAck_AccountInfo;
class PBRS2CNetStatAsk;
class PBRS2CetStatAck;
class PBC2RSAccountRemoveAsk;
class PBRS2CAccountRemoveAck;
class PBC2RSRobotAIUpdateAsk;
class PBRS2CRobotAIUpdateAck;
class PBC2RSMSGStreamAsk;
class PBRS2CMSGStreamAck;
class PBC2RSLoadLuaAsk;
class PBRS2CLoadLuaAck;
class PBMSGPrintf;

// ===================================================================

class PBC2RSTextCmdAsk : public ::google::protobuf::Message {
 public:
  PBC2RSTextCmdAsk();
  virtual ~PBC2RSTextCmdAsk();
  
  PBC2RSTextCmdAsk(const PBC2RSTextCmdAsk& from);
  
  inline PBC2RSTextCmdAsk& operator=(const PBC2RSTextCmdAsk& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBC2RSTextCmdAsk& default_instance();
  
  void Swap(PBC2RSTextCmdAsk* other);
  
  // implements Message ----------------------------------------------
  
  PBC2RSTextCmdAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBC2RSTextCmdAsk& from);
  void MergeFrom(const PBC2RSTextCmdAsk& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline const ::std::string& cmd() const;
  inline void set_cmd(const ::std::string& value);
  inline void set_cmd(const char* value);
  inline void set_cmd(const char* value, size_t size);
  inline ::std::string* mutable_cmd();
  inline ::std::string* release_cmd();
  
  // @@protoc_insertion_point(class_scope:PBC2RSTextCmdAsk)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* cmd_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_RCSMsg_2eproto();
  friend void protobuf_AssignDesc_RCSMsg_2eproto();
  friend void protobuf_ShutdownFile_RCSMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBC2RSTextCmdAsk* default_instance_;
};
// -------------------------------------------------------------------

class PBRS2CTextCmdAck : public ::google::protobuf::Message {
 public:
  PBRS2CTextCmdAck();
  virtual ~PBRS2CTextCmdAck();
  
  PBRS2CTextCmdAck(const PBRS2CTextCmdAck& from);
  
  inline PBRS2CTextCmdAck& operator=(const PBRS2CTextCmdAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBRS2CTextCmdAck& default_instance();
  
  void Swap(PBRS2CTextCmdAck* other);
  
  // implements Message ----------------------------------------------
  
  PBRS2CTextCmdAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBRS2CTextCmdAck& from);
  void MergeFrom(const PBRS2CTextCmdAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline const ::std::string& cmd() const;
  inline void set_cmd(const ::std::string& value);
  inline void set_cmd(const char* value);
  inline void set_cmd(const char* value, size_t size);
  inline ::std::string* mutable_cmd();
  inline ::std::string* release_cmd();
  
  // @@protoc_insertion_point(class_scope:PBRS2CTextCmdAck)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* cmd_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_RCSMsg_2eproto();
  friend void protobuf_AssignDesc_RCSMsg_2eproto();
  friend void protobuf_ShutdownFile_RCSMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBRS2CTextCmdAck* default_instance_;
};
// -------------------------------------------------------------------

class PBC2RSAccountUpdateAsk : public ::google::protobuf::Message {
 public:
  PBC2RSAccountUpdateAsk();
  virtual ~PBC2RSAccountUpdateAsk();
  
  PBC2RSAccountUpdateAsk(const PBC2RSAccountUpdateAsk& from);
  
  inline PBC2RSAccountUpdateAsk& operator=(const PBC2RSAccountUpdateAsk& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBC2RSAccountUpdateAsk& default_instance();
  
  void Swap(PBC2RSAccountUpdateAsk* other);
  
  // implements Message ----------------------------------------------
  
  PBC2RSAccountUpdateAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBC2RSAccountUpdateAsk& from);
  void MergeFrom(const PBC2RSAccountUpdateAsk& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:PBC2RSAccountUpdateAsk)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_RCSMsg_2eproto();
  friend void protobuf_AssignDesc_RCSMsg_2eproto();
  friend void protobuf_ShutdownFile_RCSMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBC2RSAccountUpdateAsk* default_instance_;
};
// -------------------------------------------------------------------

class PBRS2CAccountUpdateAck_AccountInfo : public ::google::protobuf::Message {
 public:
  PBRS2CAccountUpdateAck_AccountInfo();
  virtual ~PBRS2CAccountUpdateAck_AccountInfo();
  
  PBRS2CAccountUpdateAck_AccountInfo(const PBRS2CAccountUpdateAck_AccountInfo& from);
  
  inline PBRS2CAccountUpdateAck_AccountInfo& operator=(const PBRS2CAccountUpdateAck_AccountInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBRS2CAccountUpdateAck_AccountInfo& default_instance();
  
  void Swap(PBRS2CAccountUpdateAck_AccountInfo* other);
  
  // implements Message ----------------------------------------------
  
  PBRS2CAccountUpdateAck_AccountInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBRS2CAccountUpdateAck_AccountInfo& from);
  void MergeFrom(const PBRS2CAccountUpdateAck_AccountInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 job = 3;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 3;
  inline ::google::protobuf::int32 job() const;
  inline void set_job(::google::protobuf::int32 value);
  
  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 scene = 5;
  inline bool has_scene() const;
  inline void clear_scene();
  static const int kSceneFieldNumber = 5;
  inline ::google::protobuf::int32 scene() const;
  inline void set_scene(::google::protobuf::int32 value);
  
  // optional int32 cell = 6;
  inline bool has_cell() const;
  inline void clear_cell();
  static const int kCellFieldNumber = 6;
  inline ::google::protobuf::int32 cell() const;
  inline void set_cell(::google::protobuf::int32 value);
  
  // optional int32 status = 7;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 7;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // optional int32 move = 8;
  inline bool has_move() const;
  inline void clear_move();
  static const int kMoveFieldNumber = 8;
  inline ::google::protobuf::int32 move() const;
  inline void set_move(::google::protobuf::int32 value);
  
  // optional int32 ai = 9;
  inline bool has_ai() const;
  inline void clear_ai();
  static const int kAiFieldNumber = 9;
  inline ::google::protobuf::int32 ai() const;
  inline void set_ai(::google::protobuf::int32 value);
  
  // optional int32 reconn = 10;
  inline bool has_reconn() const;
  inline void clear_reconn();
  static const int kReconnFieldNumber = 10;
  inline ::google::protobuf::int32 reconn() const;
  inline void set_reconn(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBRS2CAccountUpdateAck.AccountInfo)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_scene();
  inline void clear_has_scene();
  inline void set_has_cell();
  inline void clear_has_cell();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_move();
  inline void clear_has_move();
  inline void set_has_ai();
  inline void clear_has_ai();
  inline void set_has_reconn();
  inline void clear_has_reconn();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* account_;
  ::std::string* name_;
  ::google::protobuf::int32 job_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 scene_;
  ::google::protobuf::int32 cell_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 move_;
  ::google::protobuf::int32 ai_;
  ::google::protobuf::int32 reconn_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_RCSMsg_2eproto();
  friend void protobuf_AssignDesc_RCSMsg_2eproto();
  friend void protobuf_ShutdownFile_RCSMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBRS2CAccountUpdateAck_AccountInfo* default_instance_;
};
// -------------------------------------------------------------------

class PBRS2CAccountUpdateAck : public ::google::protobuf::Message {
 public:
  PBRS2CAccountUpdateAck();
  virtual ~PBRS2CAccountUpdateAck();
  
  PBRS2CAccountUpdateAck(const PBRS2CAccountUpdateAck& from);
  
  inline PBRS2CAccountUpdateAck& operator=(const PBRS2CAccountUpdateAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBRS2CAccountUpdateAck& default_instance();
  
  void Swap(PBRS2CAccountUpdateAck* other);
  
  // implements Message ----------------------------------------------
  
  PBRS2CAccountUpdateAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBRS2CAccountUpdateAck& from);
  void MergeFrom(const PBRS2CAccountUpdateAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef PBRS2CAccountUpdateAck_AccountInfo AccountInfo;
  
  // accessors -------------------------------------------------------
  
  // repeated .PBRS2CAccountUpdateAck.AccountInfo info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::PBRS2CAccountUpdateAck_AccountInfo& info(int index) const;
  inline ::PBRS2CAccountUpdateAck_AccountInfo* mutable_info(int index);
  inline ::PBRS2CAccountUpdateAck_AccountInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::PBRS2CAccountUpdateAck_AccountInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBRS2CAccountUpdateAck_AccountInfo >*
      mutable_info();
  
  // @@protoc_insertion_point(class_scope:PBRS2CAccountUpdateAck)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PBRS2CAccountUpdateAck_AccountInfo > info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_RCSMsg_2eproto();
  friend void protobuf_AssignDesc_RCSMsg_2eproto();
  friend void protobuf_ShutdownFile_RCSMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBRS2CAccountUpdateAck* default_instance_;
};
// -------------------------------------------------------------------

class PBRS2CNetStatAsk : public ::google::protobuf::Message {
 public:
  PBRS2CNetStatAsk();
  virtual ~PBRS2CNetStatAsk();
  
  PBRS2CNetStatAsk(const PBRS2CNetStatAsk& from);
  
  inline PBRS2CNetStatAsk& operator=(const PBRS2CNetStatAsk& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBRS2CNetStatAsk& default_instance();
  
  void Swap(PBRS2CNetStatAsk* other);
  
  // implements Message ----------------------------------------------
  
  PBRS2CNetStatAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBRS2CNetStatAsk& from);
  void MergeFrom(const PBRS2CNetStatAsk& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:PBRS2CNetStatAsk)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_RCSMsg_2eproto();
  friend void protobuf_AssignDesc_RCSMsg_2eproto();
  friend void protobuf_ShutdownFile_RCSMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBRS2CNetStatAsk* default_instance_;
};
// -------------------------------------------------------------------

class PBRS2CetStatAck : public ::google::protobuf::Message {
 public:
  PBRS2CetStatAck();
  virtual ~PBRS2CetStatAck();
  
  PBRS2CetStatAck(const PBRS2CetStatAck& from);
  
  inline PBRS2CetStatAck& operator=(const PBRS2CetStatAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBRS2CetStatAck& default_instance();
  
  void Swap(PBRS2CetStatAck* other);
  
  // implements Message ----------------------------------------------
  
  PBRS2CetStatAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBRS2CetStatAck& from);
  void MergeFrom(const PBRS2CetStatAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 conn = 1;
  inline bool has_conn() const;
  inline void clear_conn();
  static const int kConnFieldNumber = 1;
  inline ::google::protobuf::int32 conn() const;
  inline void set_conn(::google::protobuf::int32 value);
  
  // optional int32 reconn = 2;
  inline bool has_reconn() const;
  inline void clear_reconn();
  static const int kReconnFieldNumber = 2;
  inline ::google::protobuf::int32 reconn() const;
  inline void set_reconn(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBRS2CetStatAck)
 private:
  inline void set_has_conn();
  inline void clear_has_conn();
  inline void set_has_reconn();
  inline void clear_has_reconn();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 conn_;
  ::google::protobuf::int32 reconn_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_RCSMsg_2eproto();
  friend void protobuf_AssignDesc_RCSMsg_2eproto();
  friend void protobuf_ShutdownFile_RCSMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBRS2CetStatAck* default_instance_;
};
// -------------------------------------------------------------------

class PBC2RSAccountRemoveAsk : public ::google::protobuf::Message {
 public:
  PBC2RSAccountRemoveAsk();
  virtual ~PBC2RSAccountRemoveAsk();
  
  PBC2RSAccountRemoveAsk(const PBC2RSAccountRemoveAsk& from);
  
  inline PBC2RSAccountRemoveAsk& operator=(const PBC2RSAccountRemoveAsk& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBC2RSAccountRemoveAsk& default_instance();
  
  void Swap(PBC2RSAccountRemoveAsk* other);
  
  // implements Message ----------------------------------------------
  
  PBC2RSAccountRemoveAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBC2RSAccountRemoveAsk& from);
  void MergeFrom(const PBC2RSAccountRemoveAsk& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  
  // @@protoc_insertion_point(class_scope:PBC2RSAccountRemoveAsk)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* account_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_RCSMsg_2eproto();
  friend void protobuf_AssignDesc_RCSMsg_2eproto();
  friend void protobuf_ShutdownFile_RCSMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBC2RSAccountRemoveAsk* default_instance_;
};
// -------------------------------------------------------------------

class PBRS2CAccountRemoveAck : public ::google::protobuf::Message {
 public:
  PBRS2CAccountRemoveAck();
  virtual ~PBRS2CAccountRemoveAck();
  
  PBRS2CAccountRemoveAck(const PBRS2CAccountRemoveAck& from);
  
  inline PBRS2CAccountRemoveAck& operator=(const PBRS2CAccountRemoveAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBRS2CAccountRemoveAck& default_instance();
  
  void Swap(PBRS2CAccountRemoveAck* other);
  
  // implements Message ----------------------------------------------
  
  PBRS2CAccountRemoveAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBRS2CAccountRemoveAck& from);
  void MergeFrom(const PBRS2CAccountRemoveAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  
  // @@protoc_insertion_point(class_scope:PBRS2CAccountRemoveAck)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* account_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_RCSMsg_2eproto();
  friend void protobuf_AssignDesc_RCSMsg_2eproto();
  friend void protobuf_ShutdownFile_RCSMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBRS2CAccountRemoveAck* default_instance_;
};
// -------------------------------------------------------------------

class PBC2RSRobotAIUpdateAsk : public ::google::protobuf::Message {
 public:
  PBC2RSRobotAIUpdateAsk();
  virtual ~PBC2RSRobotAIUpdateAsk();
  
  PBC2RSRobotAIUpdateAsk(const PBC2RSRobotAIUpdateAsk& from);
  
  inline PBC2RSRobotAIUpdateAsk& operator=(const PBC2RSRobotAIUpdateAsk& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBC2RSRobotAIUpdateAsk& default_instance();
  
  void Swap(PBC2RSRobotAIUpdateAsk* other);
  
  // implements Message ----------------------------------------------
  
  PBC2RSRobotAIUpdateAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBC2RSRobotAIUpdateAsk& from);
  void MergeFrom(const PBC2RSRobotAIUpdateAsk& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string account = 1;
  inline int account_size() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account(int index) const;
  inline ::std::string* mutable_account(int index);
  inline void set_account(int index, const ::std::string& value);
  inline void set_account(int index, const char* value);
  inline void set_account(int index, const char* value, size_t size);
  inline ::std::string* add_account();
  inline void add_account(const ::std::string& value);
  inline void add_account(const char* value);
  inline void add_account(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& account() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_account();
  
  // optional string ainame = 2;
  inline bool has_ainame() const;
  inline void clear_ainame();
  static const int kAinameFieldNumber = 2;
  inline const ::std::string& ainame() const;
  inline void set_ainame(const ::std::string& value);
  inline void set_ainame(const char* value);
  inline void set_ainame(const char* value, size_t size);
  inline ::std::string* mutable_ainame();
  inline ::std::string* release_ainame();
  
  // @@protoc_insertion_point(class_scope:PBC2RSRobotAIUpdateAsk)
 private:
  inline void set_has_ainame();
  inline void clear_has_ainame();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> account_;
  ::std::string* ainame_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_RCSMsg_2eproto();
  friend void protobuf_AssignDesc_RCSMsg_2eproto();
  friend void protobuf_ShutdownFile_RCSMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBC2RSRobotAIUpdateAsk* default_instance_;
};
// -------------------------------------------------------------------

class PBRS2CRobotAIUpdateAck : public ::google::protobuf::Message {
 public:
  PBRS2CRobotAIUpdateAck();
  virtual ~PBRS2CRobotAIUpdateAck();
  
  PBRS2CRobotAIUpdateAck(const PBRS2CRobotAIUpdateAck& from);
  
  inline PBRS2CRobotAIUpdateAck& operator=(const PBRS2CRobotAIUpdateAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBRS2CRobotAIUpdateAck& default_instance();
  
  void Swap(PBRS2CRobotAIUpdateAck* other);
  
  // implements Message ----------------------------------------------
  
  PBRS2CRobotAIUpdateAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBRS2CRobotAIUpdateAck& from);
  void MergeFrom(const PBRS2CRobotAIUpdateAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string account = 1;
  inline int account_size() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account(int index) const;
  inline ::std::string* mutable_account(int index);
  inline void set_account(int index, const ::std::string& value);
  inline void set_account(int index, const char* value);
  inline void set_account(int index, const char* value, size_t size);
  inline ::std::string* add_account();
  inline void add_account(const ::std::string& value);
  inline void add_account(const char* value);
  inline void add_account(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& account() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_account();
  
  // optional string ainame = 2;
  inline bool has_ainame() const;
  inline void clear_ainame();
  static const int kAinameFieldNumber = 2;
  inline const ::std::string& ainame() const;
  inline void set_ainame(const ::std::string& value);
  inline void set_ainame(const char* value);
  inline void set_ainame(const char* value, size_t size);
  inline ::std::string* mutable_ainame();
  inline ::std::string* release_ainame();
  
  // @@protoc_insertion_point(class_scope:PBRS2CRobotAIUpdateAck)
 private:
  inline void set_has_ainame();
  inline void clear_has_ainame();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> account_;
  ::std::string* ainame_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_RCSMsg_2eproto();
  friend void protobuf_AssignDesc_RCSMsg_2eproto();
  friend void protobuf_ShutdownFile_RCSMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBRS2CRobotAIUpdateAck* default_instance_;
};
// -------------------------------------------------------------------

class PBC2RSMSGStreamAsk : public ::google::protobuf::Message {
 public:
  PBC2RSMSGStreamAsk();
  virtual ~PBC2RSMSGStreamAsk();
  
  PBC2RSMSGStreamAsk(const PBC2RSMSGStreamAsk& from);
  
  inline PBC2RSMSGStreamAsk& operator=(const PBC2RSMSGStreamAsk& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBC2RSMSGStreamAsk& default_instance();
  
  void Swap(PBC2RSMSGStreamAsk* other);
  
  // implements Message ----------------------------------------------
  
  PBC2RSMSGStreamAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBC2RSMSGStreamAsk& from);
  void MergeFrom(const PBC2RSMSGStreamAsk& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  
  // optional uint32 mainprot = 2;
  inline bool has_mainprot() const;
  inline void clear_mainprot();
  static const int kMainprotFieldNumber = 2;
  inline ::google::protobuf::uint32 mainprot() const;
  inline void set_mainprot(::google::protobuf::uint32 value);
  
  // optional uint32 subprot = 3;
  inline bool has_subprot() const;
  inline void clear_subprot();
  static const int kSubprotFieldNumber = 3;
  inline ::google::protobuf::uint32 subprot() const;
  inline void set_subprot(::google::protobuf::uint32 value);
  
  // optional string msgname = 4;
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgnameFieldNumber = 4;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  
  // optional string msgdata = 5;
  inline bool has_msgdata() const;
  inline void clear_msgdata();
  static const int kMsgdataFieldNumber = 5;
  inline const ::std::string& msgdata() const;
  inline void set_msgdata(const ::std::string& value);
  inline void set_msgdata(const char* value);
  inline void set_msgdata(const char* value, size_t size);
  inline ::std::string* mutable_msgdata();
  inline ::std::string* release_msgdata();
  
  // @@protoc_insertion_point(class_scope:PBC2RSMSGStreamAsk)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_mainprot();
  inline void clear_has_mainprot();
  inline void set_has_subprot();
  inline void clear_has_subprot();
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_msgdata();
  inline void clear_has_msgdata();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* account_;
  ::google::protobuf::uint32 mainprot_;
  ::google::protobuf::uint32 subprot_;
  ::std::string* msgname_;
  ::std::string* msgdata_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_RCSMsg_2eproto();
  friend void protobuf_AssignDesc_RCSMsg_2eproto();
  friend void protobuf_ShutdownFile_RCSMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBC2RSMSGStreamAsk* default_instance_;
};
// -------------------------------------------------------------------

class PBRS2CMSGStreamAck : public ::google::protobuf::Message {
 public:
  PBRS2CMSGStreamAck();
  virtual ~PBRS2CMSGStreamAck();
  
  PBRS2CMSGStreamAck(const PBRS2CMSGStreamAck& from);
  
  inline PBRS2CMSGStreamAck& operator=(const PBRS2CMSGStreamAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBRS2CMSGStreamAck& default_instance();
  
  void Swap(PBRS2CMSGStreamAck* other);
  
  // implements Message ----------------------------------------------
  
  PBRS2CMSGStreamAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBRS2CMSGStreamAck& from);
  void MergeFrom(const PBRS2CMSGStreamAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:PBRS2CMSGStreamAck)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_RCSMsg_2eproto();
  friend void protobuf_AssignDesc_RCSMsg_2eproto();
  friend void protobuf_ShutdownFile_RCSMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBRS2CMSGStreamAck* default_instance_;
};
// -------------------------------------------------------------------

class PBC2RSLoadLuaAsk : public ::google::protobuf::Message {
 public:
  PBC2RSLoadLuaAsk();
  virtual ~PBC2RSLoadLuaAsk();
  
  PBC2RSLoadLuaAsk(const PBC2RSLoadLuaAsk& from);
  
  inline PBC2RSLoadLuaAsk& operator=(const PBC2RSLoadLuaAsk& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBC2RSLoadLuaAsk& default_instance();
  
  void Swap(PBC2RSLoadLuaAsk* other);
  
  // implements Message ----------------------------------------------
  
  PBC2RSLoadLuaAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBC2RSLoadLuaAsk& from);
  void MergeFrom(const PBC2RSLoadLuaAsk& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  
  // @@protoc_insertion_point(class_scope:PBC2RSLoadLuaAsk)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* account_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_RCSMsg_2eproto();
  friend void protobuf_AssignDesc_RCSMsg_2eproto();
  friend void protobuf_ShutdownFile_RCSMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBC2RSLoadLuaAsk* default_instance_;
};
// -------------------------------------------------------------------

class PBRS2CLoadLuaAck : public ::google::protobuf::Message {
 public:
  PBRS2CLoadLuaAck();
  virtual ~PBRS2CLoadLuaAck();
  
  PBRS2CLoadLuaAck(const PBRS2CLoadLuaAck& from);
  
  inline PBRS2CLoadLuaAck& operator=(const PBRS2CLoadLuaAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBRS2CLoadLuaAck& default_instance();
  
  void Swap(PBRS2CLoadLuaAck* other);
  
  // implements Message ----------------------------------------------
  
  PBRS2CLoadLuaAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBRS2CLoadLuaAck& from);
  void MergeFrom(const PBRS2CLoadLuaAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:PBRS2CLoadLuaAck)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_RCSMsg_2eproto();
  friend void protobuf_AssignDesc_RCSMsg_2eproto();
  friend void protobuf_ShutdownFile_RCSMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBRS2CLoadLuaAck* default_instance_;
};
// -------------------------------------------------------------------

class PBMSGPrintf : public ::google::protobuf::Message {
 public:
  PBMSGPrintf();
  virtual ~PBMSGPrintf();
  
  PBMSGPrintf(const PBMSGPrintf& from);
  
  inline PBMSGPrintf& operator=(const PBMSGPrintf& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMSGPrintf& default_instance();
  
  void Swap(PBMSGPrintf* other);
  
  // implements Message ----------------------------------------------
  
  PBMSGPrintf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMSGPrintf& from);
  void MergeFrom(const PBMSGPrintf& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  
  // optional int32 printf = 2;
  inline bool has_printf() const;
  inline void clear_printf();
  static const int kPrintfFieldNumber = 2;
  inline ::google::protobuf::int32 printf() const;
  inline void set_printf(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBMSGPrintf)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_printf();
  inline void clear_has_printf();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* account_;
  ::google::protobuf::int32 printf_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_RCSMsg_2eproto();
  friend void protobuf_AssignDesc_RCSMsg_2eproto();
  friend void protobuf_ShutdownFile_RCSMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBMSGPrintf* default_instance_;
};
// ===================================================================


// ===================================================================

// PBC2RSTextCmdAsk

// optional string cmd = 1;
inline bool PBC2RSTextCmdAsk::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBC2RSTextCmdAsk::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBC2RSTextCmdAsk::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBC2RSTextCmdAsk::clear_cmd() {
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    cmd_->clear();
  }
  clear_has_cmd();
}
inline const ::std::string& PBC2RSTextCmdAsk::cmd() const {
  return *cmd_;
}
inline void PBC2RSTextCmdAsk::set_cmd(const ::std::string& value) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(value);
}
inline void PBC2RSTextCmdAsk::set_cmd(const char* value) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(value);
}
inline void PBC2RSTextCmdAsk::set_cmd(const char* value, size_t size) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBC2RSTextCmdAsk::mutable_cmd() {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  return cmd_;
}
inline ::std::string* PBC2RSTextCmdAsk::release_cmd() {
  clear_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cmd_;
    cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PBRS2CTextCmdAck

// optional string cmd = 1;
inline bool PBRS2CTextCmdAck::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBRS2CTextCmdAck::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBRS2CTextCmdAck::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBRS2CTextCmdAck::clear_cmd() {
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    cmd_->clear();
  }
  clear_has_cmd();
}
inline const ::std::string& PBRS2CTextCmdAck::cmd() const {
  return *cmd_;
}
inline void PBRS2CTextCmdAck::set_cmd(const ::std::string& value) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(value);
}
inline void PBRS2CTextCmdAck::set_cmd(const char* value) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(value);
}
inline void PBRS2CTextCmdAck::set_cmd(const char* value, size_t size) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBRS2CTextCmdAck::mutable_cmd() {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  return cmd_;
}
inline ::std::string* PBRS2CTextCmdAck::release_cmd() {
  clear_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cmd_;
    cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PBC2RSAccountUpdateAsk

// -------------------------------------------------------------------

// PBRS2CAccountUpdateAck_AccountInfo

// optional string account = 1;
inline bool PBRS2CAccountUpdateAck_AccountInfo::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBRS2CAccountUpdateAck_AccountInfo::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBRS2CAccountUpdateAck_AccountInfo::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBRS2CAccountUpdateAck_AccountInfo::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& PBRS2CAccountUpdateAck_AccountInfo::account() const {
  return *account_;
}
inline void PBRS2CAccountUpdateAck_AccountInfo::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void PBRS2CAccountUpdateAck_AccountInfo::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void PBRS2CAccountUpdateAck_AccountInfo::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBRS2CAccountUpdateAck_AccountInfo::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* PBRS2CAccountUpdateAck_AccountInfo::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string name = 2;
inline bool PBRS2CAccountUpdateAck_AccountInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBRS2CAccountUpdateAck_AccountInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBRS2CAccountUpdateAck_AccountInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBRS2CAccountUpdateAck_AccountInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PBRS2CAccountUpdateAck_AccountInfo::name() const {
  return *name_;
}
inline void PBRS2CAccountUpdateAck_AccountInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBRS2CAccountUpdateAck_AccountInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBRS2CAccountUpdateAck_AccountInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBRS2CAccountUpdateAck_AccountInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PBRS2CAccountUpdateAck_AccountInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 job = 3;
inline bool PBRS2CAccountUpdateAck_AccountInfo::has_job() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBRS2CAccountUpdateAck_AccountInfo::set_has_job() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBRS2CAccountUpdateAck_AccountInfo::clear_has_job() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBRS2CAccountUpdateAck_AccountInfo::clear_job() {
  job_ = 0;
  clear_has_job();
}
inline ::google::protobuf::int32 PBRS2CAccountUpdateAck_AccountInfo::job() const {
  return job_;
}
inline void PBRS2CAccountUpdateAck_AccountInfo::set_job(::google::protobuf::int32 value) {
  set_has_job();
  job_ = value;
}

// optional int32 level = 4;
inline bool PBRS2CAccountUpdateAck_AccountInfo::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBRS2CAccountUpdateAck_AccountInfo::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBRS2CAccountUpdateAck_AccountInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBRS2CAccountUpdateAck_AccountInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 PBRS2CAccountUpdateAck_AccountInfo::level() const {
  return level_;
}
inline void PBRS2CAccountUpdateAck_AccountInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 scene = 5;
inline bool PBRS2CAccountUpdateAck_AccountInfo::has_scene() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBRS2CAccountUpdateAck_AccountInfo::set_has_scene() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBRS2CAccountUpdateAck_AccountInfo::clear_has_scene() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBRS2CAccountUpdateAck_AccountInfo::clear_scene() {
  scene_ = 0;
  clear_has_scene();
}
inline ::google::protobuf::int32 PBRS2CAccountUpdateAck_AccountInfo::scene() const {
  return scene_;
}
inline void PBRS2CAccountUpdateAck_AccountInfo::set_scene(::google::protobuf::int32 value) {
  set_has_scene();
  scene_ = value;
}

// optional int32 cell = 6;
inline bool PBRS2CAccountUpdateAck_AccountInfo::has_cell() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBRS2CAccountUpdateAck_AccountInfo::set_has_cell() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBRS2CAccountUpdateAck_AccountInfo::clear_has_cell() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBRS2CAccountUpdateAck_AccountInfo::clear_cell() {
  cell_ = 0;
  clear_has_cell();
}
inline ::google::protobuf::int32 PBRS2CAccountUpdateAck_AccountInfo::cell() const {
  return cell_;
}
inline void PBRS2CAccountUpdateAck_AccountInfo::set_cell(::google::protobuf::int32 value) {
  set_has_cell();
  cell_ = value;
}

// optional int32 status = 7;
inline bool PBRS2CAccountUpdateAck_AccountInfo::has_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PBRS2CAccountUpdateAck_AccountInfo::set_has_status() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PBRS2CAccountUpdateAck_AccountInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PBRS2CAccountUpdateAck_AccountInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 PBRS2CAccountUpdateAck_AccountInfo::status() const {
  return status_;
}
inline void PBRS2CAccountUpdateAck_AccountInfo::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional int32 move = 8;
inline bool PBRS2CAccountUpdateAck_AccountInfo::has_move() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PBRS2CAccountUpdateAck_AccountInfo::set_has_move() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PBRS2CAccountUpdateAck_AccountInfo::clear_has_move() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PBRS2CAccountUpdateAck_AccountInfo::clear_move() {
  move_ = 0;
  clear_has_move();
}
inline ::google::protobuf::int32 PBRS2CAccountUpdateAck_AccountInfo::move() const {
  return move_;
}
inline void PBRS2CAccountUpdateAck_AccountInfo::set_move(::google::protobuf::int32 value) {
  set_has_move();
  move_ = value;
}

// optional int32 ai = 9;
inline bool PBRS2CAccountUpdateAck_AccountInfo::has_ai() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PBRS2CAccountUpdateAck_AccountInfo::set_has_ai() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PBRS2CAccountUpdateAck_AccountInfo::clear_has_ai() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PBRS2CAccountUpdateAck_AccountInfo::clear_ai() {
  ai_ = 0;
  clear_has_ai();
}
inline ::google::protobuf::int32 PBRS2CAccountUpdateAck_AccountInfo::ai() const {
  return ai_;
}
inline void PBRS2CAccountUpdateAck_AccountInfo::set_ai(::google::protobuf::int32 value) {
  set_has_ai();
  ai_ = value;
}

// optional int32 reconn = 10;
inline bool PBRS2CAccountUpdateAck_AccountInfo::has_reconn() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PBRS2CAccountUpdateAck_AccountInfo::set_has_reconn() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PBRS2CAccountUpdateAck_AccountInfo::clear_has_reconn() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PBRS2CAccountUpdateAck_AccountInfo::clear_reconn() {
  reconn_ = 0;
  clear_has_reconn();
}
inline ::google::protobuf::int32 PBRS2CAccountUpdateAck_AccountInfo::reconn() const {
  return reconn_;
}
inline void PBRS2CAccountUpdateAck_AccountInfo::set_reconn(::google::protobuf::int32 value) {
  set_has_reconn();
  reconn_ = value;
}

// -------------------------------------------------------------------

// PBRS2CAccountUpdateAck

// repeated .PBRS2CAccountUpdateAck.AccountInfo info = 1;
inline int PBRS2CAccountUpdateAck::info_size() const {
  return info_.size();
}
inline void PBRS2CAccountUpdateAck::clear_info() {
  info_.Clear();
}
inline const ::PBRS2CAccountUpdateAck_AccountInfo& PBRS2CAccountUpdateAck::info(int index) const {
  return info_.Get(index);
}
inline ::PBRS2CAccountUpdateAck_AccountInfo* PBRS2CAccountUpdateAck::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::PBRS2CAccountUpdateAck_AccountInfo* PBRS2CAccountUpdateAck::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBRS2CAccountUpdateAck_AccountInfo >&
PBRS2CAccountUpdateAck::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBRS2CAccountUpdateAck_AccountInfo >*
PBRS2CAccountUpdateAck::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// PBRS2CNetStatAsk

// -------------------------------------------------------------------

// PBRS2CetStatAck

// optional int32 conn = 1;
inline bool PBRS2CetStatAck::has_conn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBRS2CetStatAck::set_has_conn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBRS2CetStatAck::clear_has_conn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBRS2CetStatAck::clear_conn() {
  conn_ = 0;
  clear_has_conn();
}
inline ::google::protobuf::int32 PBRS2CetStatAck::conn() const {
  return conn_;
}
inline void PBRS2CetStatAck::set_conn(::google::protobuf::int32 value) {
  set_has_conn();
  conn_ = value;
}

// optional int32 reconn = 2;
inline bool PBRS2CetStatAck::has_reconn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBRS2CetStatAck::set_has_reconn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBRS2CetStatAck::clear_has_reconn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBRS2CetStatAck::clear_reconn() {
  reconn_ = 0;
  clear_has_reconn();
}
inline ::google::protobuf::int32 PBRS2CetStatAck::reconn() const {
  return reconn_;
}
inline void PBRS2CetStatAck::set_reconn(::google::protobuf::int32 value) {
  set_has_reconn();
  reconn_ = value;
}

// -------------------------------------------------------------------

// PBC2RSAccountRemoveAsk

// optional string account = 1;
inline bool PBC2RSAccountRemoveAsk::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBC2RSAccountRemoveAsk::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBC2RSAccountRemoveAsk::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBC2RSAccountRemoveAsk::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& PBC2RSAccountRemoveAsk::account() const {
  return *account_;
}
inline void PBC2RSAccountRemoveAsk::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void PBC2RSAccountRemoveAsk::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void PBC2RSAccountRemoveAsk::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBC2RSAccountRemoveAsk::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* PBC2RSAccountRemoveAsk::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PBRS2CAccountRemoveAck

// optional string account = 1;
inline bool PBRS2CAccountRemoveAck::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBRS2CAccountRemoveAck::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBRS2CAccountRemoveAck::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBRS2CAccountRemoveAck::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& PBRS2CAccountRemoveAck::account() const {
  return *account_;
}
inline void PBRS2CAccountRemoveAck::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void PBRS2CAccountRemoveAck::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void PBRS2CAccountRemoveAck::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBRS2CAccountRemoveAck::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* PBRS2CAccountRemoveAck::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PBC2RSRobotAIUpdateAsk

// repeated string account = 1;
inline int PBC2RSRobotAIUpdateAsk::account_size() const {
  return account_.size();
}
inline void PBC2RSRobotAIUpdateAsk::clear_account() {
  account_.Clear();
}
inline const ::std::string& PBC2RSRobotAIUpdateAsk::account(int index) const {
  return account_.Get(index);
}
inline ::std::string* PBC2RSRobotAIUpdateAsk::mutable_account(int index) {
  return account_.Mutable(index);
}
inline void PBC2RSRobotAIUpdateAsk::set_account(int index, const ::std::string& value) {
  account_.Mutable(index)->assign(value);
}
inline void PBC2RSRobotAIUpdateAsk::set_account(int index, const char* value) {
  account_.Mutable(index)->assign(value);
}
inline void PBC2RSRobotAIUpdateAsk::set_account(int index, const char* value, size_t size) {
  account_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBC2RSRobotAIUpdateAsk::add_account() {
  return account_.Add();
}
inline void PBC2RSRobotAIUpdateAsk::add_account(const ::std::string& value) {
  account_.Add()->assign(value);
}
inline void PBC2RSRobotAIUpdateAsk::add_account(const char* value) {
  account_.Add()->assign(value);
}
inline void PBC2RSRobotAIUpdateAsk::add_account(const char* value, size_t size) {
  account_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PBC2RSRobotAIUpdateAsk::account() const {
  return account_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PBC2RSRobotAIUpdateAsk::mutable_account() {
  return &account_;
}

// optional string ainame = 2;
inline bool PBC2RSRobotAIUpdateAsk::has_ainame() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBC2RSRobotAIUpdateAsk::set_has_ainame() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBC2RSRobotAIUpdateAsk::clear_has_ainame() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBC2RSRobotAIUpdateAsk::clear_ainame() {
  if (ainame_ != &::google::protobuf::internal::kEmptyString) {
    ainame_->clear();
  }
  clear_has_ainame();
}
inline const ::std::string& PBC2RSRobotAIUpdateAsk::ainame() const {
  return *ainame_;
}
inline void PBC2RSRobotAIUpdateAsk::set_ainame(const ::std::string& value) {
  set_has_ainame();
  if (ainame_ == &::google::protobuf::internal::kEmptyString) {
    ainame_ = new ::std::string;
  }
  ainame_->assign(value);
}
inline void PBC2RSRobotAIUpdateAsk::set_ainame(const char* value) {
  set_has_ainame();
  if (ainame_ == &::google::protobuf::internal::kEmptyString) {
    ainame_ = new ::std::string;
  }
  ainame_->assign(value);
}
inline void PBC2RSRobotAIUpdateAsk::set_ainame(const char* value, size_t size) {
  set_has_ainame();
  if (ainame_ == &::google::protobuf::internal::kEmptyString) {
    ainame_ = new ::std::string;
  }
  ainame_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBC2RSRobotAIUpdateAsk::mutable_ainame() {
  set_has_ainame();
  if (ainame_ == &::google::protobuf::internal::kEmptyString) {
    ainame_ = new ::std::string;
  }
  return ainame_;
}
inline ::std::string* PBC2RSRobotAIUpdateAsk::release_ainame() {
  clear_has_ainame();
  if (ainame_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ainame_;
    ainame_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PBRS2CRobotAIUpdateAck

// repeated string account = 1;
inline int PBRS2CRobotAIUpdateAck::account_size() const {
  return account_.size();
}
inline void PBRS2CRobotAIUpdateAck::clear_account() {
  account_.Clear();
}
inline const ::std::string& PBRS2CRobotAIUpdateAck::account(int index) const {
  return account_.Get(index);
}
inline ::std::string* PBRS2CRobotAIUpdateAck::mutable_account(int index) {
  return account_.Mutable(index);
}
inline void PBRS2CRobotAIUpdateAck::set_account(int index, const ::std::string& value) {
  account_.Mutable(index)->assign(value);
}
inline void PBRS2CRobotAIUpdateAck::set_account(int index, const char* value) {
  account_.Mutable(index)->assign(value);
}
inline void PBRS2CRobotAIUpdateAck::set_account(int index, const char* value, size_t size) {
  account_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBRS2CRobotAIUpdateAck::add_account() {
  return account_.Add();
}
inline void PBRS2CRobotAIUpdateAck::add_account(const ::std::string& value) {
  account_.Add()->assign(value);
}
inline void PBRS2CRobotAIUpdateAck::add_account(const char* value) {
  account_.Add()->assign(value);
}
inline void PBRS2CRobotAIUpdateAck::add_account(const char* value, size_t size) {
  account_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PBRS2CRobotAIUpdateAck::account() const {
  return account_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PBRS2CRobotAIUpdateAck::mutable_account() {
  return &account_;
}

// optional string ainame = 2;
inline bool PBRS2CRobotAIUpdateAck::has_ainame() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBRS2CRobotAIUpdateAck::set_has_ainame() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBRS2CRobotAIUpdateAck::clear_has_ainame() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBRS2CRobotAIUpdateAck::clear_ainame() {
  if (ainame_ != &::google::protobuf::internal::kEmptyString) {
    ainame_->clear();
  }
  clear_has_ainame();
}
inline const ::std::string& PBRS2CRobotAIUpdateAck::ainame() const {
  return *ainame_;
}
inline void PBRS2CRobotAIUpdateAck::set_ainame(const ::std::string& value) {
  set_has_ainame();
  if (ainame_ == &::google::protobuf::internal::kEmptyString) {
    ainame_ = new ::std::string;
  }
  ainame_->assign(value);
}
inline void PBRS2CRobotAIUpdateAck::set_ainame(const char* value) {
  set_has_ainame();
  if (ainame_ == &::google::protobuf::internal::kEmptyString) {
    ainame_ = new ::std::string;
  }
  ainame_->assign(value);
}
inline void PBRS2CRobotAIUpdateAck::set_ainame(const char* value, size_t size) {
  set_has_ainame();
  if (ainame_ == &::google::protobuf::internal::kEmptyString) {
    ainame_ = new ::std::string;
  }
  ainame_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBRS2CRobotAIUpdateAck::mutable_ainame() {
  set_has_ainame();
  if (ainame_ == &::google::protobuf::internal::kEmptyString) {
    ainame_ = new ::std::string;
  }
  return ainame_;
}
inline ::std::string* PBRS2CRobotAIUpdateAck::release_ainame() {
  clear_has_ainame();
  if (ainame_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ainame_;
    ainame_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PBC2RSMSGStreamAsk

// optional string account = 1;
inline bool PBC2RSMSGStreamAsk::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBC2RSMSGStreamAsk::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBC2RSMSGStreamAsk::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBC2RSMSGStreamAsk::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& PBC2RSMSGStreamAsk::account() const {
  return *account_;
}
inline void PBC2RSMSGStreamAsk::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void PBC2RSMSGStreamAsk::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void PBC2RSMSGStreamAsk::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBC2RSMSGStreamAsk::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* PBC2RSMSGStreamAsk::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 mainprot = 2;
inline bool PBC2RSMSGStreamAsk::has_mainprot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBC2RSMSGStreamAsk::set_has_mainprot() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBC2RSMSGStreamAsk::clear_has_mainprot() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBC2RSMSGStreamAsk::clear_mainprot() {
  mainprot_ = 0u;
  clear_has_mainprot();
}
inline ::google::protobuf::uint32 PBC2RSMSGStreamAsk::mainprot() const {
  return mainprot_;
}
inline void PBC2RSMSGStreamAsk::set_mainprot(::google::protobuf::uint32 value) {
  set_has_mainprot();
  mainprot_ = value;
}

// optional uint32 subprot = 3;
inline bool PBC2RSMSGStreamAsk::has_subprot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBC2RSMSGStreamAsk::set_has_subprot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBC2RSMSGStreamAsk::clear_has_subprot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBC2RSMSGStreamAsk::clear_subprot() {
  subprot_ = 0u;
  clear_has_subprot();
}
inline ::google::protobuf::uint32 PBC2RSMSGStreamAsk::subprot() const {
  return subprot_;
}
inline void PBC2RSMSGStreamAsk::set_subprot(::google::protobuf::uint32 value) {
  set_has_subprot();
  subprot_ = value;
}

// optional string msgname = 4;
inline bool PBC2RSMSGStreamAsk::has_msgname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBC2RSMSGStreamAsk::set_has_msgname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBC2RSMSGStreamAsk::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBC2RSMSGStreamAsk::clear_msgname() {
  if (msgname_ != &::google::protobuf::internal::kEmptyString) {
    msgname_->clear();
  }
  clear_has_msgname();
}
inline const ::std::string& PBC2RSMSGStreamAsk::msgname() const {
  return *msgname_;
}
inline void PBC2RSMSGStreamAsk::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == &::google::protobuf::internal::kEmptyString) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void PBC2RSMSGStreamAsk::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == &::google::protobuf::internal::kEmptyString) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void PBC2RSMSGStreamAsk::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == &::google::protobuf::internal::kEmptyString) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBC2RSMSGStreamAsk::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == &::google::protobuf::internal::kEmptyString) {
    msgname_ = new ::std::string;
  }
  return msgname_;
}
inline ::std::string* PBC2RSMSGStreamAsk::release_msgname() {
  clear_has_msgname();
  if (msgname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string msgdata = 5;
inline bool PBC2RSMSGStreamAsk::has_msgdata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBC2RSMSGStreamAsk::set_has_msgdata() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBC2RSMSGStreamAsk::clear_has_msgdata() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBC2RSMSGStreamAsk::clear_msgdata() {
  if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
    msgdata_->clear();
  }
  clear_has_msgdata();
}
inline const ::std::string& PBC2RSMSGStreamAsk::msgdata() const {
  return *msgdata_;
}
inline void PBC2RSMSGStreamAsk::set_msgdata(const ::std::string& value) {
  set_has_msgdata();
  if (msgdata_ == &::google::protobuf::internal::kEmptyString) {
    msgdata_ = new ::std::string;
  }
  msgdata_->assign(value);
}
inline void PBC2RSMSGStreamAsk::set_msgdata(const char* value) {
  set_has_msgdata();
  if (msgdata_ == &::google::protobuf::internal::kEmptyString) {
    msgdata_ = new ::std::string;
  }
  msgdata_->assign(value);
}
inline void PBC2RSMSGStreamAsk::set_msgdata(const char* value, size_t size) {
  set_has_msgdata();
  if (msgdata_ == &::google::protobuf::internal::kEmptyString) {
    msgdata_ = new ::std::string;
  }
  msgdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBC2RSMSGStreamAsk::mutable_msgdata() {
  set_has_msgdata();
  if (msgdata_ == &::google::protobuf::internal::kEmptyString) {
    msgdata_ = new ::std::string;
  }
  return msgdata_;
}
inline ::std::string* PBC2RSMSGStreamAsk::release_msgdata() {
  clear_has_msgdata();
  if (msgdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msgdata_;
    msgdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PBRS2CMSGStreamAck

// -------------------------------------------------------------------

// PBC2RSLoadLuaAsk

// optional string account = 1;
inline bool PBC2RSLoadLuaAsk::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBC2RSLoadLuaAsk::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBC2RSLoadLuaAsk::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBC2RSLoadLuaAsk::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& PBC2RSLoadLuaAsk::account() const {
  return *account_;
}
inline void PBC2RSLoadLuaAsk::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void PBC2RSLoadLuaAsk::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void PBC2RSLoadLuaAsk::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBC2RSLoadLuaAsk::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* PBC2RSLoadLuaAsk::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PBRS2CLoadLuaAck

// -------------------------------------------------------------------

// PBMSGPrintf

// optional string account = 1;
inline bool PBMSGPrintf::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBMSGPrintf::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBMSGPrintf::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBMSGPrintf::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& PBMSGPrintf::account() const {
  return *account_;
}
inline void PBMSGPrintf::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void PBMSGPrintf::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void PBMSGPrintf::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBMSGPrintf::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* PBMSGPrintf::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 printf = 2;
inline bool PBMSGPrintf::has_printf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBMSGPrintf::set_has_printf() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBMSGPrintf::clear_has_printf() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBMSGPrintf::clear_printf() {
  printf_ = 0;
  clear_has_printf();
}
inline ::google::protobuf::int32 PBMSGPrintf::printf() const {
  return printf_;
}
inline void PBMSGPrintf::set_printf(::google::protobuf::int32 value) {
  set_has_printf();
  printf_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RCSMsg_2eproto__INCLUDED
