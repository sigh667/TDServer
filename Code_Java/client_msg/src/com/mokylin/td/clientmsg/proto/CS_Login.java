
// Generated by the SocketProtoGenerationTool.  DO NOT EDIT!
package com.mokylin.td.clientmsg.proto;

import io.netty.buffer.ByteBuf;
import java.util.List;
import java.io.UnsupportedEncodingException;
import javax.transaction.NotSupportedException;
import com.mokylin.bleach.core.collection.BitArray;
import com.mokylin.td.clientmsg.enumeration.*;
import com.mokylin.td.clientmsg.commondata.*;
import com.mokylin.td.clientmsg.core.ICommunicationDataBase;
import com.mokylin.td.clientmsg.core.SerializationHelper;
import com.mokylin.td.clientmsg.ProtoSerializationDefine;


//Client请求登陆。若在本地验证模式下，不验证密码
public class CS_Login implements ICommunicationDataBase{	
    BitArray __mask__ = new BitArray(4);

	// 服务器ID。联服的几个Server共用一个LoginServer，因此登陆时需要选择serverId
	private int _serverId;
		
	// 渠道ID
	private String _channel;
		
	// 账号
	private String _account;
		
	// 登录秘钥
	private String _key;
		
	public CS_Login(){
	}
	
	public int getSerializationID(){
		return ProtoSerializationDefine.CS_LOGIN;
	}


	public int getserverId() {
		return this._serverId;
	}
	public void setserverId(int __serverId) {
      SerializationHelper.writeMask(__mask__, 0x1);
		this._serverId = __serverId;
	}
		
	public String getchannel() {
		return this._channel;
	}
	public void setchannel(String __channel) {
      SerializationHelper.writeMask(__mask__, 0x2);
		this._channel = __channel;
	}
		
	public String getaccount() {
		return this._account;
	}
	public void setaccount(String __account) {
      SerializationHelper.writeMask(__mask__, 0x3);
		this._account = __account;
	}
		
	public String getkey() {
		return this._key;
	}
	public void setkey(String __key) {
      SerializationHelper.writeMask(__mask__, 0x4);
		this._key = __key;
	}
		
	public ByteBuf toBytes(ByteBuf __targetBytes) throws UnsupportedEncodingException, NotSupportedException {
        SerializationHelper.writeBitArray(__targetBytes, this.__mask__);

		if(SerializationHelper.readMask(this.__mask__, 0x1) == true)
            SerializationHelper.writeU29Int(__targetBytes, this._serverId);
		
		if(SerializationHelper.readMask(this.__mask__, 0x2) == true)
            SerializationHelper.writeUTF(__targetBytes, this._channel);
		
		if(SerializationHelper.readMask(this.__mask__, 0x3) == true)
            SerializationHelper.writeUTF(__targetBytes, this._account);
		
		if(SerializationHelper.readMask(this.__mask__, 0x4) == true)
            SerializationHelper.writeUTF(__targetBytes, this._key);
		
		return __targetBytes;
	}

	public void fromBytes(ByteBuf __serializationBytes) throws UnsupportedEncodingException, InstantiationException, IllegalAccessException, NotSupportedException {
        this.__mask__ = SerializationHelper.readBitArray(__serializationBytes);

		if(SerializationHelper.readMask(this.__mask__, 0x1) == true)
            this._serverId = (int)SerializationHelper.readU29Int(__serializationBytes);
		
		if(SerializationHelper.readMask(this.__mask__, 0x2) == true)
            this._channel = (String)SerializationHelper.readUTF(__serializationBytes);
		
		if(SerializationHelper.readMask(this.__mask__, 0x3) == true)
            this._account = (String)SerializationHelper.readUTF(__serializationBytes);
		
		if(SerializationHelper.readMask(this.__mask__, 0x4) == true)
            this._key = (String)SerializationHelper.readUTF(__serializationBytes);
		
	}

}

		