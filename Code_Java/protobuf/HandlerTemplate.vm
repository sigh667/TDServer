using Bleach.Util;
using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;

#foreach( $INCLUDE_PACKAGE in $INCLUDE_PACKAGES)
using $INCLUDE_PACKAGE;
#end


namespace Bleach.Net
{
	public class NetHandler
	{
		[AttributeUsage(AttributeTargets.Method)]
		public class PackageHandlerRegister : Attribute
		{
			internal readonly Type type = null;

			public PackageHandlerRegister(Type type)
			{
				this.type = type;
			}
		}

		public static Action<short, byte[]> OnSend = delegate {};

		public static Action<short, int, byte[]> OnLoginSend = delegate { };

		private static readonly Dictionary<int, Type> packageTypes = new Dictionary<int, Type>()
		{
			
			#foreach( $gcBean in $GC_BEANS)	

			{$gcBean.typeValue, typeof($gcBean.className)},
			#end
			
		};

		private static readonly Dictionary<Type, Action<object>> handlers = new Dictionary<Type, Action<object>>(packageTypes.Count);
		
		private static readonly ProtoBufSerializer serializer = new ProtoBufSerializer();
		
		public static object Derialize(byte[] data, Type type)
		{
			return serializer.Deserialize(new MemoryStream(data), null, type);
		}
		
		public static byte[] Serialize(object data)
		{
			byte[] buffer;

			using (MemoryStream mem = new MemoryStream())
			{
				serializer.Serialize(mem, data);
				buffer = new byte[mem.Length];
				mem.Seek(0, SeekOrigin.Begin);
				mem.Read(buffer, 0, buffer.Length);
			}
			return buffer;
		}

		public static void RegisterGCHandler(object register)
		{
			Action<object, MethodInfo, PackageHandlerRegister> processor = (i, info, attribute) =>
			{
				Type packageType = attribute.type;
				Action<object> handler = null;
				handlers.TryGetValue(packageType, out handler);
				MethodInfo mi = info;
				if (null == handler)
				{
					handler = (Action<object>)Delegate.CreateDelegate(typeof (Action<object>), register, mi, false);
					handlers.Add(packageType, handler);
				}
				else
				{
					LogUtil.Log("Package type {0} has already registed a handler!!!", packageType.Name);
				}
			};
			ReflectionHelper.ProcessMemberWithCustomAttribute(register, processor, false);
		}

		public static void OnReceive(int packageType, byte[] data)
		{
			Type type = null;

			packageTypes.TryGetValue(packageType, out type);

			if (null != type)
			{
				var packet = Derialize(data, type);

				Action<object> handler = null;
				handlers.TryGetValue(type, out handler);

				if (null != handler)
				{
					handler(packet);
				}
				else
				{
					LogUtil.Log("Can't find handler for message {0}", type.Name);
				}
			}
			else
			{
					LogUtil.Log("Can't find type with packageType {0}", packageType);
			}
		}
	}
}
