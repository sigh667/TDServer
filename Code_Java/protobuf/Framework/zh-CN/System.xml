<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System</name>
  </assembly>
  <members>
    <member name="T:Microsoft.CSharp.CSharpCodeProvider">
      <summary>
                    提供对 C# 代码生成器和代码编译器的实例的访问。
                </summary>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.#ctor">
      <summary>
                    初始化 <see cref="T:Microsoft.CSharp.CSharpCodeProvider" /> 类的新实例。
                </summary>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.CreateCompiler">
      <summary>
                    获取 C# 代码编译器的实例。
                </summary>
      <returns>
                    C# <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> 实现的实例。
                </returns>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.CreateGenerator">
      <summary>
获取 C# 代码生成器的实例。
                </summary>
      <returns>
                    C# <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> 实现的实例。
                </returns>
    </member>
    <member name="P:Microsoft.CSharp.CSharpCodeProvider.FileExtension">
      <summary>
                    获取在创建源代码文件时所用的文件扩展名。
                </summary>
      <returns>
                    用于生成的源代码文件的文件扩展名。
                </returns>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>
                    使用指定的文本编写器和代码生成器选项为指定的类成员生成代码。
                </summary>
      <param name="member">
                    要为其生成代码的 <see cref="T:System.CodeDom.CodeTypeMember" />。
                </param>
      <param name="writer">
                    要写入的 <see cref="T:System.IO.TextWriter" />。
                </param>
      <param name="options">
                    生成代码时要使用的 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。
                </param>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.GetConverter(System.Type)">
      <summary>
                    获取指定对象类型的 <see cref="T:System.ComponentModel.TypeConverter" />。
                </summary>
      <returns>
                    指定类型的 <see cref="T:System.ComponentModel.TypeConverter" />。
                </returns>
      <param name="type">
                    要为其检索类型转换器的对象的类型。
                </param>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>
                    使用指定的提供程序选项初始化 <see cref="T:Microsoft.CSharp.CSharpCodeProvider" /> 类的新实例。
                </summary>
      <param name="providerOptions">
                    一个 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象，其中包含配置文件中的提供程序选项。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerOptions" /> 为 null。
                </exception>
    </member>
    <member name="T:Microsoft.VisualBasic.VBCodeProvider">
      <summary>
                    提供对 Visual Basic 代码生成器和代码编译器的实例的访问。
                </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.#ctor">
      <summary>
                    初始化 <see cref="T:Microsoft.VisualBasic.VBCodeProvider" /> 类的新实例。
                </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.CreateCompiler">
      <summary>
                    获取 Visual Basic 代码编译器的实例。
                </summary>
      <returns>
                    Visual Basic <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> 实现的实例。
                </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.CreateGenerator">
      <summary>
获取 Visual Basic 代码生成器的实例。
                </summary>
      <returns>
                    Visual Basic <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> 实现的实例。
                </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeProvider.FileExtension">
      <summary>
                    获取在创建源代码文件时所用的文件扩展名。
                </summary>
      <returns>
                    用于生成的源代码文件的文件扩展名。
                </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>
                    使用指定的文本编写器和代码生成器选项为指定的类成员生成代码。
                </summary>
      <param name="member">
                    要为其生成代码的 <see cref="T:System.CodeDom.CodeTypeMember" />。
                </param>
      <param name="writer">
                    要写入的 <see cref="T:System.IO.TextWriter" />。
                </param>
      <param name="options">
                    生成代码时要使用的 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。
                </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.GetConverter(System.Type)">
      <summary>
                    获取指定对象类型的 <see cref="T:System.ComponentModel.TypeConverter" />。
                </summary>
      <returns>
                    指定类型的 <see cref="T:System.ComponentModel.TypeConverter" />。
                </returns>
      <param name="type">
                    要为其检索类型转换器的对象的类型。
                </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeProvider.LanguageOptions">
      <summary>
                    获取语言功能标识符。
                </summary>
      <returns>
                    指示语言的特殊功能的 <see cref="T:System.CodeDom.Compiler.LanguageOptions" />。
                </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>
                    使用指定的提供程序选项初始化 <see cref="T:Microsoft.VisualBasic.VBCodeProvider" /> 类的新实例。
                </summary>
      <param name="providerOptions">
                    一个 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象，其中包含配置文件中的提供程序选项。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerOptions" /> 为 null。
                </exception>
    </member>
    <member name="T:Microsoft.Win32.IntranetZoneCredentialPolicy">
      <summary>定义凭据策略，该凭据策略将用于使用 <see cref="T:System.Net.WebRequest" /> 及其派生类发出的资源请求。</summary>
    </member>
    <member name="M:Microsoft.Win32.IntranetZoneCredentialPolicy.#ctor">
      <summary>初始化 <see cref="T:Microsoft.Win32.IntranetZoneCredentialPolicy" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.Win32.IntranetZoneCredentialPolicy.ShouldSendCredential(System.Uri,System.Net.WebRequest,System.Net.NetworkCredential,System.Net.IAuthenticationModule)">
      <summary>返回一个 <see cref="T:System.Boolean" />，该值指示客户端的凭据是否随使用 <see cref="T:System.Net.WebRequest" /> 发出的资源请求一起发送。</summary>
      <returns>
            如果所请求的资源与发出请求的客户端在同一个域中，则为 true；否则为 false。</returns>
      <param name="challengeUri">将接收请求的 <see cref="T:System.Uri" />。</param>
      <param name="request">表示所请求资源的 <see cref="T:System.Net.WebRequest" />。</param>
      <param name="credential">在该方法返回 true 时，将随请求一起发送的 <see cref="T:System.Net.NetworkCredential" />。</param>
      <param name="authModule">在要求身份验证时，将执行身份验证的 <see cref="T:System.Net.IAuthenticationModule" />。</param>
    </member>
    <member name="T:Microsoft.Win32.PowerModeChangedEventArgs">
      <summary>为 <see cref="E:Microsoft.Win32.SystemEvents.PowerModeChanged" /> 事件提供数据。</summary>
    </member>
    <member name="M:Microsoft.Win32.PowerModeChangedEventArgs.#ctor(Microsoft.Win32.PowerModes)">
      <summary>使用指定的电源模式事件类型初始化 <see cref="T:Microsoft.Win32.PowerModeChangedEventArgs" /> 类的新实例。</summary>
      <param name="mode">
        <see cref="T:Microsoft.Win32.PowerModes" /> 值之一，该值表示电源模式事件的类型。 </param>
    </member>
    <member name="P:Microsoft.Win32.PowerModeChangedEventArgs.Mode">
      <summary>获取一个指示已出现的电源模式事件的类型的标识符。</summary>
      <returns>
        <see cref="T:Microsoft.Win32.PowerModes" /> 值之一。</returns>
    </member>
    <member name="T:Microsoft.Win32.PowerModeChangedEventHandler">
      <summary>表示将处理 <see cref="E:Microsoft.Win32.SystemEvents.PowerModeChanged" /> 事件的方法。</summary>
      <param name="sender">事件源。当 <see cref="T:Microsoft.Win32.SystemEvents" /> 类引发此事件时，此对象总是为 null。 </param>
      <param name="e">包含事件数据的 <see cref="T:Microsoft.Win32.PowerModeChangedEventArgs" />。 </param>
    </member>
    <member name="T:Microsoft.Win32.PowerModes">
      <summary>为操作系统报告的电源模式事件定义标识符。</summary>
    </member>
    <member name="F:Microsoft.Win32.PowerModes.Resume">
      <summary>操作系统即将从挂起状态继续。</summary>
    </member>
    <member name="F:Microsoft.Win32.PowerModes.StatusChange">
      <summary>一个电源模式状态的通知事件已由操作系统引发。这可能指示电池电力不足或正在充电、电源正由交流电转换为电池或相反，或系统电源状态的其他更改。</summary>
    </member>
    <member name="F:Microsoft.Win32.PowerModes.Suspend">
      <summary>操作系统即将挂起。</summary>
    </member>
    <member name="T:Microsoft.Win32.SessionEndedEventArgs">
      <summary>为 <see cref="E:Microsoft.Win32.SystemEvents.SessionEnded" /> 事件提供数据。</summary>
    </member>
    <member name="M:Microsoft.Win32.SessionEndedEventArgs.#ctor(Microsoft.Win32.SessionEndReasons)">
      <summary>初始化 <see cref="T:Microsoft.Win32.SessionEndedEventArgs" /> 类的新实例。</summary>
      <param name="reason">指示会话结束方式的 <see cref="T:Microsoft.Win32.SessionEndReasons" /> 值之一。 </param>
    </member>
    <member name="P:Microsoft.Win32.SessionEndedEventArgs.Reason">
      <summary>获取指示会话结束方式的标识符。</summary>
      <returns>指示会话结束方式的 <see cref="T:Microsoft.Win32.SessionEndReasons" /> 值之一。</returns>
    </member>
    <member name="T:Microsoft.Win32.SessionEndedEventHandler">
      <summary>表示将处理 <see cref="E:Microsoft.Win32.SystemEvents.SessionEnded" /> 事件的方法。</summary>
      <param name="sender">事件源。当 <see cref="T:Microsoft.Win32.SystemEvents" /> 类引发此事件时，此对象总是为 null。 </param>
      <param name="e">包含事件数据的 <see cref="T:Microsoft.Win32.SessionEndedEventArgs" />。 </param>
    </member>
    <member name="T:Microsoft.Win32.SessionEndingEventArgs">
      <summary>为 <see cref="E:Microsoft.Win32.SystemEvents.SessionEnding" /> 事件提供数据。</summary>
    </member>
    <member name="M:Microsoft.Win32.SessionEndingEventArgs.#ctor(Microsoft.Win32.SessionEndReasons)">
      <summary>使用指定的值（该值指明正在发生的会话关闭事件的类型）初始化 <see cref="T:Microsoft.Win32.SessionEndingEventArgs" /> 类的新实例。</summary>
      <param name="reason">指定会话结束方式的 <see cref="T:Microsoft.Win32.SessionEndReasons" /> 之一。</param>
    </member>
    <member name="P:Microsoft.Win32.SessionEndingEventArgs.Cancel">
      <summary>获取或设置一个值，该值指示是否取消用户请求以结束会话。</summary>
      <returns>true 取消用户请求以结束会话；否则为 false。</returns>
    </member>
    <member name="P:Microsoft.Win32.SessionEndingEventArgs.Reason">
      <summary>获取会话结束的原因。</summary>
      <returns>指定会话结束方式的 <see cref="T:Microsoft.Win32.SessionEndReasons" /> 值之一。</returns>
    </member>
    <member name="T:Microsoft.Win32.SessionEndingEventHandler">
      <summary>表示将处理来自操作系统的 <see cref="E:Microsoft.Win32.SystemEvents.SessionEnding" /> 事件的方法。</summary>
      <param name="sender">事件源。当 <see cref="T:Microsoft.Win32.SystemEvents" /> 类引发此事件时，此对象总是为 null。 </param>
      <param name="e">包含事件数据的 <see cref="T:Microsoft.Win32.SessionEndingEventArgs" />。 </param>
    </member>
    <member name="T:Microsoft.Win32.SessionEndReasons">
      <summary>定义表示当前登录会话的结束方式的标识符。</summary>
    </member>
    <member name="F:Microsoft.Win32.SessionEndReasons.Logoff">
      <summary>用户正在注销并结束当前用户会话。操作系统继续运行。</summary>
    </member>
    <member name="F:Microsoft.Win32.SessionEndReasons.SystemShutdown">
      <summary>操作系统正在关闭。</summary>
    </member>
    <member name="T:Microsoft.Win32.SessionSwitchEventArgs">
      <summary>为 <see cref="E:Microsoft.Win32.SystemEvents.SessionSwitch" /> 事件提供数据。</summary>
    </member>
    <member name="M:Microsoft.Win32.SessionSwitchEventArgs.#ctor(Microsoft.Win32.SessionSwitchReason)">
      <summary>使用指定的会话更改事件类型标识符初始化 <see cref="T:Microsoft.Win32.SessionSwitchEventArgs" /> 类的新实例。</summary>
      <param name="reason">
        <see cref="T:Microsoft.Win32.SessionSwitchReason" />，它指示会话更改事件的类型。 </param>
    </member>
    <member name="P:Microsoft.Win32.SessionSwitchEventArgs.Reason">
      <summary>获取指示会话更改事件类型的标识符。</summary>
      <returns>指示会话更改事件类型的 <see cref="T:Microsoft.Win32.SessionSwitchReason" />。</returns>
    </member>
    <member name="T:Microsoft.Win32.SessionSwitchEventHandler">
      <summary>表示将处理 <see cref="E:Microsoft.Win32.SystemEvents.SessionSwitch" /> 事件的方法。</summary>
      <param name="sender">事件源。 </param>
      <param name="e">一个指明会话更改事件类型的 <see cref="T:Microsoft.Win32.SessionSwitchEventArgs" />。 </param>
    </member>
    <member name="T:Microsoft.Win32.SessionSwitchReason">
      <summary>定义用于表示会话切换事件类型的标识符。</summary>
    </member>
    <member name="F:Microsoft.Win32.SessionSwitchReason.ConsoleConnect">
      <summary>会话已与控制台建立连接。</summary>
    </member>
    <member name="F:Microsoft.Win32.SessionSwitchReason.ConsoleDisconnect">
      <summary>会话已与控制台断开连接。</summary>
    </member>
    <member name="F:Microsoft.Win32.SessionSwitchReason.RemoteConnect">
      <summary>会话已与远程连接建立连接。</summary>
    </member>
    <member name="F:Microsoft.Win32.SessionSwitchReason.RemoteDisconnect">
      <summary>会话已与远程连接断开连接。</summary>
    </member>
    <member name="F:Microsoft.Win32.SessionSwitchReason.SessionLogon">
      <summary>用户已登录到会话。</summary>
    </member>
    <member name="F:Microsoft.Win32.SessionSwitchReason.SessionLogoff">
      <summary>用户已从会话注销。</summary>
    </member>
    <member name="F:Microsoft.Win32.SessionSwitchReason.SessionLock">
      <summary>会话已被锁定。</summary>
    </member>
    <member name="F:Microsoft.Win32.SessionSwitchReason.SessionUnlock">
      <summary>会话已被解除锁定。</summary>
    </member>
    <member name="F:Microsoft.Win32.SessionSwitchReason.SessionRemoteControl">
      <summary>会话已将其状态更改为远程控制状态或从远程控制状态更改为当前的状态。</summary>
    </member>
    <member name="T:Microsoft.Win32.SystemEvents">
      <summary>
                    提供对系统事件通知的访问。无法继承此类。
                </summary>
    </member>
    <member name="M:Microsoft.Win32.SystemEvents.CreateTimer(System.Int32)">
      <summary>
                    创建一个与系统事件窗口相关联的新窗口计时器。
                </summary>
      <returns>
                    新计时器的 ID。
                </returns>
      <param name="interval">
                    指定计时器通知之间的间隔（以毫秒为单位）。
                </param>
      <exception cref="T:System.ArgumentException">
                    间隔小于或等于零。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    当前上下文不支持系统事件通知。例如，服务器进程可能不支持全局系统事件通知。
                </exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">
                    创建系统事件窗口线程的尝试未成功，或创建计时器的尝试未成功。
                </exception>
    </member>
    <member name="E:Microsoft.Win32.SystemEvents.DisplaySettingsChanged">
      <summary>
                    当用户更改显示设置时发生。
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    当前上下文不支持系统事件通知。例如，服务器进程可能不支持全局系统事件通知。
                </exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">
                    创建系统事件窗口线程的尝试未成功。
                </exception>
    </member>
    <member name="E:Microsoft.Win32.SystemEvents.DisplaySettingsChanging">
      <summary>
                    更改显示设置时发生。
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    当前上下文不支持系统事件通知。例如，服务器进程可能不支持全局系统事件通知。
                </exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">
                    创建系统事件窗口线程的尝试未成功。
                </exception>
    </member>
    <member name="E:Microsoft.Win32.SystemEvents.EventsThreadShutdown">
      <summary>
                    在侦听系统事件的线程终止前发生。
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    当前上下文不支持系统事件通知。例如，服务器进程可能不支持全局系统事件通知。
                </exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">
                    创建系统事件窗口线程的尝试未成功。
                </exception>
    </member>
    <member name="E:Microsoft.Win32.SystemEvents.InstalledFontsChanged">
      <summary>
                    当用户在系统中添加或移除字体时发生。
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    当前上下文不支持系统事件通知。例如，服务器进程可能不支持全局系统事件通知。
                </exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">
                    创建系统事件窗口线程的尝试未成功。
                </exception>
    </member>
    <member name="M:Microsoft.Win32.SystemEvents.InvokeOnEventsThread(System.Delegate)">
      <summary>
                    使用侦听系统事件的线程调用指定的委托。
                </summary>
      <param name="method">
                    要使用侦听系统事件的线程调用的委托。
                </param>
      <exception cref="T:System.InvalidOperationException">
                    当前上下文不支持系统事件通知。例如，服务器进程可能不支持全局系统事件通知。
                </exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">
                    创建系统事件窗口线程的尝试未成功。
                </exception>
    </member>
    <member name="M:Microsoft.Win32.SystemEvents.KillTimer(System.IntPtr)">
      <summary>
                    终止由给定 ID 指定的计时器。
                </summary>
      <param name="timerId">
                    要终止的计时器的 ID。
                </param>
      <exception cref="T:System.InvalidOperationException">
                    当前上下文不支持系统事件通知。例如，服务器进程可能不支持全局系统事件通知。
                </exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">
                    创建系统事件窗口线程的尝试未成功，或终止计时器的尝试未成功。
                </exception>
    </member>
    <member name="E:Microsoft.Win32.SystemEvents.LowMemory">
      <summary>
                    当系统用完可用 RAM 时发生。
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    当前上下文不支持系统事件通知。例如，服务器进程可能不支持全局系统事件通知。
                </exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">
                    创建系统事件窗口线程的尝试未成功。
                </exception>
    </member>
    <member name="E:Microsoft.Win32.SystemEvents.PaletteChanged">
      <summary>
                    当用户切换到使用其他调色板的应用程序时发生。
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    当前上下文不支持系统事件通知。例如，服务器进程可能不支持全局系统事件通知。
                </exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">
                    创建系统事件窗口线程的尝试未成功。
                </exception>
    </member>
    <member name="E:Microsoft.Win32.SystemEvents.PowerModeChanged">
      <summary>
                    当用户挂起或继续系统时发生。
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    当前上下文不支持系统事件通知。例如，服务器进程可能不支持全局系统事件通知。
                </exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">
                    创建系统事件窗口线程的尝试未成功。
                </exception>
    </member>
    <member name="E:Microsoft.Win32.SystemEvents.SessionEnded">
      <summary>
                    当用户注销或关闭系统时发生。
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    当前上下文不支持系统事件通知。例如，服务器进程可能不支持全局系统事件通知。
                </exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">
                    创建系统事件窗口线程的尝试未成功。
                </exception>
    </member>
    <member name="E:Microsoft.Win32.SystemEvents.SessionEnding">
      <summary>
                    当用户试图注销或关闭系统时发生。
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    当前上下文不支持系统事件通知。例如，服务器进程可能不支持全局系统事件通知。
                </exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">
                    创建系统事件窗口线程的尝试未成功。
                </exception>
    </member>
    <member name="E:Microsoft.Win32.SystemEvents.SessionSwitch">
      <summary>
                    更改当前登录的用户时发生。
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    当前上下文不支持系统事件通知。例如，服务器进程可能不支持全局系统事件通知。
                </exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">
                    创建系统事件窗口线程的尝试未成功。
                </exception>
    </member>
    <member name="E:Microsoft.Win32.SystemEvents.TimeChanged">
      <summary>
                    当用户更改系统时钟上的时间时发生。
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    当前上下文不支持系统事件通知。例如，服务器进程可能不支持全局系统事件通知。
                </exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">
                    创建系统事件窗口线程的尝试未成功。
                </exception>
    </member>
    <member name="E:Microsoft.Win32.SystemEvents.TimerElapsed">
      <summary>
                    在窗口计时器间隔过期时发生。
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    当前上下文不支持系统事件通知。例如，服务器进程可能不支持全局系统事件通知。
                </exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">
                    创建系统事件窗口线程的尝试未成功。
                </exception>
    </member>
    <member name="E:Microsoft.Win32.SystemEvents.UserPreferenceChanged">
      <summary>
                    在用户首选项更改后发生。
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    当前上下文不支持系统事件通知。例如，服务器进程可能不支持全局系统事件通知。
                </exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">
                    创建系统事件窗口线程的尝试未成功。
                </exception>
    </member>
    <member name="E:Microsoft.Win32.SystemEvents.UserPreferenceChanging">
      <summary>
                    当用户首选项更改时发生。
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    当前上下文不支持系统事件通知。例如，服务器进程可能不支持全局系统事件通知。
                </exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">
                    创建系统事件窗口线程的尝试未成功。
                </exception>
    </member>
    <member name="T:Microsoft.Win32.TimerElapsedEventArgs">
      <summary>为 <see cref="E:Microsoft.Win32.SystemEvents.TimerElapsed" /> 事件提供数据。</summary>
    </member>
    <member name="M:Microsoft.Win32.TimerElapsedEventArgs.#ctor(System.IntPtr)">
      <summary>初始化 <see cref="T:Microsoft.Win32.TimerElapsedEventArgs" /> 类的新实例。</summary>
      <param name="timerId">计时器的 ID 号。 </param>
    </member>
    <member name="P:Microsoft.Win32.TimerElapsedEventArgs.TimerId">
      <summary>获取计时器的 ID 号。</summary>
      <returns>计时器的 ID 号。</returns>
    </member>
    <member name="T:Microsoft.Win32.TimerElapsedEventHandler">
      <summary>表示将处理 <see cref="E:Microsoft.Win32.SystemEvents.TimerElapsed" /> 事件的方法。</summary>
      <param name="sender">事件源。当 <see cref="T:Microsoft.Win32.SystemEvents" /> 类引发此事件时，此对象总是为 null。 </param>
      <param name="e">包含事件数据的 <see cref="T:Microsoft.Win32.TimerElapsedEventArgs" />。 </param>
    </member>
    <member name="T:Microsoft.Win32.UserPreferenceCategory">
      <summary>定义表示用户首选项类别的标识符。</summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.Accessibility">
      <summary>指示与供残障人士使用的系统辅助功能关联的用户首选项。</summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.Color">
      <summary>指示与系统颜色关联的用户首选项。此类别包括像窗口或菜单的默认颜色这样的选项。</summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.Desktop">
      <summary>指示与系统桌面关联的用户首选项。此类别包括桌面的背景图像或背景图像布局。</summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.General">
      <summary>指示不与任何其他类别关联的用户首选项。</summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.Icon">
      <summary>指示图标设置的用户首选项，包括图标高度和图标间距。</summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.Keyboard">
      <summary>指示键盘设置的用户首选项，例如，按下键的重复速率和延迟时间。</summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.Menu">
      <summary>指示菜单设置的用户首选项，例如，菜单延迟和文本对齐方式。</summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.Mouse">
      <summary>指示鼠标设置的用户首选项，例如，双击时间和鼠标灵敏度。</summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.Policy">
      <summary>指示策略设置的用户首选项，例如，用户权限和访问级别。</summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.Power">
      <summary>指示系统电源设置的用户首选项。此类别包括电源功能设置，例如，系统自动进入低能模式之前的空闲时间。</summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.Screensaver">
      <summary>指示与屏幕保护程序关联的用户首选项。</summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.Window">
      <summary>指示与系统窗口的尺寸和特性关联的用户首选项。</summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.Locale">
      <summary>指示对于区域设置（如字符编码和区域性字符串）的用户首选项更改。</summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.VisualStyle">
      <summary>指示与视觉样式关联的用户首选项，例如，启用或禁用视觉样式，以及从一种视觉样式切换到另一种视觉样式。</summary>
    </member>
    <member name="T:Microsoft.Win32.UserPreferenceChangedEventArgs">
      <summary>为 <see cref="E:Microsoft.Win32.SystemEvents.UserPreferenceChanged" /> 事件提供数据。</summary>
    </member>
    <member name="M:Microsoft.Win32.UserPreferenceChangedEventArgs.#ctor(Microsoft.Win32.UserPreferenceCategory)">
      <summary>使用指定的用户首选项类别标识符初始化 <see cref="T:Microsoft.Win32.UserPreferenceChangedEventArgs" /> 类的新实例。</summary>
      <param name="category">用于指示已更改的用户首选项类别的 <see cref="T:Microsoft.Win32.UserPreferenceCategory" /> 值之一。 </param>
    </member>
    <member name="P:Microsoft.Win32.UserPreferenceChangedEventArgs.Category">
      <summary>获取已更改的用户首选项的类别。</summary>
      <returns>用于指示已更改的用户首选项类别的 <see cref="T:Microsoft.Win32.UserPreferenceCategory" /> 值之一。</returns>
    </member>
    <member name="T:Microsoft.Win32.UserPreferenceChangedEventHandler">
      <summary>表示将处理 <see cref="E:Microsoft.Win32.SystemEvents.UserPreferenceChanged" /> 事件的方法。</summary>
      <param name="sender">事件源。当 <see cref="T:Microsoft.Win32.SystemEvents" /> 类引发此事件时，此对象总是为 null。 </param>
      <param name="e">包含事件数据的 <see cref="T:Microsoft.Win32.UserPreferenceChangedEventArgs" />。 </param>
    </member>
    <member name="T:Microsoft.Win32.UserPreferenceChangingEventArgs">
      <summary>为 <see cref="E:Microsoft.Win32.SystemEvents.UserPreferenceChanging" /> 事件提供数据。</summary>
    </member>
    <member name="M:Microsoft.Win32.UserPreferenceChangingEventArgs.#ctor(Microsoft.Win32.UserPreferenceCategory)">
      <summary>使用指定的用户首选项类别标识符初始化 <see cref="T:Microsoft.Win32.UserPreferenceChangingEventArgs" /> 类的新实例。</summary>
      <param name="category">指示正在更改的用户首选项类别的 <see cref="T:Microsoft.Win32.UserPreferenceCategory" /> 值之一。 </param>
    </member>
    <member name="P:Microsoft.Win32.UserPreferenceChangingEventArgs.Category">
      <summary>获取正在更改的用户首选项的类别。</summary>
      <returns>指示正在更改的用户首选项类别的 <see cref="T:Microsoft.Win32.UserPreferenceCategory" /> 值之一。</returns>
    </member>
    <member name="T:Microsoft.Win32.UserPreferenceChangingEventHandler">
      <summary>表示将处理 <see cref="E:Microsoft.Win32.SystemEvents.UserPreferenceChanging" /> 事件的方法。</summary>
      <param name="sender">事件源。当 <see cref="T:Microsoft.Win32.SystemEvents" /> 类引发此事件时，此对象总是为 null。 </param>
      <param name="e">包含事件数据的 <see cref="T:Microsoft.Win32.UserPreferenceChangedEventArgs" />。 </param>
    </member>
    <member name="T:System.FileStyleUriParser">
      <summary>基于 File 方案的可自定义分析器。</summary>
    </member>
    <member name="M:System.FileStyleUriParser.#ctor">
      <summary>创建一个基于 File 方案的可自定义分析器。</summary>
    </member>
    <member name="T:System.FtpStyleUriParser">
      <summary>基于文件传输协议 (FTP) 方案的可自定义分析器。</summary>
    </member>
    <member name="M:System.FtpStyleUriParser.#ctor">
      <summary>创建一个基于文件传输协议 (FTP) 方案的可自定义分析器。</summary>
    </member>
    <member name="T:System.GenericUriParser">
      <summary>用于分层 URI 的可自定义分析器。</summary>
    </member>
    <member name="M:System.GenericUriParser.#ctor(System.GenericUriParserOptions)">
      <summary>创建用于分层 URI 的可自定义分析器。</summary>
      <param name="options">为此 <see cref="T:System.GenericUriParser" /> 指定选项。</param>
    </member>
    <member name="T:System.GenericUriParserOptions">
      <summary>指定 <see cref="T:System.UriParser" /> 的选项。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.Default">
      <summary>分析器：</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.GenericAuthority">
      <summary>此分析器允许基于注册表的证书颁发机构。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.AllowEmptyAuthority">
      <summary>此分析器允许没有证书颁发机构的 URI。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoUserInfo">
      <summary>此方案不定义用户信息部分。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoPort">
      <summary>此方案不定义端口。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoQuery">
      <summary>此方案不定义查询部分。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoFragment">
      <summary>此方案不定义段部分。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.DontConvertPathBackslashes">
      <summary>此分析器不将反斜杠转换为正斜杠。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.DontCompressPath">
      <summary>此分析器不对 URI 进行规范化。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.DontUnescapePathDotsAndSlashes">
      <summary>此分析器不对路径点、正斜杠或反斜杠进行转义还原。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.Idn">
      <summary>分析器支持对主机名进行国际化域名 (IDN) 语法分析。是否使用 IDN 由配置值指定。有关更多信息，请参见“备注”。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.IriParsing">
      <summary>分析器支持 RFC 3987 中指定的国际资源标识符 (IRI) 语法分析规则。是否使用 IRI 由配置值指定。有关更多信息，请参见“备注”。</summary>
    </member>
    <member name="T:System.GopherStyleUriParser">
      <summary>基于 Gopher 方案的可自定义分析器。</summary>
    </member>
    <member name="M:System.GopherStyleUriParser.#ctor">
      <summary>创建一个基于 Gopher 方案的可自定义分析器。</summary>
    </member>
    <member name="T:System.HttpStyleUriParser">
      <summary>基于 HTTP 方案的可自定义分析器。</summary>
    </member>
    <member name="M:System.HttpStyleUriParser.#ctor">
      <summary>创建基于 HTTP 方案的可自定义分析器。</summary>
    </member>
    <member name="T:System.LdapStyleUriParser">
      <summary>基于 轻型目录访问协议 (LDAP) 方案的可自定义分析器。</summary>
    </member>
    <member name="M:System.LdapStyleUriParser.#ctor">
      <summary>创建一个基于轻型目录访问协议 (LDAP) 方案的可自定义分析器。</summary>
    </member>
    <member name="T:System.NetPipeStyleUriParser">
      <summary>基于“Indigo”系统的 NetPipe 方案的分析器。</summary>
    </member>
    <member name="M:System.NetPipeStyleUriParser.#ctor">
      <summary>创建基于“Indigo”系统的 NetPipe 方案的分析器。</summary>
    </member>
    <member name="T:System.NetTcpStyleUriParser">
      <summary>基于“Indigo”系统的 NetTcp 方案的分析器。</summary>
    </member>
    <member name="M:System.NetTcpStyleUriParser.#ctor">
      <summary>基于“Indigo”系统的 NetTcp 方案创建分析器。</summary>
    </member>
    <member name="T:System.NewsStyleUriParser">
      <summary>基于使用网络新闻传输协议 (NNTP) 的新闻方案的可自定义分析器。</summary>
    </member>
    <member name="M:System.NewsStyleUriParser.#ctor">
      <summary>创建一个基于使用网络新闻传输协议 (NNTP) 的新闻方案的可自定义分析器。</summary>
    </member>
    <member name="T:System.Uri">
      <summary>
                    提供统一资源标识符 (URI) 的对象表示形式和对 URI 各部分的轻松访问。
                </summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Uri.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                    从 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的指定实例初始化 <see cref="T:System.Uri" /> 类的新实例。
                </summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 类的实例，包含序列化新的 <see cref="T:System.Uri" /> 实例所需的信息。
                </param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的实例，包含与新的 <see cref="T:System.Uri" /> 实例关联的序列化流的源。
                </param>
    </member>
    <member name="M:System.Uri.#ctor(System.String)">
      <summary>
                    用指定 URI 初始化 <see cref="T:System.Uri" /> 类的新实例。
                </summary>
      <param name="uriString">
                    一个 URI。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" /> 为 null。
                </exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="uriString" /> 为空。
                
                    - 或 -
                <paramref name="uriString" /> 中指定的方案形式不正确。请参见 <see cref="M:System.Uri.CheckSchemeName(System.String)" />。
                
                    - 或 -
                <paramref name="uriString" /> 包含太多斜杠。
                
                    - 或 -
                <paramref name="uriString" /> 中指定的密码无效。
                
                    - 或 -
                <paramref name="uriString" /> 中指定的主机名无效。
                
                    - 或 -
                <paramref name="uriString" /> 中指定的文件名无效。
                
                    - 或 -
                <paramref name="uriString" /> 中指定的用户名无效。
                
                    - 或 -
                <paramref name="uriString" /> 中指定的主机名或证书颁发机构名不能以反斜杠结尾。
                
                    - 或 -
                <paramref name="uriString" /> 中指定的端口号无效或无法分析。
                
                    - 或 -
                <paramref name="uriString" /> 的长度超过 65534 个字符。
                
                    - 或 -
                <paramref name="uriString" /> 中指定的方案的长度超过 1023 个字符。
                
                    - 或 -
                <paramref name="uriString" /> 中存在无效的字符序列。
                
                    - 或 -
                <paramref name="uriString" /> 中指定的 MS-DOS 路径必须以 c:\\ 开头。
                </exception>
    </member>
    <member name="M:System.Uri.#ctor(System.String,System.Boolean)">
      <summary>
                    用指定的 URI 初始化 <see cref="T:System.Uri" /> 类的新实例，并对字符转义进行显式控制。
                </summary>
      <param name="uriString">
                    一个 URI。
                </param>
      <param name="dontEscape">
                    如果 <paramref name="uriString" /> 已完全转义，则为 true；否则为 false。请参见“备注”。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" /> 为 null。
                </exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="uriString" /> 为空或只包含空格。
                
                    - 或 -
                
                    在 <paramref name="uriString" /> 中指定的方案无效。
                
                    - 或 -
                <paramref name="uriString" /> 包含太多斜杠。
                
                    - 或 -
                <paramref name="uriString" /> 中指定的密码无效。
                
                    - 或 -
                <paramref name="uriString" /> 中指定的主机名无效。
                
                    - 或 -
                <paramref name="uriString" /> 中指定的文件名无效。
                
                    - 或 -
                <paramref name="uriString" /> 中指定的用户名无效。
                
                    - 或 -
                <paramref name="uriString" /> 中指定的主机名或证书颁发机构名不能以反斜杠结尾。
                
                    - 或 -
                <paramref name="uriString" /> 中指定的端口号无效或无法分析。
                
                    - 或 -
                <paramref name="uriString" /> 的长度超过 65534 个字符。
                
                    - 或 -
                <paramref name="uriString" /> 中指定的方案的长度超过 1023 个字符。
                
                    - 或 -
                <paramref name="uriString" /> 中存在无效的字符序列。
                
                    - 或 -
                <paramref name="uriString" /> 中指定的 MS-DOS 路径必须以 c:\\ 开头。
                </exception>
    </member>
    <member name="M:System.Uri.#ctor(System.String,System.UriKind)">
      <summary>
                    用指定 URI 初始化 <see cref="T:System.Uri" /> 类的新实例。此构造函数允许您指定 URI 字符串是相对 URI、绝对 URI 还是不确定。
                </summary>
      <param name="uriString">
                    标识将由 <see cref="T:System.Uri" /> 实例表示的资源的字符串。
                </param>
      <param name="uriKind">
                    指定 URI 字符串是相对 URI、绝对 URI 还是不确定。
                </param>
      <exception cref="T:System.UriFormatException">
        <paramref name="uriString" /> 包含相对 URI，而 <paramref name="uriKind" /> 为 <see cref="F:System.UriKind.Absolute" />。
                
                    或
                <paramref name="uriString" /> 包含绝对 URI，而 <paramref name="uriKind" /> 为 <see cref="F:System.UriKind.Relative" />。
                </exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.String)">
      <summary>
                    根据指定的基 URI 和相对 URI 字符串，初始化 <see cref="T:System.Uri" /> 类的新实例。
                </summary>
      <param name="baseUri">
                    基 URI。
                </param>
      <param name="relativeUri">
                    要添加到基 URI 的相对 URI。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" /> 为 null。
                </exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 是空的或只包含空格。
                
                    - 或 -
                <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的方案无效。
                
                    - 或 -
                <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合所形成的 URI 包含太多的斜杠。
                
                    - 或 -
                <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的密码无效。
                
                    - 或 -
                <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的主机名无效。
                
                    - 或 -
                <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的文件名无效。
                
                    - 或 -
                <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的用户名无效。
                
                    - 或 -
                <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的主机名或证书颁发机构名不能以反斜杠结尾。
                
                    - 或 -
                <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的端口号无效或无法分析。
                
                    - 或 -
                <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 的长度超过 65534 个字符。
                
                    - 或 -
                <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的方案的长度超过 1023 个字符。
                
                    - 或 -
                <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中存在无效的字符序列。
                
                    - 或 -
                <paramref name="uriString" /> 中指定的 MS-DOS 路径必须以 c:\\ 开头。
                </exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.String,System.Boolean)">
      <summary>
                    根据指定的基 URI 和相对 URI，初始化 <see cref="T:System.Uri" /> 类的新实例，并对字符转义进行显式控制。
                </summary>
      <param name="baseUri">
                    基 URI。
                </param>
      <param name="relativeUri">
                    要添加到基 URI 的相对 URI。
                </param>
      <param name="dontEscape">
                    如果 <paramref name="uriString" /> 已完全转义，则为 true；否则为 false。请参见“备注”。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" /> 为 null。
                </exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 是空的或只包含空格。
                
                    - 或 -
                <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的方案无效。
                
                    - 或 -
                <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合所形成的 URI 包含太多的斜杠。
                
                    - 或 -
                <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的密码无效。
                
                    - 或 -
                <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的主机名无效。
                
                    - 或 -
                <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的文件名无效。
                
                    - 或 -
                <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的用户名无效。
                
                    - 或 -
                <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的主机名或证书颁发机构名不能以反斜杠结尾。
                
                    - 或 -
                <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的端口号无效或无法分析。
                
                    - 或 -
                <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 的长度超过 65534 个字符。
                
                    - 或 -
                <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的方案的长度超过 1023 个字符。
                
                    - 或 -
                <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中存在无效的字符序列。
                
                    - 或 -
                <paramref name="uriString" /> 中指定的 MS-DOS 路径必须以 c:\\ 开头。
                </exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.Uri)">
      <summary>
                    根据指定的基 <see cref="T:System.Uri" /> 实例和相对 <see cref="T:System.Uri" /> 实例的组合，初始化 <see cref="T:System.Uri" /> 类的新实例。
                </summary>
      <param name="baseUri">
                    作为新 <see cref="T:System.Uri" /> 实例的基的绝对 <see cref="T:System.Uri" />。
                </param>
      <param name="relativeUri">
                    与 <paramref name="baseUri." /> 组合的相对 <see cref="T:System.Uri" /> 实例。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="baseUri" /> 为 null。
                
                    - 或 -
                <paramref name="baseUri" /> 不是绝对的 <see cref="T:System.Uri" /> 实例。
                </exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 是空的或只包含空格。
                
                    - 或 -
                <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的方案无效。
                
                    - 或 -
                <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合所形成的 URI 包含太多的斜杠。
                
                    - 或 -
                <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的密码无效。
                
                    - 或 -
                <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的主机名无效。
                
                    - 或 -
                <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的文件名无效。
                
                    - 或 -
                <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的用户名无效。
                
                    - 或 -
                <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的主机名或证书颁发机构名不能以反斜杠结尾。
                
                    - 或 -
                <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的端口号无效或无法分析。
                
                    - 或 -
                <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 的长度超过 65534 个字符。
                
                    - 或 -
                <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的方案的长度超过 1023 个字符。
                
                    - 或 -
                <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中存在无效的字符序列。
                
                    - 或 -
                <paramref name="uriString" /> 中指定的 MS-DOS 路径必须以 c:\\ 开头。
                </exception>
    </member>
    <member name="P:System.Uri.AbsolutePath">
      <summary>
                    获取 URI 的绝对路径。
                </summary>
      <returns>
                    包含资源的绝对路径的 <see cref="T:System.String" />。
                </returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.AbsoluteUri">
      <summary>
                    获取绝对 URI。
                </summary>
      <returns>
                    包含整个 URI 的 <see cref="T:System.String" />。
                </returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.Authority">
      <summary>
                    获取服务器的域名系统 (DNS) 主机名或 IP 地址和端口号。
                </summary>
      <returns>
                    包含此实例所表示的 URI 的证书颁发机构部分的 <see cref="T:System.String" />。
                </returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.Canonicalize">
      <summary>
                    将内部存储的 URI 转换为规范化格式。
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    此实例代表一个相对 URI，而此方法仅对绝对 URI 有效。
                </exception>
      <exception cref="T:System.UriFormatException">
                    URI 的格式不正确。
                </exception>
    </member>
    <member name="M:System.Uri.CheckHostName(System.String)">
      <summary>
                    确定指定的主机名是否为有效的 DNS 名称。
                </summary>
      <returns>
                    指示主机名类型的 <see cref="T:System.UriHostNameType" />。如果无法确定主机名的类型，或者主机名为 null 或零长度字符串，则此方法返回 <see cref="F:System.UriHostNameType.Unknown" />。
                </returns>
      <param name="name">
                    要验证的主机名。可以是 IPv4 或 IPv6 地址或 Internet 主机名。
                </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Uri.CheckSchemeName(System.String)">
      <summary>
                    确定指定的方案名是否有效。
                </summary>
      <returns>
                    一个 <see cref="T:System.Boolean" /> 值。如果方案名有效，则该值为 true；否则为 false。
                </returns>
      <param name="schemeName">
                    要验证的方案名。
                </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Uri.CheckSecurity">
      <summary>
                    调用此方法不起任何作用。
                </summary>
    </member>
    <member name="M:System.Uri.Compare(System.Uri,System.Uri,System.UriComponents,System.UriFormat,System.StringComparison)">
      <summary>
                    使用指定的比较规则比较两个 URI 的指定部分。
                </summary>
      <returns>
                    一个 <see cref="T:System.Int32" /> 值，指示进行比较的 <see cref="T:System.Uri" /> 部分之间的词法关系。
                
                    值
                
                    含义
                
                    小于零
                <paramref name="uri1" /> 小于 <paramref name="uri2" />。
                
                    零
                <paramref name="uri1" /> 等于 <paramref name="uri2" />。
                
                    大于零
                <paramref name="uri1" /> 大于 <paramref name="uri2" />。
                </returns>
      <param name="uri1">
                    第一个 <see cref="T:System.Uri" />。
                </param>
      <param name="uri2">
                    第二个 <see cref="T:System.Uri" />。
                </param>
      <param name="partsToCompare">
        <see cref="T:System.UriComponents" /> 值的按位组合，它指定要比较的 <paramref name="uri1" /> 和 <paramref name="uri2" /> 的部分。
                </param>
      <param name="compareFormat">
        <see cref="T:System.UriFormat" /> 值中的一个，它指定在比较 URI 部分时使用的字符转义。
                </param>
      <param name="comparisonType">
        <see cref="T:System.StringComparison" /> 值之一。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。
                </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Uri.DnsSafeHost">
      <summary>
                    获得可安全用于 DNS 解析的未转义主机名。
                </summary>
      <returns>
                    一个包含适用于 DNS 解析的未转义 URI 主机部分的 <see cref="T:System.String" />；或者，如果原始的未转义主机字符串已适用于解析，则为原始的未转义主机字符串。
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。
                </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.Equals(System.Object)">
      <summary>
                    比较两个 <see cref="T:System.Uri" /> 实例是否相等。
                </summary>
      <returns>
                    一个 <see cref="T:System.Boolean" /> 值。如果两个实例表示相同的 URI，则该值为 true；否则为 false。
                </returns>
      <param name="comparand">
                    与当前实例相比较的 <see cref="T:System.Uri" /> 实例或 URI 标识符。
                </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Uri.Escape">
      <summary>
                    将路径部分中的任何不安全字符或保留字符转换为对应的十六进制字符表示形式。
                </summary>
      <exception cref="T:System.UriFormatException">
                    从构造函数传来的 URI 无效。如果 URI 字符太多或 URI 是相对的，则会发生这种异常。
                </exception>
    </member>
    <member name="M:System.Uri.EscapeDataString(System.String)">
      <summary>
                    将字符串转换为它的转义表示形式。
                </summary>
      <returns>
                    一个 <see cref="T:System.String" />，包含 <paramref name="stringToEscape" /> 的转义表示形式。
                </returns>
      <param name="stringToEscape">
                    要转义的字符串。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToEscape" /> 为 null。
                </exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="stringToEscape" /> 的长度超过 32766 个字符。
                </exception>
    </member>
    <member name="M:System.Uri.EscapeString(System.String)">
      <summary>
                    将字符串转换为它的转义表示形式。
                </summary>
      <returns>
                    字符串的转义表示形式。
                </returns>
      <param name="str">
                    要转换为它的转义表示形式的字符串。
                </param>
    </member>
    <member name="M:System.Uri.EscapeUriString(System.String)">
      <summary>
                    将 URI 字符串转换为它的转义表示形式。
                </summary>
      <returns>
                    一个 <see cref="T:System.String" />，包含 <paramref name="stringToEscape" /> 的转义表示形式。
                </returns>
      <param name="stringToEscape">
                    要转义的字符串。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToEscape" /> 为 null。
                </exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="stringToEscape" /> 的长度超过 32766 个字符。
                </exception>
    </member>
    <member name="P:System.Uri.Fragment">
      <summary>
                    获取转义 URI 片段。
                </summary>
      <returns>
                    一个包含任意 URI 片段信息的 <see cref="T:System.String" />。
                </returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.FromHex(System.Char)">
      <summary>
                    获取十六进制数字的十进制值。
                </summary>
      <returns>
                    一个 <see cref="T:System.Int32" /> 值，包含与指定的十六进制数字对应的介于 0 到 15 之间的数字。
                </returns>
      <param name="digit">
                    要转换的十六进制数字（0-9、a-f、A-F）。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="digit" /> 不是有效的十六进制数字（0-9、a-f、A-F）。
                </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Uri.GetComponents(System.UriComponents,System.UriFormat)">
      <summary>
                    使用特殊字符的指定转义，获取当前实例的指定部分。
                </summary>
      <returns>
                    一个包含这些部分的 <see cref="T:System.String" />。
                </returns>
      <param name="components">
        <see cref="T:System.UriComponents" /> 值的按位组合，它指定当前实例中要返回到调用方的部分。
                </param>
      <param name="format">
        <see cref="T:System.UriFormat" /> 值中的一个，它控制如何转义特殊字符。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="uriComponents" /> 不是有效 <see cref="T:System.UriComponents" /> 值的组合。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    当前 <see cref="T:System.Uri" /> 不是绝对 URI。相对 URI 不能和此方法一起使用。
                </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Uri.GetHashCode">
      <summary>
                    获取 URI 的哈希代码。
                </summary>
      <returns>
                    一个 <see cref="T:System.Int32" />，其中包含为此 URI 生成的哈希值。
                </returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.GetLeftPart(System.UriPartial)">
      <summary>
                    获取 <see cref="T:System.Uri" /> 实例的指定部分。
                </summary>
      <returns>
                    一个 <see cref="T:System.String" />，其中包含 <see cref="T:System.Uri" /> 实例的指定部分。
                </returns>
      <param name="part">
        <see cref="T:System.UriPartial" /> 值之一，指定要返回的 URI 部分的结尾。
                </param>
      <exception cref="T:System.InvalidOperationException">
                    当前 <see cref="T:System.Uri" /> 实例不是绝对实例。
                </exception>
      <exception cref="T:System.ArgumentException">
                    指定的 <paramref name="part" /> 无效。
                </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                    返回序列化当前实例所需的数据。
                </summary>
      <param name="serializationInfo">
                    一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，它包含序列化 <see cref="T:System.Uri" /> 所需的信息。
                </param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，该对象包含与 <see cref="T:System.Uri" /> 相关联的序列化流的源和目标。
                </param>
    </member>
    <member name="M:System.Uri.HexEscape(System.Char)">
      <summary>
                    将指定的字符转换它的等效十六进制字符。
                </summary>
      <returns>
                    指定字符的十六进制表示形式。
                </returns>
      <param name="character">
                    要转换为十六进制表示形式的字符。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="character" /> 大于 255。
                </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Uri.HexUnescape(System.String,System.Int32@)">
      <summary>
                    将字符的指定十六进制表示形式转换为字符。
                </summary>
      <returns>
                    用十六进制编码表示的位于 <paramref name="index" /> 的字符。如果位于 <paramref name="index" /> 的字符不是用十六进制编码的，则返回位于 <paramref name="index" /> 的字符。<paramref name="index" /> 的值递增以指向跟在返回的字符后面的字符。
                </returns>
      <param name="pattern">
                    字符的十六进制表示形式。
                </param>
      <param name="index">
        <paramref name="pattern" /> 中字符的十六进制表示形式开始的位置。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0，或大于等于 <paramref name="pattern" /> 中的字符数。
                </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Uri.Host">
      <summary>
                    获取此实例的主机部分。
                </summary>
      <returns>
                    一个包含主机名的 <see cref="T:System.String" />。这通常是服务器的 DNS 主机名或 IP 地址。
                </returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.HostNameType">
      <summary>
                    获取 URI 中指定的主机名的类型。
                </summary>
      <returns>
        <see cref="T:System.UriHostNameType" /> 枚举的成员。
                </returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.IsAbsoluteUri">
      <summary>
                    获取一个值，该值指示 <see cref="T:System.Uri" /> 实例是否为绝对 URI。
                </summary>
      <returns>
                    一个 <see cref="T:System.Boolean" /> 值。如果 <see cref="T:System.Uri" /> 实例是绝对 URI，则该值为 true；否则为 false。
                </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Uri.IsBadFileSystemCharacter(System.Char)">
      <summary>
                    获取一个值，该值指示字符是否在文件系统名称中无效。
                </summary>
      <returns>
                    一个 <see cref="T:System.Boolean" /> 值。如果指定的字符无效，则该值为 true；否则为 false。
                </returns>
      <param name="character">
                    要测试的 <see cref="T:System.Char" />。
                </param>
    </member>
    <member name="M:System.Uri.IsBaseOf(System.Uri)">
      <summary>
                    确定当前的 <see cref="T:System.Uri" /> 实例是否为指定 <see cref="T:System.Uri" /> 实例的基。
                </summary>
      <returns>
                    如果当前 <see cref="T:System.Uri" /> 实例是 <paramref name="uri" /> 的基，则为 true；否则，为 false。
                </returns>
      <param name="uri">
                    要测试的指定 <see cref="T:System.Uri" /> 实例。
                </param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.IsDefaultPort">
      <summary>
                    获取一个值，该值指示 URI 的端口值是否为此方案的默认值。
                </summary>
      <returns>
                    一个 <see cref="T:System.Boolean" /> 值。如果 <see cref="P:System.Uri.Port" /> 属性中的值是此方案的默认端口，则该值为 true；否则为 false。
                </returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.IsExcludedCharacter(System.Char)">
      <summary>
                    获取一个值，该值指示是否应该转义指定的字符。
                </summary>
      <returns>
                    一个 <see cref="T:System.Boolean" /> 值。如果应该转义指定的字符，则该值为 true；否则为 false。
                </returns>
      <param name="character">
                    要测试的 <see cref="T:System.Char" />。
                </param>
    </member>
    <member name="P:System.Uri.IsFile">
      <summary>
                    获取一个值，该值指示指定的 <see cref="T:System.Uri" /> 是否为文件 URI。
                </summary>
      <returns>
                    一个 <see cref="T:System.Boolean" /> 值。如果 <see cref="T:System.Uri" /> 是文件 URI，则该值为 true；否则为 false。
                </returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.IsHexDigit(System.Char)">
      <summary>
                    确定指定的字符是否为有效的十六进制数字。
                </summary>
      <returns>
                    一个 <see cref="T:System.Boolean" /> 值。如果字符是有效的十六进制数字，则该值为 true；否则为 false。
                </returns>
      <param name="character">
                    要验证的字符。
                </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Uri.IsHexEncoding(System.String,System.Int32)">
      <summary>
                    确定字符串中的一个字符是否为十六进制编码。
                </summary>
      <returns>
                    一个 <see cref="T:System.Boolean" /> 值。如果 <paramref name="pattern" /> 在指定位置进行了十六进制编码，则该值为 true；否则为 false。
                </returns>
      <param name="pattern">
                    要检查的字符串。
                </param>
      <param name="index">
                    检查十六进制编码的 <paramref name="pattern" /> 中的位置。
                </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Uri.IsLoopback">
      <summary>
                    获取一个值，该值指示指定的 <see cref="T:System.Uri" /> 是否引用了本地主机。
                </summary>
      <returns>
                    一个 <see cref="T:System.Boolean" /> 值。如果此 <see cref="T:System.Uri" /> 引用了本地主机，则该值为 true；否则为 false。
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。
                </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.IsReservedCharacter(System.Char)">
      <summary>
                    获取一个值，该值指示指定的字符是否为保留字符。
                </summary>
      <returns>
                    一个 <see cref="T:System.Boolean" /> 值。如果指定的字符是保留字符，则该值为 true；否则为 false。
                </returns>
      <param name="character">
                    要测试的 <see cref="T:System.Char" />。
                </param>
    </member>
    <member name="P:System.Uri.IsUnc">
      <summary>
                    获取一个值，该值指示指定的 <see cref="T:System.Uri" /> 是否为统一命名约定 (UNC) 路径。
                </summary>
      <returns>
                    一个 <see cref="T:System.Boolean" /> 值。如果 <see cref="T:System.Uri" /> 是 UNC 路径，则该值为 true；否则为 false。
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。
                </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.IsWellFormedOriginalString">
      <summary>
                    指示用于构造此 <see cref="T:System.Uri" /> 的字符串是否格式良好，以及它是否不需要进一步转义。
                </summary>
      <returns>
                    一个 <see cref="T:System.Boolean" /> 值。如果该字符串符合 RFC 2396 和 RFC 2732 的格式要求，则该值为 true；否则为 false。
                </returns>
    </member>
    <member name="M:System.Uri.IsWellFormedUriString(System.String,System.UriKind)">
      <summary>
                    通过尝试用字符串构造一个 URI 来指示字符串是否为格式良好的，并确保字符串不需要进一步转义。
                </summary>
      <returns>
                    一个 <see cref="T:System.Boolean" /> 值。如果该字符串符合 RFC 2396 和 RFC 2732 的格式要求，则该值为 true；否则为 false。
                </returns>
      <param name="uriString">
                    一个 URI。
                </param>
      <param name="uriKind">
        <paramref name="uriString" /> 中的 URI 类型。
                </param>
    </member>
    <member name="P:System.Uri.LocalPath">
      <summary>
                    获取文件名的本地操作系统表示形式。
                </summary>
      <returns>
                    一个 <see cref="T:System.String" />，包含文件名的本地操作系统表示形式。
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。
                </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.MakeRelative(System.Uri)">
      <summary>
                    确定两个 <see cref="T:System.Uri" /> 实例之间的差异。
                </summary>
      <returns>
                    如果此 URI 实例与 <paramref name="toUri" /> 的主机名和方案相同，则此方法返回一个表示相对 URI 的 <see cref="T:System.String" />。若将此相对 URI 追加到当前 URI 实例，就可以得到 <paramref name="toUri" /> 参数。
                
                    如果主机名或方案不同，则此方法返回一个表示 <paramref name="toUri" /> 参数的 <see cref="T:System.String" />。
                </returns>
      <param name="toUri">
                    与当前 URI 进行比较的 URI。
                </param>
      <exception cref="T:System.InvalidOperationException">
                    此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。
                </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.MakeRelativeUri(System.Uri)">
      <summary>
                    确定两个 <see cref="T:System.Uri" /> 实例之间的差异。
                </summary>
      <returns>
                    如果此 URI 实例与 <paramref name="toUri" /> 的主机名和方案相同，则此方法返回一个相对 <see cref="T:System.Uri" />。若将此相对 URI 追加到当前 URI 实例，就可以得到 <paramref name="toUri" />。
                
                    如果主机名或方案不同，则此方法返回一个表示 <paramref name="toUri" /> 参数的 <see cref="T:System.Uri" />。
                </returns>
      <param name="uri">
                    与当前 URI 进行比较的 URI。
                </param>
      <exception cref="T:System.InvalidOperationException">
                    此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。
                </exception>
    </member>
    <member name="M:System.Uri.op_Equality(System.Uri,System.Uri)">
      <summary>
                    确定两个 <see cref="T:System.Uri" /> 实例是否具有相同的值。
                </summary>
      <returns>
                    一个 <see cref="T:System.Boolean" /> 值。如果这两个 <see cref="T:System.Uri" /> 实例是等效的，则该值为 true；否则为 false。
                </returns>
      <param name="uri1">
                    要与 <paramref name="uri2" /> 比较的 <see cref="T:System.Uri" /> 实例。
                </param>
      <param name="uri2">
                    要与 <paramref name="uri1" /> 进行比较的 <see cref="T:System.Uri" /> 实例。
                </param>
      <filterpriority>3</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.op_Inequality(System.Uri,System.Uri)">
      <summary>
                    确定两个 <see cref="T:System.Uri" /> 实例是否具有不同的值。
                </summary>
      <returns>
                    一个 <see cref="T:System.Boolean" /> 值。如果两个 <see cref="T:System.Uri" /> 实例不相等，则该值为 true；否则为 false。如果两者中任意一个参数为 null，则此方法返回 true。
                </returns>
      <param name="uri1">
                    要与 <paramref name="uri2" /> 比较的 <see cref="T:System.Uri" /> 实例。
                </param>
      <param name="uri2">
                    要与 <paramref name="uri1" /> 进行比较的 <see cref="T:System.Uri" /> 实例。
                </param>
      <filterpriority>3</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.OriginalString">
      <summary>
                    获取传递给 <see cref="T:System.Uri" /> 构造函数的原始 URI 字符串。
                </summary>
      <returns>
                    包含构造此实例时指定的同一 URI，则为 <see cref="T:System.String" />；否则，为 <see cref="F:System.String.Empty" />。
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。
                </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.Parse">
      <summary>
                    分析当前实例的 URI 以确保它包含有效 URI 所需的所有部分。
                </summary>
      <exception cref="T:System.UriFormatException">
                    从构造函数传来的 URI 无效。
                </exception>
    </member>
    <member name="P:System.Uri.PathAndQuery">
      <summary>
                    获取用问号 (?) 分隔的 <see cref="P:System.Uri.AbsolutePath" /> 和 <see cref="P:System.Uri.Query" /> 属性。
                </summary>
      <returns>
                    一个 <see cref="T:System.String" />，它包含用问号 (?) 分隔的 <see cref="P:System.Uri.AbsolutePath" /> 和 <see cref="P:System.Uri.Query" /> 属性。
                </returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.Port">
      <summary>
                    获取此 URI 的端口号。
                </summary>
      <returns>
                    一个包含此 URI 的端口号的 <see cref="T:System.Int32" /> 值。
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。
                </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.Query">
      <summary>
                    获取指定 URI 中包括的任何查询信息。
                </summary>
      <returns>
                    一个 <see cref="T:System.String" />，包含指定 URI 中包括的任何查询信息。
                </returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.Scheme">
      <summary>
                    获取此 URI 的方案名称。
                </summary>
      <returns>
                    一个 <see cref="T:System.String" />，包含此 URI 的方案（已转换为小写形式）。
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。
                </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="F:System.Uri.SchemeDelimiter">
      <summary>
                    指定将通讯协议方案同 URI 的地址部分分开的字符。此字段为只读。
                </summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Uri.Segments">
      <summary>
                    获取包含构成指定 URI 的路径段的数组。
                </summary>
      <returns>
                    一个 <see cref="T:System.String" /> 数组，包含构成指定 URI 的路径段。
                </returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                    返回序列化当前实例所需的数据。
                </summary>
      <param name="serializationInfo">
                    一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，它包含序列化 <see cref="T:System.Uri" /> 所需的信息。
                </param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，该对象包含与 <see cref="T:System.Uri" /> 相关联的序列化流的源和目标。
                </param>
    </member>
    <member name="M:System.Uri.ToString">
      <summary>
                    获取指定的 <see cref="T:System.Uri" /> 实例的规范化字符串表示形式。
                </summary>
      <returns>
                    一个 <see cref="T:System.String" /> 实例，它包含 <see cref="T:System.Uri" /> 实例的非转义规范化表示形式。除了 #、? 和 %，所有字符均为非转义字符。
                </returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.TryCreate(System.String,System.UriKind,System.Uri@)">
      <summary>
                    使用指定的 <see cref="T:System.String" /> 实例和 <see cref="T:System.UriKind" /> 创建一个新的 <see cref="T:System.Uri" />。
                </summary>
      <returns>
                    一个 <see cref="T:System.Boolean" /> 值。如果成功创建了 <see cref="T:System.Uri" />，则该值为 true；否则为 false。
                </returns>
      <param name="uriString">
                    表示 <see cref="T:System.Uri" /> 的 <see cref="T:System.String" />。
                </param>
      <param name="uriKind">
                    URI 的类型。
                </param>
      <param name="result">
                    此方法返回时，包含构造的 <see cref="T:System.Uri" />。
                </param>
    </member>
    <member name="M:System.Uri.TryCreate(System.Uri,System.String,System.Uri@)">
      <summary>
                    使用指定的基和相对 <see cref="T:System.Uri" /> 实例创建一个新的 <see cref="T:System.String" />。
                </summary>
      <returns>
                    一个 <see cref="T:System.Boolean" /> 值。如果成功创建了 <see cref="T:System.Uri" />，则该值为 true；否则为 false。
                </returns>
      <param name="baseUri">
                    基 <see cref="T:System.Uri" />。
                </param>
      <param name="relativeUri">
                    要添加到基 <see cref="T:System.Uri" /> 的相对 <see cref="T:System.Uri" />（表示为 <see cref="T:System.String" />）。
                </param>
      <param name="result">
                    此方法返回时，包含从 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 构造的 <see cref="T:System.Uri" />。该参数未经初始化即被传递。
                </param>
    </member>
    <member name="M:System.Uri.TryCreate(System.Uri,System.Uri,System.Uri@)">
      <summary>
                    使用指定基和相对 <see cref="T:System.Uri" /> 实例创建一个新的 <see cref="T:System.Uri" />。
                </summary>
      <returns>
                    一个 <see cref="T:System.Boolean" /> 值。如果成功创建了 <see cref="T:System.Uri" />，则该值为 true；否则为 false。
                </returns>
      <param name="baseUri">
                    基 <see cref="T:System.Uri" />。
                </param>
      <param name="relativeUri">
                    要添加到基 <see cref="T:System.Uri" /> 的相对 <see cref="T:System.Uri" />。
                </param>
      <param name="result">
                    此方法返回时，包含从 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 构造的 <see cref="T:System.Uri" />。该参数未经初始化即被传递。
                </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Uri.Unescape(System.String)">
      <summary>
                    转换指定的字符串，方法是将任何转义序列替换为相应的未转义表示形式。
                </summary>
      <returns>
                    一个 <see cref="T:System.String" />，包含 <paramref name="path" /> 参数的非转义值。
                </returns>
      <param name="path">
                    要转换的 <see cref="T:System.String" />。
                </param>
    </member>
    <member name="M:System.Uri.UnescapeDataString(System.String)">
      <summary>
                    将字符串转换为它的非转义表示形式。
                </summary>
      <returns>
                    一个 <see cref="T:System.String" />，包含 <paramref name="stringToUnescape" /> 的非转义表示形式。
                </returns>
      <param name="stringToUnescape">
                    要恢复原义的字符串。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToUnescape" /> 为 null。
                </exception>
    </member>
    <member name="F:System.Uri.UriSchemeFile">
      <summary>
                    指定 URI 是指向文件的指针。此字段为只读。
                </summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Uri.UriSchemeFtp">
      <summary>
                    指定通过文件传输协议 (FTP) 访问 URI。此字段为只读。
                </summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Uri.UriSchemeGopher">
      <summary>
                    指定通过 Gopher 协议访问 URI。此字段为只读。
                </summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Uri.UriSchemeHttp">
      <summary>
                    指定通过超文本传输协议 (HTTP) 访问 URI。此字段为只读。
                </summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Uri.UriSchemeHttps">
      <summary>
                    指定通过安全超文本传输协议 (HTTPS) 访问 URI。此字段为只读。
                </summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Uri.UriSchemeMailto">
      <summary>
                    指定 URI 是一个电子邮件地址，需通过简单邮件传输协议 (SMTP) 访问。此字段为只读。
                </summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Uri.UriSchemeNetPipe">
      <summary>
                    指定通过“Indigo”系统的 NetPipe 方案访问此 URI。此字段为只读。
                </summary>
    </member>
    <member name="F:System.Uri.UriSchemeNetTcp">
      <summary>
                    指定通过“Indigo”系统的 NetTcp 方案访问此 URI。此字段为只读。
                </summary>
    </member>
    <member name="F:System.Uri.UriSchemeNews">
      <summary>
                    指定 URI 是 Internet 新闻组，而且可以通过 Network 新闻传输协议 (NNTP) 进行访问。此字段为只读。
                </summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Uri.UriSchemeNntp">
      <summary>
                    指定 URI 是 Internet 新闻组，而且可以通过 Network 新闻传输协议 (NNTP) 进行访问。此字段为只读。
                </summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Uri.UserEscaped">
      <summary>
                    指示 URI 字符串在创建 <see cref="T:System.Uri" /> 实例之前已被完全转义。
                </summary>
      <returns>
                    一个 <see cref="T:System.Boolean" /> 值。如果在创建 <see cref="T:System.Uri" /> 实例时 <paramref name="dontEscape" /> 参数设置为 true，则该值为 true；否则为 false。
                </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Uri.UserInfo">
      <summary>
                    获取用户名、密码或其他与指定 URI 关联的特定于用户的信息。
                </summary>
      <returns>
                    一个 <see cref="T:System.String" />，包含与该 URI 关联的用户信息。返回值不包括“@”字符，该字符是一个保留字符，用于分隔 URI 的用户信息部分。
                </returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.UriBuilder">
      <summary>为统一资源标识符 (URI) 提供自定义构造函数，并修改 <see cref="T:System.Uri" /> 类的 URI。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UriBuilder.#ctor">
      <summary>初始化 <see cref="T:System.UriBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String)">
      <summary>用指定 URI 初始化 <see cref="T:System.UriBuilder" /> 类的新实例。</summary>
      <param name="uri">URI 字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 为 null。 </exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="uri" /> 为零长度字符串或只包含空格。- 或 - 分析例程检测到方案的格式无效。- 或 - 分析器检测到不使用“文件”方案的 URI 中有多于两个的连续斜线。- 或 - <paramref name="uri" /> 不是有效 URI。 </exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String)">
      <summary>用指定的方案和主机初始化 <see cref="T:System.UriBuilder" /> 类的新实例。</summary>
      <param name="schemeName">Internet 访问协议。 </param>
      <param name="hostName">DNS 样式的域名或 IP 地址。 </param>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32)">
      <summary>用指定的方案、主机和端口初始化 <see cref="T:System.UriBuilder" /> 类的新实例。</summary>
      <param name="scheme">Internet 访问协议。 </param>
      <param name="host">DNS 样式的域名或 IP 地址。 </param>
      <param name="portNumber">服务的 IP 端口号。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="portNumber" /> 小于 0。 </exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String)">
      <summary>用指定的方案、主机、端口号和路径初始化 <see cref="T:System.UriBuilder" /> 类的新实例。</summary>
      <param name="scheme">Internet 访问协议。 </param>
      <param name="host">DNS 样式的域名或 IP 地址。 </param>
      <param name="port">服务的 IP 端口号。 </param>
      <param name="pathValue">Internet 资源的路径。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 小于 0。 </exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String,System.String)">
      <summary>用指定的方案、主机、端口号、路径和查询字符串或段标识符初始化 <see cref="T:System.UriBuilder" /> 类的新实例。</summary>
      <param name="scheme">Internet 访问协议。 </param>
      <param name="host">DNS 样式的域名或 IP 地址。 </param>
      <param name="port">服务的 IP 端口号。 </param>
      <param name="path">Internet 资源的路径。 </param>
      <param name="extraValue">查询字符串或段标识符。 </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="extraValue" /> 既不是 null 也不是 <see cref="F:System.String.Empty" />，既不是以井号 (#) 开始的有效段标识符，也不是以问号 (?) 开始的有效查询字符串。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 小于 0。 </exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.Uri)">
      <summary>用指定的 <see cref="T:System.Uri" /> 实例初始化 <see cref="T:System.UriBuilder" /> 类的新实例。</summary>
      <param name="uri">
        <see cref="T:System.Uri" /> 类的实例。 </param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="uri" /> 为 null。 </exception>
    </member>
    <member name="M:System.UriBuilder.Equals(System.Object)">
      <summary>比较现有 <see cref="T:System.Uri" /> 实例与 <see cref="T:System.UriBuilder" /> 的内容是否相等。</summary>
      <returns>
如果 <paramref name="rparam" /> 表示的 <see cref="T:System.Uri" /> 与此 <see cref="T:System.UriBuilder" /> 实例构造的 <see cref="T:System.Uri" /> 相同，则为 true；否则为 false。</returns>
      <param name="rparam">要与当前实例进行比较的对象。 </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.UriBuilder.Fragment">
      <summary>获取或设置 URI 的段部分。</summary>
      <returns>URI 的段部分。段标识符 ("#") 添加到段的开头。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UriBuilder.GetHashCode">
      <summary>返回 URI 的哈希代码。</summary>
      <returns>为 URI 生成的哈希代码。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.UriBuilder.Host">
      <summary>获取或设置服务器的域名系统 (DNS) 主机名或 IP 地址。</summary>
      <returns>服务器的域名系统 (DNS) 主机名或 IP 地址。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.UriBuilder.Password">
      <summary>获取或设置与访问 URI 的用户关联的密码。</summary>
      <returns>访问 URI 的用户的密码。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.UriBuilder.Path">
      <summary>获取或设置 URI 引用的资源的路径。</summary>
      <returns>URI 引用的资源的路径。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.UriBuilder.Port">
      <summary>获取或设置 URI 的端口号。</summary>
      <returns>URI 的端口号。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.UriBuilder.Query">
      <summary>获取或设置 URI 中包括的任何查询信息。</summary>
      <returns>URI 中包括的查询信息。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.UriBuilder.Scheme">
      <summary>获取或设置 URI 的方案名称。</summary>
      <returns>URI 的方案。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UriBuilder.ToString">
      <summary>返回指定 <see cref="T:System.UriBuilder" /> 实例的显示字符串。</summary>
      <returns>包含 <see cref="T:System.UriBuilder" /> 的非转义显示字符串的字符串。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.UriBuilder.Uri">
      <summary>获取由指定 <see cref="T:System.UriBuilder" /> 实例构造的 <see cref="T:System.Uri" /> 实例。</summary>
      <returns>
        <see cref="T:System.Uri" />，包含由 <see cref="T:System.UriBuilder" /> 构造的 URI。</returns>
      <exception cref="T:System.UriFormatException">由 <see cref="T:System.UriBuilder" /> 属性构造的 URI 无效。 </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.UriBuilder.UserName">
      <summary>与访问 URI 的用户关联的用户名。</summary>
      <returns>访问 URI 的用户的用户名。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.UriComponents">
      <summary>指定 <see cref="T:System.Uri" /> 的各个部分。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.UriComponents.Scheme">
      <summary>
        <see cref="P:System.Uri.Scheme" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.UserInfo">
      <summary>
        <see cref="P:System.Uri.UserInfo" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.Host">
      <summary>
        <see cref="P:System.Uri.Host" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.Port">
      <summary>
        <see cref="P:System.Uri.Port" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.Path">
      <summary>
        <see cref="P:System.Uri.LocalPath" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.Query">
      <summary>
        <see cref="P:System.Uri.Query" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.Fragment">
      <summary>
        <see cref="P:System.Uri.Fragment" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.StrongPort">
      <summary>
        <see cref="P:System.Uri.Port" /> 数据。如果在 <see cref="T:System.Uri" /> 中没有端口数据并且已为 <see cref="P:System.Uri.Scheme" /> 分配了一个默认端口，则返回该默认端口。如果没有默认端口，则返回 -1。</summary>
    </member>
    <member name="F:System.UriComponents.KeepDelimiter">
      <summary>指定应包含分隔符。</summary>
    </member>
    <member name="F:System.UriComponents.SerializationInfoString">
      <summary>URI 序列化程序所需的完整 <see cref="T:System.Uri" /> 上下文。此上下文包括 IPv6 范围。</summary>
    </member>
    <member name="F:System.UriComponents.AbsoluteUri">
      <summary>
        <see cref="P:System.Uri.Scheme" />、<see cref="P:System.Uri.UserInfo" />、<see cref="P:System.Uri.Host" />、<see cref="P:System.Uri.Port" />、<see cref="P:System.Uri.LocalPath" />、<see cref="P:System.Uri.Query" /> 和 <see cref="P:System.Uri.Fragment" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.HostAndPort">
      <summary>
        <see cref="P:System.Uri.Host" /> 和 <see cref="P:System.Uri.Port" /> 数据。如果在 Uri 中没有端口数据并且已为 <see cref="P:System.Uri.Scheme" /> 分配了一个默认端口，则返回该默认端口。如果没有默认端口，则返回 -1。</summary>
    </member>
    <member name="F:System.UriComponents.StrongAuthority">
      <summary>
        <see cref="P:System.Uri.UserInfo" />、<see cref="P:System.Uri.Host" /> 和 <see cref="P:System.Uri.Port" /> 数据。如果在 <see cref="T:System.Uri" /> 中没有端口数据并且已为 <see cref="P:System.Uri.Scheme" /> 分配了一个默认端口，则返回该默认端口。如果没有默认端口，则返回 -1。</summary>
    </member>
    <member name="F:System.UriComponents.SchemeAndServer">
      <summary>
        <see cref="P:System.Uri.Scheme" />、<see cref="P:System.Uri.Host" /> 和 <see cref="P:System.Uri.Port" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.HttpRequestUrl">
      <summary>
        <see cref="P:System.Uri.Scheme" />、<see cref="P:System.Uri.Host" />、<see cref="P:System.Uri.Port" />、<see cref="P:System.Uri.LocalPath" /> 和 <see cref="P:System.Uri.Query" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.PathAndQuery">
      <summary>
        <see cref="P:System.Uri.LocalPath" /> 和 <see cref="P:System.Uri.Query" /> 数据。另外，请参见 <see cref="P:System.Uri.PathAndQuery" />。</summary>
    </member>
    <member name="T:System.UriFormat">
      <summary>控制 URI 信息的转义方式。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.UriFormat.UriEscaped">
      <summary>根据 RFC 2396 中的规则执行转义。</summary>
    </member>
    <member name="F:System.UriFormat.Unescaped">
      <summary>未执行任何转义。</summary>
    </member>
    <member name="F:System.UriFormat.SafeUnescaped">
      <summary>在请求的 URI 组成部分中具有保留意义的字符将仍然进行转义。所有其他字符不进行转义。请参见备注。</summary>
    </member>
    <member name="T:System.UriFormatException">
      <summary>当检测到无效的统一资源标识符 (URI) 时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UriFormatException.#ctor">
      <summary>初始化 <see cref="T:System.UriFormatException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>根据指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 实例初始化 <see cref="T:System.UriFormatException" /> 类的新实例。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它包含序列化新的 <see cref="T:System.UriFormatException" /> 所需的信息。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含与新的 <see cref="T:System.UriFormatException" /> 关联的序列化流的源。</param>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.String)">
      <summary>用指定的消息初始化 <see cref="T:System.UriFormatException" /> 类的新实例。</summary>
      <param name="textString">错误信息字符串。</param>
    </member>
    <member name="M:System.UriFormatException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化 <see cref="T:System.UriFormatException" /> 所需的数据来填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它将保留 <see cref="T:System.UriFormatException" /> 的序列化的数据。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含与新的 <see cref="T:System.UriFormatException" /> 关联的序列化流的目标。</param>
    </member>
    <member name="T:System.UriHostNameType">
      <summary>为 <see cref="M:System.Uri.CheckHostName(System.String)" /> 方法定义主机名类型。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.UriHostNameType.Unknown">
      <summary>不提供主机名的类型。</summary>
    </member>
    <member name="F:System.UriHostNameType.Basic">
      <summary>设置主机，但无法确定类型。</summary>
    </member>
    <member name="F:System.UriHostNameType.Dns">
      <summary>主机名是域名系统 (DNS) 样式主机名。</summary>
    </member>
    <member name="F:System.UriHostNameType.IPv4">
      <summary>主机名是网际协议 (IP) 第 4 版主机地址。</summary>
    </member>
    <member name="F:System.UriHostNameType.IPv6">
      <summary>主机名是网际协议 (IP) 第 6 版主机地址。</summary>
    </member>
    <member name="T:System.UriKind">
      <summary>定义 <see cref="M:System.Uri.IsWellFormedUriString(System.String,System.UriKind)" /> 的 <see cref="T:System.Uri" /> 的类型和几种 <see cref="Overload:System.Uri.#ctor" /> 方法。</summary>
    </member>
    <member name="F:System.UriKind.RelativeOrAbsolute">
      <summary>此 Uri 的类型不确定。</summary>
    </member>
    <member name="F:System.UriKind.Absolute">
      <summary>此 Uri 是绝对 Uri。</summary>
    </member>
    <member name="F:System.UriKind.Relative">
      <summary>此 Uri 是相对 Uri。</summary>
    </member>
    <member name="T:System.UriParser">
      <summary>分析新的 URI 方案。这是一个抽象类。</summary>
    </member>
    <member name="M:System.UriParser.#ctor">
      <summary>构建默认的 URI 分析器。</summary>
    </member>
    <member name="M:System.UriParser.GetComponents(System.Uri,System.UriComponents,System.UriFormat)">
      <summary>从 URI 获取各个组成部分。</summary>
      <returns>包含组成部分的字符串。</returns>
      <param name="uri">要分析的 URI。</param>
      <param name="components">要从 <paramref name="uri" /> 中检索的 <see cref="T:System.UriComponents" />。</param>
      <param name="format">
        <see cref="T:System.UriFormat" /> 值中的一个，它控制如何转义特殊字符。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="uriFormat" /> 无效。- 或 -<paramref name="uriComponents" /> 不是有效的 <see cref="T:System.UriComponents" /> 值的组合。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="uri" /> 不是绝对 URI。相对 URI 不能和此方法一起使用。</exception>
    </member>
    <member name="M:System.UriParser.InitializeAndValidate(System.Uri,System.UriFormatException@)">
      <summary>初始化分析器的状态并验证 URI。</summary>
      <param name="uri">要验证的 T:System.Uri。</param>
      <param name="parsingError">验证错误（如果有）。</param>
    </member>
    <member name="M:System.UriParser.IsBaseOf(System.Uri,System.Uri)">
      <summary>确定 <paramref name="baseUri" /> 是否为 <paramref name="relativeUri" /> 的基 URI。</summary>
      <returns>
            如果 <paramref name="baseUri" /> 是 <paramref name="relativeUri" /> 的基 URI，则为 true；否则为 false。</returns>
      <param name="baseUri">基 URI。</param>
      <param name="relativeUri">要测试的 URI。</param>
    </member>
    <member name="M:System.UriParser.IsKnownScheme(System.String)">
      <summary>指示某个方案的分析器是否已注册。</summary>
      <returns>
            如果已注册 <paramref name="schemeName" />，则为 true；否则为 false。</returns>
      <param name="schemeName">要检查的方案名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemeName" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="schemeName" /> 参数无效。</exception>
    </member>
    <member name="M:System.UriParser.IsWellFormedOriginalString(System.Uri)">
      <summary>指示 URI 是否是格式良好的。</summary>
      <returns>
            如果 <paramref name="uri" /> 格式良好，则为 true；否则为 false。</returns>
      <param name="uri">要检查的 URI。</param>
    </member>
    <member name="M:System.UriParser.OnNewUri">
      <summary>由 <see cref="T:System.Uri" /> 构造函数调用以获取一个 <see cref="T:System.UriParser" /> 实例。</summary>
      <returns>用于构建的 <see cref="T:System.Uri" /> 的一个 <see cref="T:System.UriParser" />。</returns>
    </member>
    <member name="M:System.UriParser.OnRegister(System.String,System.Int32)">
      <summary>在注册 <see cref="T:System.UriParser" /> 方法时由 Framework 调用。</summary>
      <param name="schemeName">与此 <see cref="T:System.UriParser" /> 关联的方案。</param>
      <param name="defaultPort">方案的端口号。</param>
    </member>
    <member name="M:System.UriParser.Register(System.UriParser,System.String,System.Int32)">
      <summary>将方案和端口号与 <see cref="T:System.UriParser" /> 关联。</summary>
      <param name="uriParser">要注册的 URI 分析器。</param>
      <param name="schemeName">与此分析器关联的方案的名称。</param>
      <param name="defaultPort">指定方案的默认端口号。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriParser" /> 或 <paramref name="schemeName" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="schemeName" /> 或 <paramref name="defaultPort" /> 参数无效。</exception>
    </member>
    <member name="M:System.UriParser.Resolve(System.Uri,System.Uri,System.UriFormatException@)">
      <summary>由 <see cref="T:System.Uri" /> 构造函数和 <see cref="Overload:System.Uri.TryCreate" /> 调用以解析相对 URI。</summary>
      <returns>经过解析的相对 <see cref="T:System.Uri" /> 的字符串。</returns>
      <param name="baseUri">一个基 URI。</param>
      <param name="relativeUri">一个相对 URI。</param>
      <param name="parsingError">解析过程中的错误（如果有）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="baseUri" /> 参数不是绝对 <see cref="T:System.Uri" />，或者 <paramref name="baseUri" /> 需要用户驱动的语法分析。</exception>
    </member>
    <member name="T:System.UriPartial">
      <summary>为 <see cref="M:System.Uri.GetLeftPart(System.UriPartial)" /> 方法定义 URI 的各部分。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.UriPartial.Scheme">
      <summary>URI 的方案段。</summary>
    </member>
    <member name="F:System.UriPartial.Authority">
      <summary>URI 的方案段与颁发机构段。</summary>
    </member>
    <member name="F:System.UriPartial.Path">
      <summary>URI 的方案段、颁发机构段与路径段。</summary>
    </member>
    <member name="F:System.UriPartial.Query">
      <summary>URI 的方案段、证书颁发机构段、路径段与查询段。</summary>
    </member>
    <member name="T:System.UriTypeConverter">
      <summary>将 <see cref="T:System.String" /> 类型转换为 <see cref="T:System.Uri" /> 类型，反之亦然。</summary>
    </member>
    <member name="M:System.UriTypeConverter.#ctor">
      <summary>初始化 <see cref="T:System.UriTypeConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>返回该转换器是否可以将给定类型的对象转换为此转换器的类型。</summary>
      <returns>
            如果 <paramref name="sourceType" /> 是 <see cref="T:System.String" /> 类型，或者可以从 <paramref name="sourceType" /> 分配 <see cref="T:System.Uri" /> 类型，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="sourceType">一个 <see cref="T:System.Type" />，表示要转换的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceType" /> 参数为 null。</exception>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>返回此转换器是否可以使用指定的上下文将该对象转换为指定的类型。</summary>
      <returns>
            如果 <paramref name="destinationType" /> 为 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />、<see cref="T:System.String" /> 或 <see cref="T:System.Uri" /> 类型，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="destinationType">一个 <see cref="T:System.Type" />，表示要转换到的类型。</param>
    </member>
    <member name="M:System.UriTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>使用指定的上下文和区域性信息将给定的对象转换为此转换器的类型。</summary>
      <returns>表示转换的 value 的 <see cref="T:System.Object" />。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="culture">用作当前区域性的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.UriTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>使用指定的上下文和区域性信息将给定的值对象转换为指定的类型。</summary>
      <returns>表示转换的 value 的 <see cref="T:System.Object" />。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />。如果传递 null，则采用当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">
        <paramref name="value" /> 参数要转换成的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 参数为 null。</exception>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.UriTypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>返回给定值对象是 <see cref="T:System.Uri" />，还是可以从该对象创建 <see cref="T:System.Uri" />。</summary>
      <returns>
            如果 <paramref name="value" /> 是 <see cref="T:System.Uri" />，或者是可以从中创建 <see cref="T:System.Uri" /> 的 <see cref="T:System.String" />，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="value">要测试其有效性的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="T:System.UriIdnScope">
      <summary>提供 <see cref="N:System.Configuration" /> 命名空间中的 <see cref="T:System.Configuration.IdnElement" /> 的配置设置的可能值。</summary>
    </member>
    <member name="F:System.UriIdnScope.None">
      <summary>此值不会将任何 Unicode 域名转换为使用 Punycode。这是与 .NET Framework 2.0 行为一致的默认值。</summary>
    </member>
    <member name="F:System.UriIdnScope.AllExceptIntranet">
      <summary>此值会将所有外部 Unicode 域名转换为使用 Punycode 等效项（IDN 名称）。在这种情况下，若要处理本地 Intranet 上的国际化名称，用于 Intranet 的 DNS 服务器应该支持 Unicode 名称。</summary>
    </member>
    <member name="F:System.UriIdnScope.All">
      <summary>此值会将所有 Unicode 域名转换为它们的 Punycode 等效项（IDN 名称）。</summary>
    </member>
    <member name="T:System.CodeDom.CodeArgumentReferenceExpression">
      <summary>表示对传递到方法的参数值的引用。</summary>
    </member>
    <member name="M:System.CodeDom.CodeArgumentReferenceExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeArgumentReferenceExpression.#ctor(System.String)">
      <summary>使用指定的参数名初始化 <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" /> 类的新实例。</summary>
      <param name="parameterName">要引用的参数的名称。 </param>
    </member>
    <member name="P:System.CodeDom.CodeArgumentReferenceExpression.ParameterName">
      <summary>获取或设置此表达式引用的参数名称。</summary>
      <returns>要引用的参数的名称。</returns>
    </member>
    <member name="T:System.CodeDom.CodeArrayCreateExpression">
      <summary>
                    表示创建数组的表达式。
                </summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor">
      <summary>
                    初始化 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 类的新实例。
                </summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
      <summary>
用指定的数组数据类型和指示数组索引数的代码表达式初始化 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 类的新实例。
                </summary>
      <param name="createType">
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示要创建的数组的数据类型。
                </param>
      <param name="size">
一个表达式，它指示要创建的数组的索引数。
                </param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
      <summary>
                    使用指定的数组数据类型和初始化表达式初始化 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 类的新实例。
                </summary>
      <param name="createType">
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示要创建的数组的数据类型。
                </param>
      <param name="initializers">
要用于初始化数组的表达式数组。
                </param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
      <summary>
使用指定的数组数据类型和数组的索引数初始化 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 类的新实例。
                </summary>
      <param name="createType">
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示要创建的数组的数据类型。
                </param>
      <param name="size">
要创建的数组的索引数。
                </param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>
                    使用指定的数组数据类型名和指示数组索引数的代码表达式初始化 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 类的新实例。
                </summary>
      <param name="createType">
要创建数组的数据类型的名称。
                </param>
      <param name="size">
一个表达式，它指示要创建的数组的索引数。
                </param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression[])">
      <summary>
                    使用指定的数组数据类型名和初始值设定项初始化 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 类的新实例。
                </summary>
      <param name="createType">
要创建数组的数据类型的名称。
                </param>
      <param name="initializers">
要用于初始化数组的表达式数组。
                </param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.Int32)">
      <summary>
                    使用指定的数组数据类型名和数组的索引数初始化 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 类的新实例。
                </summary>
      <param name="createType">
要创建数组的数据类型的名称。
                </param>
      <param name="size">
要创建的数组的索引数。
                </param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression)">
      <summary>
用指定的数组数据类型和指示数组索引数的代码表达式初始化 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 类的新实例。
                </summary>
      <param name="createType">
要创建的数组的数据类型。
                </param>
      <param name="size">
一个表达式，它指示要创建的数组的索引数。
                </param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression[])">
      <summary>
                    使用指定的数组数据类型和初始值设定项初始化 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 类的新实例。
                </summary>
      <param name="createType">
要创建的数组的数据类型。
                </param>
      <param name="initializers">
要用于初始化数组的表达式数组。
                </param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.Int32)">
      <summary>
使用指定的数组数据类型和数组的索引数初始化 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 类的新实例。
                </summary>
      <param name="createType">
要创建的数组的数据类型。
                </param>
      <param name="size">
要创建的数组的索引数。
                </param>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.CreateType">
      <summary>
                    获取或设置要创建的数组类型。
                </summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示数组的类型。
                </returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.Initializers">
      <summary>
                    获取用来初始化数组的初始值设定项。
                </summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpressionCollection" />，指示初始化值。
                </returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.Size">
      <summary>
                    获取或设置数组中的索引数。
                </summary>
      <returns>
                    数组中的索引数。
                </returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.SizeExpression">
      <summary>
                    获取或设置指示数组大小的表达式。
                </summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，指示数组的大小。
                </returns>
    </member>
    <member name="T:System.CodeDom.CodeArrayIndexerExpression">
      <summary>表示对数组的索引的引用。</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayIndexerExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeArrayIndexerExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayIndexerExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary>使用指定的目标对象和索引初始化 <see cref="T:System.CodeDom.CodeArrayIndexerExpression" /> 类的新实例。</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" />，指示作为索引器目标的数组。 </param>
      <param name="indices">要引用的一个或多个索引。 </param>
    </member>
    <member name="P:System.CodeDom.CodeArrayIndexerExpression.Indices">
      <summary>获取或设置索引器表达式的一个或多个索引。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpressionCollection" />，它指示索引器表达式的一个或多个索引。</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayIndexerExpression.TargetObject">
      <summary>获取或设置此数组索引器的目标对象。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeExpression" />，它表示正在索引的数组。</returns>
    </member>
    <member name="T:System.CodeDom.CodeAssignStatement">
      <summary>表示简单的赋值语句。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAssignStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeAssignStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAssignStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
      <summary>使用指定的表达式初始化 <see cref="T:System.CodeDom.CodeAssignStatement" /> 类的新实例。</summary>
      <param name="left">要对其赋值的变量。 </param>
      <param name="right">要赋予的值。 </param>
    </member>
    <member name="P:System.CodeDom.CodeAssignStatement.Left">
      <summary>获取或设置表示要对其赋值的对象或引用的表达式。</summary>
      <returns>指示要对其赋值的对象或引用的 <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeAssignStatement.Right">
      <summary>获取或设置表示要赋予的对象或引用的表达式。</summary>
      <returns>指示要赋予的对象或引用的 <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttachEventStatement">
      <summary>表示向事件附加事件处理程序委托的语句。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeAttachEventStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor(System.CodeDom.CodeEventReferenceExpression,System.CodeDom.CodeExpression)">
      <summary>使用指定的事件和委托初始化 <see cref="T:System.CodeDom.CodeAttachEventStatement" /> 类的新实例。</summary>
      <param name="eventRef">
        <see cref="T:System.CodeDom.CodeEventReferenceExpression" />，它指示要将事件处理程序附加到的事件。 </param>
      <param name="listener">
        <see cref="T:System.CodeDom.CodeExpression" />，它指示新的事件处理程序。 </param>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression)">
      <summary>使用包含事件、事件名和事件处理程序委托的指定对象来初始化 <see cref="T:System.CodeDom.CodeAttachEventStatement" /> 类的新实例。</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" />，指示包含事件的对象。 </param>
      <param name="eventName">要将事件处理程序附加到的事件的名称。 </param>
      <param name="listener">
        <see cref="T:System.CodeDom.CodeExpression" />，它指示新的事件处理程序。 </param>
    </member>
    <member name="P:System.CodeDom.CodeAttachEventStatement.Event">
      <summary>获取或设置要对其附加事件处理程序委托的事件。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeEventReferenceExpression" />，它指示要将事件处理程序附加到的事件。</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttachEventStatement.Listener">
      <summary>获取或设置要附加到事件的新事件处理程序委托。</summary>
      <returns>指示要附加的新事件处理程序的 <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeArgument">
      <summary>表示在元数据属性 (Attribute) 声明中使用的参数。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor(System.CodeDom.CodeExpression)">
      <summary>使用指定的值初始化 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 类的新实例。</summary>
      <param name="value">表示参数值的 <see cref="T:System.CodeDom.CodeExpression" />。 </param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>使用指定的名称和值初始化 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 类的新实例。</summary>
      <param name="name">参数应用于的属性 (Attribute) 属性 (Property) 的名称。 </param>
      <param name="value">表示参数值的 <see cref="T:System.CodeDom.CodeExpression" />。 </param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgument.Name">
      <summary>获取或设置属性 (Attribute) 的名称。</summary>
      <returns>参数用于的属性 (Attribute) 属性 (Property) 的名称。</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgument.Value">
      <summary>获取或设置属性 (Attribute) 参数的值。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，指示属性 (Attribute) 参数的值。</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeArgumentCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 对象的集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor(System.CodeDom.CodeAttributeArgument[])">
      <summary>初始化 <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> 类的新实例，该实例包含指定的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 对象数组。</summary>
      <param name="value">用于初始化该集合的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 对象数组。</param>
      <exception cref="T:System.ArgumentNullException">数组中的一个或多个对象为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor(System.CodeDom.CodeAttributeArgumentCollection)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> 类的新实例，该实例包含指定源集合的元素。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />，用来初始化集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Add(System.CodeDom.CodeAttributeArgument)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 对象添加到集合。</summary>
      <returns>新元素位置处插入的索引。</returns>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 对象。</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.AddRange(System.CodeDom.CodeAttributeArgument[])">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 数组的元素复制到集合末尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeAttributeArgument" /> 类型的数组，其中包含要添加到集合中的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.AddRange(System.CodeDom.CodeAttributeArgumentCollection)">
      <summary>将另一个 <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> 对象的内容复制到集合的末尾。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />，其中包含要添加到集合中的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 &lt;languageKeyword&gt;null&lt;/languageKeyword&gt;。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Contains(System.CodeDom.CodeAttributeArgument)">
      <summary>获取一个值，该值指示集合是否包含指定的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 对象。</summary>
      <returns>
            当集合包含指定的对象时为 true；否则为 false。</returns>
      <param name="value">要在集合中定位的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 对象。</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.CopyTo(System.CodeDom.CodeAttributeArgument[],System.Int32)">
      <summary>将集合对象复制到一维 <see cref="T:System.Array" /> 实例（从指定索引处开始）。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，为从集合所复制的值的目标位置。</param>
      <param name="index">插入开始处的数组的索引。</param>
      <exception cref="T:System.ArgumentException">该目标数组是多维数组。- 或 - <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> 中的元素数大于 <paramref name="index" /> 参数所指定的目标数组索引位置与目标数组结尾位置之间的可用空间。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于目标数组的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.IndexOf(System.CodeDom.CodeAttributeArgument)">
      <summary>获取指定的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 对象在集合中的索引（如果它已存在于该集合中）。</summary>
      <returns>如果在该集合中找到指定对象，则为此对象在该集合中的索引；否则为 -1。</returns>
      <param name="value">要在集合中定位的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 对象。</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Insert(System.Int32,System.CodeDom.CodeAttributeArgument)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 对象插入集合中指定的索引位置。</summary>
      <param name="index">从零开始的索引，应在此处插入指定对象。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 对象。</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgumentCollection.Item(System.Int32)">
      <summary>获取或设置集合中指定索引处的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 对象。</summary>
      <returns>每个有效索引位置的 <see cref="T:System.CodeDom.CodeAttributeArgument" />。</returns>
      <param name="index">要访问的集合的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数不在集合的索引的有效范围内。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Remove(System.CodeDom.CodeAttributeArgument)">
      <summary>从集合中移除指定的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 对象。</summary>
      <param name="value">要从集合中移除的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 对象。</param>
      <exception cref="T:System.ArgumentException">未在集合中找到指定的对象。</exception>
    </member>
    <member name="T:System.CodeDom.CodeAttributeDeclaration">
      <summary>表示属性声明。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>使用指定的代码类型引用初始化 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 类的新实例。</summary>
      <param name="attributeType">用于标识属性的 <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeAttributeArgument[])">
      <summary>使用指定的代码类型引用和参数初始化 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 类的新实例。</summary>
      <param name="attributeType">用于标识属性的 <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <param name="arguments">一个 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 类型的数组，它包含属性参数。</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.String)">
      <summary>使用指定的名称初始化 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 类的新实例。</summary>
      <param name="name">属性名。 </param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.String,System.CodeDom.CodeAttributeArgument[])">
      <summary>使用指定的名称和参数初始化 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 类的新实例。</summary>
      <param name="name">属性名。 </param>
      <param name="arguments">一个 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 类型的数组，它包含属性参数。 </param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.Arguments">
      <summary>获取属性的参数。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />，它包含属性的参数。</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.AttributeType">
      <summary>获取代码属性声明的代码类型引用。</summary>
      <returns>一个标识 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 的 <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.Name">
      <summary>获取或设置要声明的属性的名称。</summary>
      <returns>属性名。</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeDeclarationCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 对象的集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor(System.CodeDom.CodeAttributeDeclaration[])">
      <summary>初始化 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> 类的新实例，该实例包含指定的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 对象数组。</summary>
      <param name="value">用于初始化该集合的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 对象数组。 </param>
      <exception cref="T:System.ArgumentNullException">数组中的一个或多个对象为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> 类的新实例，该实例包含指定源集合的元素。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />，用来初始化集合。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Add(System.CodeDom.CodeAttributeDeclaration)">
      <summary>向该集合中添加具有指定值的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 对象。</summary>
      <returns>新元素位置处插入的索引。</returns>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 对象。 </param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.AddRange(System.CodeDom.CodeAttributeDeclaration[])">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 数组的元素复制到集合末尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 类型的数组，其中包含要添加到集合中的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.AddRange(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>将另一个 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> 对象的内容复制到集合的末尾。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />，其中包含要添加到集合中的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 &lt;languageKeyword&gt;null&lt;/languageKeyword&gt;。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Contains(System.CodeDom.CodeAttributeDeclaration)">
      <summary>获取或设置一个值，该值指示集合是否包含指定的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 对象。</summary>
      <returns>
            当集合包含指定的对象时为 true；否则为 false。</returns>
      <param name="value">要定位的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 对象。 </param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.CopyTo(System.CodeDom.CodeAttributeDeclaration[],System.Int32)">
      <summary>将集合对象复制到一维 <see cref="T:System.Array" /> 实例（从指定索引处开始）。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，为从集合所复制的值的目标位置。 </param>
      <param name="index">插入开始处的数组的索引。 </param>
      <exception cref="T:System.ArgumentException">该目标数组是多维数组。- 或 - <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> 中的元素数大于 <paramref name="index" /> 参数所指定的目标数组索引位置与目标数组结尾位置之间的可用空间。 </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于目标数组的最小索引。 </exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.IndexOf(System.CodeDom.CodeAttributeDeclaration)">
      <summary>获取指定的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 对象在集合中的索引（如果它已存在于该集合中）。</summary>
      <returns>如果在该集合中找到指定对象，则为此对象在该集合中的索引；否则为 -1。</returns>
      <param name="value">要在集合中定位的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 对象。 </param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Insert(System.Int32,System.CodeDom.CodeAttributeDeclaration)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 对象插入集合中指定的索引位置。</summary>
      <param name="index">从零开始的索引，应在此处插入指定对象。 </param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 对象。 </param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclarationCollection.Item(System.Int32)">
      <summary>获取或设置位于指定索引位置的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 对象。</summary>
      <returns>每个有效索引位置的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" />。</returns>
      <param name="index">要访问的集合的索引。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数不在集合的索引的有效范围内。 </exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Remove(System.CodeDom.CodeAttributeDeclaration)">
      <summary>从集合中移除指定的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 对象。</summary>
      <param name="value">要从集合中移除的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 对象。 </param>
      <exception cref="T:System.ArgumentException">未在集合中找到指定的对象。 </exception>
    </member>
    <member name="T:System.CodeDom.CodeBaseReferenceExpression">
      <summary>表示对基类的引用。</summary>
    </member>
    <member name="M:System.CodeDom.CodeBaseReferenceExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeBaseReferenceExpression" /> 类的新实例。 </summary>
    </member>
    <member name="T:System.CodeDom.CodeBinaryOperatorExpression">
      <summary>表示一个表达式，该表达式包含在两个表达式间进行的二进制运算。</summary>
    </member>
    <member name="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeBinaryOperatorType,System.CodeDom.CodeExpression)">
      <summary>使用指定的参数初始化 <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> 类的新实例。</summary>
      <param name="left">运算符左边的 <see cref="T:System.CodeDom.CodeExpression" />。 </param>
      <param name="op">指示运算符类型的 <see cref="T:System.CodeDom.CodeBinaryOperatorType" />。 </param>
      <param name="right">运算符右边的 <see cref="T:System.CodeDom.CodeExpression" />。 </param>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Left">
      <summary>获取或设置运算符左边的代码表达式。</summary>
      <returns>指示左侧操作数的 <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Operator">
      <summary>获取或设置二进制运算符表达式中的运算符。</summary>
      <returns>指示表达式中运算符类型的 <see cref="T:System.CodeDom.CodeBinaryOperatorType" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Right">
      <summary>获取或设置运算符右边的代码表达式。</summary>
      <returns>指示右侧操作数的 <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeBinaryOperatorType">
      <summary>为受支持的二进制运算符定义标识符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Add">
      <summary>加法运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Subtract">
      <summary>减法运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Multiply">
      <summary>乘法运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Divide">
      <summary>除法运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Modulus">
      <summary>模数运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Assign">
      <summary>赋值运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.IdentityInequality">
      <summary>非恒等运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.IdentityEquality">
      <summary>恒等运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.ValueEquality">
      <summary>值相等运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BitwiseOr">
      <summary>按位或运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BitwiseAnd">
      <summary>按位与运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BooleanOr">
      <summary>布尔或运算符。它表示短路运算符。短路运算符仅计算返回正确值所必需的表达式。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BooleanAnd">
      <summary>布尔与运算符。它表示短路运算符。短路运算符仅计算返回正确值所必需的表达式。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.LessThan">
      <summary>小于运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.LessThanOrEqual">
      <summary>小于或等于运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.GreaterThan">
      <summary>大于运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.GreaterThanOrEqual">
      <summary>大于或等于运算符。</summary>
    </member>
    <member name="T:System.CodeDom.CodeCastExpression">
      <summary>表示到一种数据类型或接口的表达式转换。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeCastExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
      <summary>使用指定的目标类型和表达式初始化 <see cref="T:System.CodeDom.CodeCastExpression" /> 类的新实例。</summary>
      <param name="targetType">
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示转换的目标类型。 </param>
      <param name="expression">要转换的 <see cref="T:System.CodeDom.CodeExpression" />。 </param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>使用指定的目标类型和表达式初始化 <see cref="T:System.CodeDom.CodeCastExpression" /> 类的新实例。</summary>
      <param name="targetType">该转换的目标类型的名称。 </param>
      <param name="expression">要转换的 <see cref="T:System.CodeDom.CodeExpression" />。 </param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.Type,System.CodeDom.CodeExpression)">
      <summary>使用指定的目标类型和表达式初始化 <see cref="T:System.CodeDom.CodeCastExpression" /> 类的新实例。</summary>
      <param name="targetType">该转换的目标数据类型。 </param>
      <param name="expression">要转换的 <see cref="T:System.CodeDom.CodeExpression" />。 </param>
    </member>
    <member name="P:System.CodeDom.CodeCastExpression.Expression">
      <summary>获取或设置要转换类型的表达式。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，指示要转换类型的代码。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCastExpression.TargetType">
      <summary>获取或设置转换的目标类型。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示要转换到的目标类型。</returns>
    </member>
    <member name="T:System.CodeDom.CodeCatchClause">
      <summary>表示 try/catch 语句的 catch 异常块。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeCatchClause" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String)">
      <summary>使用异常的指定局部变量名初始化 <see cref="T:System.CodeDom.CodeCatchClause" /> 类的新实例。</summary>
      <param name="localName">在异常的 catch 子句中声明的局部变量的名称。这是可选项。 </param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String,System.CodeDom.CodeTypeReference)">
      <summary>使用异常的指定局部变量名和异常类型初始化 <see cref="T:System.CodeDom.CodeCatchClause" /> 类的新实例。</summary>
      <param name="localName">在异常的 catch 子句中声明的局部变量的名称。这是可选项。 </param>
      <param name="catchExceptionType">
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示要捕捉的异常的类型。 </param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String,System.CodeDom.CodeTypeReference,System.CodeDom.CodeStatement[])">
      <summary>使用异常的指定局部变量名、异常类型和语句集合初始化 <see cref="T:System.CodeDom.CodeCatchClause" /> 类的新实例。</summary>
      <param name="localName">在异常的 catch 子句中声明的局部变量的名称。这是可选项。 </param>
      <param name="catchExceptionType">
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示要捕捉的异常的类型。 </param>
      <param name="statements">
        <see cref="T:System.CodeDom.CodeStatement" /> 对象的数组，表示 catch 块的内容。 </param>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.CatchExceptionType">
      <summary>获取或设置处理 catch 块的异常的类型。</summary>
      <returns>指示要处理的异常类型的 <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.LocalName">
      <summary>获取或设置 catch 子句处理的异常的变量名称。</summary>
      <returns>catch 子句处理的异常变量的名称。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.Statements">
      <summary>获取 catch 块中的语句。</summary>
      <returns>包含 catch 块中语句的 <see cref="T:System.CodeDom.CodeStatementCollection" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeCatchClauseCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象的集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor(System.CodeDom.CodeCatchClause[])">
      <summary>初始化 <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> 类的新实例，该实例包含指定的 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象数组。</summary>
      <param name="value">用于初始化该集合的 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象数组。</param>
      <exception cref="T:System.ArgumentNullException">数组中的一个或多个对象为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor(System.CodeDom.CodeCatchClauseCollection)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> 类的新实例，该实例包含指定源集合的元素。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeCatchClauseCollection" />，用来初始化集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Add(System.CodeDom.CodeCatchClause)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象添加到集合。</summary>
      <returns>新元素位置处插入的索引。</returns>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象。</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.AddRange(System.CodeDom.CodeCatchClause[])">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeCatchClause" /> 数组的元素复制到集合末尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeCatchClause" /> 类型的数组，其中包含要添加到集合中的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 &lt;languageKeyword&gt;null&lt;/languageKeyword&gt;。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.AddRange(System.CodeDom.CodeCatchClauseCollection)">
      <summary>将另一个 <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> 对象的内容复制到集合的末尾。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeCatchClauseCollection" />，其中包含要添加到集合中的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 &lt;languageKeyword&gt;null&lt;/languageKeyword&gt;。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Contains(System.CodeDom.CodeCatchClause)">
      <summary>获取一个值，该值指示集合是否包含指定的 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象。</summary>
      <returns>
当集合包含指定的对象时为 true；否则为 false。</returns>
      <param name="value">要在集合中定位的 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象。</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.CopyTo(System.CodeDom.CodeCatchClause[],System.Int32)">
      <summary>将集合对象复制到一维 <see cref="T:System.Array" /> 实例（从指定索引处开始）。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，为从集合所复制的值的目标位置。</param>
      <param name="index">插入开始处的数组的索引。</param>
      <exception cref="T:System.ArgumentException">该目标数组是多维数组。- 或 - <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> 中的元素数大于 <paramref name="index" /> 参数所指定的目标数组索引位置与目标数组结尾位置之间的可用空间。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于目标数组的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.IndexOf(System.CodeDom.CodeCatchClause)">
      <summary>获取指定的 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象在集合中的索引（如果它已存在于该集合中）。</summary>
      <returns>如果在该集合中找到指定对象，则为此对象在该集合中的索引；否则为 -1。</returns>
      <param name="value">要在集合中定位的 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象。</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Insert(System.Int32,System.CodeDom.CodeCatchClause)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象插入集合中指定的索引位置。</summary>
      <param name="index">从零开始的索引，应在此处插入指定对象。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象。</param>
    </member>
    <member name="P:System.CodeDom.CodeCatchClauseCollection.Item(System.Int32)">
      <summary>获取或设置集合中指定索引处的 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象。</summary>
      <returns>位于每个有效索引位置的 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象。</returns>
      <param name="index">要访问的集合的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数不在集合的索引的有效范围内。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Remove(System.CodeDom.CodeCatchClause)">
      <summary>从集合中移除指定的 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象。</summary>
      <param name="value">要从集合中移除的 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象。</param>
      <exception cref="T:System.ArgumentException">未在集合中找到指定的对象。</exception>
    </member>
    <member name="T:System.CodeDom.CodeChecksumPragma">
      <summary>表示代码校验和杂注代码实体。  </summary>
    </member>
    <member name="M:System.CodeDom.CodeChecksumPragma.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeChecksumPragma" /> 类的新实例。 </summary>
    </member>
    <member name="M:System.CodeDom.CodeChecksumPragma.#ctor(System.String,System.Guid,System.Byte[])">
      <summary>使用文件名、表示校验和算法的 GUID 和表示校验和数据的字节流初始化 <see cref="T:System.CodeDom.CodeChecksumPragma" /> 类的新实例。</summary>
      <param name="fileName">校验和文件的路径。</param>
      <param name="checksumAlgorithmId">
        <see cref="T:System.Guid" />，它标识要使用的校验和算法。</param>
      <param name="checksumData">一个包含校验和数据的字节数组。</param>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.ChecksumAlgorithmId">
      <summary>获取或设置 GUID，该 GUID 标识要使用的校验和算法。</summary>
      <returns>
        <see cref="T:System.Guid" />，它标识要使用的校验和算法。</returns>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.ChecksumData">
      <summary>获取或设置用于校验和计算的数据的值。</summary>
      <returns>包含校验和计算数据的字节数组。</returns>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.FileName">
      <summary>获取或设置校验和文件的路径。</summary>
      <returns>校验和文件的路径。</returns>
    </member>
    <member name="T:System.CodeDom.CodeComment">
      <summary>表示注释。</summary>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeComment" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor(System.String)">
      <summary>使用指定的文本作为内容来初始化 <see cref="T:System.CodeDom.CodeComment" /> 类的新实例。</summary>
      <param name="text">注释的内容。 </param>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor(System.String,System.Boolean)">
      <summary>使用指定的文本和文档注释标志初始化 <see cref="T:System.CodeDom.CodeComment" /> 类的新实例。</summary>
      <param name="text">注释的内容。 </param>
      <param name="docComment">
当该注释是文档注释时为 true；否则为 false。 </param>
    </member>
    <member name="P:System.CodeDom.CodeComment.DocComment">
      <summary>获取或设置一个值，该值指示注释是否是文档注释。</summary>
      <returns>
当该注释是文档注释时为 true；否则为 false。</returns>
    </member>
    <member name="P:System.CodeDom.CodeComment.Text">
      <summary>获取或设置注释文本。</summary>
      <returns>包含注释文本的字符串。</returns>
    </member>
    <member name="T:System.CodeDom.CodeCommentStatement">
      <summary>表示由单个注释构成的语句。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeCommentStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.CodeDom.CodeComment)">
      <summary>使用指定的注释初始化 <see cref="T:System.CodeDom.CodeCommentStatement" /> 类的新实例。</summary>
      <param name="comment">
        <see cref="T:System.CodeDom.CodeComment" />，指示注释。 </param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.String)">
      <summary>使用指定文本作为内容来初始化 <see cref="T:System.CodeDom.CodeCommentStatement" /> 类的新实例。</summary>
      <param name="text">注释的内容。 </param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.String,System.Boolean)">
      <summary>使用指定的文本和文档注释标志初始化 <see cref="T:System.CodeDom.CodeCommentStatement" /> 类的新实例。</summary>
      <param name="text">注释的内容。 </param>
      <param name="docComment">
当该注释是文档注释时为 true；否则为 false。 </param>
    </member>
    <member name="P:System.CodeDom.CodeCommentStatement.Comment">
      <summary>获取或设置注释的内容。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeComment" />，指示注释。</returns>
    </member>
    <member name="T:System.CodeDom.CodeCommentStatementCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeCommentStatement" /> 对象的集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor(System.CodeDom.CodeCommentStatement[])">
      <summary>初始化 <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> 类的新实例，该实例包含指定的 <see cref="T:System.CodeDom.CodeCommentStatement" /> 对象数组。</summary>
      <param name="value">用于初始化该集合的 <see cref="T:System.CodeDom.CodeCommentStatement" /> 对象数组。</param>
      <exception cref="T:System.ArgumentNullException">数组中的一个或多个对象为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor(System.CodeDom.CodeCommentStatementCollection)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> 类的新实例，该实例包含指定源集合的元素。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeCommentStatementCollection" />，用来初始化集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Add(System.CodeDom.CodeCommentStatement)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeCommentStatement" /> 对象添加到集合。</summary>
      <returns>新元素位置处插入的索引。</returns>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeCommentStatement" /> 对象。</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.AddRange(System.CodeDom.CodeCommentStatement[])">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeCommentStatement" /> 数组的元素复制到集合末尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeCommentStatement" /> 类型的数组，其中包含要添加到集合中的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.AddRange(System.CodeDom.CodeCommentStatementCollection)">
      <summary>将另一个 <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> 对象的内容复制到集合的末尾。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeCommentStatementCollection" />，其中包含要添加到集合中的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 &lt;languageKeyword&gt;null&lt;/languageKeyword&gt;。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Contains(System.CodeDom.CodeCommentStatement)">
      <summary>获取一个值，该值指示集合是否包含指定的 <see cref="T:System.CodeDom.CodeCommentStatement" /> 对象。</summary>
      <returns>
当集合包含指定的对象时为 true；否则为 false。</returns>
      <param name="value">要在集合中搜索的 <see cref="T:System.CodeDom.CodeCommentStatement" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.CopyTo(System.CodeDom.CodeCommentStatement[],System.Int32)">
      <summary>从指定的索引处开始，将集合对象复制到一维 <see cref="T:System.Array" />。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，为从集合所复制的值的目标位置。</param>
      <param name="index">插入开始处的数组的索引。</param>
      <exception cref="T:System.ArgumentException">该目标数组是多维数组。- 或 - <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> 中的元素数大于 <paramref name="index" /> 参数所指定的目标数组索引位置与目标数组结尾位置之间的可用空间。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于目标数组的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.IndexOf(System.CodeDom.CodeCommentStatement)">
      <summary>获取指定的 <see cref="T:System.CodeDom.CodeCommentStatement" /> 对象在集合中的索引（如果它已存在于该集合中）。</summary>
      <returns>如果在该集合中找到指定对象，则为此对象在该集合中的索引；否则为 -1。</returns>
      <param name="value">要定位的 <see cref="T:System.CodeDom.CodeCommentStatement" /> 对象。</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Insert(System.Int32,System.CodeDom.CodeCommentStatement)">
      <summary>将 <see cref="T:System.CodeDom.CodeCommentStatement" /> 对象插入到集合中的指定索引处。</summary>
      <param name="index">从零开始的索引，该项应插入此位置。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeCommentStatement" /> 对象。</param>
    </member>
    <member name="P:System.CodeDom.CodeCommentStatementCollection.Item(System.Int32)">
      <summary>获取或设置集合中指定索引处的 <see cref="T:System.CodeDom.CodeCommentStatement" /> 对象。</summary>
      <returns>位于每个有效索引位置的 <see cref="T:System.CodeDom.CodeCommentStatement" /> 对象。</returns>
      <param name="index">要访问的集合的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数不在集合的索引的有效范围内。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Remove(System.CodeDom.CodeCommentStatement)">
      <summary>从集合中移除指定的 <see cref="T:System.CodeDom.CodeCommentStatement" /> 对象。</summary>
      <param name="value">要从集合中移除的 <see cref="T:System.CodeDom.CodeCommentStatement" /> 对象。</param>
      <exception cref="T:System.ArgumentException">未在集合中找到指定的对象。</exception>
    </member>
    <member name="T:System.CodeDom.CodeCompileUnit">
      <summary>为 CodeDOM 程序图形提供容器。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCompileUnit.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeCompileUnit" /> 类的新实例。</summary>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.AssemblyCustomAttributes">
      <summary>获取生成的程序集的自定义属性集合。</summary>
      <returns>指示生成的程序集的自定义属性的 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.EndDirectives">
      <summary>获取包含结束指令的 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 对象。</summary>
      <returns>包含结束指令的 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 对象。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.Namespaces">
      <summary>获取命名空间的集合。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeNamespaceCollection" />，指示编译单元使用的命名空间。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.ReferencedAssemblies">
      <summary>获取引用的程序集。</summary>
      <returns>包含引用的程序集的文件名的 <see cref="T:System.Collections.Specialized.StringCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.StartDirectives">
      <summary>获取包含开始指令的 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 对象。</summary>
      <returns>包含开始指令的 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 对象。</returns>
    </member>
    <member name="T:System.CodeDom.CodeConditionStatement">
      <summary>表示条件分支语句，通常表示为一个 if 语句。</summary>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeConditionStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[])">
      <summary>使用指定的条件和语句初始化 <see cref="T:System.CodeDom.CodeConditionStatement" /> 类的新实例。</summary>
      <param name="condition">
        <see cref="T:System.CodeDom.CodeExpression" />，指示要计算的表达式。 </param>
      <param name="trueStatements">
        <see cref="T:System.CodeDom.CodeStatement" /> 类型的数组，包含当条件为 true 时执行的语句。 </param>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[],System.CodeDom.CodeStatement[])">
      <summary>使用指定的条件和语句初始化 <see cref="T:System.CodeDom.CodeConditionStatement" /> 类的新实例。</summary>
      <param name="condition">指示要计算的条件的 <see cref="T:System.CodeDom.CodeExpression" />。 </param>
      <param name="trueStatements">
        <see cref="T:System.CodeDom.CodeStatement" /> 类型的数组，包含当条件为 true 时执行的语句。 </param>
      <param name="falseStatements">
        <see cref="T:System.CodeDom.CodeStatement" /> 类型的数组，包含当条件为 false 时执行的语句。 </param>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.Condition">
      <summary>获取或设置要计算 true 或 false 的表达式。</summary>
      <returns>要计算 true 或 false 的 <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.FalseStatements">
      <summary>获取在条件表达式计算为 false 时执行的语句集合。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeStatementCollection" />，它包含在条件表达式计算为 false 时执行的语句。</returns>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.TrueStatements">
      <summary>获取在条件表达式计算为 true 时执行的语句集合。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeStatementCollection" />，它包含在条件表达式计算为 true 时执行的语句。</returns>
    </member>
    <member name="T:System.CodeDom.CodeConstructor">
      <summary>表示一个类型的实例构造函数的声明。</summary>
    </member>
    <member name="M:System.CodeDom.CodeConstructor.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeConstructor" /> 类的新实例。</summary>
    </member>
    <member name="P:System.CodeDom.CodeConstructor.BaseConstructorArgs">
      <summary>获取基构造函数参数的集合。</summary>
      <returns>包含基构造函数参数的 <see cref="T:System.CodeDom.CodeExpressionCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeConstructor.ChainedConstructorArgs">
      <summary>获取链式构造函数参数的集合。</summary>
      <returns>包含链式构造函数参数的 <see cref="T:System.CodeDom.CodeExpressionCollection" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeDefaultValueExpression">
      <summary>表示对默认值的引用。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDefaultValueExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeDefaultValueExpression" /> 类的新实例。 </summary>
    </member>
    <member name="M:System.CodeDom.CodeDefaultValueExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>使用指定的代码类型引用初始化 <see cref="T:System.CodeDom.CodeDefaultValueExpression" /> 类的新实例。</summary>
      <param name="type">
        <see cref="T:System.CodeDom.CodeTypeReference" />，指定对值类型的引用。</param>
    </member>
    <member name="P:System.CodeDom.CodeDefaultValueExpression.Type">
      <summary>获取或设置默认值的数据类型引用。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> 对象，表示有默认值的数据类型。</returns>
    </member>
    <member name="T:System.CodeDom.CodeDelegateCreateExpression">
      <summary>表示创建委托的表达式。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateCreateExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeDelegateCreateExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression,System.String)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeDelegateCreateExpression" /> 类的新实例。</summary>
      <param name="delegateType">
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示委托的数据类型。 </param>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" />，它指示包含事件处理程序方法的对象。 </param>
      <param name="methodName">事件处理程序方法的名称。 </param>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.DelegateType">
      <summary>获取或设置委托的数据类型。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示委托的数据类型。</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.MethodName">
      <summary>获取或设置事件处理程序方法的名称。</summary>
      <returns>事件处理程序方法的名称。</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.TargetObject">
      <summary>获取或设置包含事件处理程序方法的对象。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，它指示包含事件处理程序方法的对象。</returns>
    </member>
    <member name="T:System.CodeDom.CodeDelegateInvokeExpression">
      <summary>表示引发事件的表达式。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor(System.CodeDom.CodeExpression)">
      <summary>使用指定的目标对象初始化 <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> 类的新实例。</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" />，指示目标对象。 </param>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary>使用指定的目标对象和参数初始化 <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> 类的新实例。</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" />，指示目标对象。 </param>
      <param name="parameters">
        <see cref="T:System.CodeDom.CodeExpression" /> 对象的数组，指示参数。 </param>
    </member>
    <member name="P:System.CodeDom.CodeDelegateInvokeExpression.Parameters">
      <summary>获取或设置传递到附加于事件的事件处理方法的参数。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，指示传递到附加于事件的事件处理方法的参数。</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateInvokeExpression.TargetObject">
      <summary>获取或设置要调用的事件。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，指示要调用的事件。</returns>
    </member>
    <member name="T:System.CodeDom.CodeDirectionExpression">
      <summary>表示用作方法调用参数及引用方向指示器的表达式。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectionExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeDirectionExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectionExpression.#ctor(System.CodeDom.FieldDirection,System.CodeDom.CodeExpression)">
      <summary>使用指定的字段方向和表达式初始化 <see cref="T:System.CodeDom.CodeDirectionExpression" /> 类的新实例。</summary>
      <param name="direction">
        <see cref="T:System.CodeDom.FieldDirection" />，指示表达式的字段方向。 </param>
      <param name="expression">
        <see cref="T:System.CodeDom.CodeExpression" />，指示要表示的代码表达式。 </param>
    </member>
    <member name="P:System.CodeDom.CodeDirectionExpression.Direction">
      <summary>获取或设置此方向表达式的字段方向。</summary>
      <returns>
        <see cref="T:System.CodeDom.FieldDirection" />，指示此方向表达式的字段方向。</returns>
    </member>
    <member name="P:System.CodeDom.CodeDirectionExpression.Expression">
      <summary>获取或设置要表示的代码表达式。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，指示要表示的表达式。</returns>
    </member>
    <member name="T:System.CodeDom.CodeDirective">
      <summary>用作代码指令类的基类。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirective.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeDirective" /> 类的新实例。 </summary>
    </member>
    <member name="T:System.CodeDom.CodeDirectiveCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeDirective" /> 对象的集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 类的新实例。 </summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor(System.CodeDom.CodeDirective[])">
      <summary>使用指定数组中的代码指令对象初始化 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 类的新实例。 </summary>
      <param name="value">用于初始化该集合的 <see cref="T:System.CodeDom.CodeDirective" /> 对象数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor(System.CodeDom.CodeDirectiveCollection)">
      <summary>使用指定的代码指令集合中的元素初始化 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 类的新实例。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 对象，用来初始化集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Add(System.CodeDom.CodeDirective)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeDirective" /> 对象添加到集合。</summary>
      <returns>插入了新元素的索引位置。</returns>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeDirective" /> 对象。</param>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.AddRange(System.CodeDom.CodeDirective[])">
      <summary>将 <see cref="T:System.CodeDom.CodeDirective" /> 对象的数组添加到集合的末尾。</summary>
      <param name="value">要添加到集合中的 <see cref="T:System.CodeDom.CodeDirective" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.AddRange(System.CodeDom.CodeDirectiveCollection)">
      <summary>将指定 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 对象的内容添加到集合的末尾。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 对象，它包含要添加到集合中的 <see cref="T:System.CodeDom.CodeDirective" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Contains(System.CodeDom.CodeDirective)">
      <summary>获取一个值，该值指示集合是否包含指定的 <see cref="T:System.CodeDom.CodeDirective" /> 对象。</summary>
      <returns>
当集合包含指定的对象时为 true；否则为 false。</returns>
      <param name="value">要在该集合中搜索的 <see cref="T:System.CodeDom.CodeDirective" /> 对象。</param>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.CopyTo(System.CodeDom.CodeDirective[],System.Int32)">
      <summary>从指定索引处开始，将集合的内容复制到一维数组。</summary>
      <param name="array">一个 <see cref="T:System.CodeDom.CodeDirective" /> 类型的数组，它是从集合所复制的值的目标位置。 </param>
      <param name="index">要开始插入集合对象的数组中的索引。 </param>
      <exception cref="T:System.ArgumentException">该目标数组是多维数组。- 或 - <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 中的元素数大于 <paramref name="index" /> 所指定的目标数组索引位置与目标数组结尾位置之间的可用空间。 </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于目标数组的最小索引。 </exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.IndexOf(System.CodeDom.CodeDirective)">
      <summary>获取指定的 <see cref="T:System.CodeDom.CodeDirective" /> 对象在该集合中的索引（如果它在该集合中存在）。</summary>
      <returns>如果在该集合中找到指定对象，则为此对象在该集合中的索引位置；否则为 -1。</returns>
      <param name="value">要在集合中定位的 <see cref="T:System.CodeDom.CodeDirective" /> 对象。</param>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Insert(System.Int32,System.CodeDom.CodeDirective)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeDirective" /> 对象插入集合中指定的索引位置。</summary>
      <param name="index">从零开始的索引位置，应在此处插入指定对象。 </param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeDirective" /> 对象。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。 - 或 -<paramref name="index" /> 大于 <see cref="P:System.Collections.CollectionBase.Count" />。</exception>
    </member>
    <member name="P:System.CodeDom.CodeDirectiveCollection.Item(System.Int32)">
      <summary>获取或设置集合中指定索引处的 <see cref="T:System.CodeDom.CodeDirective" /> 对象。</summary>
      <returns>索引位置处的 <see cref="T:System.CodeDom.CodeDirective" />。</returns>
      <param name="index">要访问的索引位置。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 在集合的有效索引位置范围外。 </exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Remove(System.CodeDom.CodeDirective)">
      <summary>从集合中移除指定的 <see cref="T:System.CodeDom.CodeDirective" /> 对象。</summary>
      <param name="value">要从集合中移除的 <see cref="T:System.CodeDom.CodeDirective" /> 对象。</param>
      <exception cref="T:System.ArgumentException">未在集合中找到指定的对象。 </exception>
    </member>
    <member name="T:System.CodeDom.CodeEntryPointMethod">
      <summary>表示可执行文件的入口点方法。</summary>
    </member>
    <member name="M:System.CodeDom.CodeEntryPointMethod.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeEntryPointMethod" /> 类的新实例。</summary>
    </member>
    <member name="T:System.CodeDom.CodeEventReferenceExpression">
      <summary>表示对事件的引用。</summary>
    </member>
    <member name="M:System.CodeDom.CodeEventReferenceExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeEventReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>使用指定的目标对象和事件名初始化 <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> 类的新实例。</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" />，指示包含事件的对象。 </param>
      <param name="eventName">要引用的事件的名称。 </param>
    </member>
    <member name="P:System.CodeDom.CodeEventReferenceExpression.EventName">
      <summary>获取或设置事件名。</summary>
      <returns>事件的名称。</returns>
    </member>
    <member name="P:System.CodeDom.CodeEventReferenceExpression.TargetObject">
      <summary>获取或设置包含事件的对象。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，指示包含事件的对象。</returns>
    </member>
    <member name="T:System.CodeDom.CodeExpression">
      <summary>表示代码表达式。这是其他从不实例化的代码表达式对象的基类。</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeExpression" /> 类的新实例。 </summary>
    </member>
    <member name="T:System.CodeDom.CodeExpressionCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeExpression" /> 对象的集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeExpressionCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpression[])">
      <summary>初始化 <see cref="T:System.CodeDom.CodeExpressionCollection" /> 类的新实例，该实例包含指定的 <see cref="T:System.CodeDom.CodeExpression" /> 对象数组。</summary>
      <param name="value">用于初始化该集合的 <see cref="T:System.CodeDom.CodeExpression" /> 对象数组。</param>
      <exception cref="T:System.ArgumentNullException">数组中的一个或多个对象为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpressionCollection)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeExpressionCollection" /> 类的新实例，该实例包含指定源集合的元素。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeExpressionCollection" />，用来初始化集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Add(System.CodeDom.CodeExpression)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeExpression" /> 对象添加到集合。</summary>
      <returns>新元素位置处插入的索引。</returns>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeExpression" /> 对象。</param>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpression[])">
      <summary>将指定数组的元素复制到该集合的末尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeExpression" /> 类型的数组，其中包含要添加到集合中的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 &lt;languageKeyword&gt;null&lt;/languageKeyword&gt;。</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpressionCollection)">
      <summary>将另一个 <see cref="T:System.CodeDom.CodeExpressionCollection" /> 对象的内容复制到集合的末尾。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeExpressionCollection" />，其中包含要添加到集合中的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 &lt;languageKeyword&gt;null&lt;/languageKeyword&gt;。</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Contains(System.CodeDom.CodeExpression)">
      <summary>获取一个值，该值指示集合是否包含指定的 <see cref="T:System.CodeDom.CodeExpression" /> 对象。</summary>
      <returns>
            当集合包含指定的对象时为 true；否则为 false。</returns>
      <param name="value">要在集合中定位的 <see cref="T:System.CodeDom.CodeExpression" /> 对象。</param>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.CopyTo(System.CodeDom.CodeExpression[],System.Int32)">
      <summary>将集合对象复制到一维 <see cref="T:System.Array" /> 实例（从指定索引处开始）。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，为从集合所复制的值的目标位置。</param>
      <param name="index">插入开始处的数组的索引。</param>
      <exception cref="T:System.ArgumentException">该目标数组是多维数组。- 或 - <see cref="T:System.CodeDom.CodeExpressionCollection" /> 中的元素数大于 <paramref name="index" /> 参数所指定的目标数组索引位置与目标数组结尾位置之间的可用空间。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于目标数组的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.IndexOf(System.CodeDom.CodeExpression)">
      <summary>获取指定的 <see cref="T:System.CodeDom.CodeExpression" /> 对象在集合中的索引（如果它已存在于该集合中）。</summary>
      <returns>如果在该集合中找到指定对象，则为此对象在该集合中的索引；否则为 -1。</returns>
      <param name="value">要在集合中定位的 <see cref="T:System.CodeDom.CodeExpression" /> 对象。</param>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Insert(System.Int32,System.CodeDom.CodeExpression)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeExpression" /> 对象插入集合中指定的索引位置。</summary>
      <param name="index">从零开始的索引，应在此处插入指定对象。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeExpression" /> 对象。</param>
    </member>
    <member name="P:System.CodeDom.CodeExpressionCollection.Item(System.Int32)">
      <summary>获取或设置集合中指定索引处的 <see cref="T:System.CodeDom.CodeExpression" /> 对象。</summary>
      <returns>位于每个有效索引位置的 <see cref="T:System.CodeDom.CodeExpression" /> 对象。</returns>
      <param name="index">要访问的集合的索引（该索引从零开始）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数不在集合的索引的有效范围内。</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Remove(System.CodeDom.CodeExpression)">
      <summary>从集合中移除指定的 <see cref="T:System.CodeDom.CodeExpression" /> 对象。</summary>
      <param name="value">要从集合中移除的 <see cref="T:System.CodeDom.CodeExpression" /> 对象。</param>
      <exception cref="T:System.ArgumentException">未在集合中找到指定的对象。</exception>
    </member>
    <member name="T:System.CodeDom.CodeExpressionStatement">
      <summary>表示由单个表达式组成的语句。</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeExpressionStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary>使用指定的表达式初始化 <see cref="T:System.CodeDom.CodeExpressionStatement" /> 类的新实例。</summary>
      <param name="expression">语句的 <see cref="T:System.CodeDom.CodeExpression" />。 </param>
    </member>
    <member name="P:System.CodeDom.CodeExpressionStatement.Expression">
      <summary>获取或设置语句的表达式。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，指示语句的表达式。</returns>
    </member>
    <member name="T:System.CodeDom.CodeFieldReferenceExpression">
      <summary>表示对某字段的引用。</summary>
    </member>
    <member name="M:System.CodeDom.CodeFieldReferenceExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeFieldReferenceExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeFieldReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>使用指定的目标对象和字段名称初始化 <see cref="T:System.CodeDom.CodeFieldReferenceExpression" /> 类的新实例。</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" />，指示包含字段的对象。 </param>
      <param name="fieldName">字段名。 </param>
    </member>
    <member name="P:System.CodeDom.CodeFieldReferenceExpression.FieldName">
      <summary>获取或设置要引用的字段的名称。</summary>
      <returns>包含字段名称的字符串。</returns>
    </member>
    <member name="P:System.CodeDom.CodeFieldReferenceExpression.TargetObject">
      <summary>获取或设置包含要引用字段的对象。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，指示包含要引用的字段的对象。</returns>
    </member>
    <member name="T:System.CodeDom.CodeGotoStatement">
      <summary>表示 goto 语句。</summary>
    </member>
    <member name="M:System.CodeDom.CodeGotoStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeGotoStatement" /> 类的新实例。 </summary>
    </member>
    <member name="M:System.CodeDom.CodeGotoStatement.#ctor(System.String)">
      <summary>使用指定的标签名初始化 <see cref="T:System.CodeDom.CodeGotoStatement" /> 类的新实例。</summary>
      <param name="label">继续程序执行的位置处的标签名称。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Label" /> 为 null。</exception>
    </member>
    <member name="P:System.CodeDom.CodeGotoStatement.Label">
      <summary>获取或设置程序继续执行处的标签名称。</summary>
      <returns>指示程序继续执行处的标签名称的字符串。</returns>
      <exception cref="T:System.ArgumentNullException">不能设置此标签，因为<paramref name=" value" /> 为 null 或空字符串。</exception>
    </member>
    <member name="T:System.CodeDom.CodeIndexerExpression">
      <summary>表示对对象的索引器属性的引用。</summary>
    </member>
    <member name="M:System.CodeDom.CodeIndexerExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeIndexerExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeIndexerExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary>使用指定的目标对象和索引初始化 <see cref="T:System.CodeDom.CodeIndexerExpression" /> 类的新实例。</summary>
      <param name="targetObject">目标对象。 </param>
      <param name="indices">索引器表达式的一个或多个索引。 </param>
    </member>
    <member name="P:System.CodeDom.CodeIndexerExpression.Indices">
      <summary>获取索引器表达式的索引集合。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpressionCollection" />，它指示索引器表达式的一个或多个索引。</returns>
    </member>
    <member name="P:System.CodeDom.CodeIndexerExpression.TargetObject">
      <summary>获取或设置可以编制索引的目标对象。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，指示索引器对象。</returns>
    </member>
    <member name="T:System.CodeDom.CodeIterationStatement">
      <summary>表示 for 语句或语句块内的循环（使用测试表达式作为继续循环的条件）。</summary>
    </member>
    <member name="M:System.CodeDom.CodeIterationStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeIterationStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeIterationStatement.#ctor(System.CodeDom.CodeStatement,System.CodeDom.CodeExpression,System.CodeDom.CodeStatement,System.CodeDom.CodeStatement[])">
      <summary>使用指定的参数初始化 <see cref="T:System.CodeDom.CodeIterationStatement" /> 类的新实例。</summary>
      <param name="initStatement">
        <see cref="T:System.CodeDom.CodeStatement" />，包含循环初始化语句。 </param>
      <param name="testExpression">
        <see cref="T:System.CodeDom.CodeExpression" />，包含用于测试退出条件的表达式。 </param>
      <param name="incrementStatement">
        <see cref="T:System.CodeDom.CodeStatement" />，包含随循环递增的语句。 </param>
      <param name="statements">
        <see cref="T:System.CodeDom.CodeStatement" /> 类型的数组，包含循环范围内的语句。 </param>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.IncrementStatement">
      <summary>获取或设置在每个循环周期后调用的语句。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatement" />，指示随循环递增的语句。</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.InitStatement">
      <summary>获取或设置循环初始化语句。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatement" />，指示循环初始化语句。</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.Statements">
      <summary>获取要在循环内执行的语句的集合。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatement" /> 类型的数组，指示循环范围内的语句。</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.TestExpression">
      <summary>获取或设置作为循环继续的条件进行测试的表达式。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，指示要测试的表达式。</returns>
    </member>
    <member name="T:System.CodeDom.CodeLabeledStatement">
      <summary>表示标记语句或独立标签。</summary>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeLabeledStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor(System.String)">
      <summary>使用指定的标签名初始化 <see cref="T:System.CodeDom.CodeLabeledStatement" /> 类的新实例。</summary>
      <param name="label">标签的名称。 </param>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor(System.String,System.CodeDom.CodeStatement)">
      <summary>使用指定的标签名和语句初始化 <see cref="T:System.CodeDom.CodeLabeledStatement" /> 类的新实例。</summary>
      <param name="label">标签的名称。 </param>
      <param name="statement">要与标签关联的 <see cref="T:System.CodeDom.CodeStatement" />。 </param>
    </member>
    <member name="P:System.CodeDom.CodeLabeledStatement.Label">
      <summary>获取或设置的标签名称。</summary>
      <returns>标签的名称。</returns>
    </member>
    <member name="P:System.CodeDom.CodeLabeledStatement.Statement">
      <summary>获取或设置可选的关联语句。</summary>
      <returns>指示与标签相关联的语句的 <see cref="T:System.CodeDom.CodeStatement" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeLinePragma">
      <summary>表示特定文件内的特定位置。</summary>
    </member>
    <member name="M:System.CodeDom.CodeLinePragma.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeLinePragma" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeLinePragma.#ctor(System.String,System.Int32)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeLinePragma" /> 类的新实例。</summary>
      <param name="fileName">关联的文件的文件名。</param>
      <param name="lineNumber">存储引用的行号。</param>
    </member>
    <member name="P:System.CodeDom.CodeLinePragma.FileName">
      <summary>获取或设置关联文件的名称。</summary>
      <returns>关联的文件的文件名。</returns>
    </member>
    <member name="P:System.CodeDom.CodeLinePragma.LineNumber">
      <summary>获取或设置关联引用的行号。</summary>
      <returns>行号。</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberEvent">
      <summary>表示一个类型的事件的声明。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberEvent.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeMemberEvent" /> 类的新实例。</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.ImplementationTypes">
      <summary>获取或设置该成员事件实现的数据类型。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />，指示成员事件实现的一个或多个数据类型。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.PrivateImplementationType">
      <summary>获取或设置私下实现的数据类型（如果有的话）。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示事件私下实现的数据类型。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.Type">
      <summary>获取或设置处理事件的委托类型的数据类型。</summary>
      <returns>指示处理事件的委托类型的 <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberField">
      <summary>表示某种类型的字段的声明。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeMemberField" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary>使用指定的字段类型和字段名初始化 <see cref="T:System.CodeDom.CodeMemberField" /> 类的新实例。</summary>
      <param name="type">
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示字段的类型。 </param>
      <param name="name">字段名。 </param>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.String,System.String)">
      <summary>使用指定的字段类型和字段名初始化 <see cref="T:System.CodeDom.CodeMemberField" /> 类的新实例。</summary>
      <param name="type">字段的数据类型。 </param>
      <param name="name">字段名。 </param>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.Type,System.String)">
      <summary>使用指定的字段类型和字段名初始化 <see cref="T:System.CodeDom.CodeMemberField" /> 类的新实例。</summary>
      <param name="type">字段的数据类型。 </param>
      <param name="name">字段名。 </param>
    </member>
    <member name="P:System.CodeDom.CodeMemberField.InitExpression">
      <summary>获取或设置字段的初始化表达式。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，指示字段的初始化表达式。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberField.Type">
      <summary>获取或设置字段的数据类型。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示字段的数据类型。</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberMethod">
      <summary>表示某种类型的方法的声明。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberMethod.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeMemberMethod" /> 类的新实例。 </summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ImplementationTypes">
      <summary>获取由该方法实现的接口的数据类型，除非它是一个私有方法实现（这由 <see cref="P:System.CodeDom.CodeMemberMethod.PrivateImplementationType" /> 属性来指示）。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />，指示由该方法实现的类型。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.Parameters">
      <summary>获取方法的参数声明。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />，指示方法的参数。</returns>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateImplementationTypes">
      <summary>在首次访问 <see cref="P:System.CodeDom.CodeMemberMethod.ImplementationTypes" /> 集合时将激发的事件。</summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateParameters">
      <summary>在首次访问 <see cref="P:System.CodeDom.CodeMemberMethod.Parameters" /> 集合时将激发的事件。</summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateStatements">
      <summary>在首次访问 <see cref="P:System.CodeDom.CodeMemberMethod.Statements" /> 集合时将激发的事件。</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.PrivateImplementationType">
      <summary>获取或设置由此方法（如果是私有的）为其实现方法的接口的数据类型（如果有）。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示包含由私有方法（其声明由此 <see cref="T:System.CodeDom.CodeMemberMethod" /> 表示）实现的方法的接口的数据类型。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ReturnType">
      <summary>获取或设置该方法的返回值的数据类型。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示由该方法返回的值的数据类型。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ReturnTypeCustomAttributes">
      <summary>获取该方法的返回类型的自定义属性。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />，指示自定义属性。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.Statements">
      <summary>获取该方法内的语句。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" />，指示方法内的语句。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.TypeParameters">
      <summary>获取当前泛型方法的类型参数。</summary>
      <returns>包含该泛型方法的类型参数的 <see cref="T:System.CodeDom.CodeTypeParameterCollection" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberProperty">
      <summary>表示某种类型的属性的声明。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberProperty.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeMemberProperty" /> 类的新实例。</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.GetStatements">
      <summary>获取该属性的 get 语句的集合。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" />，包含该成员属性的 get 语句。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.HasGet">
      <summary>获取或设置指示该属性是否具有 get 方法访问器的值。</summary>
      <returns>
            如果 <see cref="P:System.CodeDom.CodeMemberProperty.GetStatements" /> 集合的 Count 属性不为零，或者此属性的值已设置为 true，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.HasSet">
      <summary>获取或设置指示该属性是否具有 set 方法访问器的值。</summary>
      <returns>
            如果 <see cref="P:System.CodeDom.CodeMemberProperty.SetStatements" /> 集合的 <see cref="P:System.Collections.CollectionBase.Count" /> 属性不为零，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.ImplementationTypes">
      <summary>获取该属性实现的任何接口的数据类型。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />，指示该属性实现的数据类型。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.Parameters">
      <summary>获取该属性的声明表达式的集合。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />，指示该属性的声明表达式。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.PrivateImplementationType">
      <summary>获取或设置该属性（如果是私有的）实现的接口的数据类型（如果有）。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示该属性（如果是私有的）实现的接口的数据类型（如果有）。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.SetStatements">
      <summary>获取该属性的 set 语句的集合。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" />，包含该成员属性的 set 语句。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.Type">
      <summary>获取或设置属性的数据类型。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示属性的数据类型。</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodInvokeExpression">
      <summary>表示调用方法的表达式。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression[])">
      <summary>使用指定的目标对象、方法名称和参数初始化 <see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> 类的新实例。</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" />，指示要对其调用方法的目标对象。 </param>
      <param name="methodName">要调用的方法名。 </param>
      <param name="parameters">
        <see cref="T:System.CodeDom.CodeExpression" /> 对象的数组，指示要用来调用该方法的参数。 </param>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor(System.CodeDom.CodeMethodReferenceExpression,System.CodeDom.CodeExpression[])">
      <summary>使用指定的方法和参数初始化 <see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> 类的新实例。</summary>
      <param name="method">
        <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />，指示要调用的方法。 </param>
      <param name="parameters">
        <see cref="T:System.CodeDom.CodeExpression" /> 对象的数组，指示要用来调用该方法的参数。 </param>
    </member>
    <member name="P:System.CodeDom.CodeMethodInvokeExpression.Method">
      <summary>获取或设置要调用的方法。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />，指示要调用的方法。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodInvokeExpression.Parameters">
      <summary>获取要调用该方法的参数。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpressionCollection" />，指示要用来调用该方法的参数。</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodReferenceExpression">
      <summary>表示方法的引用。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>使用指定的目标对象和方法名初始化 <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> 类的新实例。</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" />，指示作为目标的对象。 </param>
      <param name="methodName">要调用的方法的名称。 </param>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeTypeReference[])">
      <summary>使用指定的目标对象、方法名称和泛型类型参数初始化 <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> 类的新实例。</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" />，指示作为目标的对象。 </param>
      <param name="methodName">要调用的方法的名称。 </param>
      <param name="typeParameters">指定此 <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> 的 <see cref="P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments" /> 的 <see cref="T:System.CodeDom.CodeTypeReference" /> 值的数组。</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.MethodName">
      <summary>获取或设置要引用的方法的名称。</summary>
      <returns>要引用的方法的名称。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.TargetObject">
      <summary>获取或设置指示要引用方法的表达式。</summary>
      <returns>表示要引用方法的 <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments">
      <summary>获取当前泛型方法引用表达式的类型参数。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />，包含当前代码 <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> 的类型参数。</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodReturnStatement">
      <summary>表示返回值语句。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReturnStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeMethodReturnStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReturnStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary>使用指定的表达式初始化 <see cref="T:System.CodeDom.CodeMethodReturnStatement" /> 类的新实例。</summary>
      <param name="expression">
        <see cref="T:System.CodeDom.CodeExpression" />，指示返回值。 </param>
    </member>
    <member name="P:System.CodeDom.CodeMethodReturnStatement.Expression">
      <summary>获取或设置返回值。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，指示要为返回语句返回的值；如果该语句是子例程的一部分，则为 null。</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespace">
      <summary>表示命名空间声明。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespace.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeNamespace" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespace.#ctor(System.String)">
      <summary>使用指定的名称初始化 <see cref="T:System.CodeDom.CodeNamespace" /> 类的新实例。</summary>
      <param name="name">要声明的命名空间的名称。 </param>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Comments">
      <summary>获取命名空间的注释。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeCommentStatementCollection" />，指示命名空间的注释。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Imports">
      <summary>获取命名空间使用的命名空间导入指令集合。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeNamespaceImportCollection" />，指示命名空间使用的命名空间导入指令。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Name">
      <summary>获取或设置命名空间的名称。</summary>
      <returns>命名空间的名称。</returns>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateComments">
      <summary>在首次访问 <see cref="P:System.CodeDom.CodeNamespace.Comments" /> 集合时将激发的事件。</summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateImports">
      <summary>在首次访问 <see cref="P:System.CodeDom.CodeNamespace.Imports" /> 集合时将激发的事件。</summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateTypes">
      <summary>在首次访问 <see cref="P:System.CodeDom.CodeNamespace.Types" /> 集合时将激发的事件。</summary>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Types">
      <summary>获取命名空间包含的类型集合。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />，指示命名空间中所包含的类型。</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeNamespace" /> 对象的集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeNamespaceCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor(System.CodeDom.CodeNamespace[])">
      <summary>初始化 <see cref="T:System.CodeDom.CodeNamespaceCollection" /> 类的新实例，该实例包含 <see cref="T:System.CodeDom.CodeNamespace" /> 对象的指定数组。</summary>
      <param name="value">用于初始化该集合的 <see cref="T:System.CodeDom.CodeNamespace" /> 对象数组。</param>
      <exception cref="T:System.ArgumentNullException">数组中的一个或多个对象为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor(System.CodeDom.CodeNamespaceCollection)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeNamespaceCollection" /> 类的新实例，该实例包含指定源集合的元素。</summary>
      <param name="value">用于初始化该集合的 <see cref="T:System.CodeDom.CodeNamespaceCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Add(System.CodeDom.CodeNamespace)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeNamespace" /> 对象添加到集合。</summary>
      <returns>新元素位置处插入的索引。</returns>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeNamespace" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.AddRange(System.CodeDom.CodeNamespace[])">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeNamespace" /> 数组的元素复制到集合末尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeNamespace" /> 类型的数组，其中包含要添加到集合中的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.AddRange(System.CodeDom.CodeNamespaceCollection)">
      <summary>将指定 <see cref="T:System.CodeDom.CodeNamespaceCollection" /> 对象的内容添加到集合的末尾。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeNamespaceCollection" />，其中包含要添加到集合中的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 &lt;languageKeyword&gt;null&lt;/languageKeyword&gt;。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Contains(System.CodeDom.CodeNamespace)">
      <summary>获取一个值，该值指示集合是否包含指定的 <see cref="T:System.CodeDom.CodeNamespace" /> 对象。</summary>
      <returns>
            如果 <see cref="T:System.CodeDom.CodeNamespace" /> 包含在集合中，则为 true；否则为 false。</returns>
      <param name="value">要在集合中搜索的 <see cref="T:System.CodeDom.CodeNamespace" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.CopyTo(System.CodeDom.CodeNamespace[],System.Int32)">
      <summary>从指定的索引处开始，将集合对象复制到一维 <see cref="T:System.Array" /> 实例中。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，为从集合所复制的值的目标位置。</param>
      <param name="index">插入开始处的数组的索引。</param>
      <exception cref="T:System.ArgumentException">该目标数组是多维数组。- 或 - <see cref="T:System.CodeDom.CodeNamespaceCollection" /> 中的元素数大于 <paramref name="index" /> 参数所指定的目标数组索引位置与目标数组结尾位置之间的可用空间。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于目标数组的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.IndexOf(System.CodeDom.CodeNamespace)">
      <summary>获取指定的 <see cref="T:System.CodeDom.CodeNamespace" /> 对象在 <see cref="T:System.CodeDom.CodeNamespaceCollection," /> 中的索引（如果它已存在于该集合中）。</summary>
      <returns>如果在该集合中找到指定 <see cref="T:System.CodeDom.CodeNamespace" />，则为它在该集合中的索引；否则为 -1。</returns>
      <param name="value">要定位的 <see cref="T:System.CodeDom.CodeNamespace" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Insert(System.Int32,System.CodeDom.CodeNamespace)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeNamespace" /> 对象插入集合中指定的索引位置。</summary>
      <param name="index">从零开始的索引，应在此位置插入新项。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeNamespace" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceCollection.Item(System.Int32)">
      <summary>获取或设置集合中指定索引处的 <see cref="T:System.CodeDom.CodeNamespaceCollection" /> 对象。</summary>
      <returns>每个有效索引位置的 <see cref="T:System.CodeDom.CodeNamespace" />。</returns>
      <param name="index">要访问的集合的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数不在集合的索引的有效范围内。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Remove(System.CodeDom.CodeNamespace)">
      <summary>从集合中移除指定的 <see cref="T:System.CodeDom.CodeNamespace" /> 对象。</summary>
      <param name="value">要从该集合中移除的 <see cref="T:System.CodeDom.CodeNamespace" />。</param>
      <exception cref="T:System.ArgumentException">未在集合中找到指定的对象。</exception>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceImport">
      <summary>表示某命名空间导入指令，该指令指示要使用的命名空间。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImport.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImport.#ctor(System.String)">
      <summary>使用要导入的指定命名空间初始化 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 类的新实例。</summary>
      <param name="nameSpace">要导入的命名空间的名称。 </param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImport.LinePragma">
      <summary>获取或设置出现该语句的行和文件。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeLinePragma" />，指示语句的上下文。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImport.Namespace">
      <summary>获取或设置要导入的命名空间。</summary>
      <returns>要导入的命名空间的名称。</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceImportCollection">
      <summary>
                    表示 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 对象的集合。
                </summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.#ctor">
      <summary>
                    初始化 <see cref="T:System.CodeDom.CodeNamespaceImportCollection" /> 类的新实例。
                </summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.Add(System.CodeDom.CodeNamespaceImport)">
      <summary>
                    将 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 对象添加到集合中。
                </summary>
      <param name="value">
                    要添加到集合的 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 对象。
                </param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.AddRange(System.CodeDom.CodeNamespaceImport[])">
      <summary>
                    向集合添加一组 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 对象。
                </summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeNamespaceImport" /> 类型的数组，其中包含要添加到集合中的对象。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。
                </exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.Clear">
      <summary>
                    清除成员集合。
                </summary>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.Count">
      <summary>
                    获取集合中命名空间的数目。
                </summary>
      <returns>
                    集合中的命名空间数。
                </returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.GetEnumerator">
      <summary>
                    获取枚举集合成员的枚举数。
                </summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，指示集合成员。
                </returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.Item(System.Int32)">
      <summary>
                    获取或设置集合中指定索引处的 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 对象。
                </summary>
      <returns>
                    位于每个有效索引位置的 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 对象。
                </returns>
      <param name="index">
                    要访问的集合的索引。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数不在集合的索引的有效范围内。
                </exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
                    从特定的 <see cref="T:System.Array" /> 索引处开始，将 <see cref="T:System.Collections.ICollection" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。
                </summary>
      <param name="array">
                    一维 <see cref="T:System.Array" />，用作从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标数组。该数组必须具有从零开始的索引。
                </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，在此处开始复制。
                </param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#Count">
      <summary>
                    获取 <see cref="T:System.Collections.ICollection" /> 中包含的元素数。
                </summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 中包含的元素数。
                </returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
                    获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。
                </summary>
      <returns>
                    如果对 <see cref="T:System.Collections.ICollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。此属性总是返回 false。
                </returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#SyncRoot">
      <summary>
                    获取可用于同步 <see cref="T:System.Collections.ICollection" /> 访问的对象。
                </summary>
      <returns>
                    可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。该属性总是返回 null。
                </returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    返回可循环访问集合的枚举数。
                </summary>
      <returns>
                    可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。
                </returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Add(System.Object)">
      <summary>
                    将对象添加到 <see cref="T:System.Collections.IList" /> 中。
                </summary>
      <returns>
                    新元素的插入位置。
                </returns>
      <param name="value">
                    要添加到 <see cref="T:System.Collections.IList" /> 的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Clear">
      <summary>
                    从 <see cref="T:System.Collections.IList" /> 中移除所有项。
                </summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Contains(System.Object)">
      <summary>
                    确定 <see cref="T:System.Collections.IList" /> 是否包含特定值。
                </summary>
      <returns>
                    如果值在列表中，则为 true；否则为 false。
                </returns>
      <param name="value">
                    要在 <see cref="T:System.Collections.IList" /> 中查找的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>
                    确定 <see cref="T:System.Collections.IList" /> 中特定项的索引。
                </summary>
      <returns>
                    如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。
                </returns>
      <param name="value">
                    要在 <see cref="T:System.Collections.IList" /> 中查找的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>
                    在 <see cref="T:System.Collections.IList" /> 中的指定位置插入项。
                </summary>
      <param name="index">
                    从零开始的索引，应在该位置插入 <paramref name="value" />。
                </param>
      <param name="value">
                    要插入 <see cref="T:System.Collections.IList" /> 中的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IsFixedSize">
      <summary>
                    获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否具有固定大小。
                </summary>
      <returns>
                    如果 <see cref="T:System.Collections.IList" /> 具有固定大小，则为 true；否则为 false。此属性总是返回 false。
                </returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IsReadOnly">
      <summary>
                    获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否为只读。
                </summary>
      <returns>
                    如果 <see cref="T:System.Collections.IList" /> 为只读，则为 true；否则为 false。此属性总是返回 false。
                </returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Item(System.Int32)">
      <summary>
                    获取或设置指定索引处的元素。
                </summary>
      <returns>
                    指定索引处的元素。
                </returns>
      <param name="index">
                    要获得或设置的元素从零开始的索引。
                </param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Remove(System.Object)">
      <summary>
                    从 <see cref="T:System.Collections.IList" /> 中移除特定对象的第一个匹配项。
                </summary>
      <param name="value">
                    要从 <see cref="T:System.Collections.IList" /> 移除的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>
                    移除 <see cref="T:System.Collections.IList" /> 的指定索引处的元素。
                </summary>
      <param name="index">
                    要移除的元素的从零开始的索引。
                </param>
    </member>
    <member name="T:System.CodeDom.CodeObject">
      <summary>为大部分代码文档对象模型 (CodeDOM) 对象提供通用基类。</summary>
    </member>
    <member name="M:System.CodeDom.CodeObject.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeObject" /> 类的新实例。</summary>
    </member>
    <member name="P:System.CodeDom.CodeObject.UserData">
      <summary>获取当前对象的用户可定义数据。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" />，包含当前对象的用户数据。</returns>
    </member>
    <member name="T:System.CodeDom.CodeObjectCreateExpression">
      <summary>表示创建某种类型的新实例的表达式。</summary>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
      <summary>使用指定的类型和参数初始化 <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> 类的新实例。</summary>
      <param name="createType">
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示要创建的对象的数据类型。 </param>
      <param name="parameters">
        <see cref="T:System.CodeDom.CodeExpression" /> 对象的数组，指示用于创建对象的参数。 </param>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression[])">
      <summary>使用指定的类型和参数初始化 <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> 类的新实例。</summary>
      <param name="createType">要创建对象的数据类型的名称。 </param>
      <param name="parameters">
        <see cref="T:System.CodeDom.CodeExpression" /> 对象的数组，指示用于创建对象的参数。 </param>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression[])">
      <summary>使用指定的类型和参数初始化 <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> 类的新实例。</summary>
      <param name="createType">要创建对象的数据类型。 </param>
      <param name="parameters">
        <see cref="T:System.CodeDom.CodeExpression" /> 对象的数组，指示用于创建对象的参数。 </param>
    </member>
    <member name="P:System.CodeDom.CodeObjectCreateExpression.CreateType">
      <summary>获取或设置要创建的对象的数据类型。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />，引用要创建对象的数据类型。</returns>
    </member>
    <member name="P:System.CodeDom.CodeObjectCreateExpression.Parameters">
      <summary>获取或设置创建对象时使用的参数。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpressionCollection" />，指示创建对象时要使用的参数。</returns>
    </member>
    <member name="T:System.CodeDom.CodeParameterDeclarationExpression">
      <summary>表示方法、属性或构造函数的参数声明。</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary>使用指定的参数类型和名称初始化 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 类的新实例。</summary>
      <param name="type">
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示要声明的参数的类型。 </param>
      <param name="name">要声明的参数的名称。 </param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.String,System.String)">
      <summary>使用指定的参数类型和名称初始化 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 类的新实例。</summary>
      <param name="type">要声明的参数的类型名称。 </param>
      <param name="name">要声明的参数的名称。 </param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.Type,System.String)">
      <summary>使用指定的参数类型和名称初始化 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 类的新实例。</summary>
      <param name="type">要声明的参数的数据类型。 </param>
      <param name="name">要声明的参数的名称。 </param>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.CustomAttributes">
      <summary>获取或设置参数声明的自定义属性。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />，指示自定义属性。</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Direction">
      <summary>获取或设置字段的方向。</summary>
      <returns>
        <see cref="T:System.CodeDom.FieldDirection" />，指示字段的方向。</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Name">
      <summary>获取或设置参数的名称。</summary>
      <returns>参数名。</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Type">
      <summary>获取或设置参数类型。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示参数的数据类型。</returns>
    </member>
    <member name="T:System.CodeDom.CodeParameterDeclarationExpressionCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 对象的集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor(System.CodeDom.CodeParameterDeclarationExpression[])">
      <summary>初始化 <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> 类的新实例，该实例包含指定的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 对象数组。</summary>
      <param name="value">用于初始化该集合的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 对象数组。</param>
      <exception cref="T:System.ArgumentNullException">数组中的一个或多个对象为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> 类的新实例，该实例包含指定源集合的元素。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />，用来初始化集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Add(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 添加到集合。</summary>
      <returns>新元素位置处插入的索引。</returns>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.AddRange(System.CodeDom.CodeParameterDeclarationExpression[])">
      <summary>将指定数组的元素复制到该集合的末尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 类型的数组，包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 &lt;languageKeyword&gt;null&lt;/languageKeyword&gt;。</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.AddRange(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary>将另一个 <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> 的内容添加到集合末尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />，包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 &lt;languageKeyword&gt;null&lt;/languageKeyword&gt;。</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Contains(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>获取一个值，该值指示集合是否包含指定的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</summary>
      <returns>
            当集合包含指定的对象时为 true；否则为 false。</returns>
      <param name="value">要在该集合中搜索的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.CopyTo(System.CodeDom.CodeParameterDeclarationExpression[],System.Int32)">
      <summary>将集合对象复制到一维 <see cref="T:System.Array" /> 实例（从指定索引处开始）。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，为从集合所复制的值的目标位置。</param>
      <param name="index">插入开始处的数组的索引。</param>
      <exception cref="T:System.ArgumentException">该目标数组是多维数组。- 或 - <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> 中的元素数大于 <paramref name="index" /> 参数所指定的目标数组索引位置与目标数组结尾位置之间的可用空间。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于目标数组的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.IndexOf(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>获取指定的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 在该集合中的索引（如果它在该集合中存在）。</summary>
      <returns>如果在该集合中找到指定对象，则为此对象在该集合中的索引；否则为 -1。</returns>
      <param name="value">要在集合中定位的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Insert(System.Int32,System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 插入集合中的指定索引处。</summary>
      <param name="index">从零开始的索引，应在此处插入指定对象。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpressionCollection.Item(System.Int32)">
      <summary>获取或设置集合中指定索引处的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</summary>
      <returns>每个有效索引位置的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</returns>
      <param name="index">要访问的集合的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数不在集合的索引的有效范围内。</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Remove(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>从集合中移除指定的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</summary>
      <param name="value">要从该集合中移除的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</param>
      <exception cref="T:System.ArgumentException">未在集合中找到指定的对象。</exception>
    </member>
    <member name="T:System.CodeDom.CodePrimitiveExpression">
      <summary>表示基元数据类型的值。</summary>
    </member>
    <member name="M:System.CodeDom.CodePrimitiveExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodePrimitiveExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodePrimitiveExpression.#ctor(System.Object)">
      <summary>使用指定的对象初始化 <see cref="T:System.CodeDom.CodePrimitiveExpression" /> 类的新实例。</summary>
      <param name="value">要表示的对象。 </param>
    </member>
    <member name="P:System.CodeDom.CodePrimitiveExpression.Value">
      <summary>获取或设置要表示的基元数据类型。</summary>
      <returns>要表示其值的基元数据类型实例。</returns>
    </member>
    <member name="T:System.CodeDom.CodePropertyReferenceExpression">
      <summary>表示属性值的引用。</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertyReferenceExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodePropertyReferenceExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertyReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>使用指定的目标对象和属性名称初始化 <see cref="T:System.CodeDom.CodePropertyReferenceExpression" /> 类的新实例。</summary>
      <param name="targetObject">一个 <see cref="T:System.CodeDom.CodeExpression" />，它指示包含要引用的属性的对象。 </param>
      <param name="propertyName">要引用的属性的名称。 </param>
    </member>
    <member name="P:System.CodeDom.CodePropertyReferenceExpression.PropertyName">
      <summary>获取或设置要引用的属性名。</summary>
      <returns>要引用的属性的名称。</returns>
    </member>
    <member name="P:System.CodeDom.CodePropertyReferenceExpression.TargetObject">
      <summary>获取或设置包含要引用属性的对象。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeExpression" />，它指示包含要引用的属性的对象。</returns>
    </member>
    <member name="T:System.CodeDom.CodePropertySetValueReferenceExpression">
      <summary>表示属性集方法内的属性集方法调用的值参数。</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertySetValueReferenceExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodePropertySetValueReferenceExpression" /> 类的新实例。</summary>
    </member>
    <member name="T:System.CodeDom.CodeRegionDirective">
      <summary>指定代码区域的名称和模式。</summary>
    </member>
    <member name="M:System.CodeDom.CodeRegionDirective.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.CodeDom.CodeRegionDirective" /> 类的新实例。 </summary>
    </member>
    <member name="M:System.CodeDom.CodeRegionDirective.#ctor(System.CodeDom.CodeRegionMode,System.String)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeRegionDirective" /> 类的新实例，指定它的模式和名称。 </summary>
      <param name="regionMode">
        <see cref="T:System.CodeDom.CodeRegionMode" /> 值之一。</param>
      <param name="regionText">区域的名称。</param>
    </member>
    <member name="P:System.CodeDom.CodeRegionDirective.RegionMode">
      <summary>获取或设置区域指令的模式。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeRegionMode" /> 值之一。默认为 <see cref="F:System.CodeDom.CodeRegionMode.None" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeRegionDirective.RegionText">
      <summary>获取或设置区域的名称。</summary>
      <returns>区域的名称。</returns>
    </member>
    <member name="T:System.CodeDom.CodeRegionMode">
      <summary>指定代码区域的开始或结束。</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.None">
      <summary>未使用。</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.Start">
      <summary>区域的开始。</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.End">
      <summary>区域的结束。</summary>
    </member>
    <member name="T:System.CodeDom.CodeRemoveEventStatement">
      <summary>表示移除事件处理程序的语句。</summary>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeRemoveEventStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor(System.CodeDom.CodeEventReferenceExpression,System.CodeDom.CodeExpression)">
      <summary>使用指定的事件和事件处理程序初始化 <see cref="T:System.CodeDom.CodeRemoveEventStatement" /> 类的新实例。</summary>
      <param name="eventRef">
        <see cref="T:System.CodeDom.CodeEventReferenceExpression" />，指示要从中分离出事件处理程序的事件。 </param>
      <param name="listener">一个 <see cref="T:System.CodeDom.CodeExpression" />，它指示要移除的事件处理程序。 </param>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression)">
      <summary>使用指定的目标对象、事件名称和事件处理程序初始化 <see cref="T:System.CodeDom.CodeRemoveEventStatement" /> 类的新实例。</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" />，指示包含事件的对象。 </param>
      <param name="eventName">事件的名称。 </param>
      <param name="listener">一个 <see cref="T:System.CodeDom.CodeExpression" />，它指示要移除的事件处理程序。 </param>
    </member>
    <member name="P:System.CodeDom.CodeRemoveEventStatement.Event">
      <summary>获取或设置要从中移除侦听器的事件。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeEventReferenceExpression" />，指示要从中移除侦听器的事件。</returns>
    </member>
    <member name="P:System.CodeDom.CodeRemoveEventStatement.Listener">
      <summary>获取或设置要移除的事件处理程序。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeExpression" />，它指示要移除的事件处理程序。</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetCompileUnit">
      <summary>表示可编译的原义代码片段。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetCompileUnit.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeSnippetCompileUnit" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetCompileUnit.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeSnippetCompileUnit" /> 类的新实例。</summary>
      <param name="value">要表示的原义代码片段。</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetCompileUnit.LinePragma">
      <summary>获取或设置有关代码在源代码文档中的位置的行信息和文件信息。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeLinePragma" />，指示代码片段的位置。</returns>
    </member>
    <member name="P:System.CodeDom.CodeSnippetCompileUnit.Value">
      <summary>获取或设置要表示的原义代码片段。</summary>
      <returns>原义代码片段。</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetExpression">
      <summary>表示文本表达式。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeSnippetExpression" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetExpression.#ctor(System.String)">
      <summary>使用指定的文本表达式初始化 <see cref="T:System.CodeDom.CodeSnippetExpression" /> 类的新实例。</summary>
      <param name="value">要表示的文本表达式。</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetExpression.Value">
      <summary>获取或设置代码字符串。</summary>
      <returns>字符串。</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetStatement">
      <summary>使用原义代码片断表示一条语句。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeSnippetStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetStatement.#ctor(System.String)">
      <summary>使用指定的代码片断初始化 <see cref="T:System.CodeDom.CodeSnippetStatement" /> 类的新实例。</summary>
      <param name="value">要表示的语句的原义代码片断。</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetStatement.Value">
      <summary>获取或设置原义代码片断语句。</summary>
      <returns>原义代码片段语句。</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetTypeMember">
      <summary>使用原义代码片段表示类型成员。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetTypeMember.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeSnippetTypeMember" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetTypeMember.#ctor(System.String)">
      <summary>使用指定的文本初始化 <see cref="T:System.CodeDom.CodeSnippetTypeMember" /> 类的新实例。</summary>
      <param name="text">类型成员的代码片段。</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetTypeMember.Text">
      <summary>获取或设置类型成员的原义代码片段。</summary>
      <returns>类型成员的代码片段。</returns>
    </member>
    <member name="T:System.CodeDom.CodeStatement">
      <summary>表示从中派生所有代码语句的 abstract 基类。</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeStatement" /> 类的新实例。 </summary>
    </member>
    <member name="P:System.CodeDom.CodeStatement.EndDirectives">
      <summary>获取包含结束指令的 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 对象。</summary>
      <returns>包含结束指令的 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 对象。</returns>
    </member>
    <member name="P:System.CodeDom.CodeStatement.LinePragma">
      <summary>获取或设置代码语句所在的行。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeLinePragma" /> 对象，指示代码语句的上下文。</returns>
    </member>
    <member name="P:System.CodeDom.CodeStatement.StartDirectives">
      <summary>获取包含开始指令的 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 对象。</summary>
      <returns>包含开始指令的 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 对象。</returns>
    </member>
    <member name="T:System.CodeDom.CodeStatementCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeStatement" /> 对象的集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeStatementCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor(System.CodeDom.CodeStatement[])">
      <summary>初始化 <see cref="T:System.CodeDom.CodeStatementCollection" /> 类的新实例，该实例包含 <see cref="T:System.CodeDom.CodeStatement" /> 对象的指定数组。</summary>
      <param name="value">用于初始化该集合的 <see cref="T:System.CodeDom.CodeStatement" /> 对象数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor(System.CodeDom.CodeStatementCollection)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeStatementCollection" /> 类的新实例，该实例包含指定源集合的元素。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeStatementCollection" /> 对象，用来初始化集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 &lt;languageKeyword&gt;null&lt;/languageKeyword&gt;。</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Add(System.CodeDom.CodeExpression)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeExpression" /> 对象添加到集合。</summary>
      <returns>新元素位置处插入的索引。</returns>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeExpression" /> 对象。</param>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Add(System.CodeDom.CodeStatement)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeStatement" /> 对象添加到集合。</summary>
      <returns>新元素位置处插入的索引。</returns>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeStatement" /> 对象。</param>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.AddRange(System.CodeDom.CodeStatement[])">
      <summary>向集合添加一组 <see cref="T:System.CodeDom.CodeStatement" /> 对象。</summary>
      <param name="value">要添加到集合中的 <see cref="T:System.CodeDom.CodeStatement" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 &lt;languageKeyword&gt;null&lt;/languageKeyword&gt;。</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.AddRange(System.CodeDom.CodeStatementCollection)">
      <summary>将另一个 <see cref="T:System.CodeDom.CodeStatementCollection" /> 对象的内容添加到集合的末尾。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeStatementCollection" /> 对象，其中包含要添加到集合中的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 &lt;languageKeyword&gt;null&lt;/languageKeyword&gt;。</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Contains(System.CodeDom.CodeStatement)">
      <summary>获取一个值，该值指示集合是否包含指定的 <see cref="T:System.CodeDom.CodeStatement" /> 对象。</summary>
      <returns>
            当集合包含指定的对象时为 true；否则为 false。</returns>
      <param name="value">要在此集合中搜索的 <see cref="T:System.CodeDom.CodeStatement" /> 对象。</param>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.CopyTo(System.CodeDom.CodeStatement[],System.Int32)">
      <summary>从指定的索引处开始，将 <see cref="T:System.CodeDom.CodeStatementCollection" /> 对象的元素复制到一维 <see cref="T:System.Array" /> 实例。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，为从集合所复制的值的目标位置。</param>
      <param name="index">插入开始处的数组的索引。</param>
      <exception cref="T:System.ArgumentException">该目标数组是多维数组。- 或 - <see cref="T:System.CodeDom.CodeStatementCollection" /> 中的元素数大于 <paramref name="index" /> 参数所指定的目标数组索引位置与目标数组结尾位置之间的可用空间。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于目标数组的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.IndexOf(System.CodeDom.CodeStatement)">
      <summary>获取指定的 <see cref="T:System.CodeDom.CodeStatement" /> 对象在 <see cref="T:System.CodeDom.CodeStatementCollection" /> 中的索引（如果它已存在于该集合中）。</summary>
      <returns>如果在该集合中找到指定对象，则为此对象在该集合中的索引；否则为 –1。</returns>
      <param name="value">要在集合中定位的 <see cref="T:System.CodeDom.CodeStatement" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Insert(System.Int32,System.CodeDom.CodeStatement)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeStatement" /> 对象插入集合中指定的索引位置。</summary>
      <param name="index">从零开始的索引，应在此处插入指定对象。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeStatement" /> 对象。</param>
    </member>
    <member name="P:System.CodeDom.CodeStatementCollection.Item(System.Int32)">
      <summary>获取或设置集合中指定索引处的 <see cref="T:System.CodeDom.CodeStatement" /> 对象。</summary>
      <returns>每个有效索引位置的 <see cref="T:System.CodeDom.CodeStatement" />。</returns>
      <param name="index">要访问的集合的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数不在集合的索引的有效范围内。</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Remove(System.CodeDom.CodeStatement)">
      <summary>从集合中移除指定的 <see cref="T:System.CodeDom.CodeStatement" /> 对象。</summary>
      <param name="value">要从该集合中移除的 <see cref="T:System.CodeDom.CodeStatement" />。</param>
      <exception cref="T:System.ArgumentException">未在集合中找到指定的对象。</exception>
    </member>
    <member name="T:System.CodeDom.CodeThisReferenceExpression">
      <summary>表示对当前本地类实例的引用。</summary>
    </member>
    <member name="M:System.CodeDom.CodeThisReferenceExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeThisReferenceExpression" /> 类的新实例。 </summary>
    </member>
    <member name="T:System.CodeDom.CodeThrowExceptionStatement">
      <summary>表示引发异常的语句。</summary>
    </member>
    <member name="M:System.CodeDom.CodeThrowExceptionStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeThrowExceptionStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeThrowExceptionStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary>用指定的异常类型实例初始化 <see cref="T:System.CodeDom.CodeThrowExceptionStatement" /> 类的新实例。</summary>
      <param name="toThrow">
        <see cref="T:System.CodeDom.CodeExpression" />，指示要引发的异常。 </param>
    </member>
    <member name="P:System.CodeDom.CodeThrowExceptionStatement.ToThrow">
      <summary>获取或设置要引发的异常。</summary>
      <returns>表示要引发的异常的实例的 <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTryCatchFinallyStatement">
      <summary>表示一个 try 块，具有任意数量的 catch 子句和一个可选的 finally 块。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor(System.CodeDom.CodeStatement[],System.CodeDom.CodeCatchClause[])">
      <summary>使用指定的 try 子句和 catch 子句的语句初始化 <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> 类的新实例。</summary>
      <param name="tryStatements">
        <see cref="T:System.CodeDom.CodeStatement" /> 对象的数组，指示要尝试 (Try) 的语句。 </param>
      <param name="catchClauses">
        <see cref="T:System.CodeDom.CodeCatchClause" /> 对象的数组，指示要捕捉 (Catch) 的子句。 </param>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor(System.CodeDom.CodeStatement[],System.CodeDom.CodeCatchClause[],System.CodeDom.CodeStatement[])">
      <summary>使用指定的 try 子句和 catch 子句的语句以及 finally 语句初始化 <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> 类的新实例。</summary>
      <param name="tryStatements">
        <see cref="T:System.CodeDom.CodeStatement" /> 对象的数组，指示要尝试 (Try) 的语句。 </param>
      <param name="catchClauses">
        <see cref="T:System.CodeDom.CodeCatchClause" /> 对象的数组，指示要捕捉 (Catch) 的子句。 </param>
      <param name="finallyStatements">
        <see cref="T:System.CodeDom.CodeStatement" /> 对象的数组，指示要使用的 finally 语句。 </param>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.CatchClauses">
      <summary>获取要使用的 catch 子句。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeCatchClauseCollection" />，指示要使用的 catch 子句。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.FinallyStatements">
      <summary>获取要使用的 finally 语句。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" />，指示 finally 语句。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.TryStatements">
      <summary>获取要尝试的语句。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" />，指示要尝试 (Try) 的语句。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeConstructor">
      <summary>表示类的静态构造函数。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeConstructor.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeConstructor" /> 类的新实例。</summary>
    </member>
    <member name="T:System.CodeDom.CodeTypeDeclaration">
      <summary>表示类、结构、接口或枚举的类型声明。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclaration.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclaration.#ctor(System.String)">
      <summary>用指定的名称初始化 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 类的新实例。</summary>
      <param name="name">新类型的名称。 </param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
      <summary>获取类型的基类型。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 对象，它指示类型的基类型。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsClass">
      <summary>获取或设置一个值，该值指示该类型是否是类或引用类型。</summary>
      <returns>
如果该类型是类或引用类型，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsEnum">
      <summary>获取或设置一个值，该值指示该类型是否是枚举。</summary>
      <returns>
如果该类型是枚举，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsInterface">
      <summary>获取或设置一个值，该值指示该类型是否是接口。</summary>
      <returns>
如果该类型是接口，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
      <summary>获取或设置一个值，该值指示该类型声明是完整的类型声明还是分部类型声明。</summary>
      <returns>
如果该类或结构声明是实现的分部表示形式，则为 true；如果该声明是该类或结构的完整实现，则为 false。默认为 false。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsStruct">
      <summary>获取或设置一个值，该值指示该类型是不是值类型（结构）。</summary>
      <returns>
如果该类型是值类型，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.Members">
      <summary>获取所表示的类型的类成员的集合。</summary>
      <returns>一个指示类成员的 <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> 对象。</returns>
    </member>
    <member name="E:System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes">
      <summary>当首次访问 <see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" /> 集合时发生。</summary>
    </member>
    <member name="E:System.CodeDom.CodeTypeDeclaration.PopulateMembers">
      <summary>当首次访问 <see cref="P:System.CodeDom.CodeTypeDeclaration.Members" /> 集合时发生。</summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
      <summary>获取或设置类型的属性。</summary>
      <returns>一个 <see cref="T:System.Reflection.TypeAttributes" /> 对象，它指示该类型的属性。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
      <summary>获取类型声明的类型参数。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> 包含类型声明的类型参数。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeDeclarationCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 对象的集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor(System.CodeDom.CodeTypeDeclaration[])">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 类的新实例，该实例包含 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 对象的指定数组。</summary>
      <param name="value">用于初始化该集合的 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 对象数组。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor(System.CodeDom.CodeTypeDeclarationCollection)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 类的新实例，该实例包含指定源集合中的元素。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 对象，用来初始化集合。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Add(System.CodeDom.CodeTypeDeclaration)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 对象添加到集合。</summary>
      <returns>新元素位置处插入的索引。</returns>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 对象。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.AddRange(System.CodeDom.CodeTypeDeclaration[])">
      <summary>将指定数组的元素复制到该集合的末尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 类型的数组，其中包含要添加到集合中的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.AddRange(System.CodeDom.CodeTypeDeclarationCollection)">
      <summary>将另一个 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 对象的内容添加到集合的末尾。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 对象，其中包含要添加到集合中的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 &lt;languageKeyword&gt;null&lt;/languageKeyword&gt;。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Contains(System.CodeDom.CodeTypeDeclaration)">
      <summary>获取一个值，该值指示集合是否包含指定的 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 对象。</summary>
      <returns>
当集合包含指定的对象时为 true；否则为 false。</returns>
      <param name="value">要在此集合中搜索的 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 对象。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.CopyTo(System.CodeDom.CodeTypeDeclaration[],System.Int32)">
      <summary>从指定的索引处开始，将 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 对象中的元素复制到一维 <see cref="T:System.Array" /> 实例。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，为从集合所复制的值的目标位置。</param>
      <param name="index">插入开始处的数组的索引。</param>
      <exception cref="T:System.ArgumentException">该目标数组是多维数组。- 或 - <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 中的元素数大于 <paramref name="index" /> 参数所指定的目标数组索引位置与目标数组结尾位置之间的可用空间。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于目标数组的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.IndexOf(System.CodeDom.CodeTypeDeclaration)">
      <summary>获取指定的 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 对象在 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 中的索引（如果它已存在于该集合中）。</summary>
      <returns>如果在该集合中找到指定对象，则为此对象在该集合中的索引；否则为 –1。</returns>
      <param name="value">要在集合中定位的 <see cref="T:System.CodeDom.CodeTypeDeclaration" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Insert(System.Int32,System.CodeDom.CodeTypeDeclaration)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 对象插入集合中指定的索引位置。</summary>
      <param name="index">从零开始的索引，应在此处插入指定对象。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 对象。</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclarationCollection.Item(System.Int32)">
      <summary>获取或设置集合中指定索引处的 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 对象。</summary>
      <returns>每个有效索引位置的 <see cref="T:System.CodeDom.CodeTypeDeclaration" />。</returns>
      <param name="index">要访问的集合的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数不在集合的索引的有效范围内。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Remove(System.CodeDom.CodeTypeDeclaration)">
      <summary>从集合中移除指定的 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 对象。</summary>
      <param name="value">要从该集合中移除的 <see cref="T:System.CodeDom.CodeTypeDeclaration" />。</param>
      <exception cref="T:System.ArgumentException">未在集合中找到指定的对象。</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeDelegate">
      <summary>表示委托声明。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDelegate.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeDelegate" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDelegate.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeDelegate" /> 类的新实例。</summary>
      <param name="name">委托的名称。 </param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDelegate.Parameters">
      <summary>获取委托的参数。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />，指示委托的参数。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDelegate.ReturnType">
      <summary>获取或设置委托的返回类型。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示委托的返回类型。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeMember">
      <summary>为类型的成员提供基类。类型成员包括字段、方法、属性、构造函数和嵌套类型。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMember.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeMember" /> 类的新实例。 </summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Attributes">
      <summary>获取或设置成员的属性。</summary>
      <returns>
        <see cref="T:System.CodeDom.MemberAttributes" /> 值的按位组合用于指示成员的属性。默认值为 <see cref="F:System.CodeDom.MemberAttributes.Private" /> | <see cref="F:System.CodeDom.MemberAttributes.Final" /> . </returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Comments">
      <summary>获取类型成员的注释集合。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeCommentStatementCollection" />，指示成员的注释。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.CustomAttributes">
      <summary>获取或设置成员的自定义属性。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />，指示成员的自定义属性。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.EndDirectives">
      <summary>获取成员的结束指令。</summary>
      <returns>包含结束指令的 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 对象。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.LinePragma">
      <summary>获取或设置类型成员语句所在的行。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeLinePragma" /> 对象，它指示类型成员声明的位置。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Name">
      <summary>获取或设置成员名。</summary>
      <returns>成员名。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.StartDirectives">
      <summary>获取成员的开始指令。</summary>
      <returns>包含开始指令的 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 对象。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeMemberCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeTypeMember" /> 对象的集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor(System.CodeDom.CodeTypeMember[])">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> 类的新实例，该实例包含指定的 <see cref="T:System.CodeDom.CodeTypeMember" /> 对象数组。</summary>
      <param name="value">用于初始化该集合的 <see cref="T:System.CodeDom.CodeTypeMember" /> 对象数组。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor(System.CodeDom.CodeTypeMemberCollection)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> 类的新实例，该实例包含指定源集合的元素。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeMemberCollection" />，用来初始化集合。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Add(System.CodeDom.CodeTypeMember)">
      <summary>向该集合添加具有指定值的 <see cref="T:System.CodeDom.CodeTypeMember" />。</summary>
      <returns>新元素位置处插入的索引。</returns>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeTypeMember" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.AddRange(System.CodeDom.CodeTypeMember[])">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeTypeMember" /> 数组的元素复制到集合末尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeMember" /> 类型的数组，包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.AddRange(System.CodeDom.CodeTypeMemberCollection)">
      <summary>将另一个 <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> 的内容添加到集合末尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeMemberCollection" />，包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Contains(System.CodeDom.CodeTypeMember)">
      <summary>获取一个值，该值指示集合是否包含指定的 <see cref="T:System.CodeDom.CodeTypeMember" />。</summary>
      <returns>
            当集合包含指定的对象时为 true；否则为 false。</returns>
      <param name="value">要在集合中搜索的 <see cref="T:System.CodeDom.CodeTypeMember" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.CopyTo(System.CodeDom.CodeTypeMember[],System.Int32)">
      <summary>从指定的索引处开始，将集合对象复制到一维 <see cref="T:System.Array" /> 实例。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，为从集合所复制的值的目标位置。</param>
      <param name="index">插入开始处的数组的索引。</param>
      <exception cref="T:System.ArgumentException">该目标数组是多维数组。- 或 - <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> 中的元素数大于 <paramref name="index" /> 参数所指定的目标数组索引位置与目标数组结尾位置之间的可用空间。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于目标数组的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.IndexOf(System.CodeDom.CodeTypeMember)">
      <summary>获取指定的 <see cref="T:System.CodeDom.CodeTypeMember" /> 在该集合中的索引（如果它在该集合中存在）。</summary>
      <returns>如果在该集合中找到指定对象，则为此对象在该集合中的索引；否则为 -1。</returns>
      <param name="value">要在集合中定位的 <see cref="T:System.CodeDom.CodeTypeMember" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Insert(System.Int32,System.CodeDom.CodeTypeMember)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeTypeMember" /> 插入集合中的指定索引处。</summary>
      <param name="index">从零开始的索引，应在此处插入指定对象。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeTypeMember" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeMemberCollection.Item(System.Int32)">
      <summary>获取或设置集合中指定索引处的 <see cref="T:System.CodeDom.CodeTypeMember" />。</summary>
      <returns>每个有效索引位置的 <see cref="T:System.CodeDom.CodeTypeMember" />。</returns>
      <param name="index">要访问的集合的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数不在集合的索引的有效范围内。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Remove(System.CodeDom.CodeTypeMember)">
      <summary>从集合中移除特定的 <see cref="T:System.CodeDom.CodeTypeMember" />。</summary>
      <param name="value">要从该集合中移除的 <see cref="T:System.CodeDom.CodeTypeMember" />。</param>
      <exception cref="T:System.ArgumentException">未在集合中找到指定的对象。</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeOfExpression">
      <summary>表示 typeof 表达式，该表达式返回指定类型名称的 <see cref="T:System.Type" />。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeOfExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeOfExpression" /> 类的新实例。</summary>
      <param name="type">
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示 typeof 表达式的数据类型。 </param>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.String)">
      <summary>使用指定的类型初始化 <see cref="T:System.CodeDom.CodeTypeOfExpression" /> 类的新实例。</summary>
      <param name="type">typeof 表达式的数据类型的名称。 </param>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.Type)">
      <summary>使用指定的类型初始化 <see cref="T:System.CodeDom.CodeTypeOfExpression" /> 类的新实例。</summary>
      <param name="type">typeof 表达式的数据类型。 </param>
    </member>
    <member name="P:System.CodeDom.CodeTypeOfExpression.Type">
      <summary>获取或设置 typeof 表达式所引用的数据类型。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示 typeof 表达式所引用的数据类型。此属性从来不会返回 null，并且默认为 <see cref="T:System.Void" /> 类型。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeParameter">
      <summary>
                    表示泛型类型或方法的类型参数。
                </summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameter.#ctor">
      <summary>
                    初始化 <see cref="T:System.CodeDom.CodeTypeParameter" /> 类的新实例。
                </summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameter.#ctor(System.String)">
      <summary>
                    用指定的类型参数名称初始化 <see cref="T:System.CodeDom.CodeTypeParameter" /> 类的新实例。
                </summary>
      <param name="name">
类型参数的名称。
                </param>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.Constraints">
      <summary>
                    获取类型参数的约束。
                </summary>
      <returns>
                    一个 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 对象，它包含类型参数的约束。
                </returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.CustomAttributes">
      <summary>
                    获取类型参数的自定义属性。
                </summary>
      <returns>
                    一个指示类型参数的自定义属性的 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />。默认为 null。
                </returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.HasConstructorConstraint">
      <summary>
                    获取或设置一个值，该值指示类型参数是否具有构造函数约束。
                </summary>
      <returns>
                    如果类型参数具有构造函数约束，则为 true；否则为 false。默认为 false。
                </returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.Name">
      <summary>
                    获取或设置类型参数的名称。
                </summary>
      <returns>
类型参数的名称。默认值为空字符串 ("")。
                </returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeParameterCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象的集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> 类的新的空实例。 </summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor(System.CodeDom.CodeTypeParameter[])">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> 类的新实例，该实例包含指定的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象数组。 </summary>
      <param name="value">用于初始化该集合的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象数组。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor(System.CodeDom.CodeTypeParameterCollection)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> 类的新实例，该实例包含指定源集合的元素。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeParameterCollection" />，用来初始化集合。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Add(System.CodeDom.CodeTypeParameter)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象添加到集合。</summary>
      <returns>从零开始的索引；此处插入了新元素。</returns>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeTypeParameter" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Add(System.String)">
      <summary>使用指定的数据类型名称将指定的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象添加到集合。</summary>
      <param name="value">要向集合中为其添加 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象的数据类型的名称。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.AddRange(System.CodeDom.CodeTypeParameter[])">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 数组的元素复制到集合末尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeParameter" /> 类型的数组，包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.AddRange(System.CodeDom.CodeTypeParameterCollection)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> 的元素复制到集合的结尾。</summary>
      <param name="value">包含要添加到集合中的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象的 <see cref="T:System.CodeDom.CodeTypeParameterCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Contains(System.CodeDom.CodeTypeParameter)">
      <summary>确定集合是否包含指定的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象。</summary>
      <returns>
如果集合中包含 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象，则为 true；否则为 false。</returns>
      <param name="value">要在此集合中搜索的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.CopyTo(System.CodeDom.CodeTypeParameter[],System.Int32)">
      <summary>将集合中的项复制到指定一维 <see cref="T:System.Array" /> 的指定索引处。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，为从集合所复制的值的目标位置。 </param>
      <param name="index">插入开始处的数组的索引。 </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 - <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> 中的元素数大于 <paramref name="index" /> 所指定的目标数组索引位置与目标数组结尾位置之间的可用空间。 </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于目标数组的最低索引。 </exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.IndexOf(System.CodeDom.CodeTypeParameter)">
      <summary>获取指定的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象在集合中的索引（如果它存在于集合中）。</summary>
      <returns>如果在集合中找到了指定的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象，则为它在集合中的从零开始的索引；如果找不到，则为 -1。</returns>
      <param name="value">要在集合中定位的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Insert(System.Int32,System.CodeDom.CodeTypeParameter)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象插入集合中指定的索引位置。</summary>
      <param name="index">从零开始的索引；将在此位置插入项。 </param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象。 </param>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameterCollection.Item(System.Int32)">
      <summary>获取或设置集合中指定索引处的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象。</summary>
      <returns>位于指定索引处的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象。</returns>
      <param name="index">要访问的集合对象的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 在集合的有效索引范围外。 </exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Remove(System.CodeDom.CodeTypeParameter)">
      <summary>从集合中移除指定的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象。</summary>
      <param name="value">要从集合中移除的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象。</param>
      <exception cref="T:System.ArgumentException">未在集合中找到指定的对象。 </exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeReference">
      <summary>表示对某类型的引用。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeReference" /> 类的新实例。 </summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeParameter)">
      <summary>使用指定的代码类型参数初始化 <see cref="T:System.CodeDom.CodeTypeReference" /> 类的新实例。 </summary>
      <param name="typeParameter">一个表示类型参数的类型的 <see cref="T:System.CodeDom.CodeTypeParameter" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
      <summary>使用指定的数组类型和秩初始化 <see cref="T:System.CodeDom.CodeTypeReference" /> 类的新实例。</summary>
      <param name="arrayType">
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示数组的类型。 </param>
      <param name="rank">数组的维数。 </param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String)">
      <summary>使用指定的类型名称初始化 <see cref="T:System.CodeDom.CodeTypeReference" /> 类的新实例。</summary>
      <param name="typeName">要引用的类型的名称。 </param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReference[])">
      <summary>使用指定的类型名称和类型参数初始化 <see cref="T:System.CodeDom.CodeTypeReference" /> 类的新实例。</summary>
      <param name="typeName">要引用的类型的名称。</param>
      <param name="typeArguments">
        <see cref="T:System.CodeDom.CodeTypeReference" /> 值的数组。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReferenceOptions)">
      <summary>使用指定的类型名称和代码类型引用选项初始化 <see cref="T:System.CodeDom.CodeTypeReference" /> 类的新实例。</summary>
      <param name="typeName">要引用的类型的名称。</param>
      <param name="codeTypeReferenceOption">代码类型引用选项，是 <see cref="T:System.CodeDom.CodeTypeReferenceOptions" /> 的值之一。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.Int32)">
      <summary>使用指定的数组类型名称和秩初始化 <see cref="T:System.CodeDom.CodeTypeReference" /> 类的新实例。</summary>
      <param name="baseType">数组元素类型的名称。 </param>
      <param name="rank">数组的维数。 </param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.Type)">
      <summary>使用指定的类型初始化 <see cref="T:System.CodeDom.CodeTypeReference" /> 类的新实例。</summary>
      <param name="type">要引用的 <see cref="T:System.Type" />。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type " /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.Type,System.CodeDom.CodeTypeReferenceOptions)">
      <summary>使用指定的类型和代码类型引用初始化 <see cref="T:System.CodeDom.CodeTypeReference" /> 类的新实例。</summary>
      <param name="type">要引用的 <see cref="T:System.Type" />。</param>
      <param name="codeTypeReferenceOption">代码类型引用选项，是 <see cref="T:System.CodeDom.CodeTypeReferenceOptions" /> 的值之一。 </param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.ArrayElementType">
      <summary>获取或设置数组元素的类型。</summary>
      <returns>一个指示数组元素的类型的 <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.ArrayRank">
      <summary>获取或设置数组的数组秩。</summary>
      <returns>数组的维数。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.BaseType">
      <summary>获取或设置所引用的类型的名称。</summary>
      <returns>所引用的类型的名称。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.Options">
      <summary>获取或设置代码类型引用选项。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReferenceOptions" /> 值的按位组合。 </returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.TypeArguments">
      <summary>获取当前泛型类型引用的类型参数。</summary>
      <returns>包含当前 <see cref="T:System.CodeDom.CodeTypeReference" /> 对象的类型参数的 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeTypeReference" /> 对象的集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor(System.CodeDom.CodeTypeReference[])">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 类的新实例，该实例包含指定的 <see cref="T:System.CodeDom.CodeTypeReference" /> 对象数组。</summary>
      <param name="value">用于初始化该集合的 <see cref="T:System.CodeDom.CodeTypeReference" /> 对象数组。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor(System.CodeDom.CodeTypeReferenceCollection)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 类的新实例，该实例包含指定源集合的元素。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />，用来初始化集合。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.CodeDom.CodeTypeReference)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeTypeReference" /> 添加到集合。</summary>
      <returns>新元素位置处插入的索引。</returns>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.String)">
      <summary>使用指定的数据类型名将 <see cref="T:System.CodeDom.CodeTypeReference" /> 添加到集合。</summary>
      <param name="value">要向集合中添加的 <see cref="T:System.CodeDom.CodeTypeReference" /> 的数据类型的名称。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.Type)">
      <summary>使用指定的数据类型将 <see cref="T:System.CodeDom.CodeTypeReference" /> 添加到集合。</summary>
      <param name="value">要向集合中添加的 <see cref="T:System.CodeDom.CodeTypeReference" /> 的数据类型。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.AddRange(System.CodeDom.CodeTypeReference[])">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeTypeReference" /> 数组的元素复制到集合末尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeReference" /> 类型的数组，包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.AddRange(System.CodeDom.CodeTypeReferenceCollection)">
      <summary>将指定 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 的内容添加到集合的末尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />，包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Contains(System.CodeDom.CodeTypeReference)">
      <summary>获取一个值，该值指示集合是否包含指定的 <see cref="T:System.CodeDom.CodeTypeReference" />。</summary>
      <returns>
            如果 <see cref="T:System.CodeDom.CodeTypeReference" /> 包含在集合中，则为 true；否则为 false。</returns>
      <param name="value">要在集合中搜索的 <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.CopyTo(System.CodeDom.CodeTypeReference[],System.Int32)">
      <summary>将集合中的项复制到指定一维 <see cref="T:System.Array" /> 的指定索引处。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，为从集合所复制的值的目标位置。</param>
      <param name="index">插入开始处的数组的索引。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 参数是多维的。- 或 -<see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 中的元素数大于 <paramref name="index" /> 参数所指定的目标数组索引位置与目标数组结尾位置之间的可用空间。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于目标数组的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.IndexOf(System.CodeDom.CodeTypeReference)">
      <summary>获取指定的 <see cref="T:System.CodeDom.CodeTypeReference" /> 在该集合中的索引（如果它在该集合中存在）。</summary>
      <returns>如果找到，为集合中指定 <see cref="T:System.CodeDom.CodeTypeReference" /> 的索引；否则为 -1。</returns>
      <param name="value">要在集合中定位的 <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Insert(System.Int32,System.CodeDom.CodeTypeReference)">
      <summary>将 <see cref="T:System.CodeDom.CodeTypeReference" /> 插入到集合中的指定索引位置。</summary>
      <param name="index">从零开始的索引，该项应插入此位置。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReferenceCollection.Item(System.Int32)">
      <summary>获取或设置集合中指定索引处的 <see cref="T:System.CodeDom.CodeTypeReference" />。</summary>
      <returns>每个有效索引位置的 <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
      <param name="index">要访问的集合的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数不在集合的索引的有效范围内。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Remove(System.CodeDom.CodeTypeReference)">
      <summary>从集合中移除指定的 <see cref="T:System.CodeDom.CodeTypeReference" />。</summary>
      <param name="value">要从该集合中移除的 <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <exception cref="T:System.ArgumentException">未在集合中找到指定的对象。</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceExpression">
      <summary>表示对某数据类型的引用。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>使用指定的类型初始化 <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> 类的新实例。</summary>
      <param name="type">
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示要引用的数据类型。 </param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.String)">
      <summary>使用指定的数据类型名称初始化 <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> 类的新实例。</summary>
      <param name="type">要引用的数据类型的名称。 </param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.Type)">
      <summary>使用指定的数据类型初始化 <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> 类的新实例。</summary>
      <param name="type">要引用的数据类型的实例。 </param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReferenceExpression.Type">
      <summary>获取或设置要引用的数据类型。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示要引用的数据类型。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceOptions">
      <summary>指定代码类型引用的解析方式。</summary>
    </member>
    <member name="F:System.CodeDom.CodeTypeReferenceOptions.GlobalReference">
      <summary>从根命名空间解析类型。</summary>
    </member>
    <member name="F:System.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter">
      <summary>从类型参数解析类型。</summary>
    </member>
    <member name="T:System.CodeDom.CodeVariableDeclarationStatement">
      <summary>表示变量声明。</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary>使用指定的类型和名称初始化 <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 类的新实例。</summary>
      <param name="type">一个 <see cref="T:System.CodeDom.CodeTypeReference" />，它指示变量的数据类型。 </param>
      <param name="name">变量名。 </param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.CodeDom.CodeTypeReference,System.String,System.CodeDom.CodeExpression)">
      <summary>使用指定的数据类型、变量名和初始化表达式初始化 <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 类的新实例。</summary>
      <param name="type">
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示变量的类型。 </param>
      <param name="name">变量名。 </param>
      <param name="initExpression">
        <see cref="T:System.CodeDom.CodeExpression" />，指示变量的初始化表达式。 </param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String)">
      <summary>使用指定的数据类型名称和变量名初始化 <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 类的新实例。</summary>
      <param name="type">变量的数据类型的名称。 </param>
      <param name="name">变量名。 </param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String,System.CodeDom.CodeExpression)">
      <summary>使用指定的数据类型、变量名和初始化表达式初始化 <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 类的新实例。</summary>
      <param name="type">变量的数据类型的名称。 </param>
      <param name="name">变量名。 </param>
      <param name="initExpression">
        <see cref="T:System.CodeDom.CodeExpression" />，指示变量的初始化表达式。 </param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String)">
      <summary>使用指定的数据类型和变量名初始化 <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 类的新实例。</summary>
      <param name="type">变量的数据类型。 </param>
      <param name="name">变量名。 </param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String,System.CodeDom.CodeExpression)">
      <summary>使用指定的数据类型、变量名和初始化表达式初始化 <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 类的新实例。</summary>
      <param name="type">变量的数据类型。 </param>
      <param name="name">变量名。 </param>
      <param name="initExpression">
        <see cref="T:System.CodeDom.CodeExpression" />，指示变量的初始化表达式。 </param>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.InitExpression">
      <summary>获取或设置变量的初始化表达式。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，指示变量的初始化表达式。</returns>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.Name">
      <summary>获取或设置变量名。</summary>
      <returns>变量名。</returns>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.Type">
      <summary>获取或设置变量的数据类型。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeTypeReference" />，它指示变量的数据类型。</returns>
    </member>
    <member name="T:System.CodeDom.CodeVariableReferenceExpression">
      <summary>表示局部变量的引用。</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableReferenceExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeVariableReferenceExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableReferenceExpression.#ctor(System.String)">
      <summary>使用指定的局部变量名称初始化 <see cref="T:System.CodeDom.CodeVariableReferenceExpression" /> 类的新实例。</summary>
      <param name="variableName">要引用的局部变量的名称。 </param>
    </member>
    <member name="P:System.CodeDom.CodeVariableReferenceExpression.VariableName">
      <summary>获取或设置要引用的局部变量的名称。</summary>
      <returns>要引用的局部变量的名称。</returns>
    </member>
    <member name="T:System.CodeDom.FieldDirection">
      <summary>定义用于指示参数的方向和参数声明的标识符。</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.In">
      <summary>传入字段。</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.Out">
      <summary>输出字段。</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.Ref">
      <summary>传址方式字段。</summary>
    </member>
    <member name="T:System.CodeDom.MemberAttributes">
      <summary>定义类成员的成员属性标识符。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Abstract">
      <summary>抽象成员。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Final">
      <summary>在派生类中不能重写的成员。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Static">
      <summary>静态成员。在 Visual Basic 中，这等效于 Shared 关键字。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Override">
      <summary>重写基类成员的成员。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Const">
      <summary>常数成员。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.New">
      <summary>新成员。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Overloaded">
      <summary>重载成员。某些语言（如 Visual Basic）要求显式指示重载成员。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Assembly">
      <summary>在同一程序集中任何类都可以访问的成员。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.FamilyAndAssembly">
      <summary>可以在其类以及其在同一程序集中的派生类中访问的成员。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Family">
      <summary>可以在其类以及其派生类家族内访问的成员。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.FamilyOrAssembly">
      <summary>可以在其类、其在任何程序集中的派生类以及在同一程序集的任何类中均访问的成员。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Private">
      <summary>私有成员。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Public">
      <summary>公共成员。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.AccessMask">
      <summary>访问屏蔽。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.ScopeMask">
      <summary>范围屏蔽。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.VTableMask">
      <summary>VTable 屏蔽。</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeCompiler">
      <summary>提供 <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> 接口的示例实现。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.Compiler.CodeCompiler" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.CmdArgsFromParameters(System.CodeDom.Compiler.CompilerParameters)">
      <summary>从指定的 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 获取要传递到编译器的命令参数。</summary>
      <returns>命令参数。</returns>
      <param name="options">指示编译器选项的 <see cref="T:System.CodeDom.Compiler.CompilerParameters" />。</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeCompiler.CompilerName">
      <summary>获取编译器可执行文件的名称。</summary>
      <returns>编译器可执行文件的名称。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeCompiler.FileExtension">
      <summary>获取用于源文件的文件扩展名。</summary>
      <returns>用于源文件的文件扩展名。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary>使用指定选项编译指定的编译单元，并返回编译结果。</summary>
      <returns>编译的结果。</returns>
      <param name="options">一个指示编译器选项的 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象。</param>
      <param name="e">一个指示要编译的源的 <see cref="T:System.CodeDom.CodeCompileUnit" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 为 &lt;languageKeyword&gt;null&lt;/languageKeyword&gt;。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>使用指定选项编译指定的编译单元，并返回编译结果。</summary>
      <returns>编译的结果。</returns>
      <param name="options">一个指示编译器选项的 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象。</param>
      <param name="ea">指示要编译的源的 <see cref="T:System.CodeDom.CodeCompileUnit" /> 对象数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 为 null。- 或 -<paramref name="ea" /> 为 &lt;languageKeyword&gt;null&lt;/languageKeyword&gt;。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>使用指定选项编译指定文件，并返回编译结果。</summary>
      <returns>编译的结果。</returns>
      <param name="options">一个指示编译器选项的 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象。</param>
      <param name="fileName">要编译的文件名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 为 &lt;languageKeyword&gt;null&lt;/languageKeyword&gt;。- 或 -<paramref name="fileName" /> 为 &lt;languageKeyword&gt;null&lt;/languageKeyword&gt;。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>使用指定选项编译指定文件，并返回编译结果。</summary>
      <returns>编译的结果。</returns>
      <param name="options">一个指示编译器选项的 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象。</param>
      <param name="fileNames">指示要编译的文件的文件名的字符串数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 为 null。- 或 -<paramref name="fileNames" /> 为 &lt;languageKeyword&gt;null&lt;/languageKeyword&gt;。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>使用指定选项编译指定的源代码字符串，并返回编译结果。</summary>
      <returns>编译的结果。</returns>
      <param name="options">一个指示编译器选项的 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象。</param>
      <param name="source">要编译的源代码字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>使用指定选项编译指定的源代码字符串，并返回编译结果。</summary>
      <returns>编译的结果。</returns>
      <param name="options">一个指示编译器选项的 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象。</param>
      <param name="sources">包含要编译的源代码的字符串数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 为 null。- 或 -<paramref name="sources" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.GetResponseFileCmdArgs(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>获取调用编译器以生成响应文件时使用的命令参数。</summary>
      <returns>用于生成响应文件的命令参数；如果没有响应文件参数，则为 null。</returns>
      <param name="options">一个指示编译器选项的 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象。</param>
      <param name="cmdArgs">命令参数字符串。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.JoinStringArray(System.String[],System.String)">
      <summary>联接指定的字符串数组。</summary>
      <returns>串联字符串。</returns>
      <param name="sa">要联接的字符串数组。</param>
      <param name="separator">要使用的分隔符。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.ProcessCompilerOutputLine(System.CodeDom.Compiler.CompilerResults,System.String)">
      <summary>处理指定 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 中的指定行。</summary>
      <param name="results">指示编译结果的 <see cref="T:System.CodeDom.Compiler.CompilerResults" />。</param>
      <param name="line">要处理的行。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)" />。</summary>
      <returns>编译的结果。</returns>
      <param name="options">一个指示编译器选项的 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象。</param>
      <param name="e">指示要编译的源的 <see cref="T:System.CodeDom.CodeCompileUnit" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>有关此成员的说明，请参见 <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])" />。</summary>
      <returns>编译的结果。</returns>
      <param name="options">一个指示编译器选项的 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象。</param>
      <param name="ea">指示要编译的源的 <see cref="T:System.CodeDom.CodeCompileUnit" /> 对象数组。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)" />。</summary>
      <returns>编译的结果。</returns>
      <param name="options">一个指示编译器选项的 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象。</param>
      <param name="fileName">要编译的文件名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>有关此成员的说明，请参见 <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])" />。</summary>
      <returns>编译的结果。</returns>
      <param name="options">一个指示编译器选项的 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象。</param>
      <param name="fileNames">指示要编译的文件名的字符串数组。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)" />。</summary>
      <returns>编译的结果。</returns>
      <param name="options">一个指示编译器选项的 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象。</param>
      <param name="source">一个指示要编译的源代码的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>有关此成员的说明，请参见 <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])" />。</summary>
      <returns>编译的结果。</returns>
      <param name="options">一个指示编译器选项的 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象。</param>
      <param name="sources">指示要编译的源代码的字符串数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 为 null。</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeDomProvider">
      <summary>为 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实现提供基类。该类为抽象类。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>基于包含在 <see cref="T:System.CodeDom.CodeCompileUnit" /> 对象的指定数组中的 <see cref="N:System.CodeDom" /> 树，使用指定的编译器设置编译程序集。</summary>
      <returns>一个 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 对象，它指示编译的结果。</returns>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示编译的设置。</param>
      <param name="compilationUnits">
        <see cref="T:System.CodeDom.CodeCompileUnit" /> 类型数组，指示要编译的代码。</param>
      <exception cref="T:System.NotImplementedException">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> 方法均不在派生类中重写。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>从包含在指定文件中的源代码，使用指定的编译器设置编译程序集。</summary>
      <returns>指示编译结果的 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 对象。</returns>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示编译的设置。</param>
      <param name="fileNames">要编译的文件名称的数组。</param>
      <exception cref="T:System.NotImplementedException">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> 方法均不在派生类中重写。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>从包含源代码的字符串的指定数组，使用指定的编译器设置编译程序集。</summary>
      <returns>指示编译结果的 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 对象。</returns>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示此编译的编译器设置。</param>
      <param name="sources">要编译的源代码字符串的数组。</param>
      <exception cref="T:System.NotImplementedException">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> 方法均不在派生类中重写。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler">
      <summary>在派生类中重写时，创建一个新的代码编译器。</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />，可用于编译基于 <see cref="N:System.CodeDom" /> 的源代码表示形式。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
      <summary>创建指定值的转义标识符。</summary>
      <returns>值的转义标识符。</returns>
      <param name="value">要为其创建转义标识符的字符串。</param>
      <exception cref="T:System.NotImplementedException">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法均不在派生类中重写。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator">
      <summary>在派生类中重写时，创建一个新的代码生成器。</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />，可用于生成基于 <see cref="N:System.CodeDom" /> 的源代码表示形式。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)">
      <summary>在派生类中重写时，使用指定的 <see cref="T:System.IO.TextWriter" /> 创建新的代码生成器以用于输出。</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />，可用于生成基于 <see cref="N:System.CodeDom" /> 的源代码表示形式。</returns>
      <param name="output">用于输出的 <see cref="T:System.IO.TextWriter" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)">
      <summary>在派生类中重写时，使用指定文件名创建新的代码生成器以用于输出。</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />，可用于生成基于 <see cref="N:System.CodeDom" /> 的源代码表示形式。</returns>
      <param name="fileName">要输出到的文件名。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser">
      <summary>在派生类中重写时，创建一个新的代码分析器。</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeParser" />，可用于分析源代码。此基实现总是返回 null。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
      <summary>获取指定语言的 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实例。</summary>
      <returns>为指定语言名称实现的 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实例。</returns>
      <param name="language">语言名称。</param>
      <exception cref="T:System.Configuration.ConfigurationException">
        <paramref name="language" /> 在此计算机上没有已配置的提供程序。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="language" /> 为 null。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
      <summary>为指定的值创建有效标识符。</summary>
      <returns>指定值的有效标识符。</returns>
      <param name="value">要为其生成有效标识符的字符串。</param>
      <exception cref="T:System.NotImplementedException">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法均不在派生类中重写。</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension">
      <summary>获取用于当前语言的源代码文件的默认文件扩展名。</summary>
      <returns>与当前语言的源文件扩展名相对应的文件扩展名。此基实现总是返回 <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>为指定的代码文档对象模型 (CodeDOM) 编译单元生成代码，并使用指定的选项将代码发送到指定的文本编写器。</summary>
      <param name="compileUnit">要为其生成代码的 <see cref="T:System.CodeDom.CodeCompileUnit" />。</param>
      <param name="writer">输出代码将被发送到的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，指示用于生成代码的选项。</param>
      <exception cref="T:System.NotImplementedException">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法均不在派生类中重写。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>为指定的代码文档对象模型 (CodeDOM) 表达式生成代码，并使用指定的选项将代码发送到指定的文本编写器。</summary>
      <param name="expression">一个 <see cref="T:System.CodeDom.CodeExpression" /> 对象，指示要为其生成代码的表达式。</param>
      <param name="writer">输出代码将被发送到的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，指示用于生成代码的选项。</param>
      <exception cref="T:System.NotImplementedException">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法均不在派生类中重写。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>为指定的代码文档对象模型 (CodeDOM) 成员声明生成代码，并使用指定的选项将代码发送到指定的文本编写器。</summary>
      <param name="member">一个 <see cref="T:System.CodeDom.CodeTypeMember" /> 对象，指示要为其生成代码的成员。</param>
      <param name="writer">输出代码将被发送到的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，指示用于生成代码的选项。</param>
      <exception cref="T:System.NotImplementedException">此方法不会在派生类中被重写。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>为指定的代码文档对象模型 (CodeDOM) 命名空间生成代码，并使用指定的选项将代码发送到指定的文本编写器。</summary>
      <param name="codeNamespace">一个 <see cref="T:System.CodeDom.CodeNamespace" /> 对象，指示要为其生成代码的命名空间。</param>
      <param name="writer">输出代码将被发送到的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，指示用于生成代码的选项。</param>
      <exception cref="T:System.NotImplementedException">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法均不在派生类中重写。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>为指定的代码文档对象模型 (CodeDOM) 语句生成代码，并使用指定的选项将代码发送到指定的文本编写器。</summary>
      <param name="statement">
        <see cref="T:System.CodeDom.CodeStatement" />，包含要为其生成代码的 CodeDOM 元素。</param>
      <param name="writer">输出代码将被发送到的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，指示用于生成代码的选项。</param>
      <exception cref="T:System.NotImplementedException">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法均不在派生类中重写。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>为指定的代码文档对象模型 (CodeDOM) 类型声明生成代码，并使用指定的选项将代码发送到指定的文本编写器。</summary>
      <param name="codeType">一个 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 对象，指示要为其生成代码的类型。</param>
      <param name="writer">输出代码将被发送到的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，指示用于生成代码的选项。</param>
      <exception cref="T:System.NotImplementedException">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法均不在派生类中重写。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
      <summary>返回此计算机的语言提供程序和编译器配置设置。</summary>
      <returns>一个 <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 类型的数组，表示所有配置的 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实现的设置。</returns>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
      <summary>返回指定语言的语言提供程序和编译器配置设置。</summary>
      <returns>一个 <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 对象，由已配置的 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实现的设置填充。</returns>
      <param name="language">语言名称。</param>
      <exception cref="T:System.Configuration.ConfigurationException">
        <paramref name="language" /> 在此计算机上没有已配置的提供程序。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="language" /> 为 null。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)">
      <summary>获取指定数据类型的 <see cref="T:System.ComponentModel.TypeConverter" />。</summary>
      <returns>指定类型的 <see cref="T:System.ComponentModel.TypeConverter" />；如果无法找到指定类型的 <see cref="T:System.ComponentModel.TypeConverter" />，则为 null。</returns>
      <param name="type">要为其检索类型转换器的对象的类型。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
      <summary>返回与指定文件扩展名关联的语言名称，如 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 编译器配置节中所配置的那样。</summary>
      <returns>与文件扩展名关联的语言名称，如 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 编译器配置设置中所配置的那样。</returns>
      <param name="extension">文件扩展名。</param>
      <exception cref="T:System.Configuration.ConfigurationException">
        <paramref name="extension" /> 在此计算机上没有已配置的语言提供程序。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="extension" /> 为 null。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>获取由指定的 <see cref="T:System.CodeDom.CodeTypeReference" /> 指示的类型。</summary>
      <returns>指定类型的文本表示形式，针对此代码生成器生成代码时所用的语言进行了格式设置。例如，在 Visual Basic 中，为 <see cref="T:System.Int32" /> 类型传入 <see cref="T:System.CodeDom.CodeTypeReference" /> 将返回“Integer”。</returns>
      <param name="type">指示返回类型的 <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <exception cref="T:System.NotImplementedException">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法均不在派生类中重写。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
      <summary>测试文件扩展名是否在计算机上配置了关联的 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实现。</summary>
      <returns>
如果为指定的文件扩展名配置了 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实现，则为 true；否则，为 false。</returns>
      <param name="extension">文件扩展名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="extension" /> 为null。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
      <summary>测试某语言是否已在计算机上配置了 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实现。</summary>
      <returns>
如果为指定语言配置了 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实现，则为 true；否则，为 false。</returns>
      <param name="language">语言名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="language" /> 为null。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
      <summary>返回一个值，该值指示指定的值是否是当前语言的有效标识符。</summary>
      <returns>
如果 <paramref name="value" /> 参数是有效标识符，则为 true；否则为 false。</returns>
      <param name="value">要验证为一个有效标识符的值。</param>
      <exception cref="T:System.NotImplementedException">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法均不在派生类中重写。</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeDomProvider.LanguageOptions">
      <summary>获取语言功能标识符。</summary>
      <returns>指示语言的特殊功能的 <see cref="T:System.CodeDom.Compiler.LanguageOptions" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
      <summary>将从指定文本流读取的代码编译进 <see cref="T:System.CodeDom.CodeCompileUnit" />。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeCompileUnit" />，包含已分析代码的表示形式。</returns>
      <param name="codeStream">用于读取待分析代码的 <see cref="T:System.IO.TextReader" /> 对象。</param>
      <exception cref="T:System.NotImplementedException">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法均不在派生类中重写。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>返回一个值，该值指示是否提供了指定的代码生成支持。</summary>
      <returns>
如果提供了指定的代码生成支持，则为 true；否则为 false。</returns>
      <param name="generatorSupport">一个 <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> 对象，指示要验证的代码生成支持类型。</param>
      <exception cref="T:System.NotImplementedException">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法均不在派生类中重写。</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeGenerator">
      <summary>提供 <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> 接口的示例实现。该类为抽象类。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.Compiler.CodeGenerator" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ContinueOnNewLine(System.String)">
      <summary>生成行继续符并在新的一行上输出指定的字符串。</summary>
      <param name="st">要写在新行上的字符串。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.CreateEscapedIdentifier(System.String)">
      <summary>创建指定值的转义标识符。</summary>
      <returns>值的转义标识符。</returns>
      <param name="value">要为其创建转义标识符的字符串。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.CreateValidIdentifier(System.String)">
      <summary>为指定的值创建有效标识符。</summary>
      <returns>该值的有效标识符。</returns>
      <param name="value">要为其创建有效标识符的字符串。</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentClass">
      <summary>获取当前类的代码类型声明。</summary>
      <returns>当前类的 <see cref="T:System.CodeDom.CodeTypeDeclaration" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentMember">
      <summary>获取类的当前成员。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeMember" />，指示类的当前成员。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentMemberName">
      <summary>获取当前成员名称。</summary>
      <returns>当前成员名称。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentTypeName">
      <summary>获取当前类名。</summary>
      <returns>当前类名。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArgumentReferenceExpression(System.CodeDom.CodeArgumentReferenceExpression)">
      <summary>为指定的参数引用表达式生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" />，指示要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayCreateExpression(System.CodeDom.CodeArrayCreateExpression)">
      <summary>为指定的数组创建表达式生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeArrayCreateExpression" />，指示要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayIndexerExpression(System.CodeDom.CodeArrayIndexerExpression)">
      <summary>为指定的数组索引器表达式生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeArrayIndexerExpression" />，指示要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAssignStatement(System.CodeDom.CodeAssignStatement)">
      <summary>为指定的赋值语句生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeAssignStatement" />，指示要为其生成代码的语句。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttachEventStatement(System.CodeDom.CodeAttachEventStatement)">
      <summary>为指定的附加事件语句生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeAttachEventStatement" />，指示要为其生成代码的语句。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsEnd(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>为指定的属性块结尾生成代码。</summary>
      <param name="attributes">
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />，指示要为其生成代码的属性块结尾。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsStart(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>为指定的属性块起始生成代码。</summary>
      <param name="attributes">
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />，指示要为其生成代码的属性块起始。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateBaseReferenceExpression(System.CodeDom.CodeBaseReferenceExpression)">
      <summary>为指定的基引用表达式生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeBaseReferenceExpression" />，指示要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateBinaryOperatorExpression(System.CodeDom.CodeBinaryOperatorExpression)">
      <summary>为指定的二进制运算符表达式生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" />，指示要为其生成代码的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCastExpression(System.CodeDom.CodeCastExpression)">
      <summary>为指定的转换表达式生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeCastExpression" />，指示要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>使用指定的文本编写器和代码生成器选项为指定的类成员生成代码。</summary>
      <param name="member">要为其生成代码的 <see cref="T:System.CodeDom.CodeTypeMember" />。</param>
      <param name="writer">要写入的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options">生成代码时要使用的 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.CodeDom.Compiler.CodeGenerator.Output" /> 属性不为 null。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateComment(System.CodeDom.CodeComment)">
      <summary>为指定的注释生成代码。</summary>
      <param name="e">要为其生成代码的 <see cref="T:System.CodeDom.CodeComment" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatement(System.CodeDom.CodeCommentStatement)">
      <summary>为指定的注释语句生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeCommentStatement" />，指示要为其生成代码的语句。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatements(System.CodeDom.CodeCommentStatementCollection)">
      <summary>为指定的注释语句生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeCommentStatementCollection" />，指示要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnit(System.CodeDom.CodeCompileUnit)">
      <summary>为指定的编译单元生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeCompileUnit" />，指示要为其生成代码的编译单元。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitEnd(System.CodeDom.CodeCompileUnit)">
      <summary>为编译单元结尾生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeCompileUnit" />，指示要为其生成代码的编译单元。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitStart(System.CodeDom.CodeCompileUnit)">
      <summary>为编译单元起始生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeCompileUnit" />，指示要为其生成代码的编译单元。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateConditionStatement(System.CodeDom.CodeConditionStatement)">
      <summary>为指定的条件语句生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeConditionStatement" />，指示要为其生成代码的语句。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateConstructor(System.CodeDom.CodeConstructor,System.CodeDom.CodeTypeDeclaration)">
      <summary>为指定的构造函数生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeConstructor" />，指示要为其生成代码的构造函数。</param>
      <param name="c">
        <see cref="T:System.CodeDom.CodeTypeDeclaration" />，指示此构造函数构造的对象类型。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDecimalValue(System.Decimal)">
      <summary>为指定的十进制值生成代码。</summary>
      <param name="d">为其生成代码的十进制值。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDefaultValueExpression(System.CodeDom.CodeDefaultValueExpression)">
      <summary>为指定的代码默认值表达式生成代码。</summary>
      <param name="e">要为其生成代码的 <see cref="T:System.CodeDom.CodeDefaultValueExpression" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateCreateExpression(System.CodeDom.CodeDelegateCreateExpression)">
      <summary>为指定的委托创建表达式生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeDelegateCreateExpression" />，指示要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateInvokeExpression(System.CodeDom.CodeDelegateInvokeExpression)">
      <summary>为指定的委托调用表达式生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" />，指示要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectionExpression(System.CodeDom.CodeDirectionExpression)">
      <summary>为指定的方向表达式生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeDirectionExpression" />，指示要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectives(System.CodeDom.CodeDirectiveCollection)">
      <summary>为指定的代码指令生成代码。</summary>
      <param name="directives">要为其生成代码的 <see cref="T:System.CodeDom.CodeDirectiveCollection" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDoubleValue(System.Double)">
      <summary>为双精度浮点数字生成代码。</summary>
      <param name="d">为其生成代码的 <see cref="T:System.Double" /> 值。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEntryPointMethod(System.CodeDom.CodeEntryPointMethod,System.CodeDom.CodeTypeDeclaration)">
      <summary>为指定的入口点方法生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeEntryPointMethod" />，指示代码的入口点。</param>
      <param name="c">
        <see cref="T:System.CodeDom.CodeTypeDeclaration" />，指示声明类型的代码。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEvent(System.CodeDom.CodeMemberEvent,System.CodeDom.CodeTypeDeclaration)">
      <summary>为指定的事件生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeMemberEvent" />，指示要为其生成代码的成员事件。</param>
      <param name="c">
        <see cref="T:System.CodeDom.CodeTypeDeclaration" />，指示发生此事件的对象类型。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEventReferenceExpression(System.CodeDom.CodeEventReferenceExpression)">
      <summary>为指定的事件引用表达式生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeEventReferenceExpression" />，指示要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpression(System.CodeDom.CodeExpression)">
      <summary>为指定的代码表达式生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeExpression" />，指示要为其生成代码的代码表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> 不是有效的 <see cref="T:System.CodeDom.CodeStatement" />。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpressionStatement(System.CodeDom.CodeExpressionStatement)">
      <summary>为指定的表达式语句生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeExpressionStatement" />，指示要为其生成代码的语句。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateField(System.CodeDom.CodeMemberField)">
      <summary>为指定的成员字段生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeMemberField" />，指示要为其生成代码的字段。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateFieldReferenceExpression(System.CodeDom.CodeFieldReferenceExpression)">
      <summary>为指定的字段引用表达式生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeFieldReferenceExpression" />，指示要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateGotoStatement(System.CodeDom.CodeGotoStatement)">
      <summary>为指定的 goto 语句生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeGotoStatement" />，指示要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateIndexerExpression(System.CodeDom.CodeIndexerExpression)">
      <summary>为指定的索引器表达式生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeIndexerExpression" />，指示要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateIterationStatement(System.CodeDom.CodeIterationStatement)">
      <summary>为指定的迭代语句生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeIterationStatement" />，指示要为其生成代码的语句。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLabeledStatement(System.CodeDom.CodeLabeledStatement)">
      <summary>为指定的标记语句生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeLabeledStatement" />，指示要为其生成代码的语句。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaEnd(System.CodeDom.CodeLinePragma)">
      <summary>为指定的行杂注结尾生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeLinePragma" />，指示要为其生成代码的行杂注结尾。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaStart(System.CodeDom.CodeLinePragma)">
      <summary>为指定的行杂注起始生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeLinePragma" />，指示要为其生成代码的行杂注起始。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethod(System.CodeDom.CodeMemberMethod,System.CodeDom.CodeTypeDeclaration)">
      <summary>为指定的方法生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeMemberMethod" />，指示要为其生成代码的成员方法。</param>
      <param name="c">
        <see cref="T:System.CodeDom.CodeTypeDeclaration" />，指示发生此方法的对象类型。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodInvokeExpression(System.CodeDom.CodeMethodInvokeExpression)">
      <summary>为指定的方法调用表达式生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeMethodInvokeExpression" />，指示要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReferenceExpression(System.CodeDom.CodeMethodReferenceExpression)">
      <summary>为指定的方法引用表达式生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />，指示要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReturnStatement(System.CodeDom.CodeMethodReturnStatement)">
      <summary>为指定的方法返回语句生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeMethodReturnStatement" />，指示要为其生成代码的语句。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespace(System.CodeDom.CodeNamespace)">
      <summary>为指定的命名空间生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeNamespace" />，指示要为其生成代码的命名空间。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceEnd(System.CodeDom.CodeNamespace)">
      <summary>为命名空间结尾生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeNamespace" />，指示要为其生成代码的命名空间。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImport(System.CodeDom.CodeNamespaceImport)">
      <summary>为指定的命名空间导入生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeNamespaceImport" />，指示要为其生成代码的命名空间导入。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImports(System.CodeDom.CodeNamespace)">
      <summary>为指定的命名空间导入生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeNamespace" />，指示要为其生成代码的命名空间导入。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaces(System.CodeDom.CodeCompileUnit)">
      <summary>为指定编译单元中的命名空间生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeCompileUnit" />，指示要为其生成命名空间的编译单元。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceStart(System.CodeDom.CodeNamespace)">
      <summary>为命名空间起始生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeNamespace" />，指示要为其生成代码的命名空间。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateObjectCreateExpression(System.CodeDom.CodeObjectCreateExpression)">
      <summary>为指定的对象创建表达式生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeObjectCreateExpression" />，指示要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateParameterDeclarationExpression(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>为指定的参数声明表达式生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />，指示要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePrimitiveExpression(System.CodeDom.CodePrimitiveExpression)">
      <summary>为指定的基元表达式生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodePrimitiveExpression" />，指示要为其生成代码的表达式。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> 使用无效的数据类型。只有以下数据类型才是有效的：stringcharbyteInt16Int32Int64SingleDoubleDecimal</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateProperty(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeTypeDeclaration)">
      <summary>为指定的属性生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeMemberProperty" />，指示要为其生成代码的属性。</param>
      <param name="c">
        <see cref="T:System.CodeDom.CodeTypeDeclaration" />，指示发生此属性的对象类型。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertyReferenceExpression(System.CodeDom.CodePropertyReferenceExpression)">
      <summary>为指定的属性引用表达式生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodePropertyReferenceExpression" />，指示要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertySetValueReferenceExpression(System.CodeDom.CodePropertySetValueReferenceExpression)">
      <summary>为指定的属性设置值引用表达式生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodePropertySetValueReferenceExpression" />，指示要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateRemoveEventStatement(System.CodeDom.CodeRemoveEventStatement)">
      <summary>为指定的移除事件语句生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeRemoveEventStatement" />，指示要为其生成代码的语句。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSingleFloatValue(System.Single)">
      <summary>为单精度浮点数字生成代码。</summary>
      <param name="s">为其生成代码的 <see cref="T:System.Single" /> 值。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetCompileUnit(System.CodeDom.CodeSnippetCompileUnit)">
      <summary>输出指定的原义代码片断编译单元的代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeSnippetCompileUnit" />，指示要为其生成代码的原义代码片段编译单元。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetExpression(System.CodeDom.CodeSnippetExpression)">
      <summary>输出指定的原义代码片断表达式的代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeSnippetExpression" />，指示要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetMember(System.CodeDom.CodeSnippetTypeMember)">
      <summary>输出指定的原义代码片断类成员的代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeSnippetTypeMember" />，指示要为其生成代码的成员。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetStatement(System.CodeDom.CodeSnippetStatement)">
      <summary>输出指定的原义代码片断语句的代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeSnippetStatement" />，指示要为其生成代码的语句。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatement(System.CodeDom.CodeStatement)">
      <summary>为指定的语句生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeStatement" />，指示要为其生成代码的语句。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> 不是有效的 <see cref="T:System.CodeDom.CodeStatement" />。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatements(System.CodeDom.CodeStatementCollection)">
      <summary>为指定的语句集合生成代码。</summary>
      <param name="stms">
        <see cref="T:System.CodeDom.CodeStatementCollection" />，指示要为其生成代码的语句。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateThisReferenceExpression(System.CodeDom.CodeThisReferenceExpression)">
      <summary>为指定的引用表达式生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeThisReferenceExpression" />，指示要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateThrowExceptionStatement(System.CodeDom.CodeThrowExceptionStatement)">
      <summary>为指定的引发异常语句生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeThrowExceptionStatement" />，指示要为其生成代码的语句。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTryCatchFinallyStatement(System.CodeDom.CodeTryCatchFinallyStatement)">
      <summary>为指定的 try...catch...finally 语句生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" />，指示要为其生成代码的语句。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeConstructor(System.CodeDom.CodeTypeConstructor)">
      <summary>为指定的类构造函数生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeTypeConstructor" />，指示要为其生成代码的类构造函数。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeEnd(System.CodeDom.CodeTypeDeclaration)">
      <summary>为指定的结尾类生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeTypeDeclaration" />，指示要为其生成代码的类结尾。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeOfExpression(System.CodeDom.CodeTypeOfExpression)">
      <summary>为指定的表达式类型生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeTypeOfExpression" />，指示要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeReferenceExpression(System.CodeDom.CodeTypeReferenceExpression)">
      <summary>为指定的类型引用表达式生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeTypeReferenceExpression" />，指示要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypes(System.CodeDom.CodeNamespace)">
      <summary>为指定的命名空间及其包含的类生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeNamespace" />，指示要为其生成类的命名空间。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeStart(System.CodeDom.CodeTypeDeclaration)">
      <summary>为指定的起始类生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeTypeDeclaration" />，指示要为其生成代码的类起始。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableDeclarationStatement(System.CodeDom.CodeVariableDeclarationStatement)">
      <summary>为指定的变量声明语句生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" />，指示要为其生成代码的语句。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableReferenceExpression(System.CodeDom.CodeVariableReferenceExpression)">
      <summary>为指定的变量引用表达式生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeVariableReferenceExpression" />，指示要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>获取指定数据类型的名称。</summary>
      <returns>数据类型引用的名称。</returns>
      <param name="value">要返回其名称的类型的 <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Indent">
      <summary>获取或设置每个缩进级别的缩进空间量。</summary>
      <returns>每个缩进级别的缩进间隔数。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentClass">
      <summary>获取一个值，该值指示正在生成的当前对象是否为类。</summary>
      <returns>
            如果当前对象是类，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentDelegate">
      <summary>获取一个值，该值指示正在生成的当前对象是否为委托。</summary>
      <returns>
            如果当前对象是委托，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentEnum">
      <summary>获取一个值，该值指示正在生成的当前对象是否为枚举。</summary>
      <returns>
            如果当前对象是枚举，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentInterface">
      <summary>获取一个值，该值指示正在生成的当前对象是否为接口。</summary>
      <returns>
            如果当前对象是接口，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentStruct">
      <summary>获取一个值，该值指示生成的当前对象是否为值类型或结构。</summary>
      <returns>
            如果当前对象为值类型或结构，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.IsValidIdentifier(System.String)">
      <summary>获取一个值，该值指示指定的值是否为有效的标识符。</summary>
      <returns>
            如果该值是有效的标识符，则为 true；否则为 false。</returns>
      <param name="value">要测试其是否与有效的标识符发生冲突的值。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.IsValidLanguageIndependentIdentifier(System.String)">
      <summary>获取一个值，该值指示指定的字符串是否为有效的标识符。</summary>
      <returns>
            如果指定的字符串是有效标识符，则为 true；否则为 false。</returns>
      <param name="value">要测试其有效性的字符串。</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.NullToken">
      <summary>获取表示 null 的标记。</summary>
      <returns>表示 null 的标记。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Options">
      <summary>获取供代码生成器使用的选项。</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> 对象，指示供代码生成器使用的选项。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Output">
      <summary>获取用于输出的 <see cref="T:System.IO.TextWriter" />。</summary>
      <returns>用于输出的 <see cref="T:System.IO.TextWriter" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeArgument(System.CodeDom.CodeAttributeArgument)">
      <summary>输出属性块中的一个参数。</summary>
      <param name="arg">
        <see cref="T:System.CodeDom.CodeAttributeArgument" />，指示要为其生成代码的属性参数。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeDeclarations(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>为指定的属性声明集合生成代码。</summary>
      <param name="attributes">
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />，指示要为其生成代码的属性。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputDirection(System.CodeDom.FieldDirection)">
      <summary>为指定的 <see cref="T:System.CodeDom.FieldDirection" /> 生成代码。</summary>
      <param name="dir">指示字段属性的 <see cref="T:System.CodeDom.FieldDirection" /> 枚举值。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection)">
      <summary>为指定的表达式列表生成代码。</summary>
      <param name="expressions">
        <see cref="T:System.CodeDom.CodeExpressionCollection" />，指示要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection,System.Boolean)">
      <summary>为指定的表达式列表生成代码。</summary>
      <param name="expressions">
        <see cref="T:System.CodeDom.CodeExpressionCollection" />，指示要为其生成代码的表达式。</param>
      <param name="newlineBetweenItems">
                如果在每项之后插入新行，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputFieldScopeModifier(System.CodeDom.MemberAttributes)">
      <summary>输出对应于指定属性的字段范围修饰符。</summary>
      <param name="attributes">指示属性的 <see cref="T:System.CodeDom.MemberAttributes" /> 枚举值。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputIdentifier(System.String)">
      <summary>输出指定的标识符。</summary>
      <param name="ident">要输出的标识符。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberAccessModifier(System.CodeDom.MemberAttributes)">
      <summary>为指定的成员访问修饰符生成代码。</summary>
      <param name="attributes">
        <see cref="T:System.CodeDom.MemberAttributes" /> 枚举值，指示要为其生成代码的成员访问修饰符。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberScopeModifier(System.CodeDom.MemberAttributes)">
      <summary>为指定的成员范围修饰符生成代码。</summary>
      <param name="attributes">
        <see cref="T:System.CodeDom.MemberAttributes" /> 枚举值，指示要为其生成代码的成员范围修饰符。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputOperator(System.CodeDom.CodeBinaryOperatorType)">
      <summary>为指定的运算符生成代码。</summary>
      <param name="op">
        <see cref="T:System.CodeDom.CodeBinaryOperatorType" />，指示要为其生成代码的运算符。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputParameters(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary>为指定的参数生成代码。</summary>
      <param name="parameters">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />，指示要为其生成代码的参数声明表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputType(System.CodeDom.CodeTypeReference)">
      <summary>为指定的类型生成代码。</summary>
      <param name="typeRef">要为其生成代码的类型。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeAttributes(System.Reflection.TypeAttributes,System.Boolean,System.Boolean)">
      <summary>为指定的类型属性生成代码。</summary>
      <param name="attributes">
        <see cref="T:System.Reflection.TypeAttributes" /> 枚举值，指示要为其生成代码的类型属性。</param>
      <param name="isStruct">
                如果类型是结构，则为 true；否则为 false。</param>
      <param name="isEnum">
                如果类型是枚举，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeNamePair(System.CodeDom.CodeTypeReference,System.String)">
      <summary>为指定的对象类型和名称对生成代码。</summary>
      <param name="typeRef">类型。</param>
      <param name="name">对象的名称。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.QuoteSnippetString(System.String)">
      <summary>通过用转义码格式化指定的字符串来转换它。</summary>
      <returns>已转换的字符串。</returns>
      <param name="value">要转换的字符串。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>获取一个值，该值指示是否提供了指定的代码生成支持。</summary>
      <returns>
            如果提供了指定的代码生成支持，则为 true；否则为 false。</returns>
      <param name="support">
        <see cref="T:System.CodeDom.Compiler.GeneratorSupport" />，指示要测试的代码生成支持类型。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateEscapedIdentifier(System.String)">
      <summary>创建指定值的转义标识符。</summary>
      <returns>值的转义标识符。</returns>
      <param name="value">要为其创建转义标识符的字符串。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateValidIdentifier(System.String)">
      <summary>为指定的值创建有效标识符。</summary>
      <returns>指定值的有效标识符。</returns>
      <param name="value">要为其生成有效标识符的字符串。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>为指定的代码文档对象模型 (CodeDOM) 编译单元生成代码，并使用指定的选项将代码输出到指定的文本编写器。</summary>
      <param name="e">要为其生成代码的 <see cref="T:System.CodeDom.CodeCompileUnit" />。</param>
      <param name="w">向其中输出代码的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="o">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，指示用于生成代码的选项。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" />不可用。<paramref name="w" />可能在进行方法调用之前已被关闭。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>为指定的代码文档对象模型 (CodeDOM) 表达式生成代码，并将代码输出到指定的文本编写器。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeExpression" />，指示要为其生成代码的表达式。</param>
      <param name="w">向其中输出代码的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="o">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，指示用于生成代码的选项。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" />不可用。<paramref name="w" />可能在进行方法调用之前已被关闭。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>为指定的代码文档对象模型 (CodeDOM) 命名空间生成代码，并使用指定的选项将代码输出到指定的文本编写器。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeNamespace" />，指示要为其生成代码的命名空间。</param>
      <param name="w">向其中输出代码的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="o">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，指示用于生成代码的选项。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" />不可用。<paramref name="w" />可能在进行方法调用之前已被关闭。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>为指定的代码文档对象模型 (CodeDOM) 语句生成代码，并使用指定的选项将代码输出到指定的文本编写器。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeStatement" />，包含要翻译的 CodeDOM 元素。</param>
      <param name="w">向其中输出代码的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="o">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，指示用于生成代码的选项。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" />不可用。<paramref name="w" />可能在进行方法调用之前已被关闭。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>为指定的代码文档对象模型 (CodeDOM) 类型声明生成代码，并使用指定的选项将代码输出到指定的文本编写器。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeTypeDeclaration" />，指示要为其生成代码的类型。</param>
      <param name="w">向其中输出代码的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="o">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，指示用于生成代码的选项。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" />不可用。<paramref name="w" />可能在进行方法调用之前已被关闭。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>获取由指定的 <see cref="T:System.CodeDom.CodeTypeReference" /> 指示的类型。</summary>
      <returns>数据类型引用的名称。</returns>
      <param name="type">指示返回类型的 <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#IsValidIdentifier(System.String)">
      <summary>获取一个值，该值指示指定的值是否是当前语言的有效标识符。</summary>
      <returns>
            如果 <paramref name="value" /> 参数是有效标识符，则为 true；否则为 false。</returns>
      <param name="value">用来测试是否为有效标识符的值。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>获取一个值，该值指示该生成器是否支持指定的 <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> 对象表示的语言功能。</summary>
      <returns>
            如果支持指定的功能，则为 true；否则为 false。</returns>
      <param name="support">要为其测试生成器的功能。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#ValidateIdentifier(System.String)">
      <summary>如果指定的值不是一个有效的标识符，将引发异常。</summary>
      <param name="value">要验证的标识符。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifier(System.String)">
      <summary>如果指定的字符串不是有效的标识符，将引发异常。</summary>
      <param name="value">要测试其标识符有效性的标识符。</param>
      <exception cref="T:System.ArgumentException">如果指定的标识符无效，或与保留关键字或语言关键字冲突。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifiers(System.CodeDom.CodeObject)">
      <summary>尝试验证指定的 <see cref="T:System.CodeDom.CodeObject" /> 或 <see cref="N:System.CodeDom" /> 树中包含的每个标识符字段。</summary>
      <param name="e">测试无效标识符的 <see cref="T:System.CodeDom.CodeObject" />。</param>
      <exception cref="T:System.ArgumentException">指定的 <see cref="T:System.CodeDom.CodeObject" /> 包含无效标识符。</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeGeneratorOptions">
      <summary>表示代码生成器使用的一组选项。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGeneratorOptions.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> 类的新实例。</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.BlankLinesBetweenMembers">
      <summary>获取或设置一个值，该值指示是否在成员之间插入空行。</summary>
      <returns>
            如果应插入空行，则为 true；否则为 false。默认情况下，此属性的值为 true。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.BracingStyle">
      <summary>获取或设置用于大括号的样式。</summary>
      <returns>包含要使用的大括号样式的字符串。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.ElseOnClosing">
      <summary>获取或设置一个值，该值指示是否在前面每个 if 或 try 块的结束行处追加 else、catch 或 finally 块（包括括号）。</summary>
      <returns>
            如果应追加 else，则为 true；否则为 false。此属性的默认值为 false。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.IndentString">
      <summary>获取或设置用于缩进的字符串。</summary>
      <returns>包含用于缩进的字符的字符串。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.Item(System.String)">
      <summary>获取或设置指定索引处的对象。</summary>
      <returns>与指定名称相关联的对象。如果集合中不存在与指定名称相关联的对象，则为 null。</returns>
      <param name="index">与要检索对象相关联的名称。</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.VerbatimOrder">
      <summary>获取或设置一个值，该值指示是否按成员在成员集合中出现的顺序生成成员。</summary>
      <returns>
            如果要按成员在成员集合中出现的顺序生成成员，则为 true；否则为 false。此属性的默认值为 false。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeParser">
      <summary>提供 <see cref="T:System.CodeDom.Compiler.ICodeParser" /> 接口的空实现。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeParser.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.Compiler.CodeParser" /> 类的新实例。 </summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeParser.Parse(System.IO.TextReader)">
      <summary>将指定文本流编译到 <see cref="T:System.CodeDom.CodeCompileUnit" /> 中。</summary>
      <returns>包含了分析代码后所生成的代码模型的 <see cref="T:System.CodeDom.CodeCompileUnit" />。</returns>
      <param name="codeStream">用于读取待分析代码的 <see cref="T:System.IO.TextReader" />。 </param>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerError">
      <summary>表示编译器错误或警告。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.#ctor(System.String,System.Int32,System.Int32,System.String,System.String)">
      <summary>使用指定的文件名、行、列、错误号和错误文本初始化 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 类的新实例。</summary>
      <param name="fileName">编译器遇到错误时正在编译的文件的文件名。 </param>
      <param name="line">错误源所在的行。 </param>
      <param name="column">错误源所在的列。 </param>
      <param name="errorNumber">错误的错误号。 </param>
      <param name="errorText">错误信息文本。 </param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.Column">
      <summary>获取或设置错误源所在的列号。</summary>
      <returns>编译器遇到错误时所在的源文件列号。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.ErrorNumber">
      <summary>获取或设置错误号。</summary>
      <returns>字符串形式的错误号。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.ErrorText">
      <summary>获取或设置错误信息的文本。</summary>
      <returns>错误信息的文本。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.FileName">
      <summary>获取或设置包含导致错误的代码的源文件的文件名。</summary>
      <returns>包含导致错误的代码的源文件的文件名。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.IsWarning">
      <summary>获取或设置一个值，该值指示错误是否是警告。</summary>
      <returns>
如果错误是警告，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.Line">
      <summary>获取或设置错误源所在的行号。</summary>
      <returns>编译器遇到错误时所在的源文件行号。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.ToString">
      <summary>提供对象的 <see cref="M:System.Object.ToString" /> 方法的实现。</summary>
      <returns>编译器错误的字符串表示形式。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerErrorCollection">
      <summary>表示 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 对象的集合。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor(System.CodeDom.Compiler.CompilerError[])">
      <summary>初始化包含指定的 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 对象数组的 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 新实例。</summary>
      <param name="value">用来初始化集合的 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 对象数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor(System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary>初始化 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 类的新实例，该实例包含指定 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 的内容。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 对象，用来初始化集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 &lt;languageKeyword&gt;null&lt;/languageKeyword&gt;。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Add(System.CodeDom.Compiler.CompilerError)">
      <summary>将指定的 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 对象添加到错误集合中。</summary>
      <returns>新元素位置处插入的索引。</returns>
      <param name="value">要添加的 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 对象。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.AddRange(System.CodeDom.Compiler.CompilerError[])">
      <summary>将数组元素复制到错误集合的末尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.Compiler.CompilerError" /> 类型的数组，其中包含要添加到集合中的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 &lt;languageKeyword&gt;null&lt;/languageKeyword&gt;。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.AddRange(System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary>将指定编译器的错误集合内容添加到错误集合的末尾。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 对象，其中包含要添加到集合中的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 &lt;languageKeyword&gt;null&lt;/languageKeyword&gt;。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Contains(System.CodeDom.Compiler.CompilerError)">
      <summary>获取一个值，该值指示集合是否包含指定的 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 对象。</summary>
      <returns>
            如果集合中包含 <see cref="T:System.CodeDom.Compiler.CompilerError" />，则为 true；否则为 false。</returns>
      <param name="value">要定位的 <see cref="T:System.CodeDom.Compiler.CompilerError" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.CopyTo(System.CodeDom.Compiler.CompilerError[],System.Int32)">
      <summary>将集合的值复制到一维 <see cref="T:System.Array" /> 实例的指定索引位置。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，是从 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 复制的值的目标。</param>
      <param name="index">数组中复制起始处的索引。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 参数指示的数组是多维的。- 或 - <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 中的元素数目大于 <paramref name="array" /> 参数指示的数组中的 <paramref name="arrayIndex" /> 参数索引值和 <paramref name="array" /> 参数指示的数组末尾之间的可用空间。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于 <paramref name="array" /> 参数指示的数组下限。</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.HasErrors">
      <summary>获取一个值，该值指示集合是否包含错误。</summary>
      <returns>
            如果集合包含错误，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.HasWarnings">
      <summary>获取一个值，该值指示集合是否包含警告。</summary>
      <returns>
            如果集合包含警告，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.IndexOf(System.CodeDom.Compiler.CompilerError)">
      <summary>获取指定的 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 对象在集合中的索引（如果它已存在于该集合中）。</summary>
      <returns>如果 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 中存在指定 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 的索引，则为该索引；否则为 -1。</returns>
      <param name="value">要定位的 <see cref="T:System.CodeDom.Compiler.CompilerError" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Insert(System.Int32,System.CodeDom.Compiler.CompilerError)">
      <summary>将指定的 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 插入集合中的指定索引处。</summary>
      <param name="index">从零开始的索引，应在此处插入编译器错误。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.Compiler.CompilerError" />。</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.Item(System.Int32)">
      <summary>获取或设置指定索引处的 <see cref="T:System.CodeDom.Compiler.CompilerError" />。</summary>
      <returns>每个有效索引位置的 <see cref="T:System.CodeDom.Compiler.CompilerError" />。</returns>
      <param name="index">要在集合中定位的项的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数指示的索引值不在集合的有效索引范围内。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Remove(System.CodeDom.Compiler.CompilerError)">
      <summary>从集合中移除特定的 <see cref="T:System.CodeDom.Compiler.CompilerError" />。</summary>
      <param name="value">要从 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 移除的 <see cref="T:System.CodeDom.Compiler.CompilerError" />。</param>
      <exception cref="T:System.ArgumentException">未在集合中找到指定的对象。</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerInfo">
      <summary>表示语言提供程序的配置设置。无法继承此类。</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType">
      <summary>获取已配置的 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实现的类型。</summary>
      <returns>一个只读 <see cref="T:System.Type" /> 实例，它表示已配置的语言提供程序类型。</returns>
      <exception cref="T:System.Configuration.ConfigurationException">此计算机上没有配置语言提供程序。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">不能定位类型，因为它是 null 或空字符串。- 或 -不能定位类型，因为不能在配置文件中找到 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 的名称。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateDefaultCompilerParameters">
      <summary>获取语言提供程序实现的配置的编译器设置。</summary>
      <returns>一个只读 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 实例，它包含为语言提供程序配置的编译器选项和设置。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateProvider">
      <summary>返回当前语言提供程序设置的 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实例。</summary>
      <returns>与语言提供程序配置关联的 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实例。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.Equals(System.Object)">
      <summary>确定指定的对象是否表示与当前 <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 相同的语言提供程序和编译器设置。</summary>
      <returns>
如果 <paramref name="o" /> 为 <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 对象并且它的值与此实例相同，则为 true；否则为 false。</returns>
      <param name="o">将与当前 <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 进行比较的对象。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetExtensions">
      <summary>返回受语言提供程序支持的文件扩展名。</summary>
      <returns>受语言提供程序支持的文件扩展名数组。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetHashCode">
      <summary>返回当前实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 实例的 32 位有符号整数哈希代码，适合在哈希算法和数据结构（如哈希表）中使用。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetLanguages">
      <summary>获取受语言提供程序支持的语言名称。</summary>
      <returns>受语言提供程序支持的语言名称数组。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerInfo.IsCodeDomProviderTypeValid">
      <summary>返回一个值，该值指示是否在计算机上配置了语言提供程序实现。</summary>
      <returns>
如果在计算机上配置了语言提供程序实现类型，则为 true；否则，为false。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerParameters">
      <summary>表示用于调用编译器的参数。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[])">
      <summary>使用指定的程序集名称初始化 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 类的新实例。</summary>
      <param name="assemblyNames">要引用的程序集的名称。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String)">
      <summary>使用指定的程序集名称和输出文件名初始化 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 类的新实例。</summary>
      <param name="assemblyNames">要引用的程序集的名称。 </param>
      <param name="outputName">输出文件名。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String,System.Boolean)">
      <summary>使用指定的程序集名称、输出名和一个指示是否包含调试信息的值来初始化 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 类的新实例。</summary>
      <param name="assemblyNames">要引用的程序集的名称。 </param>
      <param name="outputName">输出文件名。 </param>
      <param name="includeDebugInformation">
如果应包含调试信息，则为 true；如果应排除调试信息，则为 false。 </param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.CompilerOptions">
      <summary>获取或设置调用编译器时使用的可选附加命令行参数字符串。</summary>
      <returns>用于编译器的任何附加命令行参数。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources">
      <summary>获取要在编译程序集输出时包含的 .NET Framework 资源文件。</summary>
      <returns>
        <see cref="T:System.Collections.Specialized.StringCollection" />，包含要在生成的程序集中包含的 .NET Framework 资源的文件路径。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.Evidence">
      <summary>指定一个证据对象，该对象表示要授予已编译的程序集的安全策略权限。</summary>
      <returns>表示要授予已编译的程序集的安全策略权限的 <see cref="T:System.Security.Policy.Evidence" /> 对象。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable">
      <summary>获取或设置一个值，该值指示是否生成可执行文件。</summary>
      <returns>
如果应生成可执行文件，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.GenerateInMemory">
      <summary>获取或设置一个值，该值指示是否在内存中生成输出。</summary>
      <returns>
如果编译器应在内存中生成输出，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation">
      <summary>获取或设置一个值，该值指示是否在已编译的可执行文件中包含调试信息。</summary>
      <returns>
如果应生成调试信息，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.LinkedResources">
      <summary>获取当前源中引用的 .NET Framework 资源文件。</summary>
      <returns>
        <see cref="T:System.Collections.Specialized.StringCollection" />，包含源要引用的 .NET Framework 资源的文件路径。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.MainClass">
      <summary>获取或设置主类的名称。</summary>
      <returns>主类的名称。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.OutputAssembly">
      <summary>获取或设置输出程序集的名称。</summary>
      <returns>输出程序集的名称。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies">
      <summary>获取当前项目所引用的程序集。</summary>
      <returns>
        <see cref="T:System.Collections.Specialized.StringCollection" />，包含由源引用以进行编译的程序集名称。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.TempFiles">
      <summary>获取或设置包含临时文件的集合。</summary>
      <returns>包含这些临时文件的 <see cref="T:System.CodeDom.Compiler.TempFileCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors">
      <summary>获取或设置一个值，该值指示是否将警告视为错误。</summary>
      <returns>
如果应将警告视为错误，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.UserToken">
      <summary>获取或设置在创建编译器进程时使用的用户标记。</summary>
      <returns>要使用的用户标记。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.WarningLevel">
      <summary>获取或设置使编译器中止编译的警告级别。</summary>
      <returns>使编译器中止编译的警告级别。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.Win32Resource">
      <summary>获取或设置要链接到已编译程序集中的 Win32 资源文件的文件名。</summary>
      <returns>要链接到已编译程序集中的 Win32 资源文件。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerResults">
      <summary>表示从编译器返回的编译结果。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerResults.#ctor(System.CodeDom.Compiler.TempFileCollection)">
      <summary>初始化使用指定临时文件的 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 类的新实例。</summary>
      <param name="tempFiles">一个 <see cref="T:System.CodeDom.Compiler.TempFileCollection" />，用它管理并存储对编译期间生成的中间文件的引用。</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.CompiledAssembly">
      <summary>获取或设置已编译的程序集。</summary>
      <returns>
        <see cref="T:System.Reflection.Assembly" />，指示已编译的程序集。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Errors">
      <summary>获取编译器错误和警告的集合。</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />，指示由编译产生的错误和警告（如果有）。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Evidence">
      <summary>指示证据对象，该对象表示编译的程序集的安全策略权限。</summary>
      <returns>表示编译的程序集的安全策略权限的 <see cref="T:System.Security.Policy.Evidence" /> 对象。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.NativeCompilerReturnValue">
      <summary>获取或设置编译器的返回值。</summary>
      <returns>编译器的返回值。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Output">
      <summary>获取编译器输出消息。</summary>
      <returns>包含输出消息的 <see cref="T:System.Collections.Specialized.StringCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.PathToAssembly">
      <summary>获取或设置已编译程序集的路径。</summary>
      <returns>程序集的路径；如果程序集是在内存中生成的，则为 null。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.TempFiles">
      <summary>获取或设置要使用的临时文件集合。</summary>
      <returns>一个 <see cref="T:System.CodeDom.Compiler.TempFileCollection" />，用它管理并存储对编译期间生成的中间文件的引用。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.Executor">
      <summary>为调用编译器提供命令执行功能。无法继承此类。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWait(System.String,System.CodeDom.Compiler.TempFileCollection)">
      <summary>使用指定的临时文件执行命令并等待调用返回。</summary>
      <param name="cmd">要执行的命令。 </param>
      <param name="tempFiles">一个 <see cref="T:System.CodeDom.Compiler.TempFileCollection" />，用它管理并存储对编译期间生成的中间文件的引用。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>使用指定的用户标记和临时文件执行指定的命令并等待调用返回，并将来自编译器的输出和错误信息存储在指定的字符串中。</summary>
      <returns>来自编译器的返回值。</returns>
      <param name="userToken">用来启动编译器进程的标记。 </param>
      <param name="cmd">要执行的命令。 </param>
      <param name="tempFiles">一个 <see cref="T:System.CodeDom.Compiler.TempFileCollection" />，用它管理并存储对编译期间生成的中间文件的引用。 </param>
      <param name="outputName">对字符串的引用，该字符串将存储编译器的消息输出。 </param>
      <param name="errorName">对字符串的引用，该字符串将存储遇到的一个或多个错误的名称。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>使用指定的用户标记、当前目录和临时文件执行指定的命令；然后等待调用返回，并将来自编译器的输出和错误信息存储在指定的字符串中。</summary>
      <returns>来自编译器的返回值。</returns>
      <param name="userToken">用来启动编译器进程的标记。 </param>
      <param name="cmd">要执行的命令。 </param>
      <param name="currentDir">从中启动进程的目录。 </param>
      <param name="tempFiles">一个 <see cref="T:System.CodeDom.Compiler.TempFileCollection" />，用它管理并存储对编译期间生成的中间文件的引用。 </param>
      <param name="outputName">对字符串的引用，该字符串将存储编译器的消息输出。 </param>
      <param name="errorName">对字符串的引用，该字符串将存储遇到的一个或多个错误的名称。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>使用指定的临时文件执行指定的命令并等待调用返回，并将来自编译器的输出和错误信息存储在指定的字符串中。</summary>
      <returns>来自编译器的返回值。</returns>
      <param name="cmd">要执行的命令。 </param>
      <param name="tempFiles">一个 <see cref="T:System.CodeDom.Compiler.TempFileCollection" />，用它管理并存储对编译期间生成的中间文件的引用。 </param>
      <param name="outputName">对字符串的引用，该字符串将存储编译器的消息输出。 </param>
      <param name="errorName">对字符串的引用，该字符串将存储遇到的一个或多个错误的名称。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>使用指定的当前目录和临时文件执行指定的命令并等待调用返回，并将来自编译器的输出和错误信息存储在指定的字符串中。</summary>
      <returns>来自编译器的返回值。</returns>
      <param name="cmd">要执行的命令。 </param>
      <param name="currentDir">当前目录。 </param>
      <param name="tempFiles">一个 <see cref="T:System.CodeDom.Compiler.TempFileCollection" />，用它管理并存储对编译期间生成的中间文件的引用。 </param>
      <param name="outputName">对字符串的引用，该字符串将存储编译器的消息输出。 </param>
      <param name="errorName">对字符串的引用，该字符串将存储遇到的一个或多个错误的名称。 </param>
    </member>
    <member name="T:System.CodeDom.Compiler.GeneratedCodeAttribute">
      <summary>标识由工具生成的代码。无法继承此类。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.GeneratedCodeAttribute.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.CodeDom.Compiler.GeneratedCodeAttribute" /> 类的新实例，并在初始化时指定生成代码的工具的名称和版本。</summary>
      <param name="tool">生成代码的工具的名称。</param>
      <param name="version">生成代码的工具的版本。</param>
    </member>
    <member name="P:System.CodeDom.Compiler.GeneratedCodeAttribute.Tool">
      <summary>获取生成代码的工具的名称。</summary>
      <returns>生成代码的工具的名称。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.GeneratedCodeAttribute.Version">
      <summary>获取生成代码的工具的版本。</summary>
      <returns>生成代码的工具的版本。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.GeneratorSupport">
      <summary>定义用于确定代码生成器是否支持特定代码元素类型的标识符。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ArraysOfArrays">
      <summary>指示支持数组的数组的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.EntryPointMethod">
      <summary>指示支持程序入口点方法指定的生成器。这在生成可执行文件时使用。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GotoStatements">
      <summary>指示支持 goto 语句的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.MultidimensionalArrays">
      <summary>指示支持引用多维数组的生成器。当前，CodeDom 不能用于实例化多维数组。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.StaticConstructors">
      <summary>指示生成器支持静态构造函数。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.TryCatchStatements">
      <summary>指示支持 try...catch 语句的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ReturnTypeAttributes">
      <summary>指示支持返回类型属性声明的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes">
      <summary>指示支持值类型声明的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums">
      <summary>指示支持枚举声明的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareDelegates">
      <summary>指示支持委托声明的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces">
      <summary>指示支持接口声明的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareEvents">
      <summary>指示支持事件声明的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.AssemblyAttributes">
      <summary>指示支持程序集属性的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ParameterAttributes">
      <summary>指示支持参数属性的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ReferenceParameters">
      <summary>指示生成器支持引用和输出参数。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ChainedConstructorArguments">
      <summary>指示支持连锁构造函数参数的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.NestedTypes">
      <summary>指示生成器支持嵌套类型声明。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.MultipleInterfaceMembers">
      <summary>指示生成器支持实现多个接口的成员声明。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.PublicStaticMembers">
      <summary>指示支持公共静态成员的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ComplexExpressions">
      <summary>指示支持复杂表达式的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.Win32Resources">
      <summary>指示生成器支持使用 Win32 资源进行编译。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.Resources">
      <summary>指示支持使用 .NET Framework 资源的编译的生成器。可以是直接编译为程序集的默认资源或在附属程序集中引用的资源。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.PartialTypes">
      <summary>指示支持分部类型声明的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GenericTypeReference">
      <summary>指示支持泛型类型引用的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GenericTypeDeclaration">
      <summary>指示支持泛型类型声明的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareIndexerProperties">
      <summary>指示支持索引器属性的声明的生成器。</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeCompiler">
      <summary>定义用于调用源代码编译的接口或使用指定编译器的 CodeDOM 树。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary>使用指定的编译器设置从指定的 <see cref="T:System.CodeDom.CodeCompileUnit" /> 所包含的 <see cref="N:System.CodeDom" /> 树中编译程序集。</summary>
      <returns>指示编译结果的 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 对象。</returns>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示编译设置。 </param>
      <param name="compilationUnit">
        <see cref="T:System.CodeDom.CodeCompileUnit" />，指示要编译的代码。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>基于包含在 <see cref="T:System.CodeDom.CodeCompileUnit" /> 对象的指定数组中的 <see cref="N:System.CodeDom" /> 树，使用指定的编译器设置编译程序集。</summary>
      <returns>指示编译结果的 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 对象。</returns>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示编译设置。 </param>
      <param name="compilationUnits">
        <see cref="T:System.CodeDom.CodeCompileUnit" /> 类型数组，指示要编译的代码。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>从包含在指定文件中的源代码，使用指定的编译器设置编译程序集。</summary>
      <returns>指示编译结果的 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 对象。</returns>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示编译设置。 </param>
      <param name="fileName">包含要编译的源代码的文件的文件名。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>从包含在指定文件中的源代码，使用指定的编译器设置编译程序集。</summary>
      <returns>指示编译结果的 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 对象。</returns>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示编译设置。 </param>
      <param name="fileNames">要编译的文件的文件名。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>从包含源代码的指定字符串，使用指定的编译器设置编译程序集。</summary>
      <returns>指示编译结果的 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 对象。</returns>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示编译设置。 </param>
      <param name="source">要编译的源代码。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>从包含源代码的字符串的指定数组，使用指定的编译器设置编译程序集。</summary>
      <returns>指示编译结果的 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 对象。</returns>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示编译设置。 </param>
      <param name="sources">要编译的源代码字符串。 </param>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeGenerator">
      <summary>定义用于生成代码的接口。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier(System.String)">
      <summary>创建指定值的转义标识符。</summary>
      <returns>值的转义标识符。</returns>
      <param name="value">要为其创建转义标识符的字符串。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier(System.String)">
      <summary>为指定的值创建有效标识符。</summary>
      <returns>指定值的有效标识符。</returns>
      <param name="value">要为其生成有效标识符的字符串。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>为指定的代码文档对象模型 (CodeDOM) 编译单元生成代码，并使用指定的选项将代码输出到指定的文本编写器。</summary>
      <param name="e">要为其生成代码的 <see cref="T:System.CodeDom.CodeCompileUnit" />。 </param>
      <param name="w">向其中输出代码的 <see cref="T:System.IO.TextWriter" />。 </param>
      <param name="o">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，指示用于生成代码的选项。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>为指定的代码文档对象模型 (CodeDOM) 表达式生成代码，并将代码输出到指定的文本编写器。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeExpression" />，指示要为其生成代码的表达式。 </param>
      <param name="w">向其中输出代码的 <see cref="T:System.IO.TextWriter" />。 </param>
      <param name="o">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，指示用于生成代码的选项。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>为指定的代码文档对象模型 (CodeDOM) 命名空间生成代码，并使用指定的选项将代码输出到指定的文本编写器。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeNamespace" />，指示要为其生成代码的命名空间。 </param>
      <param name="w">向其中输出代码的 <see cref="T:System.IO.TextWriter" />。 </param>
      <param name="o">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，指示用于生成代码的选项。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>为指定的代码文档对象模型 (CodeDOM) 语句生成代码，并使用指定的选项将代码输出到指定的文本编写器。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeStatement" />，包含要翻译的 CodeDOM 元素。 </param>
      <param name="w">向其中输出代码的 <see cref="T:System.IO.TextWriter" />。 </param>
      <param name="o">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，指示用于生成代码的选项。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>为指定的代码文档对象模型 (CodeDOM) 类型声明生成代码，并使用指定的选项将代码输出到指定的文本编写器。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeTypeDeclaration" />，指示要为其生成代码的类型。 </param>
      <param name="w">向其中输出代码的 <see cref="T:System.IO.TextWriter" />。 </param>
      <param name="o">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，指示用于生成代码的选项。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>获取由指定的 <see cref="T:System.CodeDom.CodeTypeReference" /> 指示的类型。</summary>
      <returns>指定类型的文本表示形式，该类型针对此代码生成器生成代码时所使用的语言。例如，在 Visual Basic 中，传入类型 System.Int32 将返回“Integer”。</returns>
      <param name="type">指示返回类型的 <see cref="T:System.CodeDom.CodeTypeReference" />。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier(System.String)">
      <summary>获取一个值，该值指示指定的值是否是当前语言的有效标识符。</summary>
      <returns>
如果 <paramref name="value" /> 参数是有效标识符，则为 true；否则为 false。</returns>
      <param name="value">用来测试是否为有效标识符的值。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>获取一个值，该值指示该生成器是否支持指定的 <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> 对象表示的语言功能。</summary>
      <returns>
如果支持指定的功能，则为 true；否则为 false。</returns>
      <param name="supports">要为其测试生成器的功能。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier(System.String)">
      <summary>如果指定的值不是一个有效的标识符，将引发异常。</summary>
      <param name="value">要验证的标识符。 </param>
      <exception cref="T:System.ArgumentException">该标识符无效。 </exception>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeParser">
      <summary>定义用于将代码语法分析到 <see cref="T:System.CodeDom.CodeCompileUnit" /> 中的接口。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeParser.Parse(System.IO.TextReader)">
      <summary>在派生类中实施时，将指定的文本流编译到 <see cref="T:System.CodeDom.CodeCompileUnit" /> 中。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeCompileUnit" />，包含已分析代码的表示形式。</returns>
      <param name="codeStream">
        <see cref="T:System.IO.TextReader" />，可用于读取要编译的代码。 </param>
    </member>
    <member name="T:System.CodeDom.Compiler.IndentedTextWriter">
      <summary>提供可根据 Tab 字符串标记缩进新行的文本编写器。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.#ctor(System.IO.TextWriter)">
      <summary>使用指定的文本编写器和默认 Tab 字符串，初始化 <see cref="T:System.CodeDom.Compiler.IndentedTextWriter" /> 类的新实例。</summary>
      <param name="writer">用于输出的 <see cref="T:System.IO.TextWriter" />。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.#ctor(System.IO.TextWriter,System.String)">
      <summary>使用指定的文本编写器和 Tab 字符串初始化 <see cref="T:System.CodeDom.Compiler.IndentedTextWriter" /> 类的新实例。</summary>
      <param name="writer">用于输出的 <see cref="T:System.IO.TextWriter" />。 </param>
      <param name="tabString">用于缩进的 Tab 字符串。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Close">
      <summary>关闭正在向其写入的文档。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.IndentedTextWriter.DefaultTabString">
      <summary>指定默认 Tab 字符串。此字段为常数。 </summary>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.Encoding">
      <summary>获取供文本编写器使用的编码。</summary>
      <returns>
        <see cref="T:System.Text.Encoding" />，指示供文本编写器使用的编码。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Flush">
      <summary>刷新流。</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.Indent">
      <summary>获取或设置缩进的空格数。</summary>
      <returns>要缩进的空格数。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.InnerWriter">
      <summary>获取要使用的 <see cref="T:System.IO.TextWriter" />。</summary>
      <returns>要使用的 <see cref="T:System.IO.TextWriter" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.NewLine">
      <summary>获取或设置使用的换行符。</summary>
      <returns>使用的换行符。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.OutputTabs">
      <summary>根据 <see cref="P:System.CodeDom.Compiler.IndentedTextWriter.Indent" /> 属性为每个缩进级别输出一次 Tab 字符串。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Boolean)">
      <summary>将 Boolean 值的文本表示形式写入文本流。</summary>
      <param name="value">要写入的 Boolean 值。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char)">
      <summary>将字符写入文本流。</summary>
      <param name="value">要写入的字符。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char[])">
      <summary>将字符数组写入文本流。</summary>
      <param name="buffer">要写入的字符数组。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>将字符的子数组写入文本流。</summary>
      <param name="buffer">要从中写出数据的字符数组。 </param>
      <param name="index">在缓冲区中开始索引。 </param>
      <param name="count">要写入的字符数。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Double)">
      <summary>将 Double 的文本表示形式写入文本流。</summary>
      <param name="value">要写入的 double。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Int32)">
      <summary>将整数的文本表示形式写入文本流。</summary>
      <param name="value">要写入的整数。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Int64)">
      <summary>将 8 字节整数的文本表示形式写入文本流。</summary>
      <param name="value">要写入的 8 字节整数。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Object)">
      <summary>将对象的文本表示形式写入文本流。</summary>
      <param name="value">要写入的对象。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Single)">
      <summary>将 Single 的文本表示形式写入文本流。</summary>
      <param name="value">要写入的 single。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String)">
      <summary>将指定的字符串写入文本流。</summary>
      <param name="s">要写入的字符串。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object)">
      <summary>使用与指定语义相同的语义写出已格式化的字符串。</summary>
      <param name="format">格式化字符串。 </param>
      <param name="arg0">要写入已格式化字符串的对象。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object,System.Object)">
      <summary>使用与指定语义相同的语义写出已格式化的字符串。</summary>
      <param name="format">要使用的格式化字符串。 </param>
      <param name="arg0">第一个要写入已格式化字符串的对象。 </param>
      <param name="arg1">第二个要写入已格式化字符串的对象。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object[])">
      <summary>使用与指定语义相同的语义写出已格式化的字符串。</summary>
      <param name="format">要使用的格式化字符串。 </param>
      <param name="arg">要输出的参数数组。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine">
      <summary>写入一个行结束符。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Boolean)">
      <summary>将后跟行结束符的 Boolean 的文本表示形式写入文本流。</summary>
      <param name="value">要写入的 Boolean。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char)">
      <summary>将后跟行结束符的字符写入文本流。</summary>
      <param name="value">要写入的字符。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char[])">
      <summary>将后跟行结束符的字符数组写入文本流。</summary>
      <param name="buffer">要写入的字符数组。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>将后跟行结束符的字符子数组写入文本流。</summary>
      <param name="buffer">要从中写出数据的字符数组。 </param>
      <param name="index">在缓冲区中开始索引。 </param>
      <param name="count">要写入的字符数。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Double)">
      <summary>将后跟行结束符的 Double 的文本表示形式写入文本流。</summary>
      <param name="value">要写入的 double。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Int32)">
      <summary>将后跟行结束符的整数的文本表示形式写入文本流。</summary>
      <param name="value">要写入的整数。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Int64)">
      <summary>将后跟行结束符的 8 字节整数的文本表示形式写入文本流。</summary>
      <param name="value">要写入的 8 字节整数。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Object)">
      <summary>将后跟行结束符的对象的文本表示形式写入文本流。</summary>
      <param name="value">要写入的对象。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Single)">
      <summary>将后跟行结束符的 Single 的文本表示形式写入文本流。</summary>
      <param name="value">要写入的 single。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String)">
      <summary>将后跟行结束符的指定字符串写入文本流。</summary>
      <param name="s">要写入的字符串。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object)">
      <summary>使用与指定语义相同的语义写出后跟行结束符的已格式化字符串。</summary>
      <param name="format">格式化字符串。 </param>
      <param name="arg0">要写入已格式化字符串的对象。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>使用与指定语义相同的语义写出后跟行结束符的已格式化字符串。</summary>
      <param name="format">要使用的格式化字符串。 </param>
      <param name="arg0">第一个要写入已格式化字符串的对象。 </param>
      <param name="arg1">第二个要写入已格式化字符串的对象。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object[])">
      <summary>使用与指定语义相同的语义写出后跟行结束符的已格式化字符串。</summary>
      <param name="format">要使用的格式化字符串。 </param>
      <param name="arg">要输出的参数数组。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.UInt32)">
      <summary>将后跟行结束符的 UInt32 的文本表示形式写入文本流。</summary>
      <param name="value">要输出的 UInt32。 </param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLineNoTabs(System.String)">
      <summary>将指定字符串写入无制表符的行。</summary>
      <param name="s">要写入的字符串。 </param>
    </member>
    <member name="T:System.CodeDom.Compiler.LanguageOptions">
      <summary>定义指示语言的特殊功能的标识符。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.LanguageOptions.None">
      <summary>语言具有默认特性。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.LanguageOptions.CaseInsensitive">
      <summary>语言不区分大小写。</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.TempFileCollection">
      <summary>表示临时文件的集合。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor(System.String)">
      <summary>使用指定的临时目录初始化 <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> 类的新实例，该临时目录默认情况下设置为在生成并使用临时文件后将这些文件删除。</summary>
      <param name="tempDir">用于存储临时文件的临时目录的路径。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor(System.String,System.Boolean)">
      <summary>使用指定的临时目录和指定的值初始化 <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> 类的新实例，该值指示默认情况下生成并使用临时文件后是保留这些文件还是将它们删除。</summary>
      <param name="tempDir">用于存储临时文件的临时目录的路径。</param>
      <param name="keepFiles">
                如果使用临时文件后应保留它们，则为 true；如果应删除临时文件，则为 false。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddExtension(System.String)">
      <summary>将具有指定文件扩展名的文件名添加到集合中。</summary>
      <returns>刚添加到集合中的具有指定扩展名的文件名。</returns>
      <param name="fileExtension">要添加到集合中的自动生成的临时文件的文件扩展名。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddExtension(System.String,System.Boolean)">
      <summary>将具有指定文件扩展名的文件名添加到集合，并使用指定的值指示是删除还是保留该文件。</summary>
      <returns>刚添加到集合中的具有指定扩展名的文件名。</returns>
      <param name="fileExtension">要添加到集合中的自动生成的临时文件的文件扩展名。</param>
      <param name="keepFile">
                如果使用后应保留文件，则为 true；如果应删除文件，则为 false。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fileExtension" /> 为 null 或空字符串。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddFile(System.String,System.Boolean)">
      <summary>将指定的文件添加到集合，并使用指定的值指示在释放集合或调用 <see cref="M:System.CodeDom.Compiler.TempFileCollection.Delete" /> 方法时是否保留该文件。</summary>
      <param name="fileName">要添加到集合的文件名。</param>
      <param name="keepFile">
                如果使用后应保留文件，则为 true；如果应删除文件，则为 false。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fileName" /> 为 null 或空字符串。- 或 -<paramref name="fileName" />重复。</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.BasePath">
      <summary>获取基文件名的完整路径，该基文件名不带文件扩展名，位于临时目录路径上，用于生成该集合的临时文件名。</summary>
      <returns>基文件名的完整路径，该基文件名不带文件扩展名，位于临时目录路径上，用于生成该集合的临时文件名。</returns>
      <exception cref="T:System.Security.SecurityException">如果未设置 <see cref="P:System.CodeDom.Compiler.TempFileCollection.BasePath" /> 属性或者将其设置为 null，则不会将 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.AllAccess" /> 授予 <see cref="P:System.CodeDom.Compiler.TempFileCollection.TempDir" /> 属性指出的临时目录。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.CopyTo(System.String[],System.Int32)">
      <summary>从指定的索引处开始，将集合的成员复制到指定的字符串。</summary>
      <param name="fileNames">要复制到的字符串数组。</param>
      <param name="start">数组索引，从此处开始复制。</param>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.Count">
      <summary>获取集合中文件的数目。</summary>
      <returns>集合中的文件数。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Delete">
      <summary>删除此集合中没有标记为保留的临时文件。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">
                如果为 true，则释放托管资源和非托管资源；如果为 false，则仅释放非托管资源。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Finalize">
      <summary>在垃圾回收收回此对象之前尝试删除这些临时文件。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.GetEnumerator">
      <summary>获取一个枚举数，该枚举数可枚举集合的成员。</summary>
      <returns>包含集合成员的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.KeepFiles">
      <summary>获取或设置一个值，该值指示默认情况下在调用 <see cref="M:System.CodeDom.Compiler.TempFileCollection.Delete" /> 方法或释放集合时是否保留这些文件。</summary>
      <returns>
            如果应保留文件，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从目标数组中指定的索引位置开始，将集合中的元素复制到该数组中。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标位置的一维 <see cref="T:System.Array" />。<see cref="T:System.Array" /> 的索引必须从零开始。</param>
      <param name="start">数组中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#Count">
      <summary>获取集合中包含的元素数。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 中包含的元素数。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示对集合的访问是否为同步的（线程安全）。</summary>
      <returns>
            如果对 <see cref="T:System.Collections.ICollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对集合的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#IDisposable#Dispose">
      <summary>执行与释放或重置非托管资源相关的应用程序定义的任务。</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.TempDir">
      <summary>获取用来存储临时文件的临时目录。</summary>
      <returns>用来存储临时文件的临时目录。</returns>
    </member>
    <member name="T:System.Collections.Generic.LinkedList`1">
      <summary>
                    表示双向链表。
                </summary>
      <typeparam name="T">
                    指定链表的元素类型。
                </typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor">
      <summary>
                    初始化为空的 <see cref="T:System.Collections.Generic.LinkedList`1" /> 类的新实例。
                </summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
                    初始化 <see cref="T:System.Collections.Generic.LinkedList`1" /> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.IEnumerable" /> 中复制的元素并且其容量足以容纳所复制的元素数。
                </summary>
      <param name="collection">
        <see cref="T:System.Collections.IEnumerable" />，其元素被复制到新的 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                    初始化 <see cref="T:System.Collections.Generic.LinkedList`1" /> 类的新实例，该实例可使用指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 进行序列化。
                </summary>
      <param name="info">
                    一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，它包含序列化 <see cref="T:System.Collections.Generic.LinkedList`1" /> 所需的信息。
                </param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，该对象包含与 <see cref="T:System.Collections.Generic.LinkedList`1" /> 相关联的序列化流的源和目标。
                </param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
      <summary>
                    在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中指定的现有节点后添加指定的新节点。
                </summary>
      <param name="node">
                    要在其后插入 <paramref name="newNode" /> 的 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。
                </param>
      <param name="newNode">
                    要添加到 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的新 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> 为 null。
                
                    - 或 -
                <paramref name="newNode" /> 为 null。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> 不在当前 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中。
                
                    - 或 -
                <paramref name="newNode" /> 属于另一个 <see cref="T:System.Collections.Generic.LinkedList`1" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
      <summary>
                    在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中指定的现有节点后添加包含指定值的新节点。
                </summary>
      <returns>
                    包含 <paramref name="value" /> 的新 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。
                </returns>
      <param name="node">
                    要在其后插入包含 <paramref name="value" /> 的新 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 的 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。
                </param>
      <param name="value">
                    要添加到 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的值。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> 为 null。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> 不在当前 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
      <summary>
                    在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中指定的现有节点前添加指定的新节点。
                </summary>
      <param name="node">
                    要在其前插入 <paramref name="newNode" /> 的 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。
                </param>
      <param name="newNode">
                    要添加到 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的新 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> 为 null。
                
                    - 或 -
                <paramref name="newNode" /> 为 null。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> 不在当前 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中。
                
                    - 或 -
                <paramref name="newNode" /> 属于另一个 <see cref="T:System.Collections.Generic.LinkedList`1" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
      <summary>
                    在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中指定的现有节点前添加包含指定值的新节点。
                </summary>
      <returns>
                    包含 <paramref name="value" /> 的新 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。
                </returns>
      <param name="node">
                    要在其前插入包含 <paramref name="value" /> 的新 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 的 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。
                </param>
      <param name="value">
                    要添加到 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的值。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> 为 null。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> 不在当前 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
      <summary>
                    在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的开头处添加指定的新节点。
                </summary>
      <param name="node">
                    要在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的开头处添加的新 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> 为 null。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> 属于另一个 <see cref="T:System.Collections.Generic.LinkedList`1" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddFirst(`0)">
      <summary>
                    在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的开头处添加包含指定值的新节点。
                </summary>
      <returns>
                    包含 <paramref name="value" /> 的新 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。
                </returns>
      <param name="value">
                    要在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的开头处添加的值。
                </param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
      <summary>
                    在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的结尾处添加指定的新节点。
                </summary>
      <param name="node">
                    要添加至 <see cref="T:System.Collections.Generic.LinkedList`1" /> 结尾的新 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> 为 null。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> 属于另一个 <see cref="T:System.Collections.Generic.LinkedList`1" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddLast(`0)">
      <summary>
                    在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的结尾处添加包含指定值的新节点。
                </summary>
      <returns>
                    包含 <paramref name="value" /> 的新 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。
                </returns>
      <param name="value">
                    要添加到 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的末尾的值。
                </param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Clear">
      <summary>
                    从 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中移除所有节点。
                </summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Contains(`0)">
      <summary>
                    确定某值是否在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中。
                </summary>
      <returns>
                    如果在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中找到 <paramref name="value" />，则为 true；否则为 false。
                </returns>
      <param name="value">
                    要在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中定位的值。对于引用类型，该值可以为 null。
                </param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
      <summary>
                    从目标数组的指定索引处开始将整个 <see cref="T:System.Collections.Generic.LinkedList`1" /> 复制到兼容的一维 <see cref="T:System.Array" />。
                </summary>
      <param name="array">
                    作为从 <see cref="T:System.Collections.Generic.LinkedList`1" /> 复制的元素的目标位置的一维 <see cref="T:System.Array" />。<see cref="T:System.Array" /> 必须具有从零开始的索引。
                </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度。
                
                    - 或 -
                <paramref name="index" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
                    源 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中的元素数目大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Count">
      <summary>
                    获取 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中实际包含的节点数。
                </summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 中实际包含的节点数。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Find(`0)">
      <summary>
                    查找包含指定值的第一个节点。
                </summary>
      <returns>
                    如果找到，则为包含指定值的第一个 <see cref="T:System.Collections.Generic.LinkedListNode`1" />；否则为 null。
                </returns>
      <param name="value">
                    要在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中定位的值。
                </param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.FindLast(`0)">
      <summary>
                    查找包含指定值的最后一个节点。
                </summary>
      <returns>
                    如果找到，则为包含指定值的最后一个 <see cref="T:System.Collections.Generic.LinkedListNode`1" />；否则为 null。
                </returns>
      <param name="value">
                    要在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中定位的值。
                </param>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.First">
      <summary>
                    获取 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的第一个节点。
                </summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 的第一个 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
      <summary>
                    返回循环访问 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的枚举数。
                </summary>
      <returns>
                    用于 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的 <see cref="T:System.Collections.Generic.LinkedList`1.Enumerator" />。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                    实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并返回序列化 <see cref="T:System.Collections.Generic.LinkedList`1" /> 实例所需的数据。
                </summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，该对象包含序列化 <see cref="T:System.Collections.Generic.LinkedList`1" /> 实例所需的信息。
                </param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，该对象包含与 <see cref="T:System.Collections.Generic.LinkedList`1" /> 实例关联的序列化流的源和目标。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 null。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Last">
      <summary>
                    获取 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的最后一个节点。
                </summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 的最后一个 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.OnDeserialization(System.Object)">
      <summary>
                    实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并在完成反序列化之后引发反序列化事件。
                </summary>
      <param name="sender">
                    反序列化事件源。
                </param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
                    与当前 <see cref="T:System.Collections.Generic.LinkedList`1" /> 实例关联的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象无效。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})">
      <summary>
                    从 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中移除指定的节点。
                </summary>
      <param name="node">
                    要从 <see cref="T:System.Collections.Generic.LinkedList`1" /> 移除的 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> 为 null。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> 不在当前 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Remove(`0)">
      <summary>
                    从 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中移除指定值的第一个匹配项。
                </summary>
      <returns>
                    如果成功移除包含 <paramref name="value" /> 的元素，则为 true；否则为 false。如果在原始 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中没有找到 <paramref name="value" />，此方法也会返回 false。
                </returns>
      <param name="value">
                    要从 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中移除的值。
                </param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.RemoveFirst">
      <summary>
                    移除位于 <see cref="T:System.Collections.Generic.LinkedList`1" /> 开头处的节点。
                </summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 为空。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.RemoveLast">
      <summary>
                    移除位于 <see cref="T:System.Collections.Generic.LinkedList`1" /> 结尾处的节点。
                </summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 为空。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>
                    将项添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 的结尾处。
                </summary>
      <param name="value">
                    要在 <see cref="T:System.Collections.Generic.ICollection`1" /> 的结尾处添加的值。
                </param>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
                    获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。
                </summary>
      <returns>
如果 <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读，则为 true；否则为 false。在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的默认实现中，此属性始终返回 false。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
返回一个循环访问集合的枚举数。
                </summary>
      <returns>
                    可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
                    从特定的 <see cref="T:System.Array" /> 索引处开始，将 <see cref="T:System.Collections.ICollection" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。
                </summary>
      <param name="array">
                    作为从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标位置的一维 <see cref="T:System.Array" />。<see cref="T:System.Array" /> 必须具有从零开始的索引。
                </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。
                
                    - 或 -
                <paramref name="array" /> 没有从零开始的索引。
                
                    - 或 -
                <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度。
                
                    - 或 -
                
                    源 <see cref="T:System.Collections.ICollection" /> 中的元素数目大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。
                
                    - 或 -
                
                    源 <see cref="T:System.Collections.ICollection" /> 的类型无法自动转换为目标 <paramref name="array" /> 的类型。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized">
      <summary>
                    获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。
                </summary>
      <returns>
                    如果对 <see cref="T:System.Collections.ICollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的默认实现中，此属性始终返回 false。
                </returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
      <summary>
                    获取可用于同步 <see cref="T:System.Collections.ICollection" /> 访问的对象。
                </summary>
      <returns>
                    可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的默认实现中，此属性始终返回当前实例。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    返回一个将链表作为集合进行循环访问的枚举数。
                </summary>
      <returns>
                    可用于将链表作为集合循环访问的 <see cref="T:System.Collections.IEnumerator" />。
                </returns>
    </member>
    <member name="T:System.Collections.Generic.LinkedList`1.Enumerator">
      <summary>枚举 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的元素。</summary>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Enumerator.Current">
      <summary>获取枚举数当前位置的元素。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 中位于该枚举数当前位置的元素。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.Dispose">
      <summary>释放由 <see cref="T:System.Collections.Generic.LinkedList`1.Enumerator" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.MoveNext">
      <summary>使枚举数前进到 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的下一个元素。</summary>
      <returns>
            如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>获取枚举数当前位置的元素。</summary>
      <returns>集合中位于枚举数当前位置的元素。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在该集合的第一个元素之前或最后一个元素之后。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。无法继承此类。</summary>
      <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并在完成反序列化之后引发反序列化事件。</summary>
      <param name="sender">反序列化事件源。</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">与当前 <see cref="T:System.Collections.Generic.LinkedList`1" /> 实例关联的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象无效。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并返回序列化 <see cref="T:System.Collections.Generic.LinkedList`1" /> 实例所需的数据。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，该对象包含序列化 <see cref="T:System.Collections.Generic.LinkedList`1" /> 实例所需的信息。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，该对象包含与 <see cref="T:System.Collections.Generic.LinkedList`1" /> 实例关联的序列化流的源和目标。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 null。</exception>
    </member>
    <member name="T:System.Collections.Generic.LinkedListNode`1">
      <summary>表示 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中的节点。无法继承此类。</summary>
      <typeparam name="T">指定链表的元素类型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.LinkedListNode`1.#ctor(`0)">
      <summary>初始化 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 类的新实例，该实例包含指定的值。</summary>
      <param name="value">要在 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 中包含的值。</param>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.List">
      <summary>获取 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 所属的 <see cref="T:System.Collections.Generic.LinkedList`1" />。</summary>
      <returns>对 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 所属的 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的引用；或者如果 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 未链接，则为 null。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Next">
      <summary>获取 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中的下一个节点。</summary>
      <returns>对 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中的下一个节点的引用；或者如果当前节点是 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的最后一个元素 (<see cref="P:System.Collections.Generic.LinkedList`1.Last" />)，则为 null。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Previous">
      <summary>获取 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中的上一个节点。</summary>
      <returns>对 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中的上一个节点的引用；或者如果当前节点是 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的第一个元素 (<see cref="P:System.Collections.Generic.LinkedList`1.First" />)，则为 null。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Value">
      <summary>获取节点中包含的值。</summary>
      <returns>节点中包含的值。</returns>
    </member>
    <member name="T:System.Collections.Generic.Queue`1">
      <summary>
                    表示对象的先进先出集合。
                </summary>
      <typeparam name="T">
                    指定队列中元素的类型。
                </typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor">
      <summary>
                    初始化 <see cref="T:System.Collections.Generic.Queue`1" /> 类的新实例，该实例为空并且具有默认初始容量。
                </summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
                    初始化 <see cref="T:System.Collections.Generic.Queue`1" /> 类的新实例，该实例包含从指定的集合中复制的元素并且其容量足以容纳所复制的元素数。
                </summary>
      <param name="collection">
                    其元素被复制到新的 <see cref="T:System.Collections.Generic.Queue`1" /> 中的集合。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Int32)">
      <summary>
                    初始化 <see cref="T:System.Collections.Generic.Queue`1" /> 类的新实例，该实例为空并且具有指定的初始容量。
                </summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.Queue`1" /> 可包含的初始元素数。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Clear">
      <summary>
                    从 <see cref="T:System.Collections.Generic.Queue`1" /> 中移除所有对象。
                </summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Contains(`0)">
      <summary>
                    确定某元素是否在 <see cref="T:System.Collections.Generic.Queue`1" /> 中。
                </summary>
      <returns>
                    如果在 <see cref="T:System.Collections.Generic.Queue`1" /> 中找到 <paramref name="item" />，则为 true；否则为 false。
                </returns>
      <param name="item">
                    要在 <see cref="T:System.Collections.Generic.Queue`1" /> 中定位的对象。对于引用类型，该值可以为 null。
                </param>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)">
      <summary>
                    从指定数组索引开始将 <see cref="T:System.Collections.Generic.Queue`1" /> 元素复制到现有一维 <see cref="T:System.Array" /> 中。
                </summary>
      <param name="array">
                    作为从 <see cref="T:System.Collections.Generic.Queue`1" /> 复制的元素的目标位置的一维 <see cref="T:System.Array" />。<see cref="T:System.Array" /> 必须具有从零开始的索引。
                </param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度。
                
                    - 或 -
                
                    源 <see cref="T:System.Collections.Generic.Queue`1" /> 中的元素数目大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Count">
      <summary>
                    获取 <see cref="T:System.Collections.Generic.Queue`1" /> 中包含的元素数。
                </summary>
      <returns>
        <see cref="T:System.Collections.Generic.Queue`1" /> 中包含的元素数。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Dequeue">
      <summary>
                    移除并返回位于 <see cref="T:System.Collections.Generic.Queue`1" /> 开始处的对象。
                </summary>
      <returns>
                    从 <see cref="T:System.Collections.Generic.Queue`1" /> 的开头移除的对象。
                </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.Queue`1" /> 为空。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enqueue(`0)">
      <summary>
                    将对象添加到 <see cref="T:System.Collections.Generic.Queue`1" /> 的结尾处。
                </summary>
      <param name="item">
                    要添加到 <see cref="T:System.Collections.Generic.Queue`1" /> 的对象。对于引用类型，该值可以为 null。
                </param>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.GetEnumerator">
      <summary>
                    返回循环访问 <see cref="T:System.Collections.Generic.Queue`1" /> 的枚举数。
                </summary>
      <returns>
                    用于 <see cref="T:System.Collections.Generic.Queue`1" /> 的 <see cref="T:System.Collections.Generic.Queue`1.Enumerator" />。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Peek">
      <summary>
                    返回位于 <see cref="T:System.Collections.Generic.Queue`1" /> 开始处的对象但不将其移除。
                </summary>
      <returns>
                    位于 <see cref="T:System.Collections.Generic.Queue`1" /> 的开头的对象。
                </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.Queue`1" /> 为空。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
返回一个循环访问集合的枚举数。
                </summary>
      <returns>
                    可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
                    从特定的 <see cref="T:System.Array" /> 索引处开始，将 <see cref="T:System.Collections.ICollection" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。
                </summary>
      <param name="array">
                    作为从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标位置的一维 <see cref="T:System.Array" />。<see cref="T:System.Array" /> 必须具有从零开始的索引。
                </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。
                
                    - 或 -
                <paramref name="array" /> 没有从零开始的索引。
                
                    - 或 -
                <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度。
                
                    - 或 -
                
                    源 <see cref="T:System.Collections.ICollection" /> 中的元素数目大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。
                
                    - 或 -
                
                    源 <see cref="T:System.Collections.ICollection" /> 的类型无法自动转换为目标 <paramref name="array" /> 的类型。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized">
      <summary>
                    获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。
                </summary>
      <returns>
                    如果对 <see cref="T:System.Collections.ICollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。在 <see cref="T:System.Collections.Generic.Queue`1" /> 的默认实现中，此属性始终返回 false。
                </returns>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot">
      <summary>
                    获取可用于同步 <see cref="T:System.Collections.ICollection" /> 访问的对象。
                </summary>
      <returns>
                    可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。在 <see cref="T:System.Collections.Generic.Queue`1" /> 的默认实现中，此属性始终返回当前实例。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
返回一个循环访问集合的枚举数。
                </summary>
      <returns>
                    可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.ToArray">
      <summary>
                    将 <see cref="T:System.Collections.Generic.Queue`1" /> 元素复制到新数组。
                </summary>
      <returns>
                    包含从 <see cref="T:System.Collections.Generic.Queue`1" /> 复制的元素的新数组。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.TrimExcess">
      <summary>
                    如果元素数小于当前容量的 90%，将容量设置为 <see cref="T:System.Collections.Generic.Queue`1" /> 中的实际元素数。
                </summary>
    </member>
    <member name="T:System.Collections.Generic.Queue`1.Enumerator">
      <summary>枚举 <see cref="T:System.Collections.Generic.Queue`1" /> 的元素。</summary>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Enumerator.Current">
      <summary>获取枚举数当前位置的元素。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Queue`1" /> 中位于该枚举数当前位置的元素。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在该集合的第一个元素之前或最后一个元素之后。</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.Dispose">
      <summary>释放由 <see cref="T:System.Collections.Generic.Queue`1.Enumerator" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.MoveNext">
      <summary>使枚举数前进到 <see cref="T:System.Collections.Generic.Queue`1" /> 的下一个元素。</summary>
      <returns>
            如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。</exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>获取枚举数当前位置的元素。</summary>
      <returns>集合中位于枚举数当前位置的元素。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在该集合的第一个元素之前或最后一个元素之后。</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。</exception>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2">
      <summary>
                    表示按键排序的键/值对的集合。
                </summary>
      <typeparam name="TKey">
                    字典中的键的类型。
                </typeparam>
      <typeparam name="TValue">
                    字典中的值的类型。
                </typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor">
      <summary>
                    初始化 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 类的一个新实例，该实例为空并对键类型使用默认 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现。
                </summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>
                    初始化 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 类的一个新实例，该实例为空并使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现来比较键。
                </summary>
      <param name="comparer">
                    在比较键时要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现；或者为 null，表示为键类型使用默认的 <see cref="T:System.Collections.Generic.Comparer`1" />。
                </param>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>
                    初始化 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中复制的元素，并使用键类型的默认 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现。
                </summary>
      <param name="dictionary">
        <see cref="T:System.Collections.Generic.IDictionary`2" />，它的元素被复制到新的 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> 包含一个或多个重复键。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
      <summary>
                    初始化 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中复制的元素，并使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现来比较键。
                </summary>
      <param name="dictionary">
        <see cref="T:System.Collections.Generic.IDictionary`2" />，它的元素被复制到新的 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中。
                </param>
      <param name="comparer">
                    在比较键时要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现；或者为 null，表示为键类型使用默认的 <see cref="T:System.Collections.Generic.Comparer`1" />。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> 包含一个或多个重复键。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Add(`0,`1)">
      <summary>
                    将带有指定键和值的元素添加到 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中。
                </summary>
      <param name="key">
                    要添加的元素的键。
                </param>
      <param name="value">
                    要添加的元素的值。对于引用类型，该值可以为 null。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中已存在具有相同键的元素。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Clear">
      <summary>
                    从 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中移除所有元素。
                </summary>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Comparer">
      <summary>
                    获取用于对 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的元素进行排序的 <see cref="T:System.Collections.Generic.IComparer`1" />。
                </summary>
      <returns>
                    用于对 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的元素进行排序的 <see cref="T:System.Collections.Generic.IComparer`1" />。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ContainsKey(`0)">
      <summary>
                    确定 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 是否包含具有指定键的元素。
                </summary>
      <returns>
如果 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 包含具有指定键的元素，则为 true；否则为 false。
                </returns>
      <param name="key">
                    要在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中定位的键。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ContainsValue(`1)">
      <summary>
                    确定 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 是否包含具有指定值的元素。
                </summary>
      <returns>
                    如果 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 包含具有指定值的元素，则为 true；否则为 false。
                </returns>
      <param name="value">
                    要在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中定位的值。对于引用类型，该值可以为 null。
                </param>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>
                    从指定的索引处开始，将 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的元素复制到指定的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 结构的数组中。
                </summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 结构的一维数组，它是从当前 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中复制的元素的目标。该数组必须具有从零开始的索引。
                </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度。
                
                    - 或 -
                <paramref name="index" /> 小于 0。
                </exception>
      <exception cref="T:System.ArgumentException">
                    源 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的元素数目大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Count">
      <summary>
                    获取包含在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的键/值对的数目。
                </summary>
      <returns>
                    包含在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的键/值对的数目。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.GetEnumerator">
      <summary>
                    返回一个循环访问 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的枚举数。
                </summary>
      <returns>
                    用于 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的 <see cref="T:System.Collections.Generic.SortedDictionary`2.Enumerator" />。
                </returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Item(`0)">
      <summary>
                    获取或设置与指定的键相关联的值。
                </summary>
      <returns>
                    与指定的键相关联的值。如果找不到指定的键，get 操作便会引发 <see cref="T:System.Collections.Generic.KeyNotFoundException" />，而 set 操作会创建一个具有指定键的新元素。
                </returns>
      <param name="key">
                    要获取或设置的值的键。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。
                </exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
                    已检索该属性，并且集合中不存在 <paramref name="key" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Keys">
      <summary>
                    获取包含 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的键的集合。
                </summary>
      <returns>
                    包含 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的键的 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Remove(`0)">
      <summary>
                    从 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中移除带有指定键的元素。
                </summary>
      <returns>
                    如果该元素已成功移除，则为 true；否则为 false。如果在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中没有找到 <paramref name="key" />，此方法也会返回 false。
                </returns>
      <param name="key">
要移除的元素的键。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{`0,`1})"></member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})"></member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
                    获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。
                </summary>
      <returns>
如果 <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读，则为 true；否则为 false。在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的默认实现中，此属性始终返回 false。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})"></member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>
                    获取包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的键的 <see cref="T:System.Collections.Generic.ICollection`1" />。
                </summary>
      <returns>
                    一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的键。
                </returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>
                    获取包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值的 <see cref="T:System.Collections.Generic.ICollection`1" />。
                </summary>
      <returns>
                    一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IEnumerable{T}#GetEnumerator"></member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
                    从指定的数组索引开始，将 <see cref="T:System.Collections.Generic.ICollection`1" /> 中的元素复制到一个数组中。
                </summary>
      <param name="array">
                    一维数组，它是从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中复制的元素的目标。该数组必须具有从零开始的索引。
                </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，在此处开始复制。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。
                
                    - 或 -
                <paramref name="array" /> 没有从零开始的索引。
                
                    - 或 -
                <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度。
                
                    - 或 -
                
                    源 <see cref="T:System.Collections.Generic.ICollection`1" /> 中的元素数目大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。
                
                    - 或 -
                
                    源 <see cref="T:System.Collections.Generic.ICollection`1" /> 的类型无法自动转换为目标 <paramref name="array" /> 的类型。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>
                    获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。
                </summary>
      <returns>
                    如果对 <see cref="T:System.Collections.ICollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的默认实现中，此属性始终返回 false。
                </returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>
                    获取可用于同步 <see cref="T:System.Collections.ICollection" /> 访问的对象。
                </summary>
      <returns>
                    可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>
                    在 <see cref="T:System.Collections.IDictionary" /> 中添加一个具有所提供的键和值的元素。
                </summary>
      <param name="key">
                    用作要添加的元素的键的对象。
                </param>
      <param name="value">
                    用作要添加的元素的值的对象。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 属于不能分配给 <see cref="T:System.Collections.IDictionary" /> 的键类型 <paramref name="TKey" /> 的类型。
                
                    - 或 -
                <paramref name="value" /> 属于不能分配给 <see cref="T:System.Collections.IDictionary" /> 的值类型 <paramref name="TValue" /> 的类型。
                
                    - 或 -
                <see cref="T:System.Collections.IDictionary" /> 中已存在具有相同键的元素。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>
                    确定 <see cref="T:System.Collections.IDictionary" /> 是否包含具有指定键的元素。
                </summary>
      <returns>
                    如果 <see cref="T:System.Collections.IDictionary" /> 包含具有该键的元素，则为 true；否则为 false。
                </returns>
      <param name="key">
                    要在 <see cref="T:System.Collections.IDictionary" /> 中定位的键。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>
                    返回 <see cref="T:System.Collections.IDictionary" /> 的 <see cref="T:System.Collections.IDictionaryEnumerator" />。
                </summary>
      <returns>
                    用于 <see cref="T:System.Collections.IDictionary" /> 的 <see cref="T:System.Collections.IDictionaryEnumerator" />。
                </returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>
                    获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 是否具有固定大小。
                </summary>
      <returns>
                    如果 <see cref="T:System.Collections.IDictionary" /> 具有固定大小，则为 true；否则为 false。在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的默认实现中，此属性始终返回 false。
                </returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>
                    获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 是否为只读。
                </summary>
      <returns>
                    如果 <see cref="T:System.Collections.IDictionary" /> 为只读，则为 true；否则为 false。在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的默认实现中，此属性始终返回 false。
                </returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>
                    获取或设置具有指定键的元素。
                </summary>
      <returns>
                    具有指定键的元素，如果 <paramref name="key" /> 不在词典中或者 <paramref name="key" /> 属于不能分配给 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的键类型 <paramref name="TKey" /> 的类型，则为 null。
                </returns>
      <param name="key">
                    要获取的元素的键。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                    正在分配值，并且 <paramref name="key" /> 属于不能分配给 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的键类型 <paramref name="TKey" /> 的类型。
                
                    - 或 -
                
                    正在分配值，并且 <paramref name="value" /> 属于不能分配给 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的值类型 <paramref name="TValue" /> 的类型。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Keys">
      <summary>
                    获取包含 <see cref="T:System.Collections.IDictionary" /> 的键的 <see cref="T:System.Collections.ICollection" />。
                </summary>
      <returns>
                    一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.IDictionary" /> 的键。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>
                    从 <see cref="T:System.Collections.IDictionary" /> 中移除带有指定键的元素。
                </summary>
      <param name="key">
要移除的元素的键。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Values">
      <summary>
                    获取包含 <see cref="T:System.Collections.IDictionary" /> 中的值的 <see cref="T:System.Collections.ICollection" />。
                </summary>
      <returns>
                    一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.IDictionary" /> 中的值。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    返回一个循环访问集合的枚举数。
                </summary>
      <returns>
                    可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.TryGetValue(`0,`1@)">
      <summary>
                    获取与指定的键相关联的值。
                </summary>
      <returns>
如果 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 包含具有指定键的元素，则为 true；否则为 false。
                </returns>
      <param name="key">
                    要获取的值的键。
                </param>
      <param name="value">
                    当此方法返回时，如果找到指定键，则返回与该键相关联的值；否则，将返回 <paramref name="value" /> 参数的类型的默认值。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Values">
      <summary>
                    获取包含 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的值的集合。
                </summary>
      <returns>
                    包含 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的键的 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />。
                </returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.Enumerator">
      <summary>枚举 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的元素。</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.Current">
      <summary>获取枚举数当前位置的元素。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中位于该枚举数当前位置的元素。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.Dispose">
      <summary>释放由 <see cref="T:System.Collections.Generic.SortedDictionary`2.Enumerator" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext">
      <summary>使枚举数前进到 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的下一个元素。</summary>
      <returns>
            如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry">
      <summary>以 <see cref="T:System.Collections.DictionaryEntry" /> 结构的形式获取枚举数当前位置的元素。</summary>
      <returns>集合中位于字典当前位置的元素，形式为<see cref="T:System.Collections.DictionaryEntry" /> 结构。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在该集合的第一个元素之前或最后一个元素之后。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key">
      <summary>获取位于枚举数当前位置的元素的键。</summary>
      <returns>集合中位于该枚举数当前位置的元素的键。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在该集合的第一个元素之前或最后一个元素之后。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value">
      <summary>获取位于枚举数当前位置的元素的值。</summary>
      <returns>集合中位于该枚举数当前位置的元素的值。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在该集合的第一个元素之前或最后一个元素之后。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>获取枚举数当前位置的元素。</summary>
      <returns>集合中位于枚举数当前位置的元素。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在该集合的第一个元素之前或最后一个元素之后。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。</exception>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.KeyCollection">
      <summary>
                    表示 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中键的集合。无法继承此类。
                </summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})">
      <summary>
                    初始化 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 类的新实例，该类反映指定的 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的键。
                </summary>
      <param name="dictionary">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />，其键反映在新的 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 中。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
      <summary>
                    从指定数组索引位置开始，将 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 元素复制到某个现有的一维数组。
                </summary>
      <param name="array">
                    一维数组，它是从 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 中复制的元素的目标。该数组必须具有从零开始的索引。
                </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，在此处开始复制。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度。
                
                    - 或 -
                
                    源 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 中的元素数目大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Count">
      <summary>
                    获取 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 中包含的元素数。
                </summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 中包含的元素数。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.GetEnumerator">
      <summary>
                    返回循环访问 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 的枚举数。
                </summary>
      <returns>
                    用于 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 的 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator" /> 结构。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>
                    将某项添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 中。此实现始终引发 <see cref="T:System.NotSupportedException" />。
                </summary>
      <param name="item">
                    要添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 的对象。
                </param>
      <exception cref="T:System.NotSupportedException">
始终被引发；该集合为只读。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Clear">
      <summary>
                    从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除所有项。此实现始终引发 <see cref="T:System.NotSupportedException" />。
                </summary>
      <exception cref="T:System.NotSupportedException">
始终被引发；该集合为只读。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Contains(`0)">
      <summary>
                    确定 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否包含指定值。
                </summary>
      <returns>
如果在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中找到 <paramref name="item" />，则为 true；否则为 false。
                </returns>
      <param name="item">
                    要在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中定位的对象。
                </param>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
                    获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。
                </summary>
      <returns>
如果 <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读，则为 true；否则为 false。在 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 的默认实现中，此属性始终返回 false。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Remove(`0)"></member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
返回一个循环访问集合的枚举数。
                </summary>
      <returns>
                    可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
                    从特定的数组索引开始，将 <see cref="T:System.Collections.ICollection" /> 的元素复制到一个数组中。
                </summary>
      <param name="array">
                    一维数组，它是从 <see cref="T:System.Collections.ICollection" /> 中复制的元素的目标。该数组必须具有从零开始的索引。
                </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，在此处开始复制。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。
                
                    - 或 -
                <paramref name="array" /> 没有从零开始的索引。
                
                    - 或 -
                <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度。
                
                    - 或 -
                
                    源 <see cref="T:System.Collections.ICollection" /> 中的元素数目大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。
                
                    - 或 -
                
                    源 <see cref="T:System.Collections.ICollection" /> 的类型无法自动转换为目标 <paramref name="array" /> 的类型。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
                    获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。
                </summary>
      <returns>
                    如果对 <see cref="T:System.Collections.ICollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。在 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 的默认实现中，此属性始终返回 false。
                </returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
      <summary>
                    获取可用于同步 <see cref="T:System.Collections.ICollection" /> 访问的对象。
                </summary>
      <returns>
                    可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。在 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 的默认实现中，此属性始终返回当前实例。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
返回一个循环访问集合的枚举数。
                </summary>
      <returns>
                    可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。
                </returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator">
      <summary>枚举 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 的元素。</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Current">
      <summary>获取枚举数当前位置的元素。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 中位于枚举数当前位置的元素。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Dispose">
      <summary>释放由 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.MoveNext">
      <summary>使枚举数前进到 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 的下一个元素。</summary>
      <returns>
            如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>获取枚举数当前位置的元素。</summary>
      <returns>集合中位于枚举数当前位置的元素。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在该集合的第一个元素之前或最后一个元素之后。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。</exception>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.ValueCollection">
      <summary>
                    表示 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中值的集合。无法继承此类
                </summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})">
      <summary>
                    初始化 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 类的新实例，该实例反映指定的 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的值。
                </summary>
      <param name="dictionary">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />，其值反映在新的 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 中。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
      <summary>
                    从指定的数组索引开始，将 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 元素复制到现有的一维数组中。
                </summary>
      <param name="array">
                    一维数组，它是从 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 中复制的元素的目标。该数组必须具有从零开始的索引。
                </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，在此处开始复制。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度。
                
                    - 或 -
                
                    源 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 中的元素数目大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Count">
      <summary>
                    获取 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 中包含的元素数。
                </summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 中包含的元素数。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.GetEnumerator">
      <summary>
                    返回循环访问 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 的枚举数。
                </summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 的 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator" /> 结构。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Add(`1)">
      <summary>
                    将某项添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 中。此实现始终引发 <see cref="T:System.NotSupportedException" />。
                </summary>
      <param name="item">
                    要添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 的对象。
                </param>
      <exception cref="T:System.NotSupportedException">
始终被引发；该集合为只读。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Clear">
      <summary>
                    从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除所有项。此实现始终引发 <see cref="T:System.NotSupportedException" />。
                </summary>
      <exception cref="T:System.NotSupportedException">
始终被引发；该集合为只读。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Contains(`1)">
      <summary>
                    确定 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否包含指定值。
                </summary>
      <returns>
如果在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中找到 <paramref name="item" />，则为 true；否则为 false。
                </returns>
      <param name="item">
                    要在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中定位的对象。
                </param>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
                    获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。
                </summary>
      <returns>
如果 <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读，则为 true；否则为 false。在 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 的默认实现中，此属性始终返回 false。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Remove(`1)">
      <summary>
                    从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除特定对象的第一个匹配项。此实现始终引发 <see cref="T:System.NotSupportedException" />。
                </summary>
      <returns>
                    如果已从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中成功移除了 <paramref name="item" />，则为 true；否则为 false。如果在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中未找到 <paramref name="item" />，该方法也会返回 false。
                </returns>
      <param name="item">
                    要从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除的对象。
                </param>
      <exception cref="T:System.NotSupportedException">
始终被引发；该集合为只读。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
                    从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除特定对象的第一个匹配项。此实现始终引发 <see cref="T:System.NotSupportedException" />。
                </summary>
      <returns>
                    如果已从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中成功移除了 <paramref name="item" />，则为 true；否则为 false。如果在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中未找到 <paramref name="item" />，该方法也会返回 false。
                </returns>
      <exception cref="T:System.NotSupportedException">
始终被引发；该集合为只读。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
                    从特定的数组索引开始，将 <see cref="T:System.Collections.ICollection" /> 的元素复制到一个数组中。
                </summary>
      <param name="array">
                    一维数组，它是从 <see cref="T:System.Collections.ICollection" /> 中复制的元素的目标。该数组必须具有从零开始的索引。
                </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，在此处开始复制。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。
                
                    - 或 -
                <paramref name="array" /> 没有从零开始的索引。
                
                    - 或 -
                <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度。
                
                    - 或 -
                
                    源 <see cref="T:System.Collections.ICollection" /> 中的元素数目大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。
                
                    - 或 -
                
                    源 <see cref="T:System.Collections.ICollection" /> 的类型无法自动转换为目标 <paramref name="array" /> 的类型。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
                    获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。
                </summary>
      <returns>
                    如果对 <see cref="T:System.Collections.ICollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。在 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 的默认实现中，此属性始终返回 false。
                </returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
      <summary>
                    获取可用于同步 <see cref="T:System.Collections.ICollection" /> 访问的对象。
                </summary>
      <returns>
                    可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。在 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 的默认实现中，此属性始终返回当前实例。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
返回一个循环访问集合的枚举数。
                </summary>
      <returns>
                    可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。
                </returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator">
      <summary>枚举 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 的元素。</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.Current">
      <summary>获取枚举数当前位置的元素。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 中位于枚举数当前位置的元素。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.Dispose">
      <summary>释放由 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.MoveNext">
      <summary>使枚举数前进到 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 的下一个元素。</summary>
      <returns>
            如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>获取枚举数当前位置的元素。</summary>
      <returns>集合中位于枚举数当前位置的元素。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在该集合的第一个元素之前或最后一个元素之后。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。</exception>
    </member>
    <member name="T:System.Collections.Generic.SortedList`2">
      <summary>
                    表示键/值对的集合，这些键/值对基于关联的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现按照键进行排序。
                </summary>
      <typeparam name="TKey">
                    集合中键的类型。
                </typeparam>
      <typeparam name="TValue">
                    集合中值的类型。
                </typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor">
      <summary>
                    初始化 <see cref="T:System.Collections.Generic.SortedList`2" /> 类的新实例，该示例为空且具有默认的初始容量，并使用默认的 <see cref="T:System.Collections.Generic.IComparer`1" />。
                </summary>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>
                    初始化 <see cref="T:System.Collections.Generic.SortedList`2" /> 类的新实例，该实例为空且具有默认的初始容量，并使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" />。
                </summary>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IComparer`1" /> 实现，对键进行比较时使用。
                
                    - 或 -
                
                    为 null，则为这类键使用默认的 <see cref="T:System.Collections.Generic.Comparer`1" />。
                </param>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>
                    初始化 <see cref="T:System.Collections.Generic.SortedList`2" /> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中复制的元素，其容量足以容纳所复制的元素数并使用默认的 <see cref="T:System.Collections.Generic.IComparer`1" />。
                </summary>
      <param name="dictionary">
        <see cref="T:System.Collections.Generic.IDictionary`2" />，它的元素被复制到新的 <see cref="T:System.Collections.Generic.SortedList`2" /> 中。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> 包含一个或多个重复键。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
      <summary>
                    初始化 <see cref="T:System.Collections.Generic.SortedList`2" /> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中复制的元素，其容量足以容纳所复制的元素数并使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" />。
                </summary>
      <param name="dictionary">
        <see cref="T:System.Collections.Generic.IDictionary`2" />，它的元素被复制到新的 <see cref="T:System.Collections.Generic.SortedList`2" /> 中。
                </param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IComparer`1" /> 实现，对键进行比较时使用。
                
                    - 或 -
                
                    为 null，则为这类键使用默认的 <see cref="T:System.Collections.Generic.Comparer`1" />。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> 包含一个或多个重复键。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
      <summary>
                    初始化 <see cref="T:System.Collections.Generic.SortedList`2" /> 类的新实例，该实例为空且具有指定的初始容量，并使用默认的 <see cref="T:System.Collections.Generic.IComparer`1" />。
                </summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.SortedList`2" /> 可包含的初始元素数。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>
                    初始化 <see cref="T:System.Collections.Generic.SortedList`2" /> 类的新实例，该实例为空且具有指定的初始容量，并使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" />。
                </summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.SortedList`2" /> 可包含的初始元素数。
                </param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IComparer`1" /> 实现，对键进行比较时使用。
                
                    - 或 -
                
                    为 null，则为这类键使用默认的 <see cref="T:System.Collections.Generic.Comparer`1" />。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
      <summary>
                    将带有指定键和值的元素添加到 <see cref="T:System.Collections.Generic.SortedList`2" /> 中。
                </summary>
      <param name="key">
                    要添加的元素的键。
                </param>
      <param name="value">
                    要添加的元素的值。对于引用类型，该值可以为 null。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Collections.Generic.SortedList`2" /> 中已存在具有相同键的元素。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Capacity">
      <summary>
                    获取或设置 <see cref="T:System.Collections.Generic.SortedList`2" /> 可包含的元素数。
                </summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedList`2" /> 可包含的元素数。
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Collections.Generic.SortedList`2.Capacity" /> 设置为小于 <see cref="P:System.Collections.Generic.SortedList`2.Count" /> 的值。
                </exception>
      <exception cref="T:System.OutOfMemoryException">
                    系统中没有足够的可用内存。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.Clear">
      <summary>
                    从 <see cref="T:System.Collections.Generic.SortedList`2" /> 中移除所有元素。
                </summary>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Comparer">
      <summary>
                    获取该排序列表的 <see cref="T:System.Collections.Generic.IComparer`1" />。
                </summary>
      <returns>
                    当前 <see cref="T:System.Collections.Generic.SortedList`2" /> 的 <see cref="T:System.IComparable`1" />。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)">
      <summary>
                    确定 <see cref="T:System.Collections.Generic.SortedList`2" /> 是否包含特定键。
                </summary>
      <returns>
如果 <see cref="T:System.Collections.Generic.SortedList`2" /> 包含具有指定键的元素，则为 true；否则为 false。
                </returns>
      <param name="key">
                    要在 <see cref="T:System.Collections.Generic.SortedList`2" /> 中定位的键。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)">
      <summary>
                    确定 <see cref="T:System.Collections.Generic.SortedList`2" /> 是否包含特定值。
                </summary>
      <returns>
                    如果 <see cref="T:System.Collections.Generic.SortedList`2" /> 包含具有指定值的元素，则为 true；否则为 false。
                </returns>
      <param name="value">
                    要在 <see cref="T:System.Collections.Generic.SortedList`2" /> 中定位的值。对于引用类型，该值可以为 null。
                </param>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Count">
      <summary>
                    获取包含在 <see cref="T:System.Collections.Generic.SortedList`2" /> 中的键/值对的数目。
                </summary>
      <returns>
                    包含在 <see cref="T:System.Collections.Generic.SortedList`2" /> 中的键/值对的数目。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.GetEnumerator">
      <summary>
                    返回一个循环访问 <see cref="T:System.Collections.Generic.SortedList`2" /> 的枚举数。
                </summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedList`2" /> 的类型为 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.IndexOfKey(`0)">
      <summary>
                    在整个 <see cref="T:System.Collections.Generic.SortedList`2" /> 中搜索指定键并返回从零开始的索引。
                </summary>
      <returns>
                    如果找到，则为整个 <see cref="T:System.Collections.Generic.SortedList`2" /> 中 <paramref name="key" /> 的从零开始的索引；否则为 -1。
                </returns>
      <param name="key">
                    要在 <see cref="T:System.Collections.Generic.SortedList`2" /> 中定位的键。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)">
      <summary>
                    在整个 <see cref="T:System.Collections.Generic.SortedList`2" /> 中搜索指定的值，并返回第一个匹配项的从零开始的索引。
                </summary>
      <returns>
                    如果找到，则为整个 <see cref="T:System.Collections.Generic.SortedList`2" /> 中 <paramref name="value" /> 的第一个匹配项的从零开始的索引；否则为 -1。
                </returns>
      <param name="value">
                    要在 <see cref="T:System.Collections.Generic.SortedList`2" /> 中定位的值。对于引用类型，该值可以为 null。
                </param>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Item(`0)">
      <summary>
                    获取或设置与指定的键相关联的值。
                </summary>
      <returns>
                    与指定的键相关联的值。如果找不到指定的键，则 get 操作会引发 <see cref="T:System.Collections.Generic.KeyNotFoundException" />，而 set 操作会创建一个使用指定键的新元素。
                </returns>
      <param name="key">
                    要获取或设置其值的键。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。
                </exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
                    已检索该属性，并且集合中不存在 <paramref name="key" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Keys">
      <summary>
                    获取包含 <see cref="T:System.Collections.Generic.SortedList`2" /> 中的键的集合。
                </summary>
      <returns>
                    包含 <see cref="T:System.Collections.Generic.SortedList`2" /> 中的键的 <see cref="T:System.Collections.Generic.IList`1" />。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.Remove(`0)">
      <summary>
                    从 <see cref="T:System.Collections.Generic.SortedList`2" /> 中移除带有指定键的元素。
                </summary>
      <returns>
                    如果该元素已成功移除，则为 true；否则为 false。如果在原始 <see cref="T:System.Collections.Generic.SortedList`2" /> 中没有找到 <paramref name="key" />，此方法也会返回 false。
                </returns>
      <param name="key">
要移除的元素的键。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)">
      <summary>
                    移除 <see cref="T:System.Collections.Generic.SortedList`2" /> 的指定索引处的元素。
                </summary>
      <param name="index">
                    要移除的元素的从零开始的索引。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                
                    - 或 -
                <paramref name="index" /> 等于或大于 <see cref="P:System.Collections.Generic.SortedList`2.Count" />。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{`0,`1})"></member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})"></member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)"></member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
                    获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。
                </summary>
      <returns>
如果 <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读，则为 true；否则为 false。在 <see cref="T:System.Collections.Generic.SortedList`2" /> 的默认实现中，此属性始终返回 false。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})"></member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>
                    获取包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的键的 <see cref="T:System.Collections.Generic.ICollection`1" />。
                </summary>
      <returns>
                    一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的键。
                </returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>
                    获取包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值的 <see cref="T:System.Collections.Generic.ICollection`1" />。
                </summary>
      <returns>
                    一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#IEnumerable{T}#GetEnumerator"></member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
                    从特定的 <see cref="T:System.Array" /> 索引处开始，将 <see cref="T:System.Collections.ICollection" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。
                </summary>
      <param name="array">
                    作为从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标位置的一维 <see cref="T:System.Array" />。<see cref="T:System.Array" /> 必须具有从零开始的索引。
                </param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。
                
                    - 或 -
                <paramref name="array" /> 没有从零开始的索引。
                
                    - 或 -
                <paramref name="arrayIndex" /> 等于或大于 <paramref name="array" /> 的长度。
                
                    - 或 -
                
                    源 <see cref="T:System.Collections.ICollection" /> 中的元素数目大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。
                
                    - 或 -
                
                    源 <see cref="T:System.Collections.ICollection" /> 的类型无法自动转换为目标 <paramref name="array" /> 的类型。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized">
      <summary>
                    获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。
                </summary>
      <returns>
                    如果对 <see cref="T:System.Collections.ICollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。在 <see cref="T:System.Collections.Generic.SortedList`2" /> 的默认实现中，此属性始终返回 false。
                </returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot">
      <summary>
                    获取可用于同步 <see cref="T:System.Collections.ICollection" /> 访问的对象。
                </summary>
      <returns>
                    可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。在 <see cref="T:System.Collections.Generic.SortedList`2" /> 的默认实现中，此属性始终返回当前实例。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>
                    在 <see cref="T:System.Collections.IDictionary" /> 中添加一个具有所提供的键和值的元素。
                </summary>
      <param name="key">
                    用作要添加的元素的键的 <see cref="T:System.Object" />。
                </param>
      <param name="value">
                    用作要添加的元素的值的 <see cref="T:System.Object" />。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 属于不能分配给 <see cref="T:System.Collections.IDictionary" /> 的键类型 <paramref name="TKey" /> 的类型。
                
                    - 或 -
                <paramref name="value" /> 属于不能分配给 <see cref="T:System.Collections.IDictionary" /> 的值类型 <paramref name="TValue" /> 的类型。
                
                    - 或 -
                <see cref="T:System.Collections.IDictionary" /> 中已存在具有相同键的元素。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>
                    确定 <see cref="T:System.Collections.IDictionary" /> 是否包含具有指定键的元素。
                </summary>
      <returns>
                    如果 <see cref="T:System.Collections.IDictionary" /> 包含具有该键的元素，则为 true；否则为 false。
                </returns>
      <param name="key">
                    要在 <see cref="T:System.Collections.IDictionary" /> 中定位的键。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
      <summary>
                    返回 <see cref="T:System.Collections.IDictionary" /> 的 <see cref="T:System.Collections.IDictionaryEnumerator" />。
                </summary>
      <returns>
                    用于 <see cref="T:System.Collections.IDictionary" /> 的 <see cref="T:System.Collections.IDictionaryEnumerator" />。
                </returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsFixedSize">
      <summary>
                    获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 是否具有固定大小。
                </summary>
      <returns>
                    如果 <see cref="T:System.Collections.IDictionary" /> 具有固定大小，则为 true；否则为 false。在 <see cref="T:System.Collections.Generic.SortedList`2" /> 的默认实现中，此属性始终返回 false。
                </returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsReadOnly">
      <summary>
                    获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 是否为只读。
                </summary>
      <returns>
                    如果 <see cref="T:System.Collections.IDictionary" /> 为只读，则为 true；否则为 false。在 <see cref="T:System.Collections.Generic.SortedList`2" /> 的默认实现中，此属性始终返回 false。
                </returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>
                    获取或设置具有指定键的元素。
                </summary>
      <returns>
                    具有指定键的元素，如果 <paramref name="key" /> 不在字典中或者 <paramref name="key" /> 的类型不能分配给 <see cref="T:System.Collections.Generic.SortedList`2" /> 的键类型 <paramref name="TKey" />，则为 null。
                </returns>
      <param name="key">
                    要获取或设置的元素的键。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                    正在赋值，但 <paramref name="key" /> 的类型不能分配给 <see cref="T:System.Collections.Generic.SortedList`2" /> 的键类型 <paramref name="TKey" />。
                
                    - 或 -
                
                    正在赋值，但 <paramref name="value" /> 的类型不能分配给 <see cref="T:System.Collections.Generic.SortedList`2" /> 的值类型 <paramref name="TValue" />。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Keys">
      <summary>
                    获取包含 <see cref="T:System.Collections.IDictionary" /> 的键的 <see cref="T:System.Collections.ICollection" />。
                </summary>
      <returns>
                    一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.IDictionary" /> 的键。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>
                    从 <see cref="T:System.Collections.IDictionary" /> 中移除带有指定键的元素。
                </summary>
      <param name="key">
要移除的元素的键。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Values">
      <summary>
                    获取包含 <see cref="T:System.Collections.IDictionary" /> 中的值的 <see cref="T:System.Collections.ICollection" />。
                </summary>
      <returns>
                    一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.IDictionary" /> 中的值。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>
返回一个循环访问集合的枚举数。
                </summary>
      <returns>
                    可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.TrimExcess">
      <summary>
                    如果元素数小于当前容量的 90%，将容量设置为 <see cref="T:System.Collections.Generic.SortedList`2" /> 中的实际元素数。
                </summary>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)">
      <summary>
                    获取与指定的键相关联的值。
                </summary>
      <returns>
如果 <see cref="T:System.Collections.Generic.SortedList`2" /> 包含具有指定键的元素，则为 true；否则为 false。
                </returns>
      <param name="key">
                    要获取其值的键。
                </param>
      <param name="value">
                    当此方法返回时，如果找到指定键，则返回与该键相关联的值；否则，将返回 <paramref name="value" /> 参数的类型的默认值。该参数未经初始化即被传递。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Values">
      <summary>
                    获取包含 <see cref="T:System.Collections.Generic.SortedList`2" /> 中的值的集合。
                </summary>
      <returns>
                    包含 <see cref="T:System.Collections.Generic.SortedList`2" /> 中的值的 <see cref="T:System.Collections.Generic.IList`1" />。
                </returns>
    </member>
    <member name="T:System.Collections.Generic.Stack`1">
      <summary>
                    表示同一任意类型的实例的大小可变的后进先出 (LIFO) 集合。
                </summary>
      <typeparam name="T">
                    指定堆栈中的元素的类型。
                </typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor">
      <summary>
                    初始化 <see cref="T:System.Collections.Generic.Stack`1" /> 类的新实例，该实例为空并且具有默认初始容量。
                </summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
                    初始化 <see cref="T:System.Collections.Generic.Stack`1" /> 类的新实例，该实例包含从指定的集合中复制的元素并且其容量足以容纳所复制的元素数。
                </summary>
      <param name="collection">
                    从其中复制元素的集合。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
      <summary>
                    初始化 <see cref="T:System.Collections.Generic.Stack`1" /> 类的新实例，该实例为空并且具有指定的初始容量或默认初始容量（这两个容量中的较大者）。
                </summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.Stack`1" /> 可包含的初始元素数。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Clear">
      <summary>
                    从 <see cref="T:System.Collections.Generic.Stack`1" /> 中移除所有对象。
                </summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Contains(`0)">
      <summary>
                    确定某元素是否在 <see cref="T:System.Collections.Generic.Stack`1" /> 中。
                </summary>
      <returns>
                    如果在 <see cref="T:System.Collections.Generic.Stack`1" /> 中找到 <paramref name="item" />，则为 true；否则为 false。
                </returns>
      <param name="item">
                    要在 <see cref="T:System.Collections.Generic.Stack`1" /> 中定位的对象。对于引用类型，该值可以为 null。
                </param>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
      <summary>
                    从指定数组索引开始将 <see cref="T:System.Collections.Generic.Stack`1" /> 复制到现有一维 <see cref="T:System.Array" /> 中。
                </summary>
      <param name="array">
                    作为从 <see cref="T:System.Collections.Generic.Stack`1" /> 复制的元素的目标位置的一维 <see cref="T:System.Array" />。<see cref="T:System.Array" /> 必须具有从零开始的索引。
                </param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayIndex" /> 等于或大于 <paramref name="array" /> 的长度。
                
                    - 或 -
                
                    源 <see cref="T:System.Collections.Generic.Stack`1" /> 中的元素数目大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Count">
      <summary>
                    获取 <see cref="T:System.Collections.Generic.Stack`1" /> 中包含的元素数。
                </summary>
      <returns>
        <see cref="T:System.Collections.Generic.Stack`1" /> 中包含的元素数。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.GetEnumerator">
      <summary>
                    返回 <see cref="T:System.Collections.Generic.Stack`1" /> 的一个枚举数。
                </summary>
      <returns>
                    用于 <see cref="T:System.Collections.Generic.Stack`1" /> 的 <see cref="T:System.Collections.Generic.Stack`1.Enumerator" />。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Peek">
      <summary>
                    返回位于 <see cref="T:System.Collections.Generic.Stack`1" /> 顶部的对象但不将其移除。
                </summary>
      <returns>
                    位于 <see cref="T:System.Collections.Generic.Stack`1" /> 顶部的对象。
                </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.Stack`1" /> 为空。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Pop">
      <summary>
                    移除并返回位于 <see cref="T:System.Collections.Generic.Stack`1" /> 顶部的对象。
                </summary>
      <returns>
                    从 <see cref="T:System.Collections.Generic.Stack`1" /> 的顶部移除的对象。
                </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.Stack`1" /> 为空。
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Push(`0)">
      <summary>
                    将对象插入 <see cref="T:System.Collections.Generic.Stack`1" /> 的顶部。
                </summary>
      <param name="item">
                    要推入到 <see cref="T:System.Collections.Generic.Stack`1" /> 中的对象。对于引用类型，该值可以为 null。
                </param>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
                    返回一个循环访问集合的枚举数。
                </summary>
      <returns>
                    可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
                    从特定的 <see cref="T:System.Array" /> 索引处开始，将 <see cref="T:System.Collections.ICollection" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。
                </summary>
      <param name="array">
                    作为从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标位置的一维 <see cref="T:System.Array" />。<see cref="T:System.Array" /> 必须具有从零开始的索引。
                </param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。
                
                    - 或 -
                <paramref name="array" /> 没有从零开始的索引。
                
                    - 或 -
                <paramref name="arrayIndex" /> 等于或大于 <paramref name="array" /> 的长度。
                
                    - 或 -
                
                    源 <see cref="T:System.Collections.ICollection" /> 中的元素数目大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。
                
                    - 或 -
                
                    源 <see cref="T:System.Collections.ICollection" /> 的类型无法自动转换为目标 <paramref name="array" /> 的类型。
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
      <summary>
                    获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。
                </summary>
      <returns>
                    如果对 <see cref="T:System.Collections.ICollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。在 <see cref="T:System.Collections.Generic.Stack`1" /> 的默认实现中，此属性始终返回 false。
                </returns>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
      <summary>
                    获取可用于同步 <see cref="T:System.Collections.ICollection" /> 访问的对象。
                </summary>
      <returns>
                    可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。在 <see cref="T:System.Collections.Generic.Stack`1" /> 的默认实现中，此属性始终返回当前实例。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    返回一个循环访问集合的枚举数。
                </summary>
      <returns>
                    可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.ToArray">
      <summary>
                    将 <see cref="T:System.Collections.Generic.Stack`1" /> 复制到新数组中。
                </summary>
      <returns>
                    新数组，包含 <see cref="T:System.Collections.Generic.Stack`1" /> 的元素的副本。
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.TrimExcess">
      <summary>
                    如果元素数小于当前容量的 90%，将容量设置为 <see cref="T:System.Collections.Generic.Stack`1" /> 中的实际元素数。
                </summary>
    </member>
    <member name="T:System.Collections.Generic.Stack`1.Enumerator">
      <summary>枚举 <see cref="T:System.Collections.Generic.Stack`1" /> 的元素。</summary>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Enumerator.Current">
      <summary>获取枚举数当前位置的元素。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Stack`1" /> 中位于枚举数当前位置的元素。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在该集合的第一个元素之前或最后一个元素之后。</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.Dispose">
      <summary>释放由 <see cref="T:System.Collections.Generic.Stack`1.Enumerator" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.MoveNext">
      <summary>使枚举数前进到 <see cref="T:System.Collections.Generic.Stack`1" /> 的下一个元素。</summary>
      <returns>
            如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。</exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>获取枚举数当前位置的元素。</summary>
      <returns>集合中位于枚举数当前位置的元素。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在该集合的第一个元素之前或最后一个元素之后。</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。无法继承此类。</summary>
      <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。</exception>
    </member>
    <member name="T:System.Collections.Specialized.BitVector32">
      <summary>提供一个简单结构，该结构以 32 位内存存储布尔值和小整数。</summary>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.#ctor(System.Collections.Specialized.BitVector32)">
      <summary>初始化 <see cref="T:System.Collections.Specialized.BitVector32" /> 结构的新实例，该实例包含现有 <see cref="T:System.Collections.Specialized.BitVector32" /> 结构中表示的数据。</summary>
      <param name="value">一个 <see cref="T:System.Collections.Specialized.BitVector32" /> 结构，它包含要复制的数据。 </param>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:System.Collections.Specialized.BitVector32" /> 结构的新实例，该实例包含以整数表示的数据。</summary>
      <param name="data">一个整数，它表示新 <see cref="T:System.Collections.Specialized.BitVector32" /> 的数据。 </param>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.CreateMask">
      <summary>创建一系列屏蔽中的第一个屏蔽，该系列屏蔽可以用于检索作为位标志设置的 <see cref="T:System.Collections.Specialized.BitVector32" /> 中的单个位。</summary>
      <returns>一个屏蔽，它隔离 <see cref="T:System.Collections.Specialized.BitVector32" /> 中的第一个位标志。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.CreateMask(System.Int32)">
      <summary>在一系列屏蔽中的指定屏蔽后面再创建一个屏蔽，该系列屏蔽可以用于检索作为位标志设置的 <see cref="T:System.Collections.Specialized.BitVector32" /> 中的单个位。</summary>
      <returns>一个屏蔽，它隔离 <see cref="T:System.Collections.Specialized.BitVector32" /> 中 <paramref name="previous" /> 所指向的位标志后面的位标志。</returns>
      <param name="previous">指示前一个位标志的屏蔽。 </param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="previous" /> 指示 <see cref="T:System.Collections.Specialized.BitVector32" /> 中的最后一个位标志。 </exception>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16)">
      <summary>创建一系列包含小整数的节中的第一个 <see cref="T:System.Collections.Specialized.BitVector32.Section" />。</summary>
      <returns>一个 <see cref="T:System.Collections.Specialized.BitVector32.Section" />，它可以保存从零到 <paramref name="maxValue" /> 的数字。</returns>
      <param name="maxValue">一个 16 位有符号整数，它为新 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 指定最大值。 </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="maxValue" /> 小于 1。 </exception>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16,System.Collections.Specialized.BitVector32.Section)">
      <summary>在一系列包含小整数的节中，在指定的 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 后面创建新的 <see cref="T:System.Collections.Specialized.BitVector32.Section" />。</summary>
      <returns>一个 <see cref="T:System.Collections.Specialized.BitVector32.Section" />，它可以保存从零到 <paramref name="maxValue" /> 的数字。</returns>
      <param name="maxValue">一个 16 位有符号整数，它为新 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 指定最大值。 </param>
      <param name="previous">
        <see cref="T:System.Collections.Specialized.BitVector32" /> 中的前一个 <see cref="T:System.Collections.Specialized.BitVector32.Section" />。 </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="maxValue" /> 小于 1。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="previous" /> 包括 <see cref="T:System.Collections.Specialized.BitVector32" /> 中的最后一位。- 或 - <paramref name="maxValue" /> 大于 <paramref name="previous" /> 之后的位数可以表示的最大值。 </exception>
    </member>
    <member name="P:System.Collections.Specialized.BitVector32.Data">
      <summary>获得作为整数的 <see cref="T:System.Collections.Specialized.BitVector32" /> 的值。</summary>
      <returns>作为整数的 <see cref="T:System.Collections.Specialized.BitVector32" /> 的值。</returns>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.Equals(System.Object)">
      <summary>确定指定对象是否等于 <see cref="T:System.Collections.Specialized.BitVector32" />。</summary>
      <returns>
如果指定对象等效于该 <see cref="T:System.Collections.Specialized.BitVector32" />，则为 true；否则为 false。</returns>
      <param name="o">将与当前 <see cref="T:System.Collections.Specialized.BitVector32" /> 进行比较的对象。 </param>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.GetHashCode">
      <summary>作为 <see cref="T:System.Collections.Specialized.BitVector32" /> 的哈希函数。</summary>
      <returns>
        <see cref="T:System.Collections.Specialized.BitVector32" /> 的哈希代码。</returns>
    </member>
    <member name="P:System.Collections.Specialized.BitVector32.Item(System.Collections.Specialized.BitVector32.Section)">
      <summary>获取或设置存储在指定 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 中的值。</summary>
      <returns>存储在指定 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 中的值。</returns>
      <param name="section">一个 <see cref="T:System.Collections.Specialized.BitVector32.Section" />，它包含要获取或设置的值。 </param>
    </member>
    <member name="P:System.Collections.Specialized.BitVector32.Item(System.Int32)">
      <summary>获取或设置由指定屏蔽指示的位标志的状态。</summary>
      <returns>
如果指定位标志是“开”(1)，则为 true；否则为 false。</returns>
      <param name="bit">一个屏蔽，它指示要获取或设置的位。 </param>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.ToString">
      <summary>返回表示当前 <see cref="T:System.Collections.Specialized.BitVector32" /> 的字符串。</summary>
      <returns>表示当前 <see cref="T:System.Collections.Specialized.BitVector32" /> 的字符串。</returns>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.ToString(System.Collections.Specialized.BitVector32)">
      <summary>返回表示指定的 <see cref="T:System.Collections.Specialized.BitVector32" /> 的字符串。</summary>
      <returns>表示指定的 <see cref="T:System.Collections.Specialized.BitVector32" /> 的字符串。</returns>
      <param name="value">要表示的 <see cref="T:System.Collections.Specialized.BitVector32" />。 </param>
    </member>
    <member name="T:System.Collections.Specialized.BitVector32.Section">
      <summary>表示可以包含整数的向量的节。</summary>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.Section.Equals(System.Collections.Specialized.BitVector32.Section)">
      <summary>确定指定 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 对象是否与当前 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 对象相同。</summary>
      <returns>
如果 <paramref name="obj" /> 参数与当前 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 对象相同，则为 true；否则为 false。</returns>
      <param name="obj">要与当前 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 对象进行比较的 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 对象。</param>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.Section.Equals(System.Object)">
      <summary>确定指定对象是否与当前 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 对象相同。</summary>
      <returns>
如果指定的对象与当前 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 对象相同，则为 true；否则为 false。</returns>
      <param name="o">将与当前 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 进行比较的对象。</param>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.Section.GetHashCode">
      <summary>用作当前 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 的哈希函数，适合用在哈希算法和数据结构（如哈希表）中。</summary>
      <returns>当前 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 的哈希代码。</returns>
    </member>
    <member name="P:System.Collections.Specialized.BitVector32.Section.Mask">
      <summary>获取在 <see cref="T:System.Collections.Specialized.BitVector32" /> 中隔离此节的掩码。</summary>
      <returns>在 <see cref="T:System.Collections.Specialized.BitVector32" /> 中隔离此节的掩码。</returns>
    </member>
    <member name="P:System.Collections.Specialized.BitVector32.Section.Offset">
      <summary>获取从 <see cref="T:System.Collections.Specialized.BitVector32" /> 的起始处开始的此节的偏移量。</summary>
      <returns>从 <see cref="T:System.Collections.Specialized.BitVector32" /> 的起始处开始的此节的偏移量。</returns>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.Section.op_Equality(System.Collections.Specialized.BitVector32.Section,System.Collections.Specialized.BitVector32.Section)">
      <summary>确定两个指定 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 对象是否相等。</summary>
      <returns>
如果 <paramref name="a" /> 和 <paramref name="b" /> 参数表示同一 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 对象，则为 true；否则为 false。</returns>
      <param name="a">一个 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 对象。</param>
      <param name="b">一个 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 对象。</param>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.Section.op_Inequality(System.Collections.Specialized.BitVector32.Section,System.Collections.Specialized.BitVector32.Section)">
      <summary>确定两个 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 对象是否具有不同的值。</summary>
      <returns>
如果 <paramref name="a" /> 和 <paramref name="b" /> 参数表示不同的 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 对象，则为 true；否则为 false。</returns>
      <param name="a">一个 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 对象。</param>
      <param name="b">一个 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 对象。</param>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.Section.ToString">
      <summary>返回表示当前 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 的字符串。</summary>
      <returns>表示当前 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 的字符串。</returns>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.Section.ToString(System.Collections.Specialized.BitVector32.Section)">
      <summary>返回表示指定 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 的字符串。</summary>
      <returns>表示指定 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 的字符串。</returns>
      <param name="value">要表示的 <see cref="T:System.Collections.Specialized.BitVector32.Section" />。</param>
    </member>
    <member name="T:System.Collections.Specialized.CollectionsUtil">
      <summary>创建忽略字符串大小写的集合。</summary>
    </member>
    <member name="M:System.Collections.Specialized.CollectionsUtil.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Specialized.CollectionsUtil" /> 类的新实例。 </summary>
    </member>
    <member name="M:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable">
      <summary>创建 <see cref="T:System.Collections.Hashtable" /> 类具有默认初始容量的不区分大小写的新实例。</summary>
      <returns>
        <see cref="T:System.Collections.Hashtable" /> 类具有默认初始容量的不区分大小写的新实例。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable(System.Collections.IDictionary)">
      <summary>将项从指定字典复制到 <see cref="T:System.Collections.Hashtable" /> 类的不区分大小写的新实例，该实例具有与复制项的数量相同的初始容量。</summary>
      <returns>
        <see cref="T:System.Collections.Hashtable" /> 类的不区分大小写的新实例，该实例包含指定的 <see cref="T:System.Collections.IDictionary" /> 中的项。</returns>
      <param name="d">要复制到不区分大小写的新 <see cref="T:System.Collections.Hashtable" /> 的 <see cref="T:System.Collections.IDictionary" />。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 为 null。 </exception>
    </member>
    <member name="M:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable(System.Int32)">
      <summary>创建 <see cref="T:System.Collections.Hashtable" /> 类具有指定初始容量的不区分大小写的新实例。</summary>
      <returns>具有指定初始容量的 <see cref="T:System.Collections.Hashtable" /> 类的不区分大小写的新实例。</returns>
      <param name="capacity">
        <see cref="T:System.Collections.Hashtable" /> 最初可包含的大概项数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。 </exception>
    </member>
    <member name="M:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveSortedList">
      <summary>创建 <see cref="T:System.Collections.SortedList" /> 类的新实例，该实例忽略字符串的大小写。</summary>
      <returns>
        <see cref="T:System.Collections.SortedList" /> 类的新实例，该实例忽略字符串的大小写。</returns>
    </member>
    <member name="T:System.Collections.Specialized.HybridDictionary">
      <summary>在集合较小时，使用 <see cref="T:System.Collections.Specialized.ListDictionary" /> 来实现 IDictionary，然后当集合变大时，切换到 <see cref="T:System.Collections.Hashtable" />。</summary>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.#ctor">
      <summary>创建区分大小写的空白 <see cref="T:System.Collections.Specialized.HybridDictionary" />。</summary>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.#ctor(System.Boolean)">
      <summary>创建使用指定的大小写规则的空白 <see cref="T:System.Collections.Specialized.HybridDictionary" />。</summary>
      <param name="caseInsensitive">一个布尔值，它表示 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 是否不区分大小写。</param>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.#ctor(System.Int32)">
      <summary>创建具有指定的初始大小且区分大小写的 <see cref="T:System.Collections.Specialized.HybridDictionary" />。</summary>
      <param name="initialSize">
        <see cref="T:System.Collections.Specialized.HybridDictionary" /> 最初可包含的大概项数。</param>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.#ctor(System.Int32,System.Boolean)">
      <summary>创建具有指定的初始大小和大小写规则的 <see cref="T:System.Collections.Specialized.HybridDictionary" />。</summary>
      <param name="initialSize">
        <see cref="T:System.Collections.Specialized.HybridDictionary" /> 最初可包含的大概项数。</param>
      <param name="caseInsensitive">一个布尔值，它表示 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 是否不区分大小写。</param>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.Add(System.Object,System.Object)">
      <summary>将带有指定键和值的项添加到 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 中。</summary>
      <param name="key">要添加的项的键。</param>
      <param name="value">要添加的项的值。该值可以为 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">带有相同键的项已经存在于 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 中。</exception>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.Clear">
      <summary>从 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 中移除所有项。</summary>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.Contains(System.Object)">
      <summary>确定 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 是否包含特定键。</summary>
      <returns>
            如果 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 包含带有指定键的项，则为 true；否则为 false。</returns>
      <param name="key">要在 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 中定位的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.CopyTo(System.Array,System.Int32)">
      <summary>将 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 项复制到位于指定索引处的一维 <see cref="T:System.Array" /> 实例中。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 复制的 <see cref="T:System.Collections.DictionaryEntry" /> 对象的目标位置。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，在此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 - <paramref name="arrayIndex" /> 等于或大于 <paramref name="array" /> 的长度。- 或 - 源 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 中的元素数目大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</exception>
      <exception cref="T:System.InvalidCastException">源 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 的类型无法自动转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="P:System.Collections.Specialized.HybridDictionary.Count">
      <summary>获取包含在 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 中的键/值对的数目。</summary>
      <returns>包含在 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 中的键/值对的数目。检索此属性的值的运算复杂度是 O(1)。</returns>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 的 <see cref="T:System.Collections.IDictionaryEnumerator" />。</summary>
      <returns>用于 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 的 <see cref="T:System.Collections.IDictionaryEnumerator" />。</returns>
    </member>
    <member name="P:System.Collections.Specialized.HybridDictionary.IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 是否具有固定大小。</summary>
      <returns>该属性总是返回 false。</returns>
    </member>
    <member name="P:System.Collections.Specialized.HybridDictionary.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 是否为只读。</summary>
      <returns>该属性总是返回 false。</returns>
    </member>
    <member name="P:System.Collections.Specialized.HybridDictionary.IsSynchronized">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 是否是同步的（线程安全）。</summary>
      <returns>该属性总是返回 false。</returns>
    </member>
    <member name="P:System.Collections.Specialized.HybridDictionary.Item(System.Object)">
      <summary>获取或设置与指定的键相关联的值。</summary>
      <returns>与指定的键相关联的值。如果未找到指定的键，尝试获取它将返回 null，尝试设置它将使用指定的键创建新项。</returns>
      <param name="key">要获取或设置其值的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="P:System.Collections.Specialized.HybridDictionary.Keys">
      <summary>获取包含 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 中的键的 <see cref="T:System.Collections.ICollection" />。</summary>
      <returns>包含 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 中的键的 <see cref="T:System.Collections.ICollection" />。</returns>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 中移除带有指定键的项。</summary>
      <param name="key">要移除的项的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="P:System.Collections.Specialized.HybridDictionary.SyncRoot">
      <summary>获取可用于同步 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 的访问的对象。</returns>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 的 <see cref="T:System.Collections.IEnumerator" />。</summary>
      <returns>用于 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.Collections.Specialized.HybridDictionary.Values">
      <summary>获取包含 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 中的值的 <see cref="T:System.Collections.ICollection" />。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 中的值。</returns>
    </member>
    <member name="T:System.Collections.Specialized.IOrderedDictionary">
      <summary>表示键/值对的索引集合。</summary>
    </member>
    <member name="M:System.Collections.Specialized.IOrderedDictionary.GetEnumerator">
      <summary>返回一个循环访问 <see cref="T:System.Collections.Specialized.IOrderedDictionary" /> 集合的枚举数。</summary>
      <returns>用于整个 <see cref="T:System.Collections.Specialized.IOrderedDictionary" /> 集合的 <see cref="T:System.Collections.IDictionaryEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32,System.Object,System.Object)">
      <summary>将键/值对插入到集合中的指定索引处。</summary>
      <param name="index">键/值对应在该位置插入的从零开始的索引。</param>
      <param name="key">用作要添加的元素的键的对象。</param>
      <param name="value">用作要添加的元素的值的对象。该值可以为 null。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。- 或 -<paramref name="index" /> 大于 <see cref="P:System.Collections.ICollection.Count" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Collections.Specialized.IOrderedDictionary" /> 集合中已存在具有相同键的元素。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Specialized.IOrderedDictionary" /> 集合是只读的。- 或 -<see cref="T:System.Collections.Specialized.IOrderedDictionary" /> 集合的大小是固定的。</exception>
    </member>
    <member name="P:System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)">
      <summary>获取或设置指定索引处的元素。</summary>
      <returns>指定索引处的元素。</returns>
      <param name="index">要获得或设置的元素从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。- 或 - <paramref name="index" /> 等于或大于 <see cref="P:System.Collections.ICollection.Count" />。 </exception>
    </member>
    <member name="M:System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32)">
      <summary>移除指定索引处的元素。</summary>
      <param name="index">要移除的元素的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。- 或 -<paramref name="index" /> 等于或大于 <see cref="P:System.Collections.ICollection.Count" />。 </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Specialized.IOrderedDictionary" /> 集合是只读的。- 或 - <see cref="T:System.Collections.Specialized.IOrderedDictionary" /> 集合的大小是固定的。 </exception>
    </member>
    <member name="T:System.Collections.Specialized.ListDictionary">
      <summary>使用单链接列表实现 IDictionary。建议用于通常包含 10 个或 10 个以下项的集合。</summary>
    </member>
    <member name="M:System.Collections.Specialized.ListDictionary.#ctor">
      <summary>使用默认比较器创建空白 <see cref="T:System.Collections.Specialized.ListDictionary" />。</summary>
    </member>
    <member name="M:System.Collections.Specialized.ListDictionary.#ctor(System.Collections.IComparer)">
      <summary>使用指定比较器创建空白 <see cref="T:System.Collections.Specialized.ListDictionary" />。</summary>
      <param name="comparer">
        <see cref="T:System.Collections.IComparer" />，用于确定两个键是否相等。- 或 - null，使用默认比较器，该比较器是每一个键的 <see cref="M:System.Object.Equals(System.Object)" /> 实现。</param>
    </member>
    <member name="M:System.Collections.Specialized.ListDictionary.Add(System.Object,System.Object)">
      <summary>将带有指定键和值的项添加到 <see cref="T:System.Collections.Specialized.ListDictionary" /> 中。</summary>
      <param name="key">要添加的项的键。</param>
      <param name="value">要添加的项的值。该值可以为 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">带有相同键的项已经存在于 <see cref="T:System.Collections.Specialized.ListDictionary" /> 中。</exception>
    </member>
    <member name="M:System.Collections.Specialized.ListDictionary.Clear">
      <summary>从 <see cref="T:System.Collections.Specialized.ListDictionary" /> 中移除所有项。</summary>
    </member>
    <member name="M:System.Collections.Specialized.ListDictionary.Contains(System.Object)">
      <summary>确定 <see cref="T:System.Collections.Specialized.ListDictionary" /> 是否包含特定键。</summary>
      <returns>
            如果 <see cref="T:System.Collections.Specialized.ListDictionary" /> 包含带有指定键的项，则为 true；否则为 false。</returns>
      <param name="key">要在 <see cref="T:System.Collections.Specialized.ListDictionary" /> 中定位的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Specialized.ListDictionary.CopyTo(System.Array,System.Int32)">
      <summary>将 <see cref="T:System.Collections.Specialized.ListDictionary" /> 项复制到位于指定索引处的一维 <see cref="T:System.Array" /> 实例中。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.Specialized.ListDictionary" /> 复制的 <see cref="T:System.Collections.DictionaryEntry" /> 对象的目标位置。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，在此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 - <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度。- 或 - 源 <see cref="T:System.Collections.Specialized.ListDictionary" /> 中的元素数目大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</exception>
      <exception cref="T:System.InvalidCastException">源 <see cref="T:System.Collections.Specialized.ListDictionary" /> 的类型无法自动转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="P:System.Collections.Specialized.ListDictionary.Count">
      <summary>获取包含在 <see cref="T:System.Collections.Specialized.ListDictionary" /> 中的键/值对的数目。</summary>
      <returns>包含在 <see cref="T:System.Collections.Specialized.ListDictionary" /> 中的键/值对的数目。</returns>
    </member>
    <member name="M:System.Collections.Specialized.ListDictionary.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.Specialized.ListDictionary" /> 的 <see cref="T:System.Collections.IDictionaryEnumerator" />。</summary>
      <returns>用于 <see cref="T:System.Collections.Specialized.ListDictionary" /> 的 <see cref="T:System.Collections.IDictionaryEnumerator" />。</returns>
    </member>
    <member name="P:System.Collections.Specialized.ListDictionary.IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Specialized.ListDictionary" /> 是否具有固定大小。</summary>
      <returns>该属性总是返回 false。</returns>
    </member>
    <member name="P:System.Collections.Specialized.ListDictionary.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Specialized.ListDictionary" /> 是否为只读。</summary>
      <returns>该属性总是返回 false。</returns>
    </member>
    <member name="P:System.Collections.Specialized.ListDictionary.IsSynchronized">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Specialized.ListDictionary" /> 是否是同步的（线程安全）。</summary>
      <returns>该属性总是返回 false。</returns>
    </member>
    <member name="P:System.Collections.Specialized.ListDictionary.Item(System.Object)">
      <summary>获取或设置与指定的键相关联的值。</summary>
      <returns>与指定的键相关联的值。如果未找到指定的键，尝试获取它将返回 null，尝试设置它将使用指定的键创建新项。</returns>
      <param name="key">要获取或设置其值的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="P:System.Collections.Specialized.ListDictionary.Keys">
      <summary>获取包含 <see cref="T:System.Collections.Specialized.ListDictionary" /> 中的键的 <see cref="T:System.Collections.ICollection" />。</summary>
      <returns>包含 <see cref="T:System.Collections.Specialized.ListDictionary" /> 中的键的 <see cref="T:System.Collections.ICollection" />。</returns>
    </member>
    <member name="M:System.Collections.Specialized.ListDictionary.Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.Specialized.ListDictionary" /> 中移除带有指定键的项。</summary>
      <param name="key">要移除的项的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="P:System.Collections.Specialized.ListDictionary.SyncRoot">
      <summary>获取可用于同步 <see cref="T:System.Collections.Specialized.ListDictionary" /> 访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.Specialized.ListDictionary" /> 的访问的对象。</returns>
    </member>
    <member name="M:System.Collections.Specialized.ListDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.Specialized.ListDictionary" /> 的 <see cref="T:System.Collections.IEnumerator" />。</summary>
      <returns>用于 <see cref="T:System.Collections.Specialized.ListDictionary" /> 的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.Collections.Specialized.ListDictionary.Values">
      <summary>获取包含 <see cref="T:System.Collections.Specialized.ListDictionary" /> 中的值的 <see cref="T:System.Collections.ICollection" />。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.Specialized.ListDictionary" /> 中的值。</returns>
    </member>
    <member name="T:System.Collections.Specialized.NameObjectCollectionBase">
      <summary>为关联的 <see cref="T:System.String" /> 键和 <see cref="T:System.Object" /> 值的集合（可通过键或索引来访问它）提供 abstract 基类。</summary>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.#ctor">
      <summary>初始化为空的 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Collections.IEqualityComparer)">
      <summary>初始化 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 类的新实例，该实例为空、具有默认的初始容量并使用指定的 <see cref="T:System.Collections.IEqualityComparer" /> 对象。</summary>
      <param name="equalityComparer">
        <see cref="T:System.Collections.IEqualityComparer" /> 对象，用于确定两个键是否相等，并为集合中的键生成哈希代码。</param>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>初始化 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 类的新实例，该实例为空、具有默认初始容量，并使用指定的哈希代码提供程序和指定的比较器。</summary>
      <param name="hashProvider">
        <see cref="T:System.Collections.IHashCodeProvider" />，它将为 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例中的所有键提供哈希代码。</param>
      <param name="comparer">
        <see cref="T:System.Collections.IComparer" />，用于确定两个键是否相等。</param>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 类的新实例，该实例为空、具有指定的初始容量，并使用默认哈希代码提供程序和默认比较器。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例最初可以包含的项的大概数目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Int32,System.Collections.IEqualityComparer)">
      <summary>初始化 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 类的新实例，该实例为空、具有指定的初始容量并使用指定的 <see cref="T:System.Collections.IEqualityComparer" /> 对象。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 对象最初可包含的大概项数。</param>
      <param name="equalityComparer">
        <see cref="T:System.Collections.IEqualityComparer" /> 对象，用于确定两个键是否相等，并为集合中的键生成哈希代码。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>初始化 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 类的新实例，该实例为空且具有指定的初始容量，并使用指定的哈希代码提供程序和指定的比较器。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例最初可以包含的项的大概数目。</param>
      <param name="hashProvider">
        <see cref="T:System.Collections.IHashCodeProvider" />，它将为 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例中的所有键提供哈希代码。</param>
      <param name="comparer">
        <see cref="T:System.Collections.IComparer" />，用于确定两个键是否相等。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 类的新实例，该实例可序列化且使用指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，包含序列化新 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例所需的信息。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，包含与新 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例关联的序列化流的源和目标。</param>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseAdd(System.String,System.Object)">
      <summary>将具有指定键和值的项添加到 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例中。</summary>
      <param name="name">要添加的项的 <see cref="T:System.String" /> 键。该键可以为 null。</param>
      <param name="value">要添加的项的 <see cref="T:System.Object" /> 值。该值可以为 null。</param>
      <exception cref="T:System.NotSupportedException">集合为只读。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseClear">
      <summary>移除 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例中的所有项。</summary>
      <exception cref="T:System.NotSupportedException">集合为只读。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.Int32)">
      <summary>获取 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例的指定索引处的项值。</summary>
      <returns>
        <see cref="T:System.Object" />，它表示指定索引处的项值。</returns>
      <param name="index">要获取的值的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 在集合的有效索引范围外。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.String)">
      <summary>获取 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例中第一个具有指定键的项值。</summary>
      <returns>如果找到了表示第一个具有指定键的项值的 <see cref="T:System.Object" />，则为该对象；否则为 null。</returns>
      <param name="name">要获取的项的 <see cref="T:System.String" /> 键。键可以是 null。</param>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys">
      <summary>返回 <see cref="T:System.String" /> 数组，该数组包含 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例中的所有键。</summary>
      <returns>
        <see cref="T:System.String" /> 数组，该数组包含 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例中的所有键。</returns>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues">
      <summary>返回 <see cref="T:System.Object" /> 数组，该数组包含 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例中的所有值。</summary>
      <returns>
        <see cref="T:System.Object" /> 数组，它包含 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例中的所有值。</returns>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues(System.Type)">
      <summary>返回指定类型的数组，该数组包含 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例中的所有值。</summary>
      <returns>指定类型的数组，该数组包含 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例中的所有值。</returns>
      <param name="type">表示要返回的数组类型的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不是有效的 <see cref="T:System.Type" />。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey(System.Int32)">
      <summary>获取 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例的指定索引处的项键。</summary>
      <returns>表示指定索引处的项键的 <see cref="T:System.String" />。</returns>
      <param name="index">要获取的键的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 在集合的有效索引范围外。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys">
      <summary>获取一个值，通过该值指示 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例是否包含键不为 null 的项。</summary>
      <returns>
            如果 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例包含键不为 null 的项，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseRemove(System.String)">
      <summary>移除 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例中具有指定键的项。</summary>
      <param name="name">要移除的项的 <see cref="T:System.String" /> 键。键可以是 null。</param>
      <exception cref="T:System.NotSupportedException">集合为只读。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt(System.Int32)">
      <summary>移除 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例的指定索引处的项。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 在集合的有效索引范围外。</exception>
      <exception cref="T:System.NotSupportedException">集合为只读。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.Int32,System.Object)">
      <summary>设置 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例的指定索引处的项值。</summary>
      <param name="index">要设置的项的从零开始的索引。</param>
      <param name="value">表示要设置的项的新值的 <see cref="T:System.Object" />。该值可以为 null。</param>
      <exception cref="T:System.NotSupportedException">集合为只读。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 在集合的有效索引范围外。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.String,System.Object)">
      <summary>为 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例中第一个具有指定键的项设置值（如果有这样的项）；否则将具有指定键和值的项添加到 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例中。</summary>
      <param name="name">要设置的项的 <see cref="T:System.String" /> 键。键可以是 null。</param>
      <param name="value">表示要设置的项的新值的 <see cref="T:System.Object" />。该值可以为 null。</param>
      <exception cref="T:System.NotSupportedException">集合为只读。</exception>
    </member>
    <member name="P:System.Collections.Specialized.NameObjectCollectionBase.Count">
      <summary>获取包含在 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例中的键/值对的数目。</summary>
      <returns>包含在 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例中的键/值对的数目。</returns>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 的枚举数。</summary>
      <returns>用于 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并返回序列化 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例所需的数据。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，该对象包含序列化 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例所需的信息。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，该对象包含与 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例关联的序列化流的源和目标。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 null。</exception>
    </member>
    <member name="P:System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly">
      <summary>获取或设置一个值，通过该值指示 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例是否为只读的。</summary>
      <returns>
            如果 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Collections.Specialized.NameObjectCollectionBase.Keys">
      <summary>获取 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> 实例，该实例包含 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例中的所有键。</summary>
      <returns>
        <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> 实例，该实例包含 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例中的所有键。</returns>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.OnDeserialization(System.Object)">
      <summary>实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并在完成反序列化之后引发反序列化事件。</summary>
      <param name="sender">反序列化事件源。</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">与当前 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例关联的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象无效。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从目标数组的指定索引处开始将整个 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 复制到兼容的一维 <see cref="T:System.Array" />。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 复制的元素的目标位置的一维 <see cref="T:System.Array" />。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 -<paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度。- 或 -源 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 中的元素数目大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</exception>
      <exception cref="T:System.InvalidCastException">源 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 的类型无法自动转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="P:System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示对 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 对象的访问是否同步（线程安全）。</summary>
      <returns>
            如果对 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 对象的访问是同步的（线程安全），则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="P:System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#SyncRoot">
      <summary>获取一个对象，该对象可用于同步对 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 对象的访问。</summary>
      <returns>一个对象，它可以用于同步对 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 对象的访问。</returns>
    </member>
    <member name="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection">
      <summary>表示集合的 <see cref="T:System.String" /> 键的集合。</summary>
    </member>
    <member name="P:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Count">
      <summary>获取 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> 中的键数。</summary>
      <returns>
        <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> 中键的数目。</returns>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Get(System.Int32)">
      <summary>获取集合的指定索引处的键。</summary>
      <returns>一个 <see cref="T:System.String" />，它包含集合的指定索引处的键。</returns>
      <param name="index">要从集合中获取的从零开始的键索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 在集合的有效索引范围外。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> 的枚举数。</summary>
      <returns>用于 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> 的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Item(System.Int32)">
      <summary>获取集合中指定索引处的项。</summary>
      <returns>集合中指定索引处的项的 <see cref="T:System.String" /> 键。</returns>
      <param name="index">要在集合中定位的项的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 在集合的有效索引范围外。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从目标数组的指定索引处开始将整个 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> 复制到兼容的一维 <see cref="T:System.Array" />。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> 复制的元素的目标位置的一维 <see cref="T:System.Array" />。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，在此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 - <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度。- 或 - 源 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> 中的元素数目大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</exception>
      <exception cref="T:System.InvalidCastException">源 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> 的类型无法自动转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="P:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> 的访问（线程安全）。</summary>
      <returns>
            如果对 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="P:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> 访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> 的访问的对象。</returns>
    </member>
    <member name="T:System.Collections.Specialized.NameValueCollection">
      <summary>表示可通过键或索引访问的关联 <see cref="T:System.String" /> 键和 <see cref="T:System.String" /> 值的集合。</summary>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 类的新实例，该实例为空且具有默认初始容量，并使用不区分大小写的默认哈希代码提供程序和不区分大小写的默认比较器。</summary>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.#ctor(System.Collections.IEqualityComparer)">
      <summary>初始化 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 类的新实例，该实例为空、具有默认的初始容量并使用指定的 <see cref="T:System.Collections.IEqualityComparer" /> 对象。</summary>
      <param name="equalityComparer">
        <see cref="T:System.Collections.IEqualityComparer" /> 对象，用于确定两个键是否相等，并为集合中的键生成哈希代码。</param>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>初始化 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 类的新实例，该实例为空且具有默认初始容量，并使用指定的哈希代码提供程序和指定的比较器。</summary>
      <param name="hashProvider">一个 <see cref="T:System.Collections.IHashCodeProvider" />，它将为 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 中的所有键提供哈希代码。</param>
      <param name="comparer">
        <see cref="T:System.Collections.IComparer" />，用于确定两个键是否相等。</param>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.#ctor(System.Collections.Specialized.NameValueCollection)">
      <summary>将项从指定的 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 复制到一个新的 <see cref="T:System.Collections.Specialized.NameValueCollection" />，这个新集合的初始容量与复制的项数相等，并使用与源集合相同的哈希代码提供程序和比较器。</summary>
      <param name="col">要复制到新 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 实例的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="col" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 类的新实例，该实例为空且具有指定的初始容量，并使用不区分大小写的默认哈希代码提供程序和不区分大小写的默认比较器。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Specialized.NameValueCollection" /> 可包含的初始项数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.#ctor(System.Int32,System.Collections.IEqualityComparer)">
      <summary>初始化 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 类的新实例，该实例为空、具有指定的初始容量并使用指定的 <see cref="T:System.Collections.IEqualityComparer" /> 对象。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Specialized.NameValueCollection" /> 对象可包含的初始项数。</param>
      <param name="equalityComparer">
        <see cref="T:System.Collections.IEqualityComparer" /> 对象，用于确定两个键是否相等，并为集合中的键生成哈希代码。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>初始化 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 类的新实例，该实例为空且具有指定的初始容量，并使用指定的哈希代码提供程序和指定的比较器。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Specialized.NameValueCollection" /> 可包含的初始项数。</param>
      <param name="hashProvider">一个 <see cref="T:System.Collections.IHashCodeProvider" />，它将为 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 中的所有键提供哈希代码。</param>
      <param name="comparer">
        <see cref="T:System.Collections.IComparer" />，用于确定两个键是否相等。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.#ctor(System.Int32,System.Collections.Specialized.NameValueCollection)">
      <summary>将项从指定的 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 复制到一个新的 <see cref="T:System.Collections.Specialized.NameValueCollection" />，这个新集合使用指定的初始容量或与具有与复制的项数相等的初始容量（两者中较大的一个），并使用不区分大小写的默认哈希代码提供程序和不区分大小写的默认比较器。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Specialized.NameValueCollection" /> 可包含的初始项数。</param>
      <param name="col">要复制到新 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 实例的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="col" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 类的新实例，该实例可序列化且使用指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，包含序列化新 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 实例所需的信息。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，包含与新 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 实例关联的序列化流的源和目标。</param>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.Add(System.Collections.Specialized.NameValueCollection)">
      <summary>将指定 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 中的项复制到当前 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</summary>
      <param name="c">要复制到当前 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 中的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</param>
      <exception cref="T:System.NotSupportedException">集合为只读。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.Add(System.String,System.String)">
      <summary>将具有指定名称和值的项添加到 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</summary>
      <param name="name">要添加的项的 <see cref="T:System.String" /> 键。该键可以为 null。</param>
      <param name="value">要添加的项的 <see cref="T:System.String" /> 值。该值可以为 null。</param>
      <exception cref="T:System.NotSupportedException">集合为只读。 </exception>
    </member>
    <member name="P:System.Collections.Specialized.NameValueCollection.AllKeys">
      <summary>获取 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 中的所有键。</summary>
      <returns>一个 <see cref="T:System.String" /> 数组，包含 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 中的所有键。</returns>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.Clear">
      <summary>使缓存数组无效，并将所有项从 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 中移除。</summary>
      <exception cref="T:System.NotSupportedException">集合为只读。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.CopyTo(System.Array,System.Int32)">
      <summary>从目标数组的指定索引处开始将整个 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 复制到兼容的一维 <see cref="T:System.Array" />。</summary>
      <param name="dest">作为从 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 复制的元素的目标位置的一维 <see cref="T:System.Array" />。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="dest" /> 中从零开始的索引，在此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dest" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dest" /> 是多维的。- 或 - <paramref name="index" /> 等于或大于 <paramref name="dest" /> 的长度。- 或 -源 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 中的元素数目大于从 <paramref name="index" /> 到目标 <paramref name="dest" /> 末尾之间的可用空间。</exception>
      <exception cref="T:System.InvalidCastException">源 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 的类型无法自动转换为目标 <paramref name="dest" /> 的类型。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.Get(System.Int32)">
      <summary>获取 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 中指定索引处的值，这些值已合并为一个以逗号分隔的列表。</summary>
      <returns>如果找到，则为一个 <see cref="T:System.String" />，包含 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 中指定索引处的值的列表（此列表以逗号分隔）；否则为 null。</returns>
      <param name="index">项的从零开始的索引，该项包含要从集合中获取的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 在集合的有效索引范围外。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.Get(System.String)">
      <summary>获取与 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 中的指定键关联的值，这些值已合并为一个以逗号分隔的列表。</summary>
      <returns>如果找到，则为一个 <see cref="T:System.String" />，包含与 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 中的指定键关联的值的列表（此列表以逗号分隔）；否则为 null。</returns>
      <param name="name">项的 <see cref="T:System.String" /> 键，该项包含要获取的值。键可以是 null。</param>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.GetKey(System.Int32)">
      <summary>获取 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 的指定索引处的键。</summary>
      <returns>如果找到，则为一个 <see cref="T:System.String" />，包含 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 中指定索引处的键；否则为 null。</returns>
      <param name="index">要从集合中获取的从零开始的键索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 在集合的有效索引范围外。 </exception>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.GetValues(System.Int32)">
      <summary>获取 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 中指定索引处的值。</summary>
      <returns>如果找到，则为一个 <see cref="T:System.String" /> 数组，包含 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 中指定索引处的值；否则为 null。</returns>
      <param name="index">项的从零开始的索引，该项包含要从集合中获取的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 在集合的有效索引范围外。 </exception>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.GetValues(System.String)">
      <summary>获取与 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 中的指定键关联的值。</summary>
      <returns>如果找到，则为一个 <see cref="T:System.String" /> 数组，包含与 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 中的指定键关联的值；否则为 null。</returns>
      <param name="name">项的 <see cref="T:System.String" /> 键，该项包含要获取的值。键可以是 null。</param>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.HasKeys">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 是否包含非 null 的键。</summary>
      <returns>
如果 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 包含非 null 的键，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.InvalidateCachedArrays">
      <summary>将集合的缓存数组重置为 null。</summary>
    </member>
    <member name="P:System.Collections.Specialized.NameValueCollection.Item(System.Int32)">
      <summary>获取 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 中指定索引处的项。</summary>
      <returns>一个 <see cref="T:System.String" />，包含集合中指定索引处的值的列表（此列表以逗号分隔）。</returns>
      <param name="index">要在集合中定位的项的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 在集合的有效索引范围外。</exception>
    </member>
    <member name="P:System.Collections.Specialized.NameValueCollection.Item(System.String)">
      <summary>获取或设置 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 中具有指定键的项。</summary>
      <returns>如果找到了，则为一个 <see cref="T:System.String" />，它包含与指定键关联的值的列表（用逗号分隔）；否则为 null。</returns>
      <param name="name">要定位的项的 <see cref="T:System.String" /> 键。键可以是 null。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的，但此操作试图修改该集合。 </exception>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.Remove(System.String)">
      <summary>移除 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例中具有指定键的项。</summary>
      <param name="name">要移除的项的 <see cref="T:System.String" /> 键。键可以是 null。</param>
      <exception cref="T:System.NotSupportedException">集合为只读。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.Set(System.String,System.String)">
      <summary>设置 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 中某个项的值。</summary>
      <param name="name">要向其添加新值的项的 <see cref="T:System.String" /> 键。键可以是 null。</param>
      <param name="value">
        <see cref="T:System.Object" />，表示要添加到指定项的新值。该值可以为 null。</param>
      <exception cref="T:System.NotSupportedException">集合为只读。</exception>
    </member>
    <member name="T:System.Collections.Specialized.OrderedDictionary">
      <summary>表示键或索引可访问的键/值对的集合。</summary>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.#ctor(System.Collections.IEqualityComparer)">
      <summary>使用指定的比较器初始化 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 类的新实例。</summary>
      <param name="comparer">
        <see cref="T:System.Collections.IComparer" />，用于确定两个键是否相等。- 或 - null，使用默认比较器，该比较器是每一个键的 <see cref="M:System.Object.Equals(System.Object)" /> 实现。</param>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.#ctor(System.Int32)">
      <summary>使用指定的初始容量初始化 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 类的新实例。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合可以包含的初始元素数。</param>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.#ctor(System.Int32,System.Collections.IEqualityComparer)">
      <summary>使用指定初始容量和比较器初始化 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 类的新实例。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合可以包含的初始元素数。</param>
      <param name="comparer">
        <see cref="T:System.Collections.IComparer" />，用于确定两个键是否相等。- 或 - null，使用默认比较器，该比较器是每一个键的 <see cref="M:System.Object.Equals(System.Object)" /> 实现。</param>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象初始化可序列化的 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 类的新实例。</summary>
      <param name="info">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，包含序列化 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合所需的信息。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，该对象包含与 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 相关联的序列化流的源和目标。</param>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.Add(System.Object,System.Object)">
      <summary>使用最小的可用索引，将具有指定键和值的项添加到 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合中。</summary>
      <param name="key">要添加的项的键。</param>
      <param name="value">要添加的项值。该值可以为 null。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Specialized.OrderedDictionary" />  集合是只读的。</exception>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.AsReadOnly">
      <summary>返回当前 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合的只读副本。</summary>
      <returns>当前 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合的只读副本。</returns>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.Clear">
      <summary>移除 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合中的所有元素。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合是只读的。</exception>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.Contains(System.Object)">
      <summary>确定 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合是否包含特定的键。</summary>
      <returns>
            如果 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合包含具有指定键的元素，则为 true；否则为 false。</returns>
      <param name="key">要在 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合中定位的键。</param>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.CopyTo(System.Array,System.Int32)">
      <summary>将 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 元素复制到位于指定索引处的一维 <see cref="T:System.Array" /> 对象中。</summary>
      <param name="array">一维 <see cref="T:System.Array" /> 对象，是从 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合复制的 <see cref="T:System.Collections.DictionaryEntry" /> 对象的目标。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，在此处开始复制。</param>
    </member>
    <member name="P:System.Collections.Specialized.OrderedDictionary.Count">
      <summary>获取包含在 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合中的键/值对的数目。</summary>
      <returns>包含在 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合中的键/值对的数目。</returns>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.GetEnumerator">
      <summary>返回一个循环访问 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 对象。</summary>
      <returns>
        <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 对象。</returns>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并返回序列化 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合所需的数据。</summary>
      <param name="info">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，包含序列化 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合所需的信息。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，该对象包含与 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 相关联的序列化流的源和目标。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.Insert(System.Int32,System.Object,System.Object)">
      <summary>在指定索引处用指定键和值将新项插入到 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合中。</summary>
      <param name="index">从零开始的索引，应在此处插入元素。</param>
      <param name="key">要添加的项的键。</param>
      <param name="value">要添加的项的值。该值可以为 null。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出范围。</exception>
      <exception cref="T:System.NotSupportedException">此集合为只读。</exception>
    </member>
    <member name="P:System.Collections.Specialized.OrderedDictionary.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合是否为只读的。</summary>
      <returns>
            如果 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合为只读，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="P:System.Collections.Specialized.OrderedDictionary.Item(System.Int32)">
      <summary>获取或设置指定索引处的值。</summary>
      <returns>指定索引处的项的值。</returns>
      <param name="index">要获取或设置的值的从零开始的索引。</param>
      <exception cref="T:System.NotSupportedException">正在设置此属性，但 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合是只读的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。- 或 -<paramref name="index" /> 等于或大于 <see cref="P:System.Collections.Specialized.OrderedDictionary.Count" />。</exception>
    </member>
    <member name="P:System.Collections.Specialized.OrderedDictionary.Item(System.Object)">
      <summary>获取或设置具有指定键的值。</summary>
      <returns>与指定的键相关联的值。如果未找到指定的键，尝试获取它将返回 null，尝试设置它将使用指定的键创建新元素。</returns>
      <param name="key">要获取或设置的值的键。</param>
      <exception cref="T:System.NotSupportedException">正在设置此属性，但 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合是只读的。</exception>
    </member>
    <member name="P:System.Collections.Specialized.OrderedDictionary.Keys">
      <summary>获取 <see cref="T:System.Collections.ICollection" /> 对象，该对象包含 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合中的键。</summary>
      <returns>一个<see cref="T:System.Collections.ICollection" /> 对象，它包含 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合中的键。</returns>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.OnDeserialization(System.Object)">
      <summary>实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并在完成反序列化后由反序列化事件回调。</summary>
      <param name="sender">反序列化事件源。</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">与当前 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合相关联的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象无效。</exception>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合中移除具有指定键的项。</summary>
      <param name="key">要移除的项的键。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合是只读的。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.RemoveAt(System.Int32)">
      <summary>从 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合中移除指定索引处的项。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合是只读的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。- 或 -<paramref name="index" /> 等于或大于 <see cref="P:System.Collections.Specialized.OrderedDictionary.Count" />。</exception>
    </member>
    <member name="P:System.Collections.Specialized.OrderedDictionary.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示对 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 对象的访问是否同步（线程安全）。</summary>
      <returns>此方法通常返回 false。</returns>
    </member>
    <member name="P:System.Collections.Specialized.OrderedDictionary.System#Collections#ICollection#SyncRoot">
      <summary>获取一个对象，该对象可用于同步对 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 对象的访问。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 对象的访问的对象。</returns>
    </member>
    <member name="P:System.Collections.Specialized.OrderedDictionary.System#Collections#IDictionary#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 是否具有固定大小。</summary>
      <returns>
            如果 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 具有固定大小，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 对象。</summary>
      <returns>
        <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 对象。</returns>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并在完成反序列化后由反序列化事件回调。</summary>
      <param name="sender">反序列化事件源。</param>
    </member>
    <member name="P:System.Collections.Specialized.OrderedDictionary.Values">
      <summary>获取 <see cref="T:System.Collections.ICollection" /> 对象，该对象包含 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合中的值。</summary>
      <returns>一个<see cref="T:System.Collections.ICollection" /> 对象，它包含 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合中的值。</returns>
    </member>
    <member name="T:System.Collections.Specialized.StringCollection">
      <summary>表示字符串集合。</summary>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Specialized.StringCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.Add(System.String)">
      <summary>将字符串添加到 <see cref="T:System.Collections.Specialized.StringCollection" /> 的末尾。</summary>
      <returns>从零开始的索引，在此处插入新元素。</returns>
      <param name="value">要添加到 <see cref="T:System.Collections.Specialized.StringCollection" /> 的末尾的字符串。该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.AddRange(System.String[])">
      <summary>将字符串数组的元素复制到 <see cref="T:System.Collections.Specialized.StringCollection" /> 的末尾。</summary>
      <param name="value">要添加到 <see cref="T:System.Collections.Specialized.StringCollection" /> 的末尾的字符串数组。数组本身不能为 null，但可以包含为 null 的元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.Clear">
      <summary>移除 <see cref="T:System.Collections.Specialized.StringCollection" /> 中的所有字符串。</summary>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.Contains(System.String)">
      <summary>确定指定的字符串是否在 <see cref="T:System.Collections.Specialized.StringCollection" /> 中。</summary>
      <returns>
            如果在 <see cref="T:System.Collections.Specialized.StringCollection" /> 中找到 <paramref name="value" />，则为 true；否则为 false。</returns>
      <param name="value">要在 <see cref="T:System.Collections.Specialized.StringCollection" /> 中定位的字符串。该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.CopyTo(System.String[],System.Int32)">
      <summary>从目标数组的指定索引处开始，将全部 <see cref="T:System.Collections.Specialized.StringCollection" /> 值复制到一维字符串数组中。</summary>
      <param name="array">一维字符串数组，用作从 <see cref="T:System.Collections.Specialized.StringCollection" /> 复制元素的目标数组。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 -<paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度。- 或 -源 <see cref="T:System.Collections.Specialized.StringCollection" /> 中的元素数目大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</exception>
      <exception cref="T:System.InvalidCastException">源 <see cref="T:System.Collections.Specialized.StringCollection" /> 的类型无法自动转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="P:System.Collections.Specialized.StringCollection.Count">
      <summary>获取 <see cref="T:System.Collections.Specialized.StringCollection" /> 中包含的字符串的数目。</summary>
      <returns>
        <see cref="T:System.Collections.Specialized.StringCollection" /> 中包含的字符串的数目。</returns>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.Specialized.StringCollection" /> 的 <see cref="T:System.Collections.Specialized.StringEnumerator" />。</summary>
      <returns>用于 <see cref="T:System.Collections.Specialized.StringCollection" /> 的 <see cref="T:System.Collections.Specialized.StringEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.IndexOf(System.String)">
      <summary>搜索指定的字符串并返回 <see cref="T:System.Collections.Specialized.StringCollection" /> 内的第一个匹配项的从零开始的索引。</summary>
      <returns>如果找到，则为 <see cref="T:System.Collections.Specialized.StringCollection" /> 中 <paramref name="value" /> 的第一个匹配项的从零开始的索引；否则为 -1。</returns>
      <param name="value">要定位的字符串。该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.Insert(System.Int32,System.String)">
      <summary>将字符串插入 <see cref="T:System.Collections.Specialized.StringCollection" /> 中的指定索引处。</summary>
      <param name="index">从零开始的索引，在此处插入 <paramref name="value" />。</param>
      <param name="value">要插入的字符串。该值可以为 null。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。- 或 -<paramref name="index" /> 大于 <see cref="P:System.Collections.Specialized.StringCollection.Count" />。</exception>
    </member>
    <member name="P:System.Collections.Specialized.StringCollection.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Specialized.StringCollection" /> 是否为只读。</summary>
      <returns>该属性总是返回 false。</returns>
    </member>
    <member name="P:System.Collections.Specialized.StringCollection.IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.Specialized.StringCollection" /> 的访问（线程安全）。</summary>
      <returns>该属性总是返回 false。</returns>
    </member>
    <member name="P:System.Collections.Specialized.StringCollection.Item(System.Int32)">
      <summary>获取或设置指定索引处的元素。</summary>
      <returns>指定索引处的元素。</returns>
      <param name="index">要获取或设置的项的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。- 或 -<paramref name="index" /> 等于或大于 <see cref="P:System.Collections.Specialized.StringCollection.Count" />。</exception>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.Remove(System.String)">
      <summary>从 <see cref="T:System.Collections.Specialized.StringCollection" /> 中移除特定字符串的第一个匹配项。</summary>
      <param name="value">要从 <see cref="T:System.Collections.Specialized.StringCollection" /> 中移除的字符串。该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.RemoveAt(System.Int32)">
      <summary>移除 <see cref="T:System.Collections.Specialized.StringCollection" /> 的指定索引处的字符串。</summary>
      <param name="index">要删除的字符串的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。- 或 -<paramref name="index" /> 等于或大于 <see cref="P:System.Collections.Specialized.StringCollection.Count" />。</exception>
    </member>
    <member name="P:System.Collections.Specialized.StringCollection.SyncRoot">
      <summary>获取可用于同步 <see cref="T:System.Collections.Specialized.StringCollection" /> 访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.Specialized.StringCollection" /> 的访问的对象。</returns>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从目标数组的指定索引处开始将整个 <see cref="T:System.Collections.Specialized.StringCollection" /> 复制到兼容的一维 <see cref="T:System.Array" />。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.Specialized.StringCollection" /> 复制的元素的目标位置的一维 <see cref="T:System.Array" />。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 -<paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度。- 或 -源 <see cref="T:System.Collections.Specialized.StringCollection" /> 中的元素数目大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</exception>
      <exception cref="T:System.InvalidCastException">源 <see cref="T:System.Collections.Specialized.StringCollection" /> 的类型无法自动转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.Specialized.StringCollection" /> 的 <see cref="T:System.Collections.IEnumerator" />。</summary>
      <returns>用于 <see cref="T:System.Collections.Specialized.StringCollection" /> 的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.System#Collections#IList#Add(System.Object)">
      <summary>将对象添加到 <see cref="T:System.Collections.Specialized.StringCollection" /> 的结尾处。</summary>
      <returns>
        <see cref="T:System.Collections.Specialized.StringCollection" /> 索引，已在此处添加了 <paramref name="value" />。</returns>
      <param name="value">要添加到 <see cref="T:System.Collections.Specialized.StringCollection" /> 的末尾处的 <see cref="T:System.Object" />。该值可以为 null。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Specialized.StringCollection" /> 为只读。- 或 -<see cref="T:System.Collections.Specialized.StringCollection" /> 具有固定大小。</exception>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.System#Collections#IList#Contains(System.Object)">
      <summary>确定某元素是否在 <see cref="T:System.Collections.Specialized.StringCollection" /> 中。</summary>
      <returns>
            如果在 <see cref="T:System.Collections.Specialized.StringCollection" /> 中找到 <paramref name="value" />，则为 true；否则为 false。</returns>
      <param name="value">要在 <see cref="T:System.Collections.Specialized.StringCollection" /> 中查找的 <see cref="T:System.Object" />。该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>搜索指定的 <see cref="T:System.Object" />，并返回整个 <see cref="T:System.Collections.Specialized.StringCollection" /> 中第一个匹配项的从零开始的索引。</summary>
      <returns>如果找到，则为整个 <see cref="T:System.Collections.Specialized.StringCollection" /> 中 <paramref name="value" /> 的第一个匹配项的从零开始的索引；否则为 -1。</returns>
      <param name="value">要在 <see cref="T:System.Collections.Specialized.StringCollection" /> 中查找的 <see cref="T:System.Object" />。该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>将元素插入 <see cref="T:System.Collections.Specialized.StringCollection" /> 的指定索引处。</summary>
      <param name="index">从零开始的索引，应在该位置插入 <paramref name="value" />。</param>
      <param name="value">要插入的 <see cref="T:System.Object" />。该值可以为 null。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。- 或 -<paramref name="index" /> 大于 <see cref="P:System.Collections.Specialized.StringCollection.Count" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Specialized.StringCollection" /> 为只读。- 或 -<see cref="T:System.Collections.Specialized.StringCollection" /> 具有固定大小。</exception>
    </member>
    <member name="P:System.Collections.Specialized.StringCollection.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Specialized.StringCollection" /> 对象是否具有固定大小。</summary>
      <returns>
            如果 <see cref="T:System.Collections.Specialized.StringCollection" /> 对象具有固定大小，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="P:System.Collections.Specialized.StringCollection.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Specialized.StringCollection" /> 对象是否为只读。</summary>
      <returns>
            如果 <see cref="T:System.Collections.Specialized.StringCollection" /> 对象为只读，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="P:System.Collections.Specialized.StringCollection.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置指定索引处的元素。</summary>
      <returns>指定索引处的元素。</returns>
      <param name="index">要获得或设置的元素从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。- 或 -<paramref name="index" /> 等于或大于 <see cref="P:System.Collections.Specialized.StringCollection.Count" />。</exception>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.System#Collections#IList#Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.Specialized.StringCollection" /> 中移除特定对象的第一个匹配项。</summary>
      <param name="value">要从 <see cref="T:System.Collections.Specialized.StringCollection" /> 移除的 <see cref="T:System.Object" />。该值可以为 null。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Specialized.StringCollection" /> 为只读。- 或 -<see cref="T:System.Collections.Specialized.StringCollection" /> 具有固定大小。</exception>
    </member>
    <member name="T:System.Collections.Specialized.StringDictionary">
      <summary>将键和值强类型化为字符串而不是对象来实现哈希表。</summary>
    </member>
    <member name="M:System.Collections.Specialized.StringDictionary.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Specialized.StringDictionary" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Collections.Specialized.StringDictionary.Add(System.String,System.String)">
      <summary>将带有指定键和值的项添加到 <see cref="T:System.Collections.Specialized.StringDictionary" /> 中。</summary>
      <param name="key">要添加的项的键。 </param>
      <param name="value">要添加的项的值。该值可以为 null。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">带有相同键的项已经存在于 <see cref="T:System.Collections.Specialized.StringDictionary" /> 中。 </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Specialized.StringDictionary" /> 为只读。 </exception>
    </member>
    <member name="M:System.Collections.Specialized.StringDictionary.Clear">
      <summary>从 <see cref="T:System.Collections.Specialized.StringDictionary" /> 中移除所有项。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Specialized.StringDictionary" /> 为只读。 </exception>
    </member>
    <member name="M:System.Collections.Specialized.StringDictionary.ContainsKey(System.String)">
      <summary>确定 <see cref="T:System.Collections.Specialized.StringDictionary" /> 是否包含特定键。</summary>
      <returns>
如果 <see cref="T:System.Collections.Specialized.StringDictionary" /> 包含带有指定键的项，则为 true；否则为 false。</returns>
      <param name="key">要在 <see cref="T:System.Collections.Specialized.StringDictionary" /> 中定位的键。 </param>
      <exception cref="T:System.ArgumentNullException">该键为 null。 </exception>
    </member>
    <member name="M:System.Collections.Specialized.StringDictionary.ContainsValue(System.String)">
      <summary>确定 <see cref="T:System.Collections.Specialized.StringDictionary" /> 是否包含特定值。</summary>
      <returns>
如果 <see cref="T:System.Collections.Specialized.StringDictionary" /> 包含带有指定值的元素，则为 true；否则为 false。</returns>
      <param name="value">要在 <see cref="T:System.Collections.Specialized.StringDictionary" /> 中定位的值。该值可以为 null。 </param>
    </member>
    <member name="M:System.Collections.Specialized.StringDictionary.CopyTo(System.Array,System.Int32)">
      <summary>将字符串字典值复制到一维 <see cref="T:System.Array" /> 实例的指定索引位置。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，为从 <see cref="T:System.Collections.Specialized.StringDictionary" /> 所复制的值的目标位置。 </param>
      <param name="index">数组中的索引，复制从此处开始。 </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 - <see cref="T:System.Collections.Specialized.StringDictionary" /> 中的元素数目大于从 <paramref name="index" /> 到 <paramref name="array" /> 结尾的可用空间。 </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。 </exception>
    </member>
    <member name="P:System.Collections.Specialized.StringDictionary.Count">
      <summary>获取 <see cref="T:System.Collections.Specialized.StringDictionary" /> 中的键/值对的数目。</summary>
      <returns>
        <see cref="T:System.Collections.Specialized.StringDictionary" /> 中的键/值对的数目。检索此属性的值的运算复杂度为 O(1)。</returns>
    </member>
    <member name="M:System.Collections.Specialized.StringDictionary.GetEnumerator">
      <summary>返回循环访问字符串字典的枚举数。</summary>
      <returns>循环访问字符串字典的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.Collections.Specialized.StringDictionary.IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.Specialized.StringDictionary" /> 的访问（线程安全）。</summary>
      <returns>
如果对 <see cref="T:System.Collections.Specialized.StringDictionary" /> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Collections.Specialized.StringDictionary.Item(System.String)">
      <summary>获取或设置与指定的键相关联的值。</summary>
      <returns>与指定的键相关联的值。如果指定的键不能找到，则 Get 返回 null，而 Set 创建具有指定键的新项。</returns>
      <param name="key">要获取或设置其值的键。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="P:System.Collections.Specialized.StringDictionary.Keys">
      <summary>获取 <see cref="T:System.Collections.Specialized.StringDictionary" /> 中键的集合。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />，它提供 <see cref="T:System.Collections.Specialized.StringDictionary" /> 中的键。</returns>
    </member>
    <member name="M:System.Collections.Specialized.StringDictionary.Remove(System.String)">
      <summary>从字符串字典中移除带有指定键的项。</summary>
      <param name="key">要移除的项的键。 </param>
      <exception cref="T:System.ArgumentNullException">该键为 null。 </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Specialized.StringDictionary" /> 为只读。 </exception>
    </member>
    <member name="P:System.Collections.Specialized.StringDictionary.SyncRoot">
      <summary>获取可用于同步 <see cref="T:System.Collections.Specialized.StringDictionary" /> 访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.Specialized.StringDictionary" /> 的访问的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.Collections.Specialized.StringDictionary.Values">
      <summary>获取 <see cref="T:System.Collections.Specialized.StringDictionary" /> 中值的集合。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />，它提供 <see cref="T:System.Collections.Specialized.StringDictionary" /> 中的值。</returns>
    </member>
    <member name="T:System.Collections.Specialized.StringEnumerator">
      <summary>支持在 <see cref="T:System.Collections.Specialized.StringCollection" /> 上进行简单迭代。</summary>
    </member>
    <member name="P:System.Collections.Specialized.StringEnumerator.Current">
      <summary>获取集合中的当前元素。</summary>
      <returns>集合中的当前元素。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在该集合的第一个元素之前或最后一个元素之后。 </exception>
    </member>
    <member name="M:System.Collections.Specialized.StringEnumerator.MoveNext">
      <summary>将枚举数推进到集合的下一个元素。</summary>
      <returns>
如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。 </exception>
    </member>
    <member name="M:System.Collections.Specialized.StringEnumerator.Reset">
      <summary>将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。 </exception>
    </member>
    <member name="T:System.ComponentModel.AddingNewEventArgs">
      <summary>为 <see cref="E:System.Windows.Forms.BindingSource.AddingNew" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor">
      <summary>不带参数初始化 <see cref="T:System.ComponentModel.AddingNewEventArgs" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor(System.Object)">
      <summary>使用指定的对象作为新项初始化 <see cref="T:System.ComponentModel.AddingNewEventArgs" /> 类的新实例。</summary>
      <param name="newObject">要用作新项的值的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="P:System.ComponentModel.AddingNewEventArgs.NewObject">
      <summary>获取或设置要添加到绑定列表的对象。</summary>
      <returns>要作为新项添加到关联的集合中的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.ComponentModel.AddingNewEventHandler">
      <summary>表示将处理 <see cref="E:System.Windows.Forms.BindingSource.AddingNew" /> 事件的方法。</summary>
      <param name="sender">事件的源，通常是数据容器或数据绑定集合。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.AddingNewEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.AmbientValueAttribute">
      <summary>指定要传递给属性的值，以使该属性从其他源获取其值。这称为“环境”。无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Boolean)">
      <summary>在为 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类的新实例的值提供一个布尔值的情况下，初始化该实例。</summary>
      <param name="value">此属性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Byte)">
      <summary>在为 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类的新实例的值提供一个 8 位无符号整数的情况下，初始化该实例。</summary>
      <param name="value">此属性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Char)">
      <summary>在为 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类的新实例的值提供一个 Unicode 字符的情况下，初始化该实例。</summary>
      <param name="value">此属性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Double)">
      <summary>在为 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类的新实例的值提供一个双精度浮点数字的情况下，初始化该实例。</summary>
      <param name="value">此属性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int16)">
      <summary>在为 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类的新实例的值提供一个 16 位有符号整数的情况下，初始化该实例。</summary>
      <param name="value">此属性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int32)">
      <summary>在为 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类的新实例的值提供一个 32 位有符号整数的情况下，初始化该实例。</summary>
      <param name="value">此属性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int64)">
      <summary>在为 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类的新实例的值提供一个 64 位有符号整数的情况下，初始化该实例。</summary>
      <param name="value">此属性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Object)">
      <summary>在为 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类的新实例的值提供一个对象的情况下，初始化该实例。</summary>
      <param name="value">此属性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Single)">
      <summary>在为 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类的新实例的值提供一个单精度浮点数字的情况下，初始化该实例。</summary>
      <param name="value">此属性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.String)">
      <summary>在为 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类的新实例的值提供一个字符串的情况下，初始化该实例。</summary>
      <param name="value">此属性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Type,System.String)">
      <summary>在提供值和其类型的情况下，初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类的新实例。</summary>
      <param name="type">
        <paramref name="value" /> 参数的 <see cref="T:System.Type" />。</param>
      <param name="value">此属性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.Equals(System.Object)">
      <summary>确定指定的 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 是否等于当前的 <see cref="T:System.ComponentModel.AmbientValueAttribute" />。</summary>
      <returns>
            如果指定的 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 等于当前的 <see cref="T:System.ComponentModel.AmbientValueAttribute" />，则为 true；否则为 false。</returns>
      <param name="obj">与当前的 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 进行比较的 <see cref="T:System.ComponentModel.AmbientValueAttribute" />。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.AmbientValueAttribute.Value">
      <summary>获取对象，该对象是此 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 的值。</summary>
      <returns>是此 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 的值的对象。</returns>
    </member>
    <member name="T:System.ComponentModel.ArrayConverter">
      <summary>提供将 <see cref="T:System.Array" /> 对象与其他各种表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.ArrayConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将给定的值对象转换为指定的目标类型。</summary>
      <returns>表示转换的 value 的 <see cref="T:System.Object" />。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="culture">
        <paramref name="value" /> 将要转换到的区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">要将值转换成的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>获取由值参数指定的数组类型的属性集合。</summary>
      <returns>一个具有为数组公开的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />；如果没有属性，则为 null。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="value">一个 <see cref="T:System.Object" />，它指定要为其获取属性的数组的类型。</param>
      <param name="attributes">一个将用作筛选器的 <see cref="T:System.Attribute" /> 类型的数组。</param>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示此对象是否支持属性。</summary>
      <returns>
            返回 true，因为应调用 <see cref="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 来查找此对象的属性。此方法从不返回 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
    </member>
    <member name="T:System.ComponentModel.AsyncCompletedEventArgs">
      <summary>
                    为 MethodNameCompleted 事件提供数据。
                </summary>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)">
      <summary>
                    初始化 <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> 类的新实例。
                </summary>
      <param name="error">
                    在异步操作期间发生的任何错误。
                </param>
      <param name="cancelled">
                    一个指示异步操作是否已被取消的值。
                </param>
      <param name="userState">
                    传递给 <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" /> 方法的、用户提供的可选状态对象。
                </param>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">
      <summary>
                    获取一个值，该值指示异步操作是否已被取消。
                </summary>
      <returns>
                    如果后台操作已被取消，则为 true；否则为 false。默认为 false。
                </returns>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.Error">
      <summary>
                    获取一个值，该值指示异步操作期间发生的错误。
                </summary>
      <returns>
                    如果异步操作期间发生错误，则为 <see cref="T:System.Exception" /> 实例；否则为 null。
                </returns>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary">
      <summary>
                    如果异步操作失败，则引发用户提供的异常。
                </summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /> 属性为 true。
                </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">
                    该 <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> 属性已由异步操作设置。<see cref="P:System.Exception.InnerException" /> 属性持有对 <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> 的引用。
                </exception>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.UserState">
      <summary>
                    获取异步任务的唯一标识符。
                </summary>
      <returns>
                    唯一标识异步任务的对象引用；如果未设置任何值，则为 null。
                </returns>
    </member>
    <member name="T:System.ComponentModel.AsyncCompletedEventHandler">
      <summary>表示将要处理异步操作的 MethodNameCompleted 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.AsyncOperation">
      <summary>跟踪异步操作的生存期。</summary>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.OperationCompleted">
      <summary>结束异步操作的生存期。</summary>
      <exception cref="T:System.InvalidOperationException">
                此前便已为此任务调用了 <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" />。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary>在适合于应用程序模型的线程或上下文中调用委托。</summary>
      <param name="d">一个用于包装操作结束时要调用的委托的 <see cref="T:System.Threading.SendOrPostCallback" /> 对象。</param>
      <param name="arg">
        <paramref name="d" /> 参数中包含的委托的一个参数。</param>
      <exception cref="T:System.InvalidOperationException">此前便已为此任务调用了 <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> 方法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
      <summary>结束异步操作的生存期。</summary>
      <param name="d">一个用于包装操作结束时要调用的委托的 <see cref="T:System.Threading.SendOrPostCallback" /> 对象。</param>
      <param name="arg">
        <paramref name="d" /> 参数中包含的委托的一个参数。</param>
      <exception cref="T:System.InvalidOperationException">
                此前便已为此任务调用了 <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 为 null。</exception>
    </member>
    <member name="P:System.ComponentModel.AsyncOperation.SynchronizationContext">
      <summary>获取传递给构造函数的 <see cref="T:System.Threading.SynchronizationContext" /> 对象。</summary>
      <returns>传递给构造函数的 <see cref="T:System.Threading.SynchronizationContext" /> 对象。</returns>
    </member>
    <member name="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
      <summary>获取或设置用于唯一标识异步操作的对象。</summary>
      <returns>传递给异步方法调用的状态对象。</returns>
    </member>
    <member name="T:System.ComponentModel.AsyncOperationManager">
      <summary>为支持异步方法调用的类提供并发管理。无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
      <summary>返回可用于对特定异步操作的持续时间进行跟踪的 <see cref="T:System.ComponentModel.AsyncOperation" />。</summary>
      <returns>可用于对异步方法调用的持续时间进行跟踪的 <see cref="T:System.ComponentModel.AsyncOperation" />。</returns>
      <param name="userSuppliedState">一个对象，用于使一个客户端状态（如任务 ID）与一个特定异步操作相关联。</param>
    </member>
    <member name="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
      <summary>获取或设置用于异步操作的同步上下文。</summary>
      <returns>用于异步操作的同步上下文。</returns>
    </member>
    <member name="T:System.ComponentModel.AttributeCollection">
      <summary>表示属性 (Attribute) 的集合。</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])">
      <summary>初始化 <see cref="T:System.ComponentModel.AttributeCollection" /> 类的新实例。</summary>
      <param name="attributes">一个为此集合提供属性的类型 <see cref="T:System.Attribute" /> 的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributes" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute)">
      <summary>确定该属性集合是否具有指定的属性 (Attribute)。</summary>
      <returns>
            如果集合包含该属性 (Attribute) 或是该类型属性 (Attribute) 的默认属性 (Attribute)，则为 true；否则为 false。</returns>
      <param name="attribute">要在集合中查找的 <see cref="T:System.Attribute" />。</param>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute[])">
      <summary>确定该属性 (Attribute) 集合是否包含属性 (Attribute) 数组中所有指定的属性 (Attribute)。</summary>
      <returns>
            如果该集合包含所有属性 (Attribute)，则为 true；否则为 false。</returns>
      <param name="attributes">要在集合中查找的类型 <see cref="T:System.Attribute" /> 的数组。</param>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)">
      <summary>从指定的索引开始，将集合复制到数组。</summary>
      <param name="array">要将集合复制到的 <see cref="T:System.Array" />。</param>
      <param name="index">从其开始的索引。</param>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Count">
      <summary>获取属性 (Attribute) 的数目。</summary>
      <returns>属性 (Attribute) 的数目。</returns>
    </member>
    <member name="F:System.ComponentModel.AttributeCollection.Empty">
      <summary>指定一个可以使用的空集合，而不是创建一个新集合。此字段为只读。</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])">
      <summary>从现有的 <see cref="T:System.ComponentModel.AttributeCollection" /> 创建新的 <see cref="T:System.ComponentModel.AttributeCollection" />。</summary>
      <returns>新的 <see cref="T:System.ComponentModel.AttributeCollection" />，它是 <paramref name="existing" /> 的副本。</returns>
      <param name="existing">要从其创建副本的 <see cref="T:System.ComponentModel.AttributeCollection" />。</param>
      <param name="newAttributes">一个为此集合提供属性的类型 <see cref="T:System.Attribute" /> 的数组。可以为 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="existing" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)">
      <summary>返回给定 <see cref="T:System.Type" /> 的默认 <see cref="T:System.Attribute" />。</summary>
      <returns>一个 <see cref="T:System.Attribute" />。</returns>
      <param name="attributeType">要检索的属性 (Attribute) 的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetEnumerator">
      <summary>获取此集合的枚举数。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 类型的枚举数。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Int32)">
      <summary>获取具有指定索引号的属性 (Attribute)。</summary>
      <returns>具有指定索引号的 <see cref="T:System.Attribute" />。</returns>
      <param name="index">
        <see cref="T:System.ComponentModel.AttributeCollection" /> 的从零开始的索引。</param>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Type)">
      <summary>获取具有指定类型的属性 (Attribute)。</summary>
      <returns>具有指定类型的 <see cref="T:System.Attribute" />，或者如果该属性 (Attribute) 不存在，则为该属性 (Attribute) 类型的默认值。</returns>
      <param name="attributeType">要从集合中获取的 <see cref="T:System.Attribute" /> 的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute)">
      <summary>确定指定的属性 (Attribute) 是否与集合中的属性 (Attribute) 相同。</summary>
      <returns>
            如果属性 (Attribute) 包含在集合中并且其值与集合中该属性 (Attribute) 的值相同，则为 true；否则为 false。</returns>
      <param name="attribute">要与集合中的属性 (Attribute) 进行比较的 <see cref="T:System.Attribute" /> 的实例。</param>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute[])">
      <summary>确定指定数组中的属性 (Attribute) 是否与集合中的属性 (Attribute) 相同。</summary>
      <returns>
            如果数组中的所有属性 (Attribute) 都包含在集合中并且其值与集合中属性 (Attribute) 的值相同，则为 true；否则为 false。</returns>
      <param name="attributes">要与此集合中的属性 (Attribute) 进行比较的 <see cref="T:System.CodeDom.MemberAttributes" /> 的数组。</param>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count">
      <summary>获取集合中包含的元素数。</summary>
      <returns>集合中包含的元素数。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示对集合的访问是否为同步的（线程安全）。</summary>
      <returns>
            如果对该集合的访问是同步的（线程安全），则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对集合的访问的对象。</summary>
      <returns>可用于同步集合访问的对象。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回 <see cref="T:System.Collections.IDictionary" /> 的 <see cref="T:System.Collections.IEnumerator" />。</summary>
      <returns>用于 <see cref="T:System.Collections.IDictionary" /> 的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="T:System.ComponentModel.AttributeProviderAttribute">
      <summary>启用属性重定向。无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String)">
      <summary>用给定的类型名称初始化 <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> 类的新实例。</summary>
      <param name="typeName">要指定的类型的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String,System.String)">
      <summary>用给定的类型名称和属性名称初始化 <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> 类的新实例。</summary>
      <param name="typeName">要指定的类型的名称。</param>
      <param name="propertyName">将为其检索属性 (Attribute) 的属性 (Property) 的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.Type)">
      <summary>用给定的类型初始化 <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> 类的新实例。</summary>
      <param name="type">要指定的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.PropertyName">
      <summary>获取将为其检索属性 (Attribute) 的属性 (Property) 的名称。</summary>
      <returns>将为其检索属性 (Attribute) 的属性 (Property) 的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.TypeName">
      <summary>获取传入构造函数的程序集限定类型名称。</summary>
      <returns>构造函数中指定的类型的程序集限定名称。</returns>
    </member>
    <member name="T:System.ComponentModel.BackgroundWorker">
      <summary>在单独的线程上执行操作。</summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.BackgroundWorker" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.CancelAsync">
      <summary>请求取消挂起的后台操作。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" /> 为 false。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.CancellationPending">
      <summary>获取一个值，指示应用程序是否已请求取消后台操作。</summary>
      <returns>
            如果应用程序已请求取消后台操作，则为 true；否则为 false。默认为 false。</returns>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.DoWork">
      <summary>调用 <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" /> 时发生。</summary>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.IsBusy">
      <summary>获取一个值，指示 <see cref="T:System.ComponentModel.BackgroundWorker" /> 是否正在运行异步操作。</summary>
      <returns>
            如果 <see cref="T:System.ComponentModel.BackgroundWorker" /> 正在运行异步操作，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)">
      <summary>引发 <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
      <summary>引发 <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
      <summary>引发 <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.ProgressChanged">
      <summary>调用 <see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" /> 时发生。</summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
      <summary>引发 <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> 事件。</summary>
      <param name="percentProgress">已完成的后台操作所占的百分比，范围从 0% 到 100%。</param>
      <exception cref="T:System.InvalidOperationException">将 <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> 属性设置为 false。</exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
      <summary>引发 <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> 事件。</summary>
      <param name="percentProgress">已完成的后台操作所占的百分比，范围从 0% 到 100%。</param>
      <param name="userState">传递到 <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" /> 的状态对象。</param>
      <exception cref="T:System.InvalidOperationException">将 <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> 属性设置为 false。</exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
      <summary>开始执行后台操作。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> 为 true。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
      <summary>开始执行后台操作。</summary>
      <param name="argument">要在 <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> 事件处理程序中执行的后台操作使用的参数。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> 为 true。</exception>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
      <summary>当后台操作已完成、被取消或引发异常时发生。</summary>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress">
      <summary>获取或设置一个值，该值指示 <see cref="T:System.ComponentModel.BackgroundWorker" /> 能否报告进度更新。</summary>
      <returns>
            如果 <see cref="T:System.ComponentModel.BackgroundWorker" /> 支持进度更新，则为 true；否则为 false。默认为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">
      <summary>获取或设置一个值，该值指示 <see cref="T:System.ComponentModel.BackgroundWorker" /> 是否支持异步取消。</summary>
      <returns>
            如果 <see cref="T:System.ComponentModel.BackgroundWorker" /> 支持取消，则为 true；否则为 false。默认为 false。</returns>
    </member>
    <member name="T:System.ComponentModel.BaseNumberConverter">
      <summary>为非浮点数字类型提供基类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.BaseNumberConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定该转换器是否可以将给定源类型的对象转换为转换器的本机类型。</summary>
      <returns>
            如果此转换器能够执行该操作，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。 </param>
      <param name="sourceType">
        <see cref="T:System.Type" />，它表示要对其进行转换的类型。 </param>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>返回一个值，此值指示该转换器能否使用上下文将对象转换为给定的目标类型。</summary>
      <returns>
如果此转换器能够执行该操作，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。 </param>
      <param name="t">
        <see cref="T:System.Type" />，它表示要转换为的类型。 </param>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将给定对象转换为转换器的本机类型。</summary>
      <returns>表示转换的 value 的 <see cref="T:System.Object" />。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。 </param>
      <param name="culture">指定表示数字的区域性的 <see cref="T:System.Globalization.CultureInfo" />。 </param>
      <param name="value">要转换的对象。 </param>
      <exception cref="T:System.Exception">
        <paramref name="value" /> 不是目标类型的有效值。</exception>
      <exception cref="T:System.NotSupportedException">不能执行转换。 </exception>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将指定的对象转换为其他类型。</summary>
      <returns>表示转换的 value 的 <see cref="T:System.Object" />。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。 </param>
      <param name="culture">指定表示数字的区域性的 <see cref="T:System.Globalization.CultureInfo" />。 </param>
      <param name="value">要转换的对象。 </param>
      <param name="destinationType">对象要转换为的类型。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">不能执行转换。 </exception>
    </member>
    <member name="T:System.ComponentModel.BindableAttribute">
      <summary>指定成员是否通常用于绑定。无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean)">
      <summary>用布尔值初始化 <see cref="T:System.ComponentModel.BindableAttribute" /> 类的新实例。</summary>
      <param name="bindable">
                若要将属性 (Property) 用于绑定，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean,System.ComponentModel.BindingDirection)">
      <summary>初始化 <see cref="T:System.ComponentModel.BindableAttribute" /> 类的新实例。</summary>
      <param name="bindable">
                若要将属性 (Property) 用于绑定，则为 true；否则为 false。</param>
      <param name="direction">
        <see cref="T:System.ComponentModel.BindingDirection" /> 值之一。</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary>用 <see cref="T:System.ComponentModel.BindableSupport" /> 值之一初始化 <see cref="T:System.ComponentModel.BindableAttribute" /> 类的新实例。</summary>
      <param name="flags">
        <see cref="T:System.ComponentModel.BindableSupport" /> 值之一。</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport,System.ComponentModel.BindingDirection)">
      <summary>初始化 <see cref="T:System.ComponentModel.BindableAttribute" /> 类的新实例。</summary>
      <param name="flags">
        <see cref="T:System.ComponentModel.BindableSupport" /> 值之一。</param>
      <param name="direction">
        <see cref="T:System.ComponentModel.BindingDirection" /> 值之一。</param>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Bindable">
      <summary>获取指示某个属性 (Property) 通常用于绑定的值。</summary>
      <returns>
            如果该属性 (Property) 通常用于绑定，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Default">
      <summary>指定 <see cref="T:System.ComponentModel.BindableAttribute" /> 的默认值，即 <see cref="F:System.ComponentModel.BindableAttribute.No" />。此字段为只读。</summary>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Direction">
      <summary>获取指示此属性 (Property) 的数据绑定方向的值。</summary>
      <returns>
        <see cref="T:System.ComponentModel.BindingDirection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.Equals(System.Object)">
      <summary>确定两个 <see cref="T:System.ComponentModel.BindableAttribute" /> 对象是否相等。</summary>
      <returns>
            如果指定的 <see cref="T:System.ComponentModel.BindableAttribute" /> 等于当前的 <see cref="T:System.ComponentModel.BindableAttribute" />，则为 true；如果不等，则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.GetHashCode">
      <summary>用作 <see cref="T:System.ComponentModel.BindableAttribute" /> 类的一个哈希函数。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.BindableAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.IsDefaultAttribute">
      <summary>确定此属性是否为默认属性 (Attribute)。</summary>
      <returns>
            如果此属性是此属性 (Attribute) 类的默认值，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.No">
      <summary>指定属性 (Property) 通常不用于绑定。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Yes">
      <summary>指定属性 (Property) 通常用于绑定。此字段为只读。</summary>
    </member>
    <member name="T:System.ComponentModel.BindableSupport">
      <summary>指定值来表示是否可以将属性绑定到数据元素或另一个属性。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.No">
      <summary>该属性在设计时不可绑定。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Yes">
      <summary>该属性在设计时可绑定。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Default">
      <summary>该属性被设置为默认值。</summary>
    </member>
    <member name="T:System.ComponentModel.BindingDirection">
      <summary>指定模板是否可以用一种方式或两种方式绑定。</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.OneWay">
      <summary>该模板只能接受属性值。与泛型 <see cref="T:System.Web.UI.ITemplate" /> 一起使用。</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.TwoWay">
      <summary>该模板可以接受和公开属性值。与 <see cref="T:System.Web.UI.IBindableTemplate" /> 一起使用。</summary>
    </member>
    <member name="T:System.ComponentModel.BindingList`1">
      <summary>提供支持数据绑定的泛型集合。</summary>
      <typeparam name="T">列表中元素的类型。</typeparam>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor">
      <summary>用默认值初始化 <see cref="T:System.ComponentModel.BindingList`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>使用指定列表初始化 <see cref="T:System.ComponentModel.BindingList`1" /> 类的新实例。</summary>
      <param name="list">要包含在 <see cref="T:System.ComponentModel.BindingList`1" /> 中的项的 <see cref="T:System.Collections.Generic.IList`1" />。</param>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.AddingNew">
      <summary>在将项添加到该列表之前发生。</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNew">
      <summary>将新项添加到集合中。</summary>
      <returns>添加到列表的项。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Forms.BindingSource.AllowNew" /> 属性设置为 false。- 或 -找不到当前项类型的公共默认构造函数。</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNewCore">
      <summary>将新项添加到集合末尾。</summary>
      <returns>已添加到集合中的项。</returns>
      <exception cref="T:System.InvalidCastException">新项的类型与包含在 <see cref="T:System.ComponentModel.BindingList`1" /> 中的对象的类型不同。</exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowEdit">
      <summary>获取或设置一个值，该值指示该列表中的项是否可以编辑。</summary>
      <returns>
            如果列表项可以编辑，则为 true；否则为 false。默认值为 true。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowNew">
      <summary>获取或设置一个值，该值指示是否可以使用 <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> 方法向列表中添加项。</summary>
      <returns>
            如果可以使用 <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> 方法向列表中添加项，则为 true；否则为 false。默认值视列表中所包含的基础类型而定。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowRemove">
      <summary>获取或设置一个值，该值指示是否可以从集合中移除项。</summary>
      <returns>
            如果可以使用 <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)" /> 方法从列表中移除项，则为 true；否则为 false。默认值为 true。</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>如果已在派生类中重写，则对项进行排序；否则将引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="prop">指定要用于排序的属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="direction">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 值之一。</param>
      <exception cref="T:System.NotSupportedException">方法未在派生类中重写。</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.CancelNew(System.Int32)">
      <summary>丢弃挂起的新项。</summary>
      <param name="itemIndex">要添加的新项的索引</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ClearItems">
      <summary>移除集合中的所有元素。</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.EndNew(System.Int32)">
      <summary>向集合提交挂起的新项。</summary>
      <param name="itemIndex">要添加的新项的索引。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>如果在派生类中实现了搜索，则用指定值搜索具有指定属性说明符的项的索引；否则将引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>与属性说明符匹配并包含指定值的项的从零开始的索引。</returns>
      <param name="prop">要搜索的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="key">要匹配的 <paramref name="property" /> 值。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)" /> 未在派生类中重写。</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.InsertItem(System.Int32,`0)">
      <summary>将指定的项插入到列表中的指定索引位置。</summary>
      <param name="index">要插入该项的位置的从零开始的索引。</param>
      <param name="item">要插入列表的项。</param>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.IsSortedCore">
      <summary>获取一个值，指示列表是否已排序。</summary>
      <returns>
            如果列表已排序，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.ListChanged">
      <summary>当列表或列表中的项更改时发生。</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
      <summary>引发 <see cref="E:System.ComponentModel.BindingList`1.AddingNew" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.AddingNewEventArgs" />。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>引发 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.ListChangedEventArgs" />。</param>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.RaiseListChangedEvents">
      <summary>获取或设置一个值，该值指示在列表中添加或移除项时是否会引发 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 事件。</summary>
      <returns>
            如果添加或移除项时引发 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 事件，则为 true；否则为 false。默认值为 true。</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)">
      <summary>移除指定索引处的项。</summary>
      <param name="index">从零开始的索引（属于要移除的项）。</param>
      <exception cref="T:System.NotSupportedException">您正在移除一个新添加的项而 <see cref="P:System.ComponentModel.IBindingList.AllowRemove" /> 设置为 false。</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveSortCore">
      <summary>如果在派生类中实现排序，则移除通过 <see cref="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> 应用的任何排序；否则将引发 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException">方法未在派生类中重写。</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetBindings">
      <summary>引发 <see cref="F:System.ComponentModel.ListChangedType.Reset" /> 类型的 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 事件。</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetItem(System.Int32)">
      <summary>为位于指定位置的项引发类型为 <see cref="F:System.ComponentModel.ListChangedType.ItemChanged" /> 的 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 事件。</summary>
      <param name="position">要重置的项的从零开始的索引。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.SetItem(System.Int32,`0)">
      <summary>使用指定项替换指定索引处的项。</summary>
      <param name="index">要替换的项的从零开始的索引。</param>
      <param name="item">位于指定索引处的项的新值。对于引用类型，该值可以为 null。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。- 或 -<paramref name="index" /> 大于 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortDirectionCore">
      <summary>获取列表的排序方向。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ListSortDirection" /> 值之一。默认值为 <see cref="F:System.ComponentModel.ListSortDirection.Ascending" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortPropertyCore">
      <summary>如果在派生类中实现了排序，则获取用于对列表排序的属性说明符；否则返回 null。</summary>
      <returns>用于对列表排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsChangeNotificationCore">
      <summary>获取一个值，该值指示是否启用 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 事件。</summary>
      <returns>
            如果支持 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 事件，则为 true；否则为 false。默认值为 true。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSearchingCore">
      <summary>获取一个值，该值指示列表是否支持搜索。</summary>
      <returns>
            如果列表支持搜索，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSortingCore">
      <summary>获取一个值，该值指示列表是否支持排序。</summary>
      <returns>
            如果列表支持排序，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)" />。</summary>
      <param name="prop">要作为搜索条件添加的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddNew">
      <summary>将新项添加到列表。有关更多信息，请参见 <see cref="M:System.ComponentModel.IBindingList.AddNew" />。</summary>
      <returns>添加到列表的项。</returns>
      <exception cref="T:System.NotSupportedException">不支持此方法。</exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowEdit">
      <summary>获取一个值，该值指示是否可以编辑列表中的项。</summary>
      <returns>
            如果列表项可以编辑，则为 true；否则为 false。默认值为 true。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowNew">
      <summary>获取一个值，该值指示是否可以使用 <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> 方法向列表中添加新项。</summary>
      <returns>
            如果可以使用 <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> 方法向列表中添加项，则为 true；否则为 false。默认值视列表中所包含的基础类型而定。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowRemove">
      <summary>获取一个值，该值指示是否可以从列表中移除项。</summary>
      <returns>
            如果可以使用 <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)" /> 方法从列表中移除项，则为 true；否则为 false。默认值为 true。</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>根据 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 和 <see cref="T:System.ComponentModel.ListSortDirection" /> 对列表进行排序。有关此成员的完整说明，请参见 <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />。</summary>
      <param name="prop">以其为根据进行排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="direction">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 值之一。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />。</summary>
      <returns>具有给定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的行的索引。</returns>
      <param name="prop">要对其进行搜索的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="key">要搜索的“属性”参数的值。</param>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#IsSorted">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.IsSorted" />。</summary>
      <returns>
            如果已调用 <see cref="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)" /> 并且未调用 <see cref="M:System.ComponentModel.IBindingList.RemoveSort" />，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)" />。</summary>
      <param name="prop">要从用于搜索的索引中移除的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveSort">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IBindingList.RemoveSort" /></summary>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortDirection">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SortDirection" />。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ListSortDirection" /> 值之一。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortProperty">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SortProperty" />。</summary>
      <returns>正在用于排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsChangeNotification">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />。</summary>
      <returns>
如果当列表更改或项更改时引发了 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSearching">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />。</summary>
      <returns>
如果列表支持使用 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> 方法进行搜索，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSorting">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />。</summary>
      <returns>
如果列表支持排序，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IRaiseItemChangedEvents#RaisesItemChangedEvents">
      <summary>获取一个值，该值指示项属性值更改是否会引发类型为 <see cref="F:System.ComponentModel.ListChangedType.ItemChanged" /> 的 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 事件。不能在派生类中重写此成员。</summary>
      <returns>
            如果列表类型实现 <see cref="T:System.ComponentModel.INotifyPropertyChanged" />，则为 true ；否则为 false。默认值为 false。</returns>
    </member>
    <member name="T:System.ComponentModel.BooleanConverter">
      <summary>提供将 <see cref="T:System.Boolean" /> 对象与其他各种表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.BooleanConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器是否可使用指定上下文将给定源类型的对象转换为布尔对象。</summary>
      <returns>
            如果此对象可以执行转换，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="sourceType">
        <see cref="T:System.Type" />，表示要从中进行转换的类型。</param>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将给定值对象转换为布尔对象。</summary>
      <returns>表示转换的 <paramref name="value" /> 的 <see cref="T:System.Object" />。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="culture">指定要转换成的区域性的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是目标类型的有效值。</exception>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取布尔数据类型的标准值的集合。</summary>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />，它包含一组标准有效值。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示从 <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 方法返回的标准值的列表是否为独占列表。</summary>
      <returns>
            因为从 <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 返回的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 是可能值的穷举列表，所以是 true。此方法从不返回 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示此对象是否支持可从列表中选取的标准值集。</summary>
      <returns>
            因为可调用 <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 来查找对象支持的一组公共值，所以是 true。此方法从不返回 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
    </member>
    <member name="T:System.ComponentModel.BrowsableAttribute">
      <summary>指定一个属性 (Property) 或事件是否应显示在“属性”窗口中。</summary>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.BrowsableAttribute" /> 类的新实例。</summary>
      <param name="browsable">
                如果属性 (Property) 或事件可以在设计时修改，则为 true；否则为 false。默认为 true。</param>
    </member>
    <member name="P:System.ComponentModel.BrowsableAttribute.Browsable">
      <summary>获取一个值，该值指示此对象是否可浏览。</summary>
      <returns>
            如果对象可以浏览，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.ComponentModel.BrowsableAttribute.Default">
      <summary>指定 <see cref="T:System.ComponentModel.BrowsableAttribute" /> 的默认值，即 <see cref="F:System.ComponentModel.BrowsableAttribute.Yes" />。此 static 字段是只读的。</summary>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.Equals(System.Object)">
      <summary>指示此实例与指定对象是否相等。</summary>
      <returns>
            如果 <paramref name="obj" /> 等于此实例，则为 true；否则为 false。</returns>
      <param name="obj">要比较的另一个对象。</param>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.IsDefaultAttribute">
      <summary>确定此属性 (Attribute) 是否为默认属性 (Attribute)。</summary>
      <returns>
            如果此属性 (Attribute) 是此属性 (Attribute) 类的默认值，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.ComponentModel.BrowsableAttribute.No">
      <summary>指定一个属性 (Property) 或事件在设计时不能修改。此 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.BrowsableAttribute.Yes">
      <summary>指定一个属性 (Property) 或事件在设计时可以修改。此 static 字段是只读的。</summary>
    </member>
    <member name="T:System.ComponentModel.ByteConverter">
      <summary>提供将 8 位无符号整数对象与其他各种表示形式互相转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.ByteConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.ByteConverter" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ComponentModel.CancelEventArgs">
      <summary>为可取消的事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.CancelEventArgs.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.CancelEventArgs" /> 类的新实例，其 <see cref="P:System.ComponentModel.CancelEventArgs.Cancel" /> 属性设置为 false。</summary>
    </member>
    <member name="M:System.ComponentModel.CancelEventArgs.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.CancelEventArgs" /> 类的新实例，其 <see cref="P:System.ComponentModel.CancelEventArgs.Cancel" /> 属性设置为给定值。</summary>
      <param name="cancel">
                要取消事件时为 true；否则为 false。</param>
    </member>
    <member name="P:System.ComponentModel.CancelEventArgs.Cancel">
      <summary>获取或设置指示是否应取消事件的值。</summary>
      <returns>
            如果应取消事件，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ComponentModel.CancelEventHandler">
      <summary>表示处理可取消事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.CancelEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.CategoryAttribute">
      <summary>指定当属性 (Property) 或事件显示在一个设置为“按分类顺序”模式的 <see cref="T:System.Windows.Forms.PropertyGrid" /> 控件中时，用于给属性或事件分组的类别的名称。</summary>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.#ctor">
      <summary>使用类别名称“Default”初始化 <see cref="T:System.ComponentModel.CategoryAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.#ctor(System.String)">
      <summary>使用指定的类别名称初始化 <see cref="T:System.ComponentModel.CategoryAttribute" /> 类的新实例。</summary>
      <param name="category">类别名称。</param>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Action">
      <summary>获取表示“Action”类别的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>操作类别的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Appearance">
      <summary>获取表示“Appearance”类别的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>外观类别的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Asynchronous">
      <summary>获取表示“Asynchronous”类别的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>异步类别的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Behavior">
      <summary>获取表示“Behavior”类别的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>行为类别的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Category">
      <summary>获取此属性 (Attribute) 应用于的属性 (Property) 或事件的类别名称。</summary>
      <returns>此属性 (Attribute) 应用于的属性 (Property) 或事件的类别名称。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Data">
      <summary>获取表示“Data”类别的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>数据类别的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Default">
      <summary>获取表示“Default”类别的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>默认类别的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Design">
      <summary>获取表示“Design”类别的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>设计类别的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.DragDrop">
      <summary>获取表示“DragDrop”类别的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>拖放类别的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>
            如果给定对象的值等于当前对象的值，则为 true；否则为 false。</returns>
      <param name="obj">要进行值的相等性测试的对象。</param>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Focus">
      <summary>获取表示“Focus”类别的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>焦点类别的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Format">
      <summary>获取表示“Format”类别的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>格式类别的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.GetHashCode">
      <summary>返回此属性 (Attribute) 的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.GetLocalizedString(System.String)">
      <summary>查阅指定类别的本地化名称。</summary>
      <returns>类别的本地化名称；如果本地化名称不存在，则为 null。</returns>
      <param name="value">要查阅的类别的标识符。</param>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.IsDefaultAttribute">
      <summary>确定此属性 (Attribute) 是否为默认属性 (Attribute)。</summary>
      <returns>
            如果此属性 (Attribute) 是此属性 (Attribute) 类的默认值，则为 true；否则为 false。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Key">
      <summary>获取表示“Key”类别的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>键类别的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Layout">
      <summary>获取表示“Layout”类别的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>布局类别的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Mouse">
      <summary>获取表示“Mouse”类别的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>鼠标类别的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.WindowStyle">
      <summary>获取表示“WindowStyle”类别的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>窗口样式类别的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="T:System.ComponentModel.CharConverter">
      <summary>提供将 Unicode 字符对象与各种其他表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.CharConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器是否可使用指定上下文将给定源类型的对象转换为 Unicode 字符对象。</summary>
      <returns>
            如果该转换器能够执行转换，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可提供格式上下文。</param>
      <param name="sourceType">一个 <see cref="T:System.Type" />，表示要转换的类型。</param>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将给定对象转换为 Unicode 字符对象。</summary>
      <returns>表示转换的 <paramref name="value" /> 的 <see cref="T:System.Object" />。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="culture">
        <paramref name="value" /> 将要转换到的区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是目标类型的有效值。</exception>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>使用这些参数将给定值对象转换为 Unicode 字符对象。</summary>
      <returns>表示转换的 value 的 <see cref="T:System.Object" />。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可提供格式上下文。</param>
      <param name="culture">
        <paramref name="value" /> 将要转换到的区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">要将值转换成的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeAction">
      <summary>指定如何更改集合。</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Add">
      <summary>指定已将某个元素添加到集合。</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Remove">
      <summary>指定已从集合中移除一个元素。</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Refresh">
      <summary>指定已更改整个集合。使用操作整个集合的方法（如 <see cref="M:System.Collections.CollectionBase.Clear" />）时会导致此情况。</summary>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventArgs">
      <summary>为 <see cref="E:System.Data.DataColumnCollection.CollectionChanged" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionChangeEventArgs.#ctor(System.ComponentModel.CollectionChangeAction,System.Object)">
      <summary>初始化 <see cref="T:System.ComponentModel.CollectionChangeEventArgs" /> 类的新实例。</summary>
      <param name="action">指定集合如何更改的 <see cref="T:System.ComponentModel.CollectionChangeAction" /> 值之一。</param>
      <param name="element">
        <see cref="T:System.Object" />，它指定发生更改的集合实例。</param>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Action">
      <summary>获取指定集合如何更改的操作。</summary>
      <returns>
        <see cref="T:System.ComponentModel.CollectionChangeAction" /> 值之一。</returns>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Element">
      <summary>获取包含更改的集合实例。</summary>
      <returns>表示包含更改的集合实例的 <see cref="T:System.Object" />；如果刷新集合，则为 null。</returns>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventHandler">
      <summary>表示处理将元素添加到集合中或从集合中移除元素时引发的 <see cref="E:System.Data.DataColumnCollection.CollectionChanged" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.CollectionConverter">
      <summary>提供将集合对象与各种其他表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.CollectionConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将给定的值对象转换为指定的目标类型。</summary>
      <returns>表示转换的 value 的 <see cref="T:System.Object" />。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="culture">要将 <paramref name="value" /> 转换成的区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。此参数必须从 <see cref="T:System.Collections.ICollection" /> 继承。</param>
      <param name="destinationType">要将值转换成的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>使用指定的上下文和属性 (Attribute) 获取由值参数指定的数组类型的属性 (Property) 集合。</summary>
      <returns>具有为此数据类型公开的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />；或者如果没有属性，则为 null。此方法始终返回 null。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="value">一个 <see cref="T:System.Object" />，它指定要为其获取属性的数组的类型。</param>
      <param name="attributes">一个将用作筛选器的 <see cref="T:System.Attribute" /> 类型的数组。</param>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示此对象是否支持属性。</summary>
      <returns>
            返回 false，因为不应调用 <see cref="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 来查找此对象的属性。此方法从不返回 true。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
    </member>
    <member name="T:System.ComponentModel.ComplexBindingPropertiesAttribute">
      <summary>指定一个组件的数据源和数据成员属性，该组件支持复杂数据绑定。无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor">
      <summary>不带参数初始化 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String)">
      <summary>使用指定的数据源初始化 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 类的新实例。</summary>
      <param name="dataSource">要用作数据源的属性的名称。</param>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String,System.String)">
      <summary>使用指定的数据源和数据成员初始化 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 类的新实例。</summary>
      <param name="dataSource">要用作数据源的属性的名称。</param>
      <param name="dataMember">要用作数据源的属性的名称。</param>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataMember">
      <summary>获取 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 所绑定组件的数据成员属性的名称。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 所绑定组件的数据成员属性的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataSource">
      <summary>获取 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 所绑定组件的数据源属性的名称。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 所绑定组件的数据源属性的名称。</returns>
    </member>
    <member name="F:System.ComponentModel.ComplexBindingPropertiesAttribute.Default">
      <summary>表示 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 类的默认值。</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.Equals(System.Object)">
      <summary>确定指定的 <see cref="T:System.Object" /> 是否等同于当前的 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 实例。</summary>
      <returns>
            如果该对象等同于当前的实例，则为 true；否则为 false，指示两者不等同。</returns>
      <param name="obj">要与当前的 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 实例进行比较的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.GetHashCode">
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="T:System.ComponentModel.Component">
      <summary>提供 <see cref="T:System.ComponentModel.IComponent" /> 接口的基实现并启用应用程序之间的对象共享。</summary>
    </member>
    <member name="M:System.ComponentModel.Component.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Component" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ComponentModel.Component.CanRaiseEvents">
      <summary>获取一个指示组件是否可以引发事件的值。</summary>
      <returns>
            如果组件可以引发事件，则为 true；否则为 false。默认为 true。</returns>
    </member>
    <member name="P:System.ComponentModel.Component.Container">
      <summary>获取 <see cref="T:System.ComponentModel.IContainer" />，它包含 <see cref="T:System.ComponentModel.Component" />。</summary>
      <returns>包含 <see cref="T:System.ComponentModel.Component" /> 的 <see cref="T:System.ComponentModel.IContainer" />（如果有），如果 <see cref="T:System.ComponentModel.Component" /> 未封装在 <see cref="T:System.ComponentModel.IContainer" /> 中，则为 null。</returns>
    </member>
    <member name="P:System.ComponentModel.Component.DesignMode">
      <summary>获取一个值，用以指示 <see cref="T:System.ComponentModel.Component" /> 当前是否处于设计模式。</summary>
      <returns>
            如果 <see cref="T:System.ComponentModel.Component" /> 处于设计模式，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.Component.Dispose">
      <summary>释放由 <see cref="T:System.ComponentModel.Component" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.ComponentModel.Component.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.ComponentModel.Component" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">
                为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。</param>
    </member>
    <member name="E:System.ComponentModel.Component.Disposed">
      <summary>当通过调用 <see cref="M:System.ComponentModel.Component.Dispose" /> 方法释放组件时发生。</summary>
    </member>
    <member name="P:System.ComponentModel.Component.Events">
      <summary>获取附加到此 <see cref="T:System.ComponentModel.Component" /> 的事件处理程序的列表。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.EventHandlerList" />，它提供此组件的委托。</returns>
    </member>
    <member name="M:System.ComponentModel.Component.Finalize">
      <summary>在通过垃圾回收将 <see cref="T:System.ComponentModel.Component" /> 回收之前，释放非托管资源并执行其他清理操作。</summary>
    </member>
    <member name="M:System.ComponentModel.Component.GetService(System.Type)">
      <summary>返回一个对象，该对象表示由 <see cref="T:System.ComponentModel.Component" /> 或它的 <see cref="T:System.ComponentModel.Container" /> 提供的服务。</summary>
      <returns>表示由 <see cref="T:System.ComponentModel.Component" /> 提供的服务的 <see cref="T:System.Object" />，如果 <see cref="T:System.ComponentModel.Component" /> 不提供指定的服务，则为 null。</returns>
      <param name="service">由 <see cref="T:System.ComponentModel.Component" /> 提供的服务。</param>
    </member>
    <member name="P:System.ComponentModel.Component.Site">
      <summary>获取或设置 <see cref="T:System.ComponentModel.Component" /> 的 <see cref="T:System.ComponentModel.ISite" />。</summary>
      <returns>与 <see cref="T:System.ComponentModel.Component" /> 关联的 <see cref="T:System.ComponentModel.ISite" />；如果 <see cref="T:System.ComponentModel.Component" /> 未封装在 <see cref="T:System.ComponentModel.IContainer" /> 中，<see cref="T:System.ComponentModel.Component" /> 没有与其关联的 <see cref="T:System.ComponentModel.ISite" /> 或者 <see cref="T:System.ComponentModel.Component" /> 已从其 <see cref="T:System.ComponentModel.IContainer" /> 中移除，则为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.Component.ToString">
      <summary>返回包含 <see cref="T:System.ComponentModel.Component" /> 的名称的 <see cref="T:System.String" />（如果有）。不应重写此方法。</summary>
      <returns>包含 <see cref="T:System.ComponentModel.Component" /> 的名称的 <see cref="T:System.String" />（如果有）；如果 <see cref="T:System.ComponentModel.Component" /> 未命名，则为 null。</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentCollection">
      <summary>为 <see cref="T:System.ComponentModel.IComponent" /> 对象的集合提供只读容器。</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentCollection.#ctor(System.ComponentModel.IComponent[])">
      <summary>使用指定的组件数组初始化 <see cref="T:System.ComponentModel.ComponentCollection" /> 类的新实例。</summary>
      <param name="components">用来初始化集合的 <see cref="T:System.ComponentModel.IComponent" /> 对象数组。</param>
    </member>
    <member name="M:System.ComponentModel.ComponentCollection.CopyTo(System.ComponentModel.IComponent[],System.Int32)">
      <summary>将整个集合复制到数组中，从指定的数组索引处开始写入。</summary>
      <param name="array">要将集合中的对象复制到其中的 <see cref="T:System.ComponentModel.IComponent" /> 数组。</param>
      <param name="index">复制开始位置的 <paramref name="array" /> 索引。</param>
    </member>
    <member name="P:System.ComponentModel.ComponentCollection.Item(System.Int32)">
      <summary>获取集合中位于指定集合索引处的 <see cref="T:System.ComponentModel.Component" />。</summary>
      <returns>指定索引处的 <see cref="T:System.ComponentModel.IComponent" />。</returns>
      <param name="index">要获取的 <see cref="T:System.ComponentModel.Component" /> 的集合索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">如果指定的索引不在集合的索引范围内。</exception>
    </member>
    <member name="P:System.ComponentModel.ComponentCollection.Item(System.String)">
      <summary>获取集合中与指定的名称相匹配的任何组件。</summary>
      <returns>名称与 <paramref name="name" /> 参数所指定的名称相匹配的组件，如果无法在集合中找到指定的组件，则为 null。</returns>
      <param name="name">要获取的 <see cref="T:System.ComponentModel.IComponent" /> 的名称。</param>
    </member>
    <member name="T:System.ComponentModel.ComponentConverter">
      <summary>提供将组件与各种其他表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.ComponentModel.ComponentConverter" /> 类的新实例。</summary>
      <param name="type">一个 <see cref="T:System.Type" />，它表示与此组件转换器关联的类型。</param>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>获取由值参数指定的组件类型的属性集合。</summary>
      <returns>具有为此组件公开的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />；或者如果没有属性，则为 null。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="value">一个 <see cref="T:System.Object" />，它指定要获取其属性的组件类型。</param>
      <param name="attributes">一个将用作筛选器的 <see cref="T:System.Attribute" /> 类型的数组。</param>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示此对象是否使用指定的上下文支持属性。</summary>
      <returns>
            由于应调用 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> 来查找此对象的属性，因此为 true。此方法从不返回 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
    </member>
    <member name="T:System.ComponentModel.ComponentEditor">
      <summary>提供自定义组件编辑器的基类。</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.ComponentEditor" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>编辑组件并返回一个值，用以指示是否已根据给定上下文修改了组件。</summary>
      <returns>
            如果组件已被修改，则为 true；否则，为 false。</returns>
      <param name="context">可用于获得有关编辑更多信息的可选上下文对象。</param>
      <param name="component">要编辑的组件。</param>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.Object)">
      <summary>编辑该组件并返回一个表示是否修改了该组件的值。</summary>
      <returns>
            如果组件已被修改，则为 true；否则，为 false。</returns>
      <param name="component">要编辑的组件。</param>
    </member>
    <member name="T:System.ComponentModel.ComponentResourceManager">
      <summary>提供组件或对象的枚举资源的简单功能。<see cref="T:System.ComponentModel.ComponentResourceManager" /> 类是一个 <see cref="T:System.Resources.ResourceManager" />。</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.ComponentModel.ComponentResourceManager" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor(System.Type)">
      <summary>创建一个 <see cref="T:System.ComponentModel.ComponentResourceManager" />，它根据指定的 <see cref="T:System.Type" /> 中的信息在附属程序集内查找资源。</summary>
      <param name="t">一个 <see cref="T:System.Type" />，<see cref="T:System.ComponentModel.ComponentResourceManager" /> 将从其中派生所有用于查找资源文件的信息。</param>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String)">
      <summary>将资源的值应用于对象相应的属性。</summary>
      <param name="value">一个 <see cref="T:System.Object" />，它包含要应用的属性值。</param>
      <param name="objectName">一个 <see cref="T:System.String" />，它包含要在资源中查找的对象名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 或 <paramref name="objectName" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String,System.Globalization.CultureInfo)">
      <summary>将资源的值应用于对象相应的属性。</summary>
      <param name="value">一个 <see cref="T:System.Object" />，它包含要应用的属性值。</param>
      <param name="objectName">一个 <see cref="T:System.String" />，它包含要在资源中查找的对象名称。</param>
      <param name="culture">要应用资源的区域性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 或 <paramref name="objectName" /> 为 null。</exception>
    </member>
    <member name="T:System.ComponentModel.Container">
      <summary>封装零个或更多个组件。</summary>
    </member>
    <member name="M:System.ComponentModel.Container.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Container" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent)">
      <summary>将指定的 <see cref="T:System.ComponentModel.Component" /> 添加到 <see cref="T:System.ComponentModel.Container" />。该组件未命名。</summary>
      <param name="component">要添加的组件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent,System.String)">
      <summary>将指定的 <see cref="T:System.ComponentModel.Component" /> 添加到 <see cref="T:System.ComponentModel.Container" /> 并为其分配名称。</summary>
      <param name="component">要添加的组件。</param>
      <param name="name">要给该组件分配的唯一的、区分大小写的名称。- 或 - null，它使组件保持未命名状态。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 不是唯一的。</exception>
    </member>
    <member name="P:System.ComponentModel.Container.Components">
      <summary>获取 <see cref="T:System.ComponentModel.Container" /> 中的所有组件。</summary>
      <returns>包含 <see cref="T:System.ComponentModel.Container" /> 中的组件的集合。</returns>
    </member>
    <member name="M:System.ComponentModel.Container.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary>为给定的 <see cref="T:System.ComponentModel.IComponent" /> 创建一个站点 <see cref="T:System.ComponentModel.ISite" />，并将给定名称分配给该站点。</summary>
      <returns>新创建的站点。</returns>
      <param name="component">要为其创建站点的 <see cref="T:System.ComponentModel.IComponent" />。</param>
      <param name="name">要分配给 <paramref name="component" /> 的名称，或者为 null 以跳过名称分配。</param>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose">
      <summary>释放由 <see cref="T:System.ComponentModel.Container" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.ComponentModel.Container" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">
                为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。</param>
    </member>
    <member name="M:System.ComponentModel.Container.Finalize">
      <summary>在通过垃圾回收将 <see cref="T:System.ComponentModel.Container" /> 回收之前，释放非托管资源并执行其他清理操作。</summary>
    </member>
    <member name="M:System.ComponentModel.Container.GetService(System.Type)">
      <summary>获取指定类型的服务对象（如果可用）。</summary>
      <returns>实现所请求服务的 <see cref="T:System.Object" />；或者在无法解决服务的情况下为 null。</returns>
      <param name="service">要检索的服务的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.Container.Remove(System.ComponentModel.IComponent)">
      <summary>从 <see cref="T:System.ComponentModel.Container" /> 中移除组件。</summary>
      <param name="component">要移除的组件。</param>
    </member>
    <member name="M:System.ComponentModel.Container.RemoveWithoutUnsiting(System.ComponentModel.IComponent)">
      <summary>从 <see cref="T:System.ComponentModel.Container" /> 中移除组件，不将 <see cref="P:System.ComponentModel.IComponent.Site" /> 设置为 null。</summary>
      <param name="component">要移除的组件。</param>
    </member>
    <member name="M:System.ComponentModel.Container.ValidateName(System.ComponentModel.IComponent,System.String)">
      <summary>确定组件名称对此容器是否唯一。</summary>
      <param name="component">命名的组件。</param>
      <param name="name">要验证的组件名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 不是唯一的。</exception>
    </member>
    <member name="T:System.ComponentModel.ContainerFilterService">
      <summary>为容器筛选服务提供基类。</summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.ContainerFilterService" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.FilterComponents(System.ComponentModel.ComponentCollection)">
      <summary>筛选组件集合。</summary>
      <returns>表示已修改集合的 <see cref="T:System.ComponentModel.ComponentCollection" />。</returns>
      <param name="components">要筛选的组件集合。</param>
    </member>
    <member name="T:System.ComponentModel.CultureInfoConverter">
      <summary>提供将 <see cref="T:System.Globalization.CultureInfo" /> 对象与其他各种表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.CultureInfoConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器是否可使用指定上下文将给定源类型的对象转换为 <see cref="T:System.Globalization.CultureInfo" />。</summary>
      <returns>
            如果该转换器能够执行转换，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="sourceType">
        <see cref="T:System.Type" />，表示要从中进行转换的类型。</param>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器能否使用上下文将对象转换为给定的目标类型。</summary>
      <returns>
如果该转换器能够执行转换，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="destinationType">表示要转换到的类型的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将指定的值对象转换为 <see cref="T:System.Globalization.CultureInfo" />。</summary>
      <returns>表示转换的 value 的 <see cref="T:System.Object" />。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="culture">指定要转换成的区域性的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 指定无效的区域性。</exception>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将给定的值对象转换为指定的目标类型。</summary>
      <returns>表示转换的 <paramref name="value" /> 的 <see cref="T:System.Object" />。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="culture">指定要转换成的区域性的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">要将值转换成的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>使用指定的上下文获取 <see cref="T:System.Globalization.CultureInfo" /> 对象的标准值集合。</summary>
      <returns>含有一组标准的有效值的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />，或者如果数据类型不支持一组标准值，则为 null。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示从 <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 返回的标准值的列表是否为穷举列表。</summary>
      <returns>
            返回 false，因为从 <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 返回的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 不是可能的值的穷举列表（换言之，其他值也是可能的）。此方法从不返回 true。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示此对象是否支持可使用指定上下文从列表中选取的标准值集。</summary>
      <returns>
            返回 true，因为应当调用 <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 来查找对象支持的一组公共值。此方法从不返回 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
    </member>
    <member name="T:System.ComponentModel.CustomTypeDescriptor">
      <summary>提供 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> 接口的简单默认实现。</summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.CustomTypeDescriptor" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor(System.ComponentModel.ICustomTypeDescriptor)">
      <summary>使用父级自定义类型说明符初始化 <see cref="T:System.ComponentModel.CustomTypeDescriptor" /> 类的新实例。</summary>
      <param name="parent">父级自定义类型说明符。</param>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetAttributes">
      <summary>返回此类型说明符表示的类型的自定义属性集合。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.AttributeCollection" />，包含该类型的属性。默认为 <see cref="F:System.ComponentModel.AttributeCollection.Empty" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetClassName">
      <summary>返回此类型说明符表示的类的完全限定名称。</summary>
      <returns>一个 <see cref="T:System.String" />，包含此类型说明符说明的类型的完全限定类名。默认为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetComponentName">
      <summary>返回此类型说明符表示的类的名称。</summary>
      <returns>一个 <see cref="T:System.String" />，包含此类型说明符说明的组件实例的名称。默认值为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetConverter">
      <summary>返回此类型说明符表示的类型的类型转换器。</summary>
      <returns>此类型说明符表示的类型的 <see cref="T:System.ComponentModel.TypeConverter" />。默认为新创建的 <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultEvent">
      <summary>返回此类型说明符表示的对象的默认事件的事件说明符。</summary>
      <returns>此类型说明符表示的对象的默认事件的 <see cref="T:System.ComponentModel.EventDescriptor" />。默认值为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultProperty">
      <summary>返回此类型说明符表示的对象的默认属性的属性描述符。</summary>
      <returns>此类型说明符表示的对象的默认属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。默认值为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEditor(System.Type)">
      <summary>返回要与此类型说明符表示的类关联的指定类型的编辑器。</summary>
      <returns>要与此类型说明符表示的类关联的给定类型的编辑器。默认值为 null。</returns>
      <param name="editorBaseType">要检索的编辑器的基类型。</param>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents">
      <summary>返回此类型说明符所表示对象的事件说明符的集合。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.EventDescriptorCollection" />，包含此类型说明符所表示的对象的事件说明符。默认为 <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary>返回此类型说明符所表示的对象的已筛选事件说明符集合。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.EventDescriptorCollection" />，包含此类型说明符所表示的对象的事件说明。默认为 <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />。</returns>
      <param name="attributes">用作筛选器的属性数组。它可以是 null。</param>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties">
      <summary>返回此类型说明符所表示对象的属性说明符的集合。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，包含此类型说明符所表示的对象的属性说明。默认为 <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary>返回此类型说明符所表示的对象的已筛选属性描述符的集合。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，包含此类型说明符所表示的对象的属性说明。默认为 <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />。</returns>
      <param name="attributes">用作筛选器的属性数组。它可以是 null。</param>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>返回包含指定的属性描述符所描述的属性的对象。</summary>
      <returns>一个 <see cref="T:System.Object" />，拥有该类型说明符指定的给定属性。默认值为 null。</returns>
      <param name="pd">要检索其所属对象的属性描述符。</param>
    </member>
    <member name="T:System.ComponentModel.DataObjectAttribute">
      <summary>将某一类型标识为适合绑定到 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 对象的对象。无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.DataObjectAttribute" /> 类的新实例。 </summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.DataObjectAttribute" /> 类的新实例，并指示某一对象是否适合绑定到 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 对象。</summary>
      <param name="isDataObject">
如果该对象适合绑定到 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 对象，则为 true；否则为 false。</param>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.DataObject">
      <summary>指示该类适合在设计时绑定到 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 对象。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.Default">
      <summary>表示 <see cref="T:System.ComponentModel.DataObjectAttribute" /> 类的默认值，该值指示该类适合在设计时绑定到 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 对象。此字段为只读。</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.Equals(System.Object)">
      <summary>确定此 <see cref="T:System.ComponentModel.DataObjectAttribute" /> 实例是否符合另一对象的模式。</summary>
      <returns>
如果该实例与 <paramref name="obj" /> 参数所指定的实例相同，则为 true；否则为 false。</returns>
      <param name="obj">与 <see cref="T:System.ComponentModel.DataObjectAttribute" /> 实例进行比较的对象。 </param>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectAttribute.IsDataObject">
      <summary>获取一个值，该值指示是否应将某一对象视为适合在设计时绑定到 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 对象。</summary>
      <returns>
如果将该对象视为适合绑定到 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 对象，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.IsDefaultAttribute">
      <summary>获取一个值，该值指示该属性的当前值是否为该属性的默认值。</summary>
      <returns>
如果该属性的当前值是默认值，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.NonDataObject">
      <summary>指定该类不适合在设计时绑定到 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 对象。此字段为只读。</summary>
    </member>
    <member name="T:System.ComponentModel.DataObjectFieldAttribute">
      <summary>为表示数据字段的属性提供元数据。无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 类的新实例，并指示该字段是否是数据行的主键。</summary>
      <param name="primaryKey">
为 true 指示该字段在数据行的主键中；否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 类的新实例，并指示该字段是否是数据行的主键，以及该字段是否是数据库标识字段。</summary>
      <param name="primaryKey">
为 true 指示该字段在数据行的主键中；否则为 false。</param>
      <param name="isIdentity">
为 true 指示该字段是唯一标识数据行的标识字段；否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 类的新实例，并指示该字段是否是数据行的主键，该字段是否是数据库标识字段，以及该字段是否可以为空。</summary>
      <param name="primaryKey">
为 true 指示该字段在数据行的主键中；否则为 false。</param>
      <param name="isIdentity">
为 true 指示该字段是唯一标识数据行的标识字段；否则为 false。</param>
      <param name="isNullable">
为 true 指示该字段在数据存储区中可以为空；否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Int32)">
      <summary>初始化 <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 类的新实例，指示该字段是否是数据行的主键，该字段是否是数据库标识字段以及该字段是否可以为空，并设置该字段的长度。</summary>
      <param name="primaryKey">
为 true 指示该字段在数据行的主键中；否则为 false。</param>
      <param name="isIdentity">
为 true 指示该字段是唯一标识数据行的标识字段；否则为 false。</param>
      <param name="isNullable">
为 true 指示该字段在数据存储区中可以为空；否则为 false。</param>
      <param name="length">字段的长度（以字节为单位）。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <returns>
如果该实例与 <paramref name="obj" /> 参数所指定的实例相同，则为 true；否则为 false。</returns>
      <param name="obj">与 <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 实例进行比较的对象。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsIdentity">
      <summary>获取一个值，该值指示某一属性是否表示基础数据中的标识字段。</summary>
      <returns>
如果该属性表示基础数据中的标识字段，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsNullable">
      <summary>获取一个值，该值指示某一属性表示的字段在基础数据存储区中是否可以为空。</summary>
      <returns>
如果该属性表示的字段在基础数据存储区中可以为空，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.Length">
      <summary>获取属性的长度（以字节为单位）。</summary>
      <returns>该属性的长度（以字节为单位）；如果未设置，则为 -1。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.PrimaryKey">
      <summary>获取一个值，该值指示某一属性是否在基础数据的主键中。</summary>
      <returns>
如果该属性在数据存储区的主键中，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodAttribute">
      <summary>标识由某一类型公开的数据操作方法，该方法所执行的操作类型以及该方法是否是默认的数据方法。无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType)">
      <summary>初始化 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 类的新实例，并标识该方法所执行的数据操作类型。</summary>
      <param name="methodType">
        <see cref="T:System.ComponentModel.DataObjectMethodType" /> 值之一，这些值描述该方法所执行的数据操作。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType,System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 类的新实例，标识该方法所执行的数据操作类型，并标识该方法是否是该数据对象公开的默认数据方法。</summary>
      <param name="methodType">
        <see cref="T:System.ComponentModel.DataObjectMethodType" /> 值之一，这些值描述该方法所执行的数据操作。</param>
      <param name="isDefault">
为 true 指示该属性所应用于的方法是指定的 <paramref name="methodType" /> 的数据对象的默认方法；否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <returns>
如果该实例与 <paramref name="obj" /> 参数所指定的实例相同，则为 true；否则为 false。</returns>
      <param name="obj">与 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 实例进行比较的对象。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.IsDefault">
      <summary>获取一个值，该值指示 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 所应用于的方法是否是由特定方法类型的数据对象所公开的默认数据方法。</summary>
      <returns>
如果该方法是由方法类型的对象所公开的默认方法，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Match(System.Object)">
      <summary>获取一个值，该值指示此实例是否与指定属性共享一个通用模式。</summary>
      <returns>
如果该实例与 <paramref name="obj" /> 参数所指定的实例相同，则为 true；否则为 false。</returns>
      <param name="obj">与 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 实例进行比较的对象。</param>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.MethodType">
      <summary>获取一个 <see cref="T:System.ComponentModel.DataObjectMethodType" /> 值，该值指示该方法所执行的数据操作类型。</summary>
      <returns>
        <see cref="T:System.ComponentModel.DataObjectMethodType" /> 值之一，这些值标识 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 所应用于的方法所执行的数据操作类型。</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodType">
      <summary>根据应用于某方法的 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 的指定，标识该方法所执行的数据操作类型。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Fill">
      <summary>指示某一方法是否用于填充 <see cref="T:System.Data.DataSet" /> 对象的数据操作。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Select">
      <summary>指示某一方法是否用于检索数据的数据操作。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Update">
      <summary>指示某一方法是否用于更新数据的数据操作。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Insert">
      <summary>指示某一方法是否用于插入数据的数据操作。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Delete">
      <summary>指示某一方法是否用于删除数据的数据操作。</summary>
    </member>
    <member name="T:System.ComponentModel.DateTimeConverter">
      <summary>提供将 <see cref="T:System.DateTime" /> 对象与其他各种表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.DateTimeConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器是否可使用指定上下文将给定源类型的对象转换为 <see cref="T:System.DateTime" />。</summary>
      <returns>
            如果此对象可以执行转换，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="sourceType">
        <see cref="T:System.Type" />，表示要从中进行转换的类型。</param>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器能否使用上下文将对象转换为给定的目标类型。</summary>
      <returns>
            如果该转换器能够执行转换，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="destinationType">表示要转换到的类型的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将给定的值对象转换为 <see cref="T:System.DateTime" />。</summary>
      <returns>表示转换的 <paramref name="value" /> 的 <see cref="T:System.Object" />。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="culture">一个可选的 <see cref="T:System.Globalization.CultureInfo" />。如果未提供区域性设置，则使用当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是目标类型的有效值。</exception>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>使用这些参数将给定的值对象转换为 <see cref="T:System.DateTime" />。</summary>
      <returns>表示转换的 <paramref name="value" /> 的 <see cref="T:System.Object" />。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="culture">一个可选的 <see cref="T:System.Globalization.CultureInfo" />。如果未提供区域性设置，则使用当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">要将值转换成的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="T:System.ComponentModel.DecimalConverter">
      <summary>提供将 <see cref="T:System.Decimal" /> 对象与其他各种表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.DecimalConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器能否使用上下文将对象转换为给定的目标类型。</summary>
      <returns>
            如果该转换器能够执行转换，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="destinationType">表示要转换到的类型的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>使用这些参数将给定的值对象转换为 <see cref="T:System.Decimal" />。</summary>
      <returns>表示转换的 value 的 <see cref="T:System.Object" />。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="culture">一个可选的 <see cref="T:System.Globalization.CultureInfo" />。如果未提供区域性设置，则使用当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">要将值转换成的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="T:System.ComponentModel.DefaultBindingPropertyAttribute">
      <summary>指定组件的默认绑定属性。无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor">
      <summary>不带参数初始化 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor(System.String)">
      <summary>使用指定的属性名称初始化 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 类的新实例。</summary>
      <param name="name">默认绑定属性的名称。</param>
    </member>
    <member name="F:System.ComponentModel.DefaultBindingPropertyAttribute.Default">
      <summary>表示 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 类的默认值。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.Equals(System.Object)">
      <summary>确定指定的 <see cref="T:System.Object" /> 是否等同于当前的 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 实例。</summary>
      <returns>
            如果该对象等同于当前的实例，则为 true；否则为 false，指示两者不等同。</returns>
      <param name="obj">要与当前的 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 实例进行比较的 <see cref="T:System.Object" /></param>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.GetHashCode">
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultBindingPropertyAttribute.Name">
      <summary>获取 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 所绑定组件的默认绑定属性的名称。</summary>
      <returns>
        <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 所绑定组件的默认绑定属性的名称。</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultEventAttribute">
      <summary>指定组件的默认事件。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.DefaultEventAttribute" /> 类的新实例。</summary>
      <param name="name">该属性所绑定到组件的默认事件的名称。</param>
    </member>
    <member name="F:System.ComponentModel.DefaultEventAttribute.Default">
      <summary>指定 <see cref="T:System.ComponentModel.DefaultEventAttribute" /> 的默认值，即 null。此 static 字段是只读的。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前的 <see cref="T:System.ComponentModel.DefaultEventAttribute" />。</summary>
      <returns>
            如果给定对象的值等于当前对象的值，则为 true；否则为 false。</returns>
      <param name="obj">要进行值的相等性测试的对象。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultEventAttribute.Name">
      <summary>获取该属性所绑定到组件的默认事件的名称。</summary>
      <returns>该属性所绑定到组件的默认事件的名称。默认值为 null。</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultPropertyAttribute">
      <summary>指定组件的默认属性。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.DefaultPropertyAttribute" /> 类的新实例。</summary>
      <param name="name">该属性 (Attribute) 所绑定到组件的默认属性 (Property) 的名称。</param>
    </member>
    <member name="F:System.ComponentModel.DefaultPropertyAttribute.Default">
      <summary>指定 <see cref="T:System.ComponentModel.DefaultPropertyAttribute" /> 的默认值，即 null。此 static 字段是只读的。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前的 <see cref="T:System.ComponentModel.DefaultPropertyAttribute" />。</summary>
      <returns>
            如果给定对象的值等于当前对象的值，则为 true；否则为 false。</returns>
      <param name="obj">要进行值的相等性测试的对象。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultPropertyAttribute.Name">
      <summary>获取该属性 (Attribute) 所绑定到组件的默认属性 (Property) 的名称。</summary>
      <returns>该属性 (Attribute) 所绑定到组件的默认属性 (Property) 的名称。默认值为 null。</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultValueAttribute">
      <summary>指定属性 (Property) 的默认值。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Boolean)">
      <summary>使用 <see cref="T:System.Boolean" /> 值初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的新实例。</summary>
      <param name="value">
        <see cref="T:System.Boolean" />，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Byte)">
      <summary>使用 8 位无符号整数初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的新实例。</summary>
      <param name="value">8 位无符号整数，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Char)">
      <summary>使用 Unicode 字符初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的新实例。</summary>
      <param name="value">Unicode 字符，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Double)">
      <summary>使用双精度浮点数字初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的新实例。</summary>
      <param name="value">双精度浮点数字，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int16)">
      <summary>使用 16 位有符号整数初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的实例。</summary>
      <param name="value">16 位有符号整数，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int32)">
      <summary>使用 32 位有符号整数初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的实例。</summary>
      <param name="value">32 位有符号整数，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int64)">
      <summary>使用 64 位有符号整数初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的实例。</summary>
      <param name="value">64 位有符号整数，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Object)">
      <summary>初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的新实例。</summary>
      <param name="value">表示默认值的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Single)">
      <summary>使用单精度浮点数字初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的新实例。</summary>
      <param name="value">单精度浮点数字，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.String)">
      <summary>使用 <see cref="T:System.String" /> 初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的新实例。</summary>
      <param name="value">
        <see cref="T:System.String" />，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Type,System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的新实例，将指定的值转换为指定的类型，并将固定区域性作为翻译上下文。</summary>
      <param name="type">表示要将值转换为的类型的 <see cref="T:System.Type" />。</param>
      <param name="value">可以通过该类型的 <see cref="T:System.ComponentModel.TypeConverter" /> 和美国英语转换为该类型的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前的 <see cref="T:System.ComponentModel.DefaultValueAttribute" />。</summary>
      <returns>
            如果给定对象的值等于当前对象的值，则为 true；否则为 false。</returns>
      <param name="obj">要进行值的相等性测试的对象。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.GetHashCode"></member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.SetValue(System.Object)">
      <summary>设置此属性 (Attribute) 所绑定到的属性 (Property) 的默认值。</summary>
      <param name="value">默认值。</param>
    </member>
    <member name="P:System.ComponentModel.DefaultValueAttribute.Value">
      <summary>获取此属性 (Attribute) 绑定到的属性 (Property) 的默认值。</summary>
      <returns>表示此属性 (Attribute) 绑定到的属性 (Property) 的默认值的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.ComponentModel.DescriptionAttribute">
      <summary>指定属性 (Property) 或事件的说明。</summary>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.#ctor">
      <summary>不带参数初始化 <see cref="T:System.ComponentModel.DescriptionAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.DescriptionAttribute" /> 类的新实例并带有说明。</summary>
      <param name="description">说明文本。</param>
    </member>
    <member name="F:System.ComponentModel.DescriptionAttribute.Default">
      <summary>指定 <see cref="T:System.ComponentModel.DescriptionAttribute" /> 的默认值，即空字符串 ("")。此 static 字段是只读的。</summary>
    </member>
    <member name="P:System.ComponentModel.DescriptionAttribute.Description">
      <summary>获取存储在此属性 (Attribute) 中的说明。</summary>
      <returns>存储在此属性 (Attribute) 中的说明。</returns>
    </member>
    <member name="P:System.ComponentModel.DescriptionAttribute.DescriptionValue">
      <summary>获取或设置作为说明存储的字符串。</summary>
      <returns>作为说明存储的字符串。默认值为空字符串 ("")。</returns>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前的 <see cref="T:System.ComponentModel.DescriptionAttribute" />。</summary>
      <returns>
            如果给定对象的值等于当前对象的值，则为 true；否则为 false。</returns>
      <param name="obj">要进行值的相等性测试的对象。</param>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.GetHashCode"></member>
    <member name="M:System.ComponentModel.DescriptionAttribute.IsDefaultAttribute">
      <summary>返回一个值，该值指示这是否为默认 <see cref="T:System.ComponentModel.DescriptionAttribute" /> 实例。</summary>
      <returns>
            如果这是默认 <see cref="T:System.ComponentModel.DescriptionAttribute" /> 实例，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ComponentModel.DesignerAttribute">
      <summary>指定用于为组件实现设计时服务的类。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String)">
      <summary>使用提供设计时服务的类型的名称初始化 <see cref="T:System.ComponentModel.DesignerAttribute" /> 类的新实例。</summary>
      <param name="designerTypeName">将类型（该类型为此属性所绑定到的组件提供设计时服务）的完全限定名称和此类型所驻留的程序集的名称串联后得到的结果。</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String,System.String)">
      <summary>使用设计器类型和设计器的基类初始化 <see cref="T:System.ComponentModel.DesignerAttribute" /> 类的新实例。</summary>
      <param name="designerTypeName">将类型（该类型为此属性所绑定到的组件提供设计时服务）的完全限定名称和此类型所驻留的程序集的名称串联后得到的结果。</param>
      <param name="designerBaseTypeName">要与设计器类关联的基类的完全限定名。</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String,System.Type)">
      <summary>使用设计器类的名称和设计器的基类初始化 <see cref="T:System.ComponentModel.DesignerAttribute" /> 类的新实例。</summary>
      <param name="designerTypeName">将类型（该类型为此属性所绑定到的组件提供设计时服务）的完全限定名称和此类型所驻留的程序集的名称串联后得到的结果。</param>
      <param name="designerBaseType">
        <see cref="T:System.Type" />，表示要与 <paramref name="designerTypeName" /> 关联的基类。</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.Type)">
      <summary>使用提供设计时服务的类型初始化 <see cref="T:System.ComponentModel.DesignerAttribute" /> 类的新实例。</summary>
      <param name="designerType">
        <see cref="T:System.Type" />，表示为该属性所绑定到的组件提供设计时服务的类。</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.Type,System.Type)">
      <summary>使用设计器类型和设计器基类的类型初始化 <see cref="T:System.ComponentModel.DesignerAttribute" /> 类的新实例。</summary>
      <param name="designerType">
        <see cref="T:System.Type" />，表示为该属性所绑定到的组件提供设计时服务的类。</param>
      <param name="designerBaseType">
        <see cref="T:System.Type" />，表示要与 <paramref name="designerType" /> 关联的基类。</param>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.DesignerBaseTypeName">
      <summary>获取此设计器的基类型名。</summary>
      <returns>此设计器的基类型名。</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.DesignerTypeName">
      <summary>获取与此设计器属性关联的设计器类型名。</summary>
      <returns>与此设计器属性关联的设计器类型名。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前的 <see cref="T:System.ComponentModel.DesignerAttribute" />。</summary>
      <returns>
            如果给定对象的值等于当前对象的值，则为 true；否则为 false。</returns>
      <param name="obj">要进行值的相等性测试的对象。</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.GetHashCode"></member>
    <member name="P:System.ComponentModel.DesignerAttribute.TypeId">
      <summary>获取此属性类型的唯一 ID。</summary>
      <returns>此属性类型的唯一 ID。</returns>
    </member>
    <member name="T:System.ComponentModel.DesignerCategoryAttribute">
      <summary>指定类设计器属于某一类别。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignerCategoryAttribute.#ctor">
      <summary>用空字符串 ("") 初始化 <see cref="T:System.ComponentModel.DesignerCategoryAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignerCategoryAttribute.#ctor(System.String)">
      <summary>用给定的类别名称初始化 <see cref="T:System.ComponentModel.DesignerCategoryAttribute" /> 类的新实例。</summary>
      <param name="category">类别名称。</param>
    </member>
    <member name="P:System.ComponentModel.DesignerCategoryAttribute.Category">
      <summary>获取类别名称。</summary>
      <returns>类别名称。</returns>
    </member>
    <member name="F:System.ComponentModel.DesignerCategoryAttribute.Component">
      <summary>指定标记为此类别的组件使用组件设计器。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignerCategoryAttribute.Default">
      <summary>指定标记为此类别的组件不能使用可视化设计器。此 static 字段是只读的。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignerCategoryAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前的 <see cref="T:System.ComponentModel.DesignOnlyAttribute" />。</summary>
      <returns>
            如果给定对象的值等于当前对象的值，则为 true；否则为 false。</returns>
      <param name="obj">要进行值的相等性测试的对象。</param>
    </member>
    <member name="F:System.ComponentModel.DesignerCategoryAttribute.Form">
      <summary>指定标记为此类别的组件使用窗体设计器。此 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignerCategoryAttribute.Generic">
      <summary>指定标记为此类别的组件使用一般设计器。此 static 字段是只读的。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignerCategoryAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerCategoryAttribute.IsDefaultAttribute">
      <summary>确定此属性是否为默认属性。</summary>
      <returns>
            如果此属性是此属性类的默认值，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerCategoryAttribute.TypeId">
      <summary>获取此属性的唯一标识符。</summary>
      <returns>表示此属性的唯一标识符的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.ComponentModel.DesignerSerializationVisibility">
      <summary>指定属性对设计时序列化程序所具有的可见性。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibility.Hidden">
      <summary>代码生成器不生成对象的代码。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibility.Visible">
      <summary>代码生成器生成对象的代码。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibility.Content">
      <summary>代码生成器产生对象内容的代码，而不是对象本身的代码。</summary>
    </member>
    <member name="T:System.ComponentModel.DesignerSerializationVisibilityAttribute">
      <summary>指定在设计时序列化组件上的属性 (Property) 时所使用的持久性类型。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignerSerializationVisibilityAttribute.#ctor(System.ComponentModel.DesignerSerializationVisibility)">
      <summary>使用指定的 <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 值初始化 <see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" /> 类的新实例。</summary>
      <param name="visibility">
        <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 值之一。</param>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibilityAttribute.Content">
      <summary>指定序列化程序应该序列化属性 (Property) 的内容，而不是属性 (Property) 本身。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibilityAttribute.Default">
      <summary>指定默认值为 <see cref="F:System.ComponentModel.DesignerSerializationVisibilityAttribute.Visible" />，也就是说，可视化设计器使用默认规则来生成属性 (Property) 值。此 static 字段是只读的。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignerSerializationVisibilityAttribute.Equals(System.Object)">
      <summary>指示此实例与指定对象是否相等。</summary>
      <returns>
            如果 <paramref name="obj" /> 等于此实例，则为 true；否则为 false。</returns>
      <param name="obj">要比较的另一个对象。</param>
    </member>
    <member name="M:System.ComponentModel.DesignerSerializationVisibilityAttribute.GetHashCode">
      <summary>返回该对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibilityAttribute.Hidden">
      <summary>指定序列化程序不应该序列化属性 (Property) 的值。此 static 字段是只读的。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignerSerializationVisibilityAttribute.IsDefaultAttribute">
      <summary>获取一个值，该值指示该属性 (Attribute) 的当前值是否为该属性 (Attribute) 的默认值。</summary>
      <returns>
            如果该属性 (Attribute) 设置为默认值，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerSerializationVisibilityAttribute.Visibility">
      <summary>获取一个值，该值指示序列化程序在确定是否以及如何保持某个属性 (Property) 的值时应使用的基本序列化模式。</summary>
      <returns>
        <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 值之一。默认为 <see cref="F:System.ComponentModel.DesignerSerializationVisibility.Visible" />。</returns>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibilityAttribute.Visible">
      <summary>指定应该允许序列化程序序列化属性 (Property) 的值。此 static 字段是只读的。</summary>
    </member>
    <member name="T:System.ComponentModel.DesignOnlyAttribute">
      <summary>指定某个属性 (Property) 是否只能在设计时设置。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignOnlyAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.DesignOnlyAttribute" /> 类的新实例。</summary>
      <param name="isDesignOnly">
                如果属性 (Property) 只能在设计时设置，则为 true；如果属性 (Property) 可在设计时和运行时设置，则为 false。</param>
    </member>
    <member name="F:System.ComponentModel.DesignOnlyAttribute.Default">
      <summary>指定 <see cref="T:System.ComponentModel.DesignOnlyAttribute" /> 的默认值，即 <see cref="F:System.ComponentModel.DesignOnlyAttribute.No" />。此 static 字段是只读的。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignOnlyAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前的 <see cref="T:System.ComponentModel.DesignOnlyAttribute" />。</summary>
      <returns>
            如果给定对象的值等于当前对象的值，则为 true；否则为 false。</returns>
      <param name="obj">要进行值的相等性测试的对象。</param>
    </member>
    <member name="M:System.ComponentModel.DesignOnlyAttribute.GetHashCode"></member>
    <member name="M:System.ComponentModel.DesignOnlyAttribute.IsDefaultAttribute">
      <summary>确定此属性 (Attribute) 是否为默认属性 (Attribute)。</summary>
      <returns>
            如果此属性 (Attribute) 是此属性 (Attribute) 类的默认值，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.DesignOnlyAttribute.IsDesignOnly">
      <summary>获取一个值，该值指示属性 (Property) 是否只能在设计时设置。</summary>
      <returns>
            如果属性 (Property) 只能在设计时设置，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.ComponentModel.DesignOnlyAttribute.No">
      <summary>指定某个属性 (Property) 可在设计时或运行时设置。此 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignOnlyAttribute.Yes">
      <summary>指定某个属性 (Property) 只能在设计时设置。此 static 字段是只读的。</summary>
    </member>
    <member name="T:System.ComponentModel.DesignTimeVisibleAttribute">
      <summary>
        <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> 标记组件的可见性。如果存在 <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes" />，可视化设计器即可在设计器上显示该组件。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor">
      <summary>新建一个默认值设置为 true 的 <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" />。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor(System.Boolean)">
      <summary>创建新的 <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" />，并将 <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible" /> 属性设为 <paramref name="visible" /> 中的给定值。</summary>
      <param name="visible">与 <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible" /> 属性的设置值相反的值。</param>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Default">
      <summary>默认可见性是 Yes。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.Equals(System.Object)">
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.GetHashCode"></member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.IsDefaultAttribute">
      <summary>获取一个值，该值指示此实例是否与 <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default" /> 值相等。</summary>
      <returns>
            如果此实例等于 <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default" /> 值，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.No">
      <summary>将组件标记为在可视化设计器中不可见。</summary>
    </member>
    <member name="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible">
      <summary>获取或设置该组件是否应在设计时显示。</summary>
      <returns>
            如果该组件应在设计时显示，则为 true，如果不应在设计时显示，则为 false。</returns>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes">
      <summary>将组件标记为在可视化设计器中可见。</summary>
    </member>
    <member name="T:System.ComponentModel.DisplayNameAttribute">
      <summary>指定属性、事件或不采用任何参数的公共 void 方法的显示名称。</summary>
    </member>
    <member name="M:System.ComponentModel.DisplayNameAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.DisplayNameAttribute" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.DisplayNameAttribute.#ctor(System.String)">
      <summary>使用显示名称初始化 <see cref="T:System.ComponentModel.DisplayNameAttribute" /> 类的新实例。</summary>
      <param name="displayName">显示名称。</param>
    </member>
    <member name="F:System.ComponentModel.DisplayNameAttribute.Default">
      <summary>指定 <see cref="T:System.ComponentModel.DisplayNameAttribute" /> 的默认值。此字段为只读。</summary>
    </member>
    <member name="P:System.ComponentModel.DisplayNameAttribute.DisplayName">
      <summary>获取属性 (Property)、事件或不采用此属性 (Attribute) 中存储的任何参数的公共 void 方法的显示名称。</summary>
      <returns>显示名称。</returns>
    </member>
    <member name="P:System.ComponentModel.DisplayNameAttribute.DisplayNameValue">
      <summary>获取或设置显示名称。</summary>
      <returns>显示名称。</returns>
    </member>
    <member name="M:System.ComponentModel.DisplayNameAttribute.Equals(System.Object)">
      <summary>确定两个 <see cref="T:System.ComponentModel.DisplayNameAttribute" /> 实例是否相等。</summary>
      <returns>
            如果给定对象的值等于当前对象的值，则为 true；否则为 false。</returns>
      <param name="obj">要进行值的相等性测试的 <see cref="T:System.ComponentModel.DisplayNameAttribute" />。</param>
    </member>
    <member name="M:System.ComponentModel.DisplayNameAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.DisplayNameAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.DisplayNameAttribute.IsDefaultAttribute">
      <summary>确定此属性是否为默认属性。</summary>
      <returns>
            如果此属性是此属性类的默认值，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ComponentModel.DoubleConverter">
      <summary>提供将双精度浮点数字对象与各种其他表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.DoubleConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.DoubleConverter" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ComponentModel.DoWorkEventArgs">
      <summary>为 <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> 事件处理程序提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.DoWorkEventArgs.#ctor(System.Object)">
      <summary>初始化 <see cref="T:System.ComponentModel.DoWorkEventArgs" /> 类的新实例。</summary>
      <param name="argument">指定异步操作的参数。</param>
    </member>
    <member name="P:System.ComponentModel.DoWorkEventArgs.Argument">
      <summary>获取表示异步操作参数的值。</summary>
      <returns>表示异步操作参数的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DoWorkEventArgs.Result">
      <summary>获取或设置表示异步操作结果的值。</summary>
      <returns>表示异步操作结果的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.ComponentModel.DoWorkEventHandler">
      <summary>表示将处理 <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> 事件的方法。无法继承此类。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.DoWorkEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.EditorAttribute">
      <summary>指定用来更改属性的编辑器。无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor">
      <summary>用默认的编辑器（即不使用任何编辑器）初始化 <see cref="T:System.ComponentModel.EditorAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.String,System.String)">
      <summary>用编辑器的类型名称和基类型名称初始化 <see cref="T:System.ComponentModel.EditorAttribute" /> 类的新实例。</summary>
      <param name="typeName">编辑器的完全限定的类型名。</param>
      <param name="baseTypeName">用作编辑器查找键的基类或接口的完全限定类型名。此类必须是 <see cref="T:System.Drawing.Design.UITypeEditor" /> 或是从它派生的。</param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.String,System.Type)">
      <summary>用类型名和基类型来初始化 <see cref="T:System.ComponentModel.EditorAttribute" /> 类的新实例。</summary>
      <param name="typeName">编辑器的完全限定的类型名。</param>
      <param name="baseType">用作编辑器查找键的基类或接口的 <see cref="T:System.Type" />。此类必须是 <see cref="T:System.Drawing.Design.UITypeEditor" /> 或是从它派生的。</param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.Type,System.Type)">
      <summary>用类型和基类型初始化 <see cref="T:System.ComponentModel.EditorAttribute" /> 类的新实例。</summary>
      <param name="type">一个表示编辑器类型的 <see cref="T:System.Type" />。</param>
      <param name="baseType">用作编辑器查找键的基类或接口的 <see cref="T:System.Type" />。此类必须是 <see cref="T:System.Drawing.Design.UITypeEditor" /> 或是从它派生的。</param>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.EditorBaseTypeName">
      <summary>获取作为此编辑器查找键的基类或接口的名称。</summary>
      <returns>作为此编辑器查找键的基类或接口的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.EditorTypeName">
      <summary>获取 <see cref="P:System.Type.AssemblyQualifiedName" /> 格式的编辑器类的名称。</summary>
      <returns>
        <see cref="P:System.Type.AssemblyQualifiedName" /> 格式的编辑器类的名称。</returns>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前的 <see cref="T:System.ComponentModel.EditorAttribute" />。</summary>
      <returns>
            如果给定对象的值等于当前对象的值，则为 true；否则为 false。</returns>
      <param name="obj">要进行值的相等性测试的对象。</param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.GetHashCode"></member>
    <member name="P:System.ComponentModel.EditorAttribute.TypeId">
      <summary>获取此属性类型的唯一 ID。</summary>
      <returns>此属性类型的唯一 ID。</returns>
    </member>
    <member name="T:System.ComponentModel.EditorBrowsableAttribute">
      <summary>指定某个属性或方法在编辑器中可以查看。无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor">
      <summary>使用设置为默认状态的 <see cref="P:System.ComponentModel.EditorBrowsableAttribute.State" /> 初始化 <see cref="T:System.ComponentModel.EditorBrowsableAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor(System.ComponentModel.EditorBrowsableState)">
      <summary>使用 <see cref="T:System.ComponentModel.EditorBrowsableState" /> 初始化 <see cref="T:System.ComponentModel.EditorBrowsableAttribute" /> 类的新实例。</summary>
      <param name="state">要将 <see cref="P:System.ComponentModel.EditorBrowsableAttribute.State" /> 设置成的 <see cref="T:System.ComponentModel.EditorBrowsableState" />。</param>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前的 <see cref="T:System.ComponentModel.EditorBrowsableAttribute" />。</summary>
      <returns>
            如果给定对象的值等于当前对象的值，则为 true；否则为 false。</returns>
      <param name="obj">要进行值的相等性测试的对象。</param>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.GetHashCode"></member>
    <member name="P:System.ComponentModel.EditorBrowsableAttribute.State">
      <summary>获取属性或方法的可浏览状态。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.EditorBrowsableState" />，它是属性或方法的可浏览状态。</returns>
    </member>
    <member name="T:System.ComponentModel.EditorBrowsableState">
      <summary>在编辑器中指定属性或方法的可浏览状态。</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Always">
      <summary>该属性或方法在编辑器中始终是可浏览的。</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Never">
      <summary>该属性或方法始终不能在编辑器中浏览。</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Advanced">
      <summary>该属性或方法是只有高级用户才可以看到的功能。编辑器可以显示或隐藏这些属性。</summary>
    </member>
    <member name="T:System.ComponentModel.EnumConverter">
      <summary>提供将 <see cref="T:System.Enum" /> 对象与其他各种表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.#ctor(System.Type)">
      <summary>为给定类型初始化 <see cref="T:System.ComponentModel.EnumConverter" /> 类的新实例。</summary>
      <param name="type">
        <see cref="T:System.Type" /> 表示与此枚举转换器关联的枚举类型。</param>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器是否可使用指定上下文将给定源类型的对象转换为枚举对象。</summary>
      <returns>
            如果该转换器能够执行转换，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="sourceType">
        <see cref="T:System.Type" />，表示要从中进行转换的类型。</param>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器能否使用上下文将对象转换为给定的目标类型。</summary>
      <returns>
如果该转换器能够执行转换，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="destinationType">表示要转换到的类型的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Comparer">
      <summary>获取可用于对枚举的值进行排序的 <see cref="T:System.Collections.IComparer" />。</summary>
      <returns>一个用于对枚举值进行排序的 <see cref="T:System.Collections.IComparer" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将指定的值对象转换为枚举对象。</summary>
      <returns>表示转换的 <paramref name="value" /> 的 <see cref="T:System.Object" />。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="culture">一个可选的 <see cref="T:System.Globalization.CultureInfo" />。如果未提供区域性设置，则使用当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是目标类型的有效值。</exception>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将给定的值对象转换为指定的目标类型。</summary>
      <returns>表示转换的 <paramref name="value" /> 的 <see cref="T:System.Object" />。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="culture">一个可选的 <see cref="T:System.Globalization.CultureInfo" />。如果未提供区域性设置，则使用当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">要将值转换成的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是枚举的有效值。</exception>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.EnumType">
      <summary>指定与此转换器关联的枚举数的类型。</summary>
      <returns>与此转换器关联的枚举数的类型。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取此验证器设计用于的数据类型的标准值集合。</summary>
      <returns>包含标准有效值集的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />；如果数据类型不支持标准值集，则为 null。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示从 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 返回的标准值的列表是不是使用指定上下文的独占列表。</summary>
      <returns>
            如果从 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 返回的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 是可能值的穷举列表，则为 true；如果还可能有其他值，则为 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示此对象是否支持可使用指定上下文从列表中选取的标准值集。</summary>
      <returns>
            返回 true，因为应当调用 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 来查找对象支持的一组公共值。此方法从不返回 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>获取一个用于指示给定对象值是否对此类型有效的值。</summary>
      <returns>
            如果指定值对于该对象有效，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="value">要测试的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Values">
      <summary>获取或设置一个 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />，用来为枚举指定可能的值。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />，用来为枚举指定可能的值。</returns>
    </member>
    <member name="T:System.ComponentModel.EventDescriptor">
      <summary>提供有关事件的信息。</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>使用指定 <see cref="T:System.ComponentModel.MemberDescriptor" /> 中的名称和属性初始化 <see cref="T:System.ComponentModel.EventDescriptor" /> 类的新实例。</summary>
      <param name="descr">一个 <see cref="T:System.ComponentModel.MemberDescriptor" />，它包含该事件的名称及其属性。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>使用指定 <see cref="T:System.ComponentModel.MemberDescriptor" /> 中的名称以及同时出现在 <see cref="T:System.ComponentModel.MemberDescriptor" /> 和 <see cref="T:System.Attribute" /> 数组中的属性初始化 <see cref="T:System.ComponentModel.EventDescriptor" /> 类的新实例。</summary>
      <param name="descr">一个 <see cref="T:System.ComponentModel.MemberDescriptor" />，它具有该成员的名称及其属性。</param>
      <param name="attrs">一个 <see cref="T:System.Attribute" /> 数组，具有要添加到此事件说明的属性。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>用指定的名称和属性数组初始化 <see cref="T:System.ComponentModel.EventDescriptor" /> 类的新实例。</summary>
      <param name="name">事件的名称。</param>
      <param name="attrs">包含事件属性的类型 <see cref="T:System.Attribute" /> 的数组。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.AddEventHandler(System.Object,System.Delegate)">
      <summary>当在派生类中被重写时，将事件绑定到组件。</summary>
      <param name="component">向委托提供事件的组件。</param>
      <param name="value">表示处理事件的方法的委托。</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.ComponentType">
      <summary>当在派生类中被重写时，获取该事件绑定到的组件的类型。</summary>
      <returns>一个 <see cref="T:System.Type" />，表示该事件绑定到的组件的类型。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.EventType">
      <summary>当在派生类中被重写时，获取该事件的委托的类型。</summary>
      <returns>一个 <see cref="T:System.Type" />，表示该事件的委托的类型。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.IsMulticast">
      <summary>当在派生类中被重写时，获取指示该事件委托是否是多路广播委托的值。</summary>
      <returns>
            如果事件委托是多路广播的，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>当在派生类中被重写时，解除委托与组件的绑定，使委托将不再从组件接收事件。</summary>
      <param name="component">委托要绑定到的组件。</param>
      <param name="value">要解除组件绑定的委托。</param>
    </member>
    <member name="T:System.ComponentModel.EventDescriptorCollection">
      <summary>表示 <see cref="T:System.ComponentModel.EventDescriptor" /> 对象的集合。</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[])">
      <summary>用给定的 <see cref="T:System.ComponentModel.EventDescriptor" /> 对象的数组初始化 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 类的新实例。</summary>
      <param name="events">为该集合提供事件的类型 <see cref="T:System.ComponentModel.EventDescriptor" /> 的数组。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[],System.Boolean)">
      <summary>用给定的 <see cref="T:System.ComponentModel.EventDescriptor" /> 对象的数组初始化 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 类的新实例。该集合可以是只读的。</summary>
      <param name="events">为该集合提供事件的类型 <see cref="T:System.ComponentModel.EventDescriptor" /> 的数组。</param>
      <param name="readOnly">
                如果指定一个只读集合，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Add(System.ComponentModel.EventDescriptor)">
      <summary>将 <see cref="T:System.ComponentModel.EventDescriptor" /> 添加到集合的末尾。</summary>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptor" /> 在集合中的位置。</returns>
      <param name="value">要添加到集合的 <see cref="T:System.ComponentModel.EventDescriptor" />。</param>
      <exception cref="T:System.NotSupportedException">集合为只读。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Clear">
      <summary>从集合中移除所有对象。</summary>
      <exception cref="T:System.NotSupportedException">集合为只读。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Contains(System.ComponentModel.EventDescriptor)">
      <summary>返回集合是否包含给定的 <see cref="T:System.ComponentModel.EventDescriptor" />。</summary>
      <returns>
            如果该集合包含 <paramref name="value" />，则为 true；否则为 false。</returns>
      <param name="value">要在集合内查找的 <see cref="T:System.ComponentModel.EventDescriptor" />。</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Count">
      <summary>获取集合中事件说明符的数目。</summary>
      <returns>集合中事件说明符的数目。</returns>
    </member>
    <member name="F:System.ComponentModel.EventDescriptorCollection.Empty">
      <summary>指定要使用的空集合，而不是创建不具有任何项的新集合。此 static 字段是只读的。</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Find(System.String,System.Boolean)">
      <summary>获取集合中具有指定名称的事件的说明。</summary>
      <returns>具有指定名称的 <see cref="T:System.ComponentModel.EventDescriptor" />，或者如果该事件不存在，则为 null。</returns>
      <param name="name">要从集合中获取的事件的名称。</param>
      <param name="ignoreCase">
                如果要忽略事件的大小写，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.GetEnumerator">
      <summary>获取此 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 的枚举数。</summary>
      <returns>实现 <see cref="T:System.Collections.IEnumerator" /> 的枚举数。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.IndexOf(System.ComponentModel.EventDescriptor)">
      <summary>返回给定 <see cref="T:System.ComponentModel.EventDescriptor" /> 的索引。</summary>
      <returns>集合中给定 <see cref="T:System.ComponentModel.EventDescriptor" /> 的索引。</returns>
      <param name="value">要在集合内查找的 <see cref="T:System.ComponentModel.EventDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Insert(System.Int32,System.ComponentModel.EventDescriptor)">
      <summary>将 <see cref="T:System.ComponentModel.EventDescriptor" /> 插入集合中指定的索引位置。</summary>
      <param name="index">集合中插入 <paramref name="value" /> 参数的索引位置。</param>
      <param name="value">要插入到集合的 <see cref="T:System.ComponentModel.EventDescriptor" />。</param>
      <exception cref="T:System.NotSupportedException">集合为只读。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary>使用指定的 <see cref="T:System.Collections.IComparer" /> 将此 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 的成员排序。</summary>
      <param name="sorter">用来将此集合中的 <see cref="T:System.ComponentModel.EventDescriptor" /> 对象排序的比较器。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.String[])">
      <summary>将此 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 的成员排序。首先应用指定的顺序，然后应用此集合的默认排序，后者通常为字母顺序。</summary>
      <param name="names">字符串的数组，描述此集合中的 <see cref="T:System.ComponentModel.EventDescriptor" /> 对象的排序顺序。</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)">
      <summary>获取或设置具有指定索引号的事件。</summary>
      <returns>具有指定索引号的 <see cref="T:System.ComponentModel.EventDescriptor" />。</returns>
      <param name="index">要获取或设置的 <see cref="T:System.ComponentModel.EventDescriptor" /> 的从零开始的索引号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)" /> 的有效索引。</exception>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.String)">
      <summary>获取或设置具有指定名称的事件。</summary>
      <returns>具有指定名称的 <see cref="T:System.ComponentModel.EventDescriptor" />，或者如果该事件不存在，则为 null。</returns>
      <param name="name">要获取或设置的 <see cref="T:System.ComponentModel.EventDescriptor" /> 的名称。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Remove(System.ComponentModel.EventDescriptor)">
      <summary>从集合中移除指定的 <see cref="T:System.ComponentModel.EventDescriptor" />。</summary>
      <param name="value">要从该集合中移除的 <see cref="T:System.ComponentModel.EventDescriptor" />。</param>
      <exception cref="T:System.NotSupportedException">集合为只读。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.RemoveAt(System.Int32)">
      <summary>从集合中移除指定索引位置的 <see cref="T:System.ComponentModel.EventDescriptor" />。</summary>
      <param name="index">要移除的 <see cref="T:System.ComponentModel.EventDescriptor" /> 的索引。</param>
      <exception cref="T:System.NotSupportedException">集合为只读。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort">
      <summary>使用集合的默认排序（通常为字母顺序）对此 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 的成员进行排序。</summary>
      <returns>新的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary>使用指定的 <see cref="T:System.Collections.IComparer" /> 将此 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 的成员排序。</summary>
      <returns>新的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
      <param name="comparer">一个 <see cref="T:System.Collections.IComparer" />，用来对此集合中的 <see cref="T:System.ComponentModel.EventDescriptor" /> 对象排序。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[])">
      <summary>按照指定的排序顺序对此 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 的成员进行排序。</summary>
      <returns>新的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
      <param name="names">字符串的数组，描述集合中 <see cref="T:System.ComponentModel.EventDescriptor" /> 对象的排序顺序。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary>按照指定的排序顺序和 <see cref="T:System.Collections.IComparer" /> 对此 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 的成员进行排序。</summary>
      <returns>新的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
      <param name="names">字符串的数组，描述集合中 <see cref="T:System.ComponentModel.EventDescriptor" /> 对象的排序顺序。</param>
      <param name="comparer">一个 <see cref="T:System.Collections.IComparer" />，用来对此集合中的 <see cref="T:System.ComponentModel.EventDescriptor" /> 对象排序。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>对于该集合的元素，从特定的 <see cref="T:System.Array" /> 索引开始，将元素复制到 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，用作从集合复制的元素的目标数组。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，在此处开始复制。</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#Count">
      <summary>获取集合中包含的元素数。</summary>
      <returns>集合中包含的元素数。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示对集合的访问是否同步。</summary>
      <returns>
            如果对集合的访问是同步的（线程安全），则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对集合的访问的对象。</summary>
      <returns>可用于同步集合访问的对象。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary>向集合中添加一项。</summary>
      <returns>新元素的插入位置。</returns>
      <param name="value">要添加到集合中的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">集合为只读。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Clear">
      <summary>从集合中移除所有项。</summary>
      <exception cref="T:System.NotSupportedException">集合为只读。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary>确定集合中是否包含特定的值。</summary>
      <returns>
            如果在集合中找到 <see cref="T:System.Object" />，则为 true；否则为 false。</returns>
      <param name="value">要在集合中定位的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>确定集合中特定项的索引。</summary>
      <returns>如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
      <param name="value">要在集合中定位的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>将一个项插入到集合中指定的索引处。</summary>
      <param name="index">从零开始的索引，应在该位置插入 <paramref name="value" />。</param>
      <param name="value">要插入到集合中的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">集合为只读。</exception>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示集合是否具有固定大小。</summary>
      <returns>
            如果该集合具有固定大小，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示集合是否为只读。</summary>
      <returns>
            如果该集合为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置指定索引处的元素。</summary>
      <returns>指定索引处的元素。</returns>
      <param name="index">要获得或设置的元素从零开始的索引。</param>
      <exception cref="T:System.NotSupportedException">集合为只读。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小于 0。- 或 -<paramref name="index" /> 等于或大于 <see cref="P:System.ComponentModel.EventDescriptorCollection.Count" />。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary>从集合中移除特定对象的第一个匹配项。</summary>
      <param name="value">要从该集合中移除的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">集合为只读。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>移除指定索引处的项。</summary>
      <param name="index">从零开始的索引（属于要移除的项）。</param>
      <exception cref="T:System.NotSupportedException">集合为只读。</exception>
    </member>
    <member name="T:System.ComponentModel.EventHandlerList">
      <summary>提供一个简单的委托列表。无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.EventHandlerList.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.EventHandlerList" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.EventHandlerList.AddHandler(System.Object,System.Delegate)">
      <summary>将委托添加到列表。</summary>
      <param name="key">拥有该事件的对象。</param>
      <param name="value">要添加到列表的委托。</param>
    </member>
    <member name="M:System.ComponentModel.EventHandlerList.AddHandlers(System.ComponentModel.EventHandlerList)">
      <summary>向当前列表添加委托的列表。</summary>
      <param name="listToAddFrom">要添加的列表。</param>
    </member>
    <member name="M:System.ComponentModel.EventHandlerList.Dispose">
      <summary>处置委托列表。</summary>
    </member>
    <member name="P:System.ComponentModel.EventHandlerList.Item(System.Object)">
      <summary>获取或设置指定对象的委托。</summary>
      <returns>指定键的委托；如果委托不存在，则为 null。</returns>
      <param name="key">要在列表中查找的对象。</param>
    </member>
    <member name="M:System.ComponentModel.EventHandlerList.RemoveHandler(System.Object,System.Delegate)">
      <summary>从列表中将委托移除。</summary>
      <param name="key">拥有该事件的对象。</param>
      <param name="value">要从列表中移除的委托。</param>
    </member>
    <member name="T:System.ComponentModel.ExpandableObjectConverter">
      <summary>提供在可扩展对象与其他各种表示形式之间实现转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.ExpandableObjectConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>获取由值参数指定的对象类型的属性集合。</summary>
      <returns>具有为此组件公开的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />；或者如果没有属性，则为 null。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="value">一个 <see cref="T:System.Object" />，它指定要获取其属性的对象类型。</param>
      <param name="attributes">一个将用作筛选器的 <see cref="T:System.Attribute" /> 类型的数组。</param>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示此对象是否使用指定的上下文支持属性。</summary>
      <returns>
            由于应调用 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> 来查找此对象的属性，因此为 true。此方法从不返回 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
    </member>
    <member name="T:System.ComponentModel.ExtenderProvidedPropertyAttribute">
      <summary>指定由扩展程序提供程序提供的属性。无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.ExtenderProvidedPropertyAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.Equals(System.Object)">
      <summary>确定指定的 <see cref="T:System.Object" /> 是否等于当前的 <see cref="T:System.Object" />。</summary>
      <returns>
            如果指定的 <see cref="T:System.Object" /> 等于当前的 <see cref="T:System.Object" />，则为 true；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的 <see cref="T:System.Object" /> 或 null。</param>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ExtenderProperty">
      <summary>获取正被提供的属性。</summary>
      <returns>封装正被提供的属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.IsDefaultAttribute">
      <summary>指示此实例的值是否是派生类的默认值。</summary>
      <returns>
            如果该实例是此类的默认属性，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.Provider">
      <summary>获取正在提供属性的扩展程序提供程序。</summary>
      <returns>正在提供属性的 <see cref="T:System.ComponentModel.IExtenderProvider" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ReceiverType">
      <summary>获取可接收属性的对象的类型。</summary>
      <returns>一个 <see cref="T:System.Type" />，它描述可接收属性的对象的类型。</returns>
    </member>
    <member name="T:System.ComponentModel.GuidConverter">
      <summary>提供将 <see cref="T:System.Guid" /> 对象与其他各种表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.GuidConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器是否可使用上下文将给定源类型的对象转换为 GUID 对象。</summary>
      <returns>
如果该转换器能够执行转换，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="sourceType">
        <see cref="T:System.Type" />，表示要从中进行转换的类型。</param>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器能否使用上下文将对象转换为给定的目标类型。</summary>
      <returns>
如果该转换器能够执行转换，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="destinationType">表示要转换到的类型的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将给定对象转换为 GUID 对象。</summary>
      <returns>表示转换的 <paramref name="value" /> 的 <see cref="T:System.Object" />。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="culture">一个可选的 <see cref="T:System.Globalization.CultureInfo" />。如果未提供区域性设置，则使用当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将给定对象转换为其他类型。</summary>
      <returns>被转换的对象。</returns>
      <param name="context">格式化程序上下文。</param>
      <param name="culture">
        <paramref name="value" /> 将要转换到的区域性。</param>
      <param name="value">要转换的对象。</param>
      <param name="destinationType">对象要转换为的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="T:System.ComponentModel.HandledEventArgs">
      <summary>为可在事件处理程序中完整处理的事件提供数据。 </summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor">
      <summary>用 <see cref="P:System.ComponentModel.HandledEventArgs.Handled" /> 属性的默认值 false 初始化 <see cref="T:System.ComponentModel.HandledEventArgs" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor(System.Boolean)">
      <summary>用 <see cref="P:System.ComponentModel.HandledEventArgs.Handled" /> 属性的指定默认值初始化 <see cref="T:System.ComponentModel.HandledEventArgs" /> 类的新实例。</summary>
      <param name="defaultHandledValue">
        <see cref="P:System.ComponentModel.HandledEventArgs.Handled" /> 属性的默认值。</param>
    </member>
    <member name="P:System.ComponentModel.HandledEventArgs.Handled">
      <summary>获取或设置一个值，该值指示事件处理程序是否已完整处理事件，或者系统是否应该继续本身的处理。</summary>
      <returns>
            如果事件已完整地被处理，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ComponentModel.HandledEventHandler">
      <summary>表示可以处理事件的方法，这些事件在事件处理程序返回后可能需要或不需要进行进一步处理。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.HandledEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.IBindingList">
      <summary>提供在绑定到数据源时支持复杂方案和简单方案所需的功能。</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>将 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 添加到用于搜索的索引。</summary>
      <param name="property">要添加到用于搜索的索引的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddNew">
      <summary>将新项添加到列表。</summary>
      <returns>添加到列表的项。</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.AllowNew" /> 为 false。</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowEdit">
      <summary>获取是否可更新列表中的项。</summary>
      <returns>
            如果可以更新列表中的项，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowNew">
      <summary>获取是否可以使用 <see cref="M:System.ComponentModel.IBindingList.AddNew" /> 向列表中添加项。</summary>
      <returns>
            如果可以使用 <see cref="M:System.ComponentModel.IBindingList.AddNew" /> 向列表中添加项，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowRemove">
      <summary>获取是否可以使用 <see cref="M:System.Collections.IList.Remove(System.Object)" /> 或 <see cref="M:System.Collections.IList.RemoveAt(System.Int32)" /> 从列表中移除项。</summary>
      <returns>
            如果可以从列表中移除项，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>根据 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 和 <see cref="T:System.ComponentModel.ListSortDirection" /> 对列表进行排序。</summary>
      <param name="property">以其为根据进行排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="direction">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 值之一。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> 为 false。</exception>
    </member>
    <member name="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>返回具有给定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的行的索引。</summary>
      <returns>具有给定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的行的索引。</returns>
      <param name="property">要对其进行搜索的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="key">要搜索的 <paramref name="property" /> 参数的值。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" /> 为 false。</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.IsSorted">
      <summary>获取是否对列表中的项进行排序。</summary>
      <returns>
            如果已调用 <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> 并且未调用 <see cref="M:System.ComponentModel.IBindingList.RemoveSort" />，则为 true；否则为 false。</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> 为 false。</exception>
    </member>
    <member name="E:System.ComponentModel.IBindingList.ListChanged">
      <summary>当列表更改或列表中的项更改时发生。</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>从用于搜索的索引中移除 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <param name="property">要从用于搜索的索引中移除的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveSort">
      <summary>使用 <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> 移除任何已应用的排序。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> 为 false。</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortDirection">
      <summary>获取排序的方向。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ListSortDirection" /> 值之一。</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> 为 false。</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortProperty">
      <summary>获取正在用于排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <returns>正在用于排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> 为 false。</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsChangeNotification">
      <summary>获取当列表更改或列表中的项更改时是否引发 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件。</summary>
      <returns>
            如果当列表更改或项更改时引发了 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSearching">
      <summary>获取列表是否支持使用 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> 方法进行搜索。</summary>
      <returns>
            如果列表支持使用 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> 方法进行搜索，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSorting">
      <summary>获取列表是否支持排序。</summary>
      <returns>
            如果列表支持排序，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ComponentModel.IBindingListView">
      <summary>通过提供高级排序和筛选功能来扩展 <see cref="T:System.ComponentModel.IBindingList" /> 接口。</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)">
      <summary>根据给定的 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 对数据源进行排序。</summary>
      <param name="sorts">包含要应用于数据源的顺序的 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />。</param>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.Filter">
      <summary>获取或设置筛选器，以用于从数据源返回的项的集合中排除项。</summary>
      <returns>用于在数据源返回的项集合中筛选掉项的字符串。 </returns>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.RemoveFilter">
      <summary>移除应用于数据源的当前筛选器。</summary>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SortDescriptions">
      <summary>获取当前应用于数据源的排序说明的集合。</summary>
      <returns>当前应用于数据源的 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsAdvancedSorting">
      <summary>获取一个值，指示数据源是否支持高级排序。 </summary>
      <returns>
如果数据源支持高级排序，则为 true；否则为 false。 </returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsFiltering">
      <summary>获取一个值，该值指示数据源是否支持筛选。 </summary>
      <returns>
如果数据源支持筛选，则为 true；否则为 false。 </returns>
    </member>
    <member name="T:System.ComponentModel.ICancelAddNew">
      <summary>在向集合添加新项时添加事务性功能。</summary>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.CancelNew(System.Int32)">
      <summary>丢弃集合中挂起的新项。</summary>
      <param name="itemIndex">先前添加到集合的项的索引。</param>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.EndNew(System.Int32)">
      <summary>向集合提交挂起的新项。</summary>
      <param name="itemIndex">先前添加到集合的项的索引。</param>
    </member>
    <member name="T:System.ComponentModel.IChangeTracking">
      <summary>定义查询对象更改以及重置更改后的状态的机制。</summary>
    </member>
    <member name="M:System.ComponentModel.IChangeTracking.AcceptChanges">
      <summary>通过接受修改将对象的状态重置为更改前的状态。</summary>
    </member>
    <member name="P:System.ComponentModel.IChangeTracking.IsChanged">
      <summary>获取对象更改后的状态。</summary>
      <returns>
            如果自上次调用 <see cref="M:System.ComponentModel.IChangeTracking.AcceptChanges" /> 后对象的内容发生了更改，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ComponentModel.IComNativeDescriptorHandler">
      <summary>COM 对象和 TypeDescriptor 之间的顶级映射层。</summary>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetAttributes(System.Object)"></member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetClassName(System.Object)"></member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetConverter(System.Object)"></member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultEvent(System.Object)"></member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultProperty(System.Object)"></member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEditor(System.Object,System.Type)"></member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object)"></member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object,System.Attribute[])"></member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetName(System.Object)"></member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetProperties(System.Object,System.Attribute[])"></member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.Int32,System.Boolean@)">
      <summary>检索具有指定调度标识符的属性的值。</summary>
      <param name="component">属性所属的对象。</param>
      <param name="dispid">调度标识符。</param>
      <param name="success">一个通过引用传递的 <see cref="T:System.Boolean" />，表示是否检索属性。</param>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.String,System.Boolean@)">
      <summary>检索具有指定名称的属性的值。</summary>
      <param name="component">属性所属的对象。</param>
      <param name="propertyName">属性的名称。</param>
      <param name="success">一个通过引用传递的 <see cref="T:System.Boolean" />，表示是否检索属性。</param>
    </member>
    <member name="T:System.ComponentModel.IComponent">
      <summary>提供所有组件需要的功能。</summary>
    </member>
    <member name="E:System.ComponentModel.IComponent.Disposed">
      <summary>表示处理组件的 <see cref="E:System.ComponentModel.IComponent.Disposed" /> 事件的方法。</summary>
    </member>
    <member name="P:System.ComponentModel.IComponent.Site">
      <summary>获取或设置与 <see cref="T:System.ComponentModel.IComponent" /> 关联的 <see cref="T:System.ComponentModel.ISite" />。</summary>
      <returns>与组件关联的 <see cref="T:System.ComponentModel.ISite" /> 对象；或者在组件不具有站点的情况下为 null。</returns>
    </member>
    <member name="T:System.ComponentModel.IContainer">
      <summary>提供容器的功能。容器是在逻辑上包含零个或更多个组件的对象。</summary>
    </member>
    <member name="M:System.ComponentModel.IContainer.Add(System.ComponentModel.IComponent)">
      <summary>将指定的 <see cref="T:System.ComponentModel.IComponent" /> 添加至列表结尾的 <see cref="T:System.ComponentModel.IContainer" />。</summary>
      <param name="component">要添加的 <see cref="T:System.ComponentModel.IComponent" />。</param>
    </member>
    <member name="M:System.ComponentModel.IContainer.Add(System.ComponentModel.IComponent,System.String)">
      <summary>将指定的 <see cref="T:System.ComponentModel.IComponent" /> 添加至列表结尾的 <see cref="T:System.ComponentModel.IContainer" />，并给该组件分配一个名称。</summary>
      <param name="component">要添加的 <see cref="T:System.ComponentModel.IComponent" />。</param>
      <param name="name">要给该组件分配的唯一的、区分大小写的名称。- 或 - null，它使组件保持未命名状态。</param>
    </member>
    <member name="P:System.ComponentModel.IContainer.Components">
      <summary>获取 <see cref="T:System.ComponentModel.IContainer" /> 中的所有组件。</summary>
      <returns>
        <see cref="T:System.ComponentModel.IComponent" /> 对象的集合，它表示 <see cref="T:System.ComponentModel.IContainer" /> 中的所有组件。</returns>
    </member>
    <member name="M:System.ComponentModel.IContainer.Remove(System.ComponentModel.IComponent)">
      <summary>从 <see cref="T:System.ComponentModel.IContainer" /> 中移除组件。</summary>
      <param name="component">要移除的 <see cref="T:System.ComponentModel.IComponent" />。</param>
    </member>
    <member name="T:System.ComponentModel.ICustomTypeDescriptor">
      <summary>提供为对象提供动态自定义类型信息的接口。</summary>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetAttributes">
      <summary>返回此组件实例的自定义属性的集合。</summary>
      <returns>包含此对象的属性的 <see cref="T:System.ComponentModel.AttributeCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetClassName">
      <summary>返回此组件实例的类名。</summary>
      <returns>该对象的类名；如果此类没有名称，则为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetComponentName">
      <summary>返回此组件实例的名称。</summary>
      <returns>该对象的名称；如果该对象没有名称，则为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetConverter">
      <summary>返回此组件实例的类型转换器。</summary>
      <returns>表示该对象的转换器的 <see cref="T:System.ComponentModel.TypeConverter" />；如果此对象没有任何 <see cref="T:System.ComponentModel.TypeConverter" />，则为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent">
      <summary>返回此组件实例的默认事件。</summary>
      <returns>表示该对象的默认事件的 <see cref="T:System.ComponentModel.EventDescriptor" />；如果该对象没有事件，则为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty">
      <summary>返回此组件实例的默认属性。</summary>
      <returns>表示该对象的默认属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />；如果此对象没有属性，则为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEditor(System.Type)">
      <summary>返回此组件实例的指定类型的编辑器。</summary>
      <returns>表示该对象编辑器的指定类型的 <see cref="T:System.Object" />；如果无法找到编辑器，则为 null。</returns>
      <param name="editorBaseType">表示该对象的编辑器的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents">
      <summary>返回此组件实例的事件。</summary>
      <returns>表示此组件实例的事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary>将指定的属性数组用作筛选器来返回此组件实例的事件。</summary>
      <returns>表示此组件实例的已筛选事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
      <param name="attributes">用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。</param>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties">
      <summary>返回此组件实例的属性。</summary>
      <returns>表示此组件实例的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary>返回将属性 (Attribute) 数组用作筛选器的此组件实例的属性 (Property)。</summary>
      <returns>表示此组件实例的已筛选属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
      <param name="attributes">用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。</param>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>返回包含指定的属性描述符所描述的属性的对象。</summary>
      <returns>表示指定属性所有者的 <see cref="T:System.Object" />。</returns>
      <param name="pd">表示要查找其所有者的属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="T:System.ComponentModel.IDataErrorInfo">
      <summary>提供功能，该功能提供用户界面可以绑定的自定义错误信息。</summary>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Error">
      <summary>获取指示对象何处出错的错误信息。</summary>
      <returns>指示对象何处出错的错误信息。默认值为空字符串 ("")。</returns>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Item(System.String)">
      <summary>获取具有给定名称的属性的错误信息。</summary>
      <returns>该属性的错误信息。默认值为空字符串 ("")。</returns>
      <param name="columnName">要获取其错误信息的属性的名称。</param>
    </member>
    <member name="T:System.ComponentModel.IEditableObject">
      <summary>提供提交或回滚对用作数据源的对象所做更改的功能。</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableObject.BeginEdit">
      <summary>开始编辑对象。</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableObject.CancelEdit">
      <summary>放弃上一次 <see cref="M:System.ComponentModel.IEditableObject.BeginEdit" /> 调用之后的更改。</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableObject.EndEdit">
      <summary>将上一次 <see cref="M:System.ComponentModel.IEditableObject.BeginEdit" /> 或 <see cref="M:System.ComponentModel.IBindingList.AddNew" /> 调用之后所进行的更改推到基础对象中。</summary>
    </member>
    <member name="T:System.ComponentModel.IExtenderProvider">
      <summary>定义将属性扩展到容器中的其他组件的接口。</summary>
    </member>
    <member name="M:System.ComponentModel.IExtenderProvider.CanExtend(System.Object)">
      <summary>指定此对象是否可以将其扩展程序属性提供给指定的对象。</summary>
      <returns>
            如果此对象可以扩展程序属性提供给指定对象，则为 true；否则为 false。</returns>
      <param name="extendee">要接收扩展程序属性的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="T:System.ComponentModel.IIntellisenseBuilder">
      <summary>提供便于检索生成器的名称并显示该生成器的界面。</summary>
    </member>
    <member name="P:System.ComponentModel.IIntellisenseBuilder.Name">
      <summary>获取本地化的名称。</summary>
      <returns>本地化的名称。</returns>
    </member>
    <member name="M:System.ComponentModel.IIntellisenseBuilder.Show(System.String,System.String,System.String@)">
      <summary>显示生成器。</summary>
      <returns>
            如果应将该值替换为 <paramref name="newValue" />，则为 true；否则为 false（例如，如果用户取消）。</returns>
      <param name="language">正在调用生成器的语言服务。</param>
      <param name="value">正在被编辑的表达式。</param>
      <param name="newValue">新值。</param>
    </member>
    <member name="T:System.ComponentModel.IListSource">
      <summary>向对象提供返回可以绑定到数据源列表的功能。</summary>
    </member>
    <member name="P:System.ComponentModel.IListSource.ContainsListCollection">
      <summary>获取表示集合是否是 <see cref="T:System.Collections.IList" /> 对象集合的值。</summary>
      <returns>
            如果集合是 <see cref="T:System.Collections.IList" /> 对象集合，则为 true；否则，为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.IListSource.GetList">
      <summary>从不实现 <see cref="T:System.Collections.IList" /> 本身的对象返回可以绑定到数据源的 <see cref="T:System.Collections.IList" />。</summary>
      <returns>对象中可以绑定到数据源的 <see cref="T:System.Collections.IList" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ImmutableObjectAttribute">
      <summary>指定对象没有可以被编辑的子属性。无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.ImmutableObjectAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.ImmutableObjectAttribute" /> 类的新实例。</summary>
      <param name="immutable">
                如果该对象不可变，则为 true；否则为 false。</param>
    </member>
    <member name="F:System.ComponentModel.ImmutableObjectAttribute.Default">
      <summary>表示 <see cref="T:System.ComponentModel.ImmutableObjectAttribute" /> 的默认值。</summary>
    </member>
    <member name="M:System.ComponentModel.ImmutableObjectAttribute.Equals(System.Object)">
      <returns>
            如果 <paramref name="obj" /> 等于此实例的类型和值，则为 true；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的 <see cref="T:System.Object" /> 或 null。</param>
    </member>
    <member name="M:System.ComponentModel.ImmutableObjectAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.ImmutableObjectAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.ImmutableObjectAttribute.Immutable">
      <summary>获取该对象是否是不变的。</summary>
      <returns>
            如果该对象不可变，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.ImmutableObjectAttribute.IsDefaultAttribute">
      <summary>指示此实例的值是否为默认值。</summary>
      <returns>
            如果该实例是此类的默认属性，则为 true；否则，为 false。</returns>
    </member>
    <member name="F:System.ComponentModel.ImmutableObjectAttribute.No">
      <summary>指定对象至少有一个可编辑的子属性。此 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.ImmutableObjectAttribute.Yes">
      <summary>指定对象没有可编辑的子属性。此 static 字段是只读的。</summary>
    </member>
    <member name="T:System.ComponentModel.INestedContainer">
      <summary>提供嵌套容器的功能，嵌套容器逻辑上可包含零个或多个其他组件，且这类容器由父组件拥有。</summary>
    </member>
    <member name="P:System.ComponentModel.INestedContainer.Owner">
      <summary>获取嵌套容器的所属组件。</summary>
      <returns>拥有该嵌套容器的 <see cref="T:System.ComponentModel.IComponent" />。</returns>
    </member>
    <member name="T:System.ComponentModel.INestedSite">
      <summary>提供检索组件的完全嵌套名称的能力。</summary>
    </member>
    <member name="P:System.ComponentModel.INestedSite.FullName">
      <summary>获取此站点内的组件的全名。</summary>
      <returns>此站点内的组件的全名。</returns>
    </member>
    <member name="T:System.ComponentModel.InheritanceAttribute">
      <summary>指示是否已从基类继承与此属性关联的组件。无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.InheritanceAttribute" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor(System.ComponentModel.InheritanceLevel)">
      <summary>使用指定的继承级别初始化 <see cref="T:System.ComponentModel.InheritanceAttribute" /> 类的新实例。</summary>
      <param name="inheritanceLevel">一个 <see cref="T:System.ComponentModel.InheritanceLevel" />，指示要将此属性设置成的继承级别。</param>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Default">
      <summary>指定 <see cref="T:System.ComponentModel.InheritanceAttribute" /> 的默认值为 <see cref="F:System.ComponentModel.InheritanceAttribute.NotInherited" />。此字段为只读。</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.Equals(System.Object)">
      <summary>重写以测试等同性。</summary>
      <returns>
            如果对象相同，则为 true；否则，为 false。</returns>
      <param name="value">要测试的对象。</param>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.GetHashCode">
      <summary>返回该对象的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.InheritanceAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.InheritanceAttribute.InheritanceLevel">
      <summary>获取或设置存储在此属性中的当前继承级别。</summary>
      <returns>存储在此属性中的 <see cref="T:System.ComponentModel.InheritanceLevel" />。</returns>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Inherited">
      <summary>指定该组件会被继承。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.InheritedReadOnly">
      <summary>指定该组件会被继承并且是只读的。此字段为只读。</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.IsDefaultAttribute">
      <summary>获取一个值，该值指示该属性的当前值是否为该属性的默认值。</summary>
      <returns>
            如果该属性的当前值是默认值，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.NotInherited">
      <summary>指定组件不被继承。此字段为只读。</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.ToString">
      <summary>将此属性转换为一个字符串。</summary>
      <returns>表示此 <see cref="T:System.ComponentModel.InheritanceAttribute" /> 的字符串。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.ComponentModel.InheritanceLevel">
      <summary>定义继承级别类型的标识符。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.Inherited">
      <summary>该对象会被继承。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.InheritedReadOnly">
      <summary>该对象会被继承，但具有只读访问权限。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.NotInherited">
      <summary>该对象不被继承。</summary>
    </member>
    <member name="T:System.ComponentModel.InitializationEventAttribute">
      <summary>指定在初始化时引发的事件。无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.InitializationEventAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.InitializationEventAttribute" /> 类的新实例。</summary>
      <param name="eventName">初始化事件的名称。</param>
    </member>
    <member name="P:System.ComponentModel.InitializationEventAttribute.EventName">
      <summary>获取初始化事件的名称。</summary>
      <returns>初始化事件的名称。</returns>
    </member>
    <member name="T:System.ComponentModel.INotifyPropertyChanged">
      <summary>向客户端发出某一属性值已更改的通知。</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged">
      <summary>在更改属性值时发生。</summary>
    </member>
    <member name="T:System.ComponentModel.InstallerTypeAttribute">
      <summary>为安装组件的类型指定安装程序。</summary>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.String)">
      <summary>用组件的安装程序的类型名称初始化 <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> 类的新实例。</summary>
      <param name="typeName">表示此属性绑定到的组件安装程序的 <see cref="T:System.Type" /> 名称。此类必须实现 <see cref="T:System.ComponentModel.Design.IDesigner" />。</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.Type)">
      <summary>当给定表示组件安装程序的 <see cref="T:System.Type" /> 时，初始化 <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> 类的新实例。</summary>
      <param name="installerType">
        <see cref="T:System.Type" />，表示此属性绑定到的组件的安装程序。此类必须实现 <see cref="T:System.ComponentModel.Design.IDesigner" />。</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前的 <see cref="T:System.ComponentModel.InstallerTypeAttribute" />。</summary>
      <returns>
            如果给定对象的值等于当前对象的值，则为 true；否则为 false。</returns>
      <param name="obj">要进行值的相等性测试的对象。</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.GetHashCode">
      <summary>返回该对象的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.InstallerTypeAttribute.InstallerType">
      <summary>获取与此属性关联的安装程序类型。</summary>
      <returns>
        <see cref="T:System.Type" />，表示与此属性关联的安装程序类型；如果安装程序不存在，则为 null。</returns>
    </member>
    <member name="T:System.ComponentModel.InstanceCreationEditor">
      <summary>从 <see cref="T:System.Windows.Forms.PropertyGrid" /> 中的下拉框中创建特定类型属性的实例。</summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.InstanceCreationEditor" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>在派生类中重写时，返回指定类型的实例。</summary>
      <returns>指定类型的实例或为 null。</returns>
      <param name="context">上下文信息。</param>
      <param name="instanceType">指定的类型。</param>
    </member>
    <member name="P:System.ComponentModel.InstanceCreationEditor.Text">
      <summary>获取指定的文本。</summary>
      <returns>指定的文本。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.ComponentModel.Int16Converter">
      <summary>提供将 16 位有符号整数对象与其他表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.Int16Converter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Int16Converter" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ComponentModel.Int32Converter">
      <summary>提供将 32 位有符号整数对象与其他表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.Int32Converter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Int32Converter" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ComponentModel.Int64Converter">
      <summary>提供将 64 位有符号整数对象与各种其他表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.Int64Converter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Int64Converter" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ComponentModel.InvalidAsynchronousStateException">
      <summary>当应执行某个操作的线程不再存在或者没有消息循环时，将引发此异常。 </summary>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> 类的一个新实例。 </summary>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用给定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 初始化 <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> 类的新实例。 </summary>
      <param name="info">要用于反序列化的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">用于反序列化的目标。</param>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.String)">
      <summary>使用指定的详细说明初始化 <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> 类的新实例。</summary>
      <param name="message">该错误的详细说明。</param>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.String,System.Exception)">
      <summary>使用指定的详细说明和指定的异常初始化 <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> 类的新实例。 </summary>
      <param name="message">该错误的详细说明。</param>
      <param name="innerException">对导致此异常的内部异常的引用。</param>
    </member>
    <member name="T:System.ComponentModel.InvalidEnumArgumentException">
      <summary>使用无效参数（为枚举数）时引发的异常。</summary>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor">
      <summary>在不带消息的情况下初始化 <see cref="T:System.ComponentModel.InvalidEnumArgumentException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化数据和上下文初始化 <see cref="T:System.ComponentModel.InvalidEnumArgumentException" /> 类的新实例。</summary>
      <param name="info">要用于反序列化的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">用于反序列化的目标。</param>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor(System.String)">
      <summary>用指定的消息初始化 <see cref="T:System.ComponentModel.InvalidEnumArgumentException" /> 类的新实例。</summary>
      <param name="message">与此异常一起显示的消息。</param>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor(System.String,System.Exception)">
      <summary>使用指定的详细说明和指定的异常初始化 <see cref="T:System.ComponentModel.InvalidEnumArgumentException" /> 类的新实例。</summary>
      <param name="message">该错误的详细说明。</param>
      <param name="innerException">对导致此异常的内部异常的引用。</param>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor(System.String,System.Int32,System.Type)">
      <summary>初始化 <see cref="T:System.ComponentModel.InvalidEnumArgumentException" /> 类的新实例，带有从参数、无效值和枚举类生成的消息。</summary>
      <param name="argumentName">导致异常的参数的名称。</param>
      <param name="invalidValue">失败的参数的值。</param>
      <param name="enumClass">
        <see cref="T:System.Type" />，表示具有有效值的枚举类。</param>
    </member>
    <member name="T:System.ComponentModel.IRaiseItemChangedEvents">
      <summary>指示类是否将属性更改事件转换为 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件。</summary>
    </member>
    <member name="P:System.ComponentModel.IRaiseItemChangedEvents.RaisesItemChangedEvents">
      <summary>获取一个值，该值指示 <see cref="T:System.ComponentModel.IRaiseItemChangedEvents" /> 对象是否引发 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件。</summary>
      <returns>
如果 <see cref="T:System.ComponentModel.IRaiseItemChangedEvents" /> 对象在它的一个属性值发生更改时引发 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ComponentModel.IRevertibleChangeTracking">
      <summary>提供对回滚更改的支持</summary>
    </member>
    <member name="M:System.ComponentModel.IRevertibleChangeTracking.RejectChanges">
      <summary>通过拒绝修改，将对象的状态重置为更改前的状态。</summary>
    </member>
    <member name="T:System.ComponentModel.ISite">
      <summary>提供站点所需的功能。</summary>
    </member>
    <member name="P:System.ComponentModel.ISite.Component">
      <summary>当由类实现时，获取与 <see cref="T:System.ComponentModel.ISite" /> 关联的组件。</summary>
      <returns>与 <see cref="T:System.ComponentModel.ISite" /> 关联的 <see cref="T:System.ComponentModel.IComponent" /> 实例。</returns>
    </member>
    <member name="P:System.ComponentModel.ISite.Container">
      <summary>当由类实现时，获取与 <see cref="T:System.ComponentModel.ISite" /> 关联的 <see cref="T:System.ComponentModel.IContainer" />。</summary>
      <returns>与 <see cref="T:System.ComponentModel.ISite" /> 关联的 <see cref="T:System.ComponentModel.IContainer" /> 实例。</returns>
    </member>
    <member name="P:System.ComponentModel.ISite.DesignMode">
      <summary>确定组件在由类实现时是否处于设计模式。</summary>
      <returns>
            如果组件处于设计模式，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.ISite.Name">
      <summary>当由类实现时，获取或设置与 <see cref="T:System.ComponentModel.ISite" /> 关联的组件的名称。</summary>
      <returns>与 <see cref="T:System.ComponentModel.ISite" /> 关联的组件的名称，或者在未给该组件分配名称的情况下为 null。</returns>
    </member>
    <member name="T:System.ComponentModel.ISupportInitialize">
      <summary>指定该对象支持对批初始化的简单的事务处理通知。</summary>
    </member>
    <member name="M:System.ComponentModel.ISupportInitialize.BeginInit">
      <summary>用信号通知对象初始化即将开始。</summary>
    </member>
    <member name="M:System.ComponentModel.ISupportInitialize.EndInit">
      <summary>用信号通知对象初始化已完成。</summary>
    </member>
    <member name="T:System.ComponentModel.ISupportInitializeNotification">
      <summary>允许协调组件及其依赖属性的初始化。</summary>
    </member>
    <member name="E:System.ComponentModel.ISupportInitializeNotification.Initialized">
      <summary>组件初始化完成时出现。</summary>
    </member>
    <member name="P:System.ComponentModel.ISupportInitializeNotification.IsInitialized">
      <summary>获取一个值，该值指示是否初始化组件。</summary>
      <returns>
如果为 true，说明组件已完成初始化；否则为 false。 </returns>
    </member>
    <member name="T:System.ComponentModel.ISynchronizeInvoke">
      <summary>提供同步或异步执行委托的方法。</summary>
    </member>
    <member name="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
      <summary>在创建了此对象的线程上异步执行委托。</summary>
      <returns>
        <see cref="T:System.IAsyncResult" /> 接口，表示通过调用此方法启动的异步操作。</returns>
      <param name="method">对方法的 <see cref="T:System.Delegate" />，采用 <paramref name="args" /> 中包含的相同数字和类型的参数。</param>
      <param name="args">作为给定方法的参数传递的 <see cref="T:System.Object" /> 类型数组。如果不需要参数，则可以为 null。</param>
    </member>
    <member name="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)">
      <summary>等待通过调用 <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /> 启动的进程完成，然后返回该进程生成的值。</summary>
      <returns>表示异步操作生成的返回值的 <see cref="T:System.Object" />。</returns>
      <param name="result">
        <see cref="T:System.IAsyncResult" /> 接口，表示通过调用 <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /> 启动的异步操作。</param>
    </member>
    <member name="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
      <summary>在创建了此对象的线程上同步执行委托并封送对创建线程的调用。</summary>
      <returns>表示正被调用的委托返回值的 <see cref="T:System.Object" />；如果该委托没有返回值，则为 null。</returns>
      <param name="method">包含要调用的方法的 <see cref="T:System.Delegate" />，在控件的线程上下文中。</param>
      <param name="args">表示要传递到给定方法的参数的 <see cref="T:System.Object" /> 类型数组。如果不需要参数，则可以为 null。</param>
    </member>
    <member name="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired">
      <summary>获取一个值，通过该值指示当调用实现此接口的对象时，调用方是否必须调用 <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />。</summary>
      <returns>
            如果调用方必须调用 <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />，则为 true；否则，为 false。</returns>
    </member>
    <member name="T:System.ComponentModel.ITypeDescriptorContext">
      <summary>提供有关组件的上下文信息，如其容器和属性描述符。</summary>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Container">
      <summary>获取表示此 <see cref="T:System.ComponentModel.TypeDescriptor" /> 请求的容器。</summary>
      <returns>包含此 <see cref="T:System.ComponentModel.TypeDescriptor" /> 的对象集的 <see cref="T:System.ComponentModel.IContainer" />；否则，如果不存在容器，或者如果 <see cref="T:System.ComponentModel.TypeDescriptor" /> 不使用外部对象，则为 null。</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Instance">
      <summary>获取与此类型说明符请求相连接的对象。</summary>
      <returns>调用 <see cref="T:System.ComponentModel.TypeDescriptor" /> 的方法的对象；否则，如果不存在负责调用的对象，则为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged">
      <summary>引发 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> 事件。</summary>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanging">
      <summary>引发 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> 事件。</summary>
      <returns>
            如果该对象可以更改，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor">
      <summary>获取与给定上下文项相关联的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <returns>描述给定上下文项的 <see cref="T:System.ComponentModel.PropertyDescriptor" />；否则，如果不存在负责调用的 <see cref="T:System.ComponentModel.PropertyDescriptor" />，则为 null。</returns>
    </member>
    <member name="T:System.ComponentModel.ITypedList">
      <summary>提供发现可绑定列表架构的功能，其中可用于绑定的属性不同于要绑定到的对象的公共属性。</summary>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary>返回表示用于绑定数据的每项上属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</summary>
      <returns>表示用于绑定数据的每项上属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
      <param name="listAccessors">要在集合中查找的可绑定的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象的数组。它可以是 null。</param>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])">
      <summary>返回列表的名称。</summary>
      <returns>列表的名称。</returns>
      <param name="listAccessors">为其返回列表名称的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象的数组。它可以是 null。</param>
    </member>
    <member name="T:System.ComponentModel.License">
      <summary>为所有许可证提供 abstract 基类。向组件的特定实例授予许可证。</summary>
    </member>
    <member name="M:System.ComponentModel.License.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.License" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.License.Dispose">
      <summary>当在派生类中被重写时，释放该许可证使用的资源。</summary>
    </member>
    <member name="P:System.ComponentModel.License.LicenseKey">
      <summary>当在派生类中被重写时，获取授予该组件的许可证密钥。</summary>
      <returns>授予该组件的许可证密钥。</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseContext">
      <summary>指定何时可使用授权的对象，并且提供一种方法，用以获取为支持在其域内运行的许可证所需要的附加服务。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.LicenseContext" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary>当在派生类中被重写时，从指定的资源程序集中为指定类型返回已保存的许可证密钥。</summary>
      <returns>指定类型的 <see cref="P:System.ComponentModel.License.LicenseKey" />。该方法返回 null，除非您将其重写。</returns>
      <param name="type">表示组件类型的 <see cref="T:System.Type" />。</param>
      <param name="resourceAssembly">带有许可证密钥的 <see cref="T:System.Reflection.Assembly" />。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetService(System.Type)">
      <summary>获取请求的服务（如果该服务可用的话）。</summary>
      <returns>该服务的实例；或者如果找不到该服务，则为 null。</returns>
      <param name="type">要检索的服务类型。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary>当在派生类中被重写时，为指定的类型设置许可证密钥。</summary>
      <param name="type">一个 <see cref="T:System.Type" />，表示与该许可证密钥相关联的组件。</param>
      <param name="key">为该类型组件保存的 <see cref="P:System.ComponentModel.License.LicenseKey" />。</param>
    </member>
    <member name="P:System.ComponentModel.LicenseContext.UsageMode">
      <summary>当在派生类中被重写时，获取一个指定何时可使用许可证的值。</summary>
      <returns>
        <see cref="T:System.ComponentModel.LicenseUsageMode" /> 值之一，指定您何时可以使用许可证。默认为 <see cref="F:System.ComponentModel.LicenseUsageMode.Runtime" />。</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseException">
      <summary>表示当组件不能被授予许可证时引发的异常。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用给定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 初始化 <see cref="T:System.ComponentModel.LicenseException" /> 类的新实例。</summary>
      <param name="info">用于反序列化的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">用于反序列化的目标。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type)">
      <summary>为拒绝向其授予许可证的组件的类型初始化 <see cref="T:System.ComponentModel.LicenseException" /> 类的新实例。</summary>
      <param name="type">一个 <see cref="T:System.Type" />，表示未被授予许可证的组件的类型。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object)">
      <summary>为拒绝向其授予许可证的组件的类型和实例初始化 <see cref="T:System.ComponentModel.LicenseException" /> 类的新实例。</summary>
      <param name="type">一个 <see cref="T:System.Type" />，表示未被授予许可证的组件的类型。</param>
      <param name="instance">未被授予许可证的组件的实例。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String)">
      <summary>为拒绝向其授予许可证的组件的类型和实例以及要显示的消息初始化 <see cref="T:System.ComponentModel.LicenseException" /> 类的新实例。</summary>
      <param name="type">一个 <see cref="T:System.Type" />，表示未被授予许可证的组件的类型。</param>
      <param name="instance">未被授予许可证的组件的实例。</param>
      <param name="message">要显示的异常消息。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String,System.Exception)">
      <summary>为拒绝向其授予许可证的组件的类型和实例以及要显示的消息和最初引发的异常初始化 <see cref="T:System.ComponentModel.LicenseException" /> 类的新实例。</summary>
      <param name="type">一个 <see cref="T:System.Type" />，表示未被授予许可证的组件的类型。</param>
      <param name="instance">未被授予许可证的组件的实例。</param>
      <param name="message">要显示的异常消息。</param>
      <param name="innerException">一个 <see cref="T:System.Exception" />，表示最初的异常。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用有关异常的信息设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="info">用于反序列化的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">用于反序列化的目标。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 null。</exception>
    </member>
    <member name="P:System.ComponentModel.LicenseException.LicensedType">
      <summary>获取未被授予许可证的组件的类型。</summary>
      <returns>一个 <see cref="T:System.Type" />，表示未被授予许可证的组件的类型。</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseManager">
      <summary>提供属性和方法，用以将许可证添加到组件和管理 <see cref="T:System.ComponentModel.LicenseProvider" />。无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)">
      <summary>根据可在其中使用已授权实例的上下文，创建指定类型的实例。</summary>
      <returns>指定类型的实例。</returns>
      <param name="type">一个 <see cref="T:System.Type" />，表示要创建的类型。</param>
      <param name="creationContext">一个 <see cref="T:System.ComponentModel.LicenseContext" />，指定何时可以使用已授权的实例。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])">
      <summary>根据可在其中使用已授权实例的上下文，用指定的参数创建指定类型的实例。</summary>
      <returns>具有给定参数数组的指定类型的实例。</returns>
      <param name="type">一个 <see cref="T:System.Type" />，表示要创建的类型。</param>
      <param name="creationContext">一个 <see cref="T:System.ComponentModel.LicenseContext" />，指定何时可以使用已授权的实例。</param>
      <param name="args">表示该类型参数的类型 <see cref="T:System.Object" /> 的数组。</param>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.CurrentContext">
      <summary>获取或设置当前的 <see cref="T:System.ComponentModel.LicenseContext" />，它指定您何时可以使用已授权的对象。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.LicenseContext" />，指定何时可以使用已授权的对象。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> 属性当前被锁定，因而无法更改它。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsLicensed(System.Type)">
      <summary>返回给定的类型是否具有有效许可证。</summary>
      <returns>
            如果给定的类型已授权，则为 true；否则为 false。</returns>
      <param name="type">为其查找有效许可证的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type)">
      <summary>确定是否可以为指定类型授予有效的许可证。</summary>
      <returns>
            如果可以授予有效许可证，则为 true；否则为 false。</returns>
      <param name="type">一个 <see cref="T:System.Type" />，表示请求 <see cref="T:System.ComponentModel.License" /> 的对象的类型。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)">
      <summary>确定是否可以为该类型的指定实例授予有效的许可证。该方法创建有效的 <see cref="T:System.ComponentModel.License" />。</summary>
      <returns>
            如果可以颁发有效的 <see cref="T:System.ComponentModel.License" />，则为 true；否则为 false。</returns>
      <param name="type">一个 <see cref="T:System.Type" />，表示请求许可证的对象的类型。</param>
      <param name="instance">指定类型的对象或从指定类型派生的类型的对象。</param>
      <param name="license">一个作为有效许可证的 <see cref="T:System.ComponentModel.License" />；如果无法颁发有效许可证，则为 null。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.LockContext(System.Object)">
      <summary>防止对给定对象当前的 <see cref="T:System.ComponentModel.LicenseContext" /> 进行更改。</summary>
      <param name="contextUser">要锁定其当前上下文的对象。</param>
      <exception cref="T:System.InvalidOperationException">上下文已被锁定。</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.UnlockContext(System.Object)">
      <summary>允许对给定对象当前的 <see cref="T:System.ComponentModel.LicenseContext" /> 进行更改。</summary>
      <param name="contextUser">要取消锁定其当前上下文的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="contextUser" /> 不表示在前面对 <see cref="M:System.ComponentModel.LicenseManager.LockContext(System.Object)" /> 的调用中指定的用户，而表示另外一个用户。</exception>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.UsageMode">
      <summary>获取 <see cref="T:System.ComponentModel.LicenseUsageMode" />，它指定何时可以使用 <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> 的已授权对象。</summary>
      <returns>
        <see cref="T:System.ComponentModel.LicenseUsageMode" /> 值之一，这些值是在 <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> 属性中指定的。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type)">
      <summary>确定是否可以为指定类型授予许可证。</summary>
      <param name="type">一个 <see cref="T:System.Type" />，表示请求许可证的对象的类型。</param>
      <exception cref="T:System.ComponentModel.LicenseException">不能授予 <see cref="T:System.ComponentModel.License" />。</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)">
      <summary>确定是否可以为指定类型的实例授予许可证。</summary>
      <returns>有效的 <see cref="T:System.ComponentModel.License" />。</returns>
      <param name="type">一个 <see cref="T:System.Type" />，表示请求许可证的对象的类型。</param>
      <param name="instance">指定类型的，或从指定类型派生的类型的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ComponentModel.LicenseException">该类型已被授权，但是不能授予 <see cref="T:System.ComponentModel.License" />。</exception>
    </member>
    <member name="T:System.ComponentModel.LicenseProvider">
      <summary>提供 abstract 基类以便实现许可证提供程序。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.LicenseProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary>当在派生类中被重写时，获取组件的实例或类型的许可证（如果已给定上下文并确定拒绝许可证是否引发异常）。</summary>
      <returns>有效的 <see cref="T:System.ComponentModel.License" />。</returns>
      <param name="context">一个 <see cref="T:System.ComponentModel.LicenseContext" />，指定可在何处使用已授权的对象。</param>
      <param name="type">一个 <see cref="T:System.Type" />，表示请求许可证的组件。</param>
      <param name="instance">请求许可证的对象。</param>
      <param name="allowExceptions">
                如果组件无法授予许可证时应引发 <see cref="T:System.ComponentModel.LicenseException" />，则为 true；否则为 false。</param>
    </member>
    <member name="T:System.ComponentModel.LicenseProviderAttribute">
      <summary>指定要与类一起使用的 <see cref="T:System.ComponentModel.LicenseProvider" />。无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor">
      <summary>在没有许可证提供程序的情况下，初始化 <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.String)">
      <summary>使用指定的类型初始化 <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> 类的新实例。</summary>
      <param name="typeName">许可证提供程序类的完全限定名。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.Type)">
      <summary>使用指定类型的许可证提供程序初始化 <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> 类的新实例。</summary>
      <param name="type">
        <see cref="T:System.Type" />，表示许可证提供程序类的类型。</param>
    </member>
    <member name="F:System.ComponentModel.LicenseProviderAttribute.Default">
      <summary>指定默认值，即无提供程序。此 static 字段是只读的。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.Equals(System.Object)">
      <summary>指示此实例与指定对象是否相等。</summary>
      <returns>
            如果 <paramref name="value" /> 等于此实例，则为 true；否则为 false。</returns>
      <param name="value">要比较的另一个对象。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.LicenseProvider">
      <summary>获取必须与该关联类一起使用的许可证提供程序。</summary>
      <returns>
        <see cref="T:System.Type" />，表示许可证提供程序的类型。默认值为 null。</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.TypeId">
      <summary>指示此属性类型的唯一 ID。</summary>
      <returns>此属性类型的唯一 ID。</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseUsageMode">
      <summary>指定何时可以使用 <see cref="T:System.ComponentModel.License" />。</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Runtime">
      <summary>在运行时使用。</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Designtime">
      <summary>在设计时由可视化设计器或编译器使用。</summary>
    </member>
    <member name="T:System.ComponentModel.LicFileLicenseProvider">
      <summary>提供 <see cref="T:System.ComponentModel.LicenseProvider" /> 的实现。提供程序与 Microsoft .NET Framework 标准授权模型的工作方式相似。</summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.LicFileLicenseProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)">
      <summary>返回指定类型的密钥。</summary>
      <returns>对 <paramref name="type" /> 参数已被授权的确认。</returns>
      <param name="type">要返回密钥的对象类型。</param>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary>返回组件实例的许可证（如果有一个可用的话）。</summary>
      <returns>有效的 <see cref="T:System.ComponentModel.License" />。如果该方法未能找到有效的 <see cref="T:System.ComponentModel.License" /> 或有效的 <paramref name="context" /> 参数，它返回 null。</returns>
      <param name="context">一个 <see cref="T:System.ComponentModel.LicenseContext" />，指定可在何处使用已授权的对象。</param>
      <param name="type">一个 <see cref="T:System.Type" />，表示请求 <see cref="T:System.ComponentModel.License" /> 的组件。</param>
      <param name="instance">请求 <see cref="T:System.ComponentModel.License" /> 的对象。</param>
      <param name="allowExceptions">
                如果无法授予组件许可证时应引发 <see cref="T:System.ComponentModel.LicenseException" />，则为 true；否则为 false。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)">
      <summary>确定 <see cref="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" /> 方法检索的密钥对指定的类型是否有效。</summary>
      <returns>
            如果该密钥是指定类型的有效 <see cref="P:System.ComponentModel.License.LicenseKey" />，则为 true；否则为 false。</returns>
      <param name="key">要检查的 <see cref="P:System.ComponentModel.License.LicenseKey" />。</param>
      <param name="type">一个 <see cref="T:System.Type" />，表示请求 <see cref="T:System.ComponentModel.License" /> 的组件。</param>
    </member>
    <member name="T:System.ComponentModel.ListBindableAttribute">
      <summary>指定列表可被用作数据源。可视化设计器应该使用该属性来确定是否在数据绑定选择器中显示特定的列表。无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.Boolean)">
      <summary>通过使用值指示该列表是否可绑定来初始化 <see cref="T:System.ComponentModel.ListBindableAttribute" /> 类的新实例。</summary>
      <param name="listBindable">
                如果该列表为可绑定的，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary>通过使用 <see cref="T:System.ComponentModel.BindableSupport" /> 指示该列表是否可绑定来初始化 <see cref="T:System.ComponentModel.ListBindableAttribute" /> 类的新实例。</summary>
      <param name="flags">一个 <see cref="T:System.ComponentModel.BindableSupport" />，指示该列表是否可绑定。</param>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Default">
      <summary>表示 <see cref="T:System.ComponentModel.ListBindableAttribute" /> 的默认值。</summary>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.Equals(System.Object)">
      <summary>返回指示所传递对象是否等同于此 <see cref="T:System.ComponentModel.ListBindableAttribute" /> 的值。</summary>
      <returns>
            如果传递的对象等同于此 <see cref="T:System.ComponentModel.ListBindableAttribute" />，则为 true；否则为 false。</returns>
      <param name="obj">要用于测试是否相等的对象。</param>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.ListBindableAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.IsDefaultAttribute">
      <summary>返回 <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" /> 是否被设置为默认值。</summary>
      <returns>
            如果 <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" /> 被设置为默认值，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.ListBindableAttribute.ListBindable">
      <summary>获取该列表是否可以绑定。</summary>
      <returns>
            如果该列表为可绑定的，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.No">
      <summary>指定该列表不可绑定。此 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Yes">
      <summary>指定该列表可绑定。此 static 字段是只读的。</summary>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventArgs">
      <summary>为 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.ComponentModel.PropertyDescriptor)">
      <summary>如果给定更改类型和受影响的 <see cref="T:System.ComponentModel.PropertyDescriptor" />，则初始化 <see cref="T:System.ComponentModel.ListChangedEventArgs" /> 类的新实例。</summary>
      <param name="listChangedType">指示更改类型的 <see cref="T:System.ComponentModel.ListChangedType" /> 值。</param>
      <param name="propDesc">添加、移除或更改的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32)">
      <summary>如果给定更改类型和受影响项的索引，则初始化 <see cref="T:System.ComponentModel.ListChangedEventArgs" /> 类的新实例。</summary>
      <param name="listChangedType">指示更改类型的 <see cref="T:System.ComponentModel.ListChangedType" /> 值。</param>
      <param name="newIndex">添加、更改或移除的项的索引。</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary>如果给定更改类型、受影响项的索引以及描述受影响项的 <see cref="T:System.ComponentModel.PropertyDescriptor" />，则初始化 <see cref="T:System.ComponentModel.ListChangedEventArgs" /> 类的新实例。</summary>
      <param name="listChangedType">指示更改类型的 <see cref="T:System.ComponentModel.ListChangedType" /> 值。</param>
      <param name="newIndex">添加或更改的项的索引。</param>
      <param name="propDesc">描述该项的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.Int32)">
      <summary>如果给定更改类型以及被移动项的新索引和旧索引，则初始化 <see cref="T:System.ComponentModel.ListChangedEventArgs" /> 类的新实例。</summary>
      <param name="listChangedType">指示更改类型的 <see cref="T:System.ComponentModel.ListChangedType" /> 值。</param>
      <param name="newIndex">被移动项的新索引。</param>
      <param name="oldIndex">被移动项的旧索引。</param>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.ListChangedType">
      <summary>获取更改类型。</summary>
      <returns>指示更改类型的 <see cref="T:System.ComponentModel.ListChangedType" /> 值。</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.NewIndex">
      <summary>获取受更改影响的项的索引。</summary>
      <returns>受更改影响的项的索引。</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.OldIndex">
      <summary>获取已移动的项的旧索引。</summary>
      <returns>已移动的项的旧索引。</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.PropertyDescriptor">
      <summary>获取添加、更改或删除的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <returns>受此更改影响的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventHandler">
      <summary>表示将处理 <see cref="T:System.ComponentModel.IBindingList" /> 类的 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.ListChangedEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.ListChangedType">
      <summary>指定列表的更改方式。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.Reset">
      <summary>已更改了列表的许多内容。任何侦听控件都应该根据该列表刷新其所有数据。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemAdded">
      <summary>添加到列表的项。<see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> 包含被添加项的索引。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemDeleted">
      <summary>从列表中删除的项。<see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> 包含被删除项的索引。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemMoved">
      <summary>列表中移动的项。<see cref="P:System.ComponentModel.ListChangedEventArgs.OldIndex" /> 包含该项以前的索引，而 <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> 包含该项的新索引。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemChanged">
      <summary>列表中更改的项。<see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> 包含被更改项的索引。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorAdded">
      <summary>已添加 <see cref="T:System.ComponentModel.PropertyDescriptor" />，这更改了架构。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorDeleted">
      <summary>已删除 <see cref="T:System.ComponentModel.PropertyDescriptor" />，这更改了架构。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorChanged">
      <summary>已更改 <see cref="T:System.ComponentModel.PropertyDescriptor" />，这更改了架构。</summary>
    </member>
    <member name="T:System.ComponentModel.ListSortDescription">
      <summary>提供对应用于数据源的排序操作的说明。</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescription.#ctor(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>使用指定的属性说明和方向初始化 <see cref="T:System.ComponentModel.ListSortDescription" /> 类的新实例。</summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" />，描述作为数据源排序依据的属性。</param>
      <param name="direction">
        <see cref="T:System.ComponentModel.ListSortDescription" /> 值之一。</param>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.PropertyDescriptor">
      <summary>获取或设置与此 <see cref="T:System.ComponentModel.ListSortDescription" /> 关联的类属性的抽象说明</summary>
      <returns>与此 <see cref="T:System.ComponentModel.ListSortDescription" /> 关联的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。 </returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.SortDirection">
      <summary>获取或设置与此 <see cref="T:System.ComponentModel.ListSortDescription" /> 关联的排序操作的方向。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ListSortDirection" /> 值之一。 </returns>
    </member>
    <member name="T:System.ComponentModel.ListSortDescriptionCollection">
      <summary>表示 <see cref="T:System.ComponentModel.ListSortDescription" /> 对象的集合。</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor(System.ComponentModel.ListSortDescription[])">
      <summary>用 <see cref="T:System.ComponentModel.ListSortDescription" /> 对象的指定数组初始化 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 类的新实例。</summary>
      <param name="sorts">要包含在集合中的 <see cref="T:System.ComponentModel.ListSortDescription" /> 对象的数组。</param>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.Contains(System.Object)">
      <summary>确定 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 是否包含特定值。</summary>
      <returns>
            如果在集合中找到 <see cref="T:System.Object" />，则为 true；否则为 false。</returns>
      <param name="value">要在集合中定位的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.CopyTo(System.Array,System.Int32)">
      <summary>从指定目标数组索引处开始，将集合中的内容复制到指定数组中。</summary>
      <param name="array">从集合复制的项的目标数组。</param>
      <param name="index">开始复制的目标数组的索引。</param>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Count">
      <summary>获取集合中项的数目。</summary>
      <returns>集合中的项数。</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.IndexOf(System.Object)">
      <summary>返回集合中指定项的索引。</summary>
      <returns>如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
      <param name="value">要在集合中定位的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Item(System.Int32)">
      <summary>获取或设置指定的 <see cref="T:System.ComponentModel.ListSortDescription" />。</summary>
      <returns>具有指定索引的 <see cref="T:System.ComponentModel.ListSortDescription" />。</returns>
      <param name="index">要在集合中获取或设置的 <see cref="T:System.ComponentModel.ListSortDescription" /> 的从零开始的索引。</param>
      <exception cref="T:System.InvalidOperationException">在 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />（只读）中设置项。</exception>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，用于指示对集合的访问是否是线程安全的。</summary>
      <returns>
            在所有情况下均为 true。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对集合的访问的当前实例。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 的当前实例。</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>获取可用于循环访问该集合的 <see cref="T:System.Collections.IEnumerator" />。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Add(System.Object)">
      <summary>向集合中添加一项。</summary>
      <returns>新元素的插入位置。</returns>
      <param name="value">要添加到集合的项。</param>
      <exception cref="T:System.InvalidOperationException">在所有情况下。</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Clear">
      <summary>从集合中移除所有项。</summary>
      <exception cref="T:System.InvalidOperationException">在所有情况下。</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>将一项插入集合中的指定索引处。</summary>
      <param name="index">要在集合中获取或设置的 <see cref="T:System.ComponentModel.ListSortDescription" /> 的从零开始的索引。</param>
      <param name="value">要插入到集合中的项。</param>
      <exception cref="T:System.InvalidOperationException">在所有情况下。</exception>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示集合是否具有固定大小。</summary>
      <returns>
            在所有情况下均为 true。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示集合是否为只读。</summary>
      <returns>
            在所有情况下均为 true。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary>获取指定的 <see cref="T:System.ComponentModel.ListSortDescription" />。</summary>
      <returns>具有指定索引的 <see cref="T:System.ComponentModel.ListSortDescription" />。</returns>
      <param name="index">要从集合中获取的 <see cref="T:System.ComponentModel.ListSortDescription" /> 的从零开始的索引。</param>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary>从集合中移除某项的第一个匹配项。</summary>
      <param name="value">要从集合中移除的项。</param>
      <exception cref="T:System.InvalidOperationException">在所有情况下。</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>移除集合中指定索引处的项。</summary>
      <param name="index">要从集合中移除的 <see cref="T:System.ComponentModel.ListSortDescription" /> 的从零开始的索引。</param>
      <exception cref="T:System.InvalidOperationException">在所有情况下。</exception>
    </member>
    <member name="T:System.ComponentModel.ListSortDirection">
      <summary>指定排序操作的方向。</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Ascending">
      <summary>按升序排序。</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Descending">
      <summary>按降序排序。</summary>
    </member>
    <member name="T:System.ComponentModel.LocalizableAttribute">
      <summary>指定属性是否应本地化。无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.LocalizableAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.LocalizableAttribute" /> 类的新实例。</summary>
      <param name="isLocalizable">
                如果属性应本地化，则为 true；否则为 false。</param>
    </member>
    <member name="F:System.ComponentModel.LocalizableAttribute.Default">
      <summary>指定默认值，即 <see cref="F:System.ComponentModel.LocalizableAttribute.No" />。此 static 字段是只读的。</summary>
    </member>
    <member name="M:System.ComponentModel.LocalizableAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前的 <see cref="T:System.ComponentModel.LocalizableAttribute" />。</summary>
      <returns>
            如果给定对象的值等于当前对象的值，则为 true；否则为 false。</returns>
      <param name="obj">要进行值的相等性测试的对象。</param>
    </member>
    <member name="M:System.ComponentModel.LocalizableAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.LocalizableAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.LocalizableAttribute.IsDefaultAttribute">
      <summary>确定此属性是否为默认属性。</summary>
      <returns>
            如果此属性是此属性类的默认值，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.LocalizableAttribute.IsLocalizable">
      <summary>获取一个值，该值指示属性是否应本地化。</summary>
      <returns>
            如果属性应本地化，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.ComponentModel.LocalizableAttribute.No">
      <summary>指定属性不应本地化。此 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.LocalizableAttribute.Yes">
      <summary>指定属性应本地化。此 static 字段是只读的。</summary>
    </member>
    <member name="T:System.ComponentModel.LookupBindingPropertiesAttribute">
      <summary>指定支持基于查找的绑定的属性。无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor">
      <summary>不带参数初始化 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor(System.String,System.String,System.String,System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 类的新实例。</summary>
      <param name="dataSource">要用作数据源的属性的名称。</param>
      <param name="displayMember">要用作显示名称的属性的名称。</param>
      <param name="valueMember">要用作值的源的属性的名称。</param>
      <param name="lookupMember">要用于查找的属性的名称。</param>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DataSource">
      <summary>获取 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 所绑定组件的数据源属性的名称。</summary>
      <returns>
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 所绑定组件的数据源属性。</returns>
    </member>
    <member name="F:System.ComponentModel.LookupBindingPropertiesAttribute.Default">
      <summary>表示 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 类的默认值。</summary>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DisplayMember">
      <summary>获取 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 所绑定组件的显示成员属性的名称。</summary>
      <returns>
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 所绑定组件的显示成员属性的名称。</returns>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.Equals(System.Object)">
      <summary>确定指定的 <see cref="T:System.Object" /> 是否等同于当前的 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 实例。</summary>
      <returns>
            如果该对象等同于当前的实例，则为 true；否则为 false，指示两者不等同。</returns>
      <param name="obj">要与当前的 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 实例进行比较的 <see cref="T:System.Object" /></param>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.LookupMember">
      <summary>获取此属性所绑定组件的查找成员的名称。</summary>
      <returns>
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 所绑定组件的查找成员的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.ValueMember">
      <summary>获取 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 所绑定组件的值成员属性的名称。</summary>
      <returns>
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 所绑定组件的值成员属性的名称。</returns>
    </member>
    <member name="T:System.ComponentModel.MarshalByValueComponent">
      <summary>实现 <see cref="T:System.ComponentModel.IComponent" /> 并提供可远程控制的组件的基实现，该组件是由值封送的（传递序列化对象的副本）。</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.MarshalByValueComponent" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Container">
      <summary>获取组件的容器。</summary>
      <returns>实现表示组件容器的 <see cref="T:System.ComponentModel.IContainer" /> 接口的对象，或者如果组件不具有位置，则为 null。</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.DesignMode">
      <summary>获取指示组件当前是否处于设计模式的值。</summary>
      <returns>
            如果组件处于设计模式，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose">
      <summary>释放由 <see cref="T:System.ComponentModel.MarshalByValueComponent" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.ComponentModel.MarshalByValueComponent" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">
                为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。</param>
    </member>
    <member name="E:System.ComponentModel.MarshalByValueComponent.Disposed">
      <summary>添加事件处理程序以侦听组件上的 <see cref="E:System.ComponentModel.MarshalByValueComponent.Disposed" /> 事件。</summary>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Events">
      <summary>获取附加到该组件的事件处理程序的列表。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.EventHandlerList" />，它提供此组件的委托。</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Finalize">
      <summary>[待提供。] </summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.GetService(System.Type)">
      <summary>获取 <see cref="T:System.IServiceProvider" /> 的实施者。</summary>
      <returns>一个 <see cref="T:System.Object" />，表示 <see cref="T:System.IServiceProvider" /> 的实施者。</returns>
      <param name="service">一个 <see cref="T:System.Type" />，表示所需服务的类型。</param>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Site">
      <summary>获取或设置组件的位置。</summary>
      <returns>实现表示组件位置的 <see cref="T:System.ComponentModel.ISite" /> 接口的对象。</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.ToString">
      <summary>返回包含 <see cref="T:System.ComponentModel.Component" /> 的名称的 <see cref="T:System.String" />（如果有）。不应重写此方法。</summary>
      <returns>包含该 <see cref="T:System.ComponentModel.Component" /> 的名称的 <see cref="T:System.String" />（如果有）。
            如果 <see cref="T:System.ComponentModel.Component" /> 未命名，则为 null。</returns>
    </member>
    <member name="T:System.ComponentModel.MaskedTextProvider">
      <summary>表示可由支持掩码的任何数量的控件（如 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 控件）使用的掩码分析服务。</summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String)">
      <summary>使用指定的掩码初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 类的新实例。</summary>
      <param name="mask">一个表示输入掩码的 <see cref="T:System.String" />。 </param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Boolean)">
      <summary>使用指定的掩码和 ASCII 限制值初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 类的新实例。</summary>
      <param name="mask">一个表示输入掩码的 <see cref="T:System.String" />。 </param>
      <param name="restrictToAscii">
如果将输入限制为与 ASCII 兼容的字符，则为 true；如果允许使用整个 Unicode 字符集，则为 false。 </param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Char,System.Boolean)">
      <summary>使用指定的掩码、密码字符和用法提示值初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 类的新实例。</summary>
      <param name="mask">一个表示输入掩码的 <see cref="T:System.String" />。 </param>
      <param name="passwordChar">将为输入到密码字符串中的字符显示的 <see cref="T:System.Char" />。</param>
      <param name="allowPromptAsInput">
如果允许将提示字符作为输入，则为 true；否则为 false。 </param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo)">
      <summary>使用指定的掩码和区域性初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 类的新实例。</summary>
      <param name="mask">一个表示输入掩码的 <see cref="T:System.String" />。 </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />，用于设置区分区域的分隔符。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean)">
      <summary>使用指定的掩码、区域性和 ASCII 限制值初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 类的新实例。</summary>
      <param name="mask">一个表示输入掩码的 <see cref="T:System.String" />。 </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />，用于设置区分区域的分隔符。</param>
      <param name="restrictToAscii">
如果将输入限制为与 ASCII 兼容的字符，则为 true；如果允许使用整个 Unicode 字符集，则为 false。 </param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean,System.Char,System.Char,System.Boolean)">
      <summary>使用指定的掩码、区域性、用法提示值、提示字符、密码字符和 ASCII 限制值初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 类的新实例。</summary>
      <param name="mask">一个表示输入掩码的 <see cref="T:System.String" />。 </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />，用于设置区分区域的分隔符。</param>
      <param name="allowPromptAsInput">一个 <see cref="T:System.Boolean" /> 值，指定是否应允许提示字符作为有效的输入字符。 </param>
      <param name="promptChar">一个将显示为用户输入占位符的 <see cref="T:System.Char" />。</param>
      <param name="passwordChar">将为输入到密码字符串中的字符显示的 <see cref="T:System.Char" />。</param>
      <param name="restrictToAscii">
如果将输入限制为与 ASCII 兼容的字符，则为 true；如果允许使用整个 Unicode 字符集，则为 false。 </param>
      <exception cref="T:System.ArgumentException">掩码参数为 null 或 <see cref="F:System.String.Empty" />。- 或 -掩码包含一个或多个不可打印字符。 </exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Char,System.Boolean)">
      <summary>使用指定的掩码、区域性、密码字符和用法提示值初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 类的新实例。</summary>
      <param name="mask">一个表示输入掩码的 <see cref="T:System.String" />。 </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />，用于设置区分区域的分隔符。</param>
      <param name="passwordChar">将为输入到密码字符串中的字符显示的 <see cref="T:System.Char" />。</param>
      <param name="allowPromptAsInput">
如果允许将提示字符作为输入，则为 true；否则为 false。 </param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char)">
      <summary>将指定的输入字符添加到带格式字符串的末尾。</summary>
      <returns>
如果输入字符添加成功，则为 true；否则为 false。</returns>
      <param name="input">一个要追加到带格式字符串的 <see cref="T:System.Char" /> 值。 </param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>将指定输入字符添加到带格式字符串的末尾，然后输出位置和描述性信息。</summary>
      <returns>
如果输入字符添加成功，则为 true；否则为 false。</returns>
      <param name="input">一个要追加到带格式字符串的 <see cref="T:System.Char" /> 值。</param>
      <param name="testPosition">带格式的字符串中试图添加字符的位置（从零开始计）。输出参数。</param>
      <param name="resultHint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述操作的结果。输出参数。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String)">
      <summary>将指定输入字符串中的字符添加到带格式字符串的末尾。</summary>
      <returns>
如果已成功添加输入字符串中的所有字符，则为 true；否则为 false，以指示没有添加任何字符。</returns>
      <param name="input">一个 <see cref="T:System.String" />，包含要追加到带格式字符串的字符值。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name=" input" /> 参数为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>将指定的输入字符串中的字符添加到带格式字符串的末尾，然后输出位置和描述性信息。</summary>
      <returns>
如果已成功添加输入字符串中的所有字符，则为 true；否则为 false，以指示没有添加任何字符。</returns>
      <param name="input">一个 <see cref="T:System.String" />，包含要追加到带格式字符串的字符值。 </param>
      <param name="testPosition">带格式的字符串中试图添加字符的位置（从零开始计）。输出参数。</param>
      <param name="resultHint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述操作的结果。输出参数。</param>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput">
      <summary>获取一个值，该值指示是否应将提示字符视为有效的输入字符。</summary>
      <returns>
如果用户可将 <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" /> 输入到控件，则为 true；否则为 false。默认为 true。 </returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AsciiOnly">
      <summary>获取一个值，指示掩码是否接受 ASCII 字符集之外的字符。</summary>
      <returns>
如果仅接受 ASCII，则为 true；如果 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 可接受任意 Unicode 字符，则为 false。默认为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount">
      <summary>获取已成功赋予输入值的可编辑字符位置的数目。</summary>
      <returns>一个 <see cref="T:System.Int32" />，包含输入掩码中的可编辑字符位置数（这些字符位置已在带格式字符串中赋予了字符值）。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount">
      <summary>获取输入掩码中尚未赋予输入值的可编辑字符位置的数目。</summary>
      <returns>一个 <see cref="T:System.Int32" />，包含尚未赋予字符值的可编辑字符位置的数目。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear">
      <summary>通过用提示字符替换可编辑输入字符，从带格式字符串中清除所有可编辑输入字符。</summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear(System.ComponentModel.MaskedTextResultHint@)">
      <summary>通过用提示字符替换可编辑输入字符，从带格式字符串中清除所有可编辑输入字符，然后输出描述性信息。</summary>
      <param name="resultHint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述操作的结果。输出参数。 </param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clone">
      <summary>创建当前 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 的副本。</summary>
      <returns>此方法创建的强制转换为某对象的 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 对象。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Culture">
      <summary>获取输入掩码中确定可本地化的分隔符和占位符的值的区域性。</summary>
      <returns>一个 <see cref="T:System.Globalization.CultureInfo" />，包含与输入掩码关联的区域性信息。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.DefaultPasswordChar">
      <summary>获取用于遮盖用户输入的默认密码字符。 </summary>
      <returns>一个表示默认的密码字符的 <see cref="T:System.Char" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositionCount">
      <summary>获取带格式字符串中的可编辑位置数。</summary>
      <returns>包含带格式字符串中可编辑位置数的 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositions">
      <summary>获取为带格式字符串中的可编辑位置新创建的枚举数。 </summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerator" />，支持对带格式字符串中的可编辑位置进行枚举。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary>使用指定的搜索方向，返回指定位置之后第一个已赋值的可编辑位置的位置。</summary>
      <returns>如果成功，则为 <see cref="T:System.Int32" />，表示遇到的第一个已赋值可编辑位置的位置（从零开始计）；否则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
      <param name="position">带格式的字符串中的搜索起始位置（从零开始计）。</param>
      <param name="direction">
        <see cref="T:System.Boolean" />，用于指示搜索方向；true 表示向前搜索，false 表示向后搜索。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>使用指定的搜索方向，返回指定位置之间第一个赋值可编辑位置的位置。</summary>
      <returns>如果成功，则为 <see cref="T:System.Int32" />，表示遇到的第一个已赋值可编辑位置的位置（从零开始计）；否则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
      <param name="startPosition">带格式的字符串中的搜索起始位置（从零开始计）。</param>
      <param name="endPosition">带格式的字符串中的搜索结束位置（从零开始计）。</param>
      <param name="direction">
        <see cref="T:System.Boolean" />，用于指示搜索方向；true 表示向前搜索，false 表示向后搜索。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(System.Int32,System.Boolean)">
      <summary>使用指定的搜索方向，返回指定位置之后第一个可编辑位置的位置。</summary>
      <returns>如果成功，则为 <see cref="T:System.Int32" />，表示遇到的第一个可编辑位置的位置（从零开始计）；否则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
      <param name="position">带格式的字符串中的搜索起始位置（从零开始计）。</param>
      <param name="direction">
        <see cref="T:System.Boolean" />，用于指示搜索方向；true 表示向前搜索，false 表示向后搜索。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>使用指定的搜索方向，返回指定位置之间第一个可编辑位置的位置。</summary>
      <returns>如果成功，则为 <see cref="T:System.Int32" />，表示遇到的第一个可编辑位置的位置（从零开始计）；否则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
      <param name="startPosition">带格式的字符串中的搜索起始位置（从零开始计）。</param>
      <param name="endPosition">带格式的字符串中的搜索结束位置（从零开始计）。</param>
      <param name="direction">
        <see cref="T:System.Boolean" />，用于指示搜索方向；true 表示向前搜索，false 表示向后搜索。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom(System.Int32,System.Boolean)">
      <summary>使用指定的搜索方向，返回指定位置之后第一个不可编辑位置的位置。</summary>
      <returns>如果成功，则为 <see cref="T:System.Int32" />，表示遇到的第一个原义字符的位置（从零开始计）；否则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
      <param name="position">带格式的字符串中的搜索起始位置（从零开始计）。</param>
      <param name="direction">
        <see cref="T:System.Boolean" />，用于指示搜索方向；true 表示向前搜索，false 表示向后搜索。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>使用指定的搜索方向，返回指定位置之间第一个不可编辑位置的位置。</summary>
      <returns>如果成功，则为 <see cref="T:System.Int32" />，表示遇到的第一个原义字符的位置（从零开始计）；否则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
      <param name="startPosition">带格式的字符串中的搜索起始位置（从零开始计）。</param>
      <param name="endPosition">带格式的字符串中的搜索结束位置（从零开始计）。</param>
      <param name="direction">
        <see cref="T:System.Boolean" />，用于指示搜索方向；true 表示向前搜索，false 表示向后搜索。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary>使用指定的搜索方向，返回指定位置之后第一个未赋值可编辑位置的位置。</summary>
      <returns>如果成功，则为 <see cref="T:System.Int32" />，表示遇到的第一个未赋值可编辑位置的位置（从零开始计）；否则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
      <param name="position">带格式的字符串中的搜索起始位置（从零开始计）。</param>
      <param name="direction">
        <see cref="T:System.Boolean" />，用于指示搜索方向；true 表示向前搜索，false 表示向后搜索。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>使用指定的搜索方向，返回指定位置之间第一个未赋值可编辑位置的位置。</summary>
      <returns>如果成功，则为 <see cref="T:System.Int32" />，表示遇到的第一个未赋值可编辑位置的位置（从零开始计）；否则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
      <param name="startPosition">带格式的字符串中的搜索起始位置（从零开始计）。</param>
      <param name="endPosition">带格式的字符串中的搜索结束位置（从零开始计）。</param>
      <param name="direction">
        <see cref="T:System.Boolean" />，用于指示搜索方向；true 表示向前搜索，false 表示向后搜索。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.GetOperationResultFromHint(System.ComponentModel.MaskedTextResultHint)">
      <summary>确定指定的 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 表示成功还是失败。</summary>
      <returns>
如果指定的 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 值表示成功，则为 true；如果表示失败，则为 false。</returns>
      <param name="hint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 值，通常作为上一个操作的输出参数获取。 </param>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals">
      <summary>获取或设置一个值，该值指示输入掩码中的原义字符是否应包含在带格式的字符串中。</summary>
      <returns>
如果包含原义字符，则为 true；否则为 false。默认为 true。 </returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludePrompt">
      <summary>获取或设置一个值，该值指示当显示带格式的字符串时是否使用 <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" /> 来表示缺少的用户输入。 </summary>
      <returns>
如果提示字符用于表示未提供用户输入的位置，则为 true；否则为 false.默认为 true。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32)">
      <summary>在带格式字符串中的指定位置插入指定字符。</summary>
      <returns>
如果插入成功，则为 true；否则为 false。</returns>
      <param name="input">要插入的 <see cref="T:System.Char" />。 </param>
      <param name="position">带格式的字符串中要插入字符的位置（从零开始计）。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>在带格式字符串中的指定位置插入指定的字符，同时返回最后一个插入位置和操作的状态。</summary>
      <returns>
如果插入成功，则为 true；否则为 false。</returns>
      <param name="input">要插入的 <see cref="T:System.Char" />。 </param>
      <param name="position">带格式的字符串中要插入字符的位置（从零开始计）。</param>
      <param name="testPosition">如果该方法成功，则为最后一个插入字符的位置；否则为第一次插入失败时所处的位置。输出参数。</param>
      <param name="resultHint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述插入操作的结果。输出参数。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32)">
      <summary>在带格式字符串中的指定位置插入指定的字符串。 </summary>
      <returns>
如果插入成功，则为 true；否则为 false。</returns>
      <param name="input">要插入的 <see cref="T:System.String" />。 </param>
      <param name="position">带格式的字符串中要插入输入字符串的位置（从零开始计）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 参数为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>将指定的字符串插入到带格式字符串中的指定位置，同时返回最后一个插入位置和操作的状态。 </summary>
      <returns>
如果插入成功，则为 true；否则为 false。</returns>
      <param name="input">要插入的 <see cref="T:System.String" />。 </param>
      <param name="position">带格式的字符串中要插入输入字符串的位置（从零开始计）。</param>
      <param name="testPosition">如果该方法成功，则为最后一个插入字符的位置；否则为第一次插入失败时所处的位置。输出参数。</param>
      <param name="resultHint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述插入操作的结果。输出参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 参数为 null。</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.InvalidIndex">
      <summary>获取无效索引范围的上限。</summary>
      <returns>一个表示最大无效索引的值，由提供程序实现确定。例如，如果最小的有效索引为 0，则此属性将返回 -1。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsAvailablePosition(System.Int32)">
      <summary>确定指定位置是否可赋值。</summary>
      <returns>
如果带格式字符串中的指定位置为可编辑并且尚未赋值，则为 true；否则为 false。</returns>
      <param name="position">掩码中要测试的位置（从零开始计）。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)">
      <summary>确定指定的位置是否为可编辑。 </summary>
      <returns>
如果带格式字符串中的指定位置为可编辑，则为 true；否则为 false。</returns>
      <param name="position">掩码中要测试的位置（从零开始计）。</param>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IsPassword">
      <summary>获取或设置一个值，该值确定是否应将密码保护应用于带格式的字符串。</summary>
      <returns>
如果要将输入字符串作为密码字符串进行处理，则为 true；否则为 false。默认为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)">
      <summary>确定指定的字符是否为有效的输入字符。</summary>
      <returns>
如果指定的字符包含有效的输入值，则为 true；否则为 false。</returns>
      <param name="c">要测试的 <see cref="T:System.Char" /> 值。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidMaskChar(System.Char)">
      <summary>确定指定的字符是否为有效的掩码字符。</summary>
      <returns>
如果指定的字符包含有效的掩码值，则为 true；否则为 false。</returns>
      <param name="c">要测试的 <see cref="T:System.Char" /> 值。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)">
      <summary>确定指定的字符是否为有效的密码字符。</summary>
      <returns>
如果指定的字符包含有效的密码值，则为 true；否则为 false。</returns>
      <param name="c">要测试的 <see cref="T:System.Char" /> 值。</param>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)">
      <summary>获取带格式字符串中位于指定位置的元素。</summary>
      <returns>带格式字符串中位于指定位置的 <see cref="T:System.Char" />。</returns>
      <param name="index">要检索的元素的从零开始的索引。 </param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小于零或大于等于掩码的 <see cref="P:System.ComponentModel.MaskedTextProvider.Length" />。</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.LastAssignedPosition">
      <summary>获取已赋给掩码的最靠右的输入字符在掩码中的索引。</summary>
      <returns>如果已为掩码至少赋予了一个输入字符，则为包含最靠右的已赋值位置的索引的 <see cref="T:System.Int32" />；如果没有已赋值的位置，则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Length">
      <summary>获取掩码的长度，不包括任何掩码修饰符字符。</summary>
      <returns>一个包含掩码中位置数（不包括修改掩码输入的字符）的 <see cref="T:System.Int32" />。 </returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Mask">
      <summary>获取输入掩码。</summary>
      <returns>一个包含完整掩码的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskCompleted">
      <summary>获取一个值，该值指示是否所有必需的输入均已输入到带格式的字符串中。</summary>
      <returns>
如果所有的必需输入均已输入到掩码中，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskFull">
      <summary>获取一个值，该值指示是否所有必需和可选的输入均已输入到带格式的字符串中。 </summary>
      <returns>
如果所有的必需和可选输入均已输入，则为 true；否则为 false。 </returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PasswordChar">
      <summary>获取或设置要替代实际输入字符的字符。</summary>
      <returns>用作密码字符的 <see cref="T:System.Char" /> 值。</returns>
      <exception cref="T:System.InvalidOperationException">设置此属性时指定的密码字符与当前提示字符 <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" /> 相同。这两者之间必须存在差异。</exception>
      <exception cref="T:System.ArgumentException">根据 <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" /> 方法判定，设置此属性时指定的字符不是有效的密码字符。</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PromptChar">
      <summary>为所有可用的编辑位置获取或设置用于表示缺少用户输入的字符。</summary>
      <returns>用于提示用户进行输入的字符。默认为下划线 (_)。 </returns>
      <exception cref="T:System.InvalidOperationException">设置此属性时指定的提示字符与当前密码字符 <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> 相同。这两者之间必须存在差异。</exception>
      <exception cref="T:System.ArgumentException">根据 <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" /> 方法判定，设置此属性时指定的字符不是有效的密码字符。</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove">
      <summary>从带格式的字符串中移除最后一个赋值的字符。</summary>
      <returns>
如果该字符已成功移除，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove(System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>从带格式字符串中移除最后一个赋值的字符，然后输出移除位置和描述性信息。</summary>
      <returns>
如果该字符已成功移除，则为 true；否则为 false。</returns>
      <param name="testPosition">带格式字符串中实际移除字符的位置（从零开始计）。输出参数。</param>
      <param name="resultHint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述操作的结果。输出参数。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32)">
      <summary>从带格式的字符串中移除位于指定位置的赋值字符。</summary>
      <returns>
如果该字符已成功移除，则为 true；否则为 false。</returns>
      <param name="position">要移除的赋值字符的位置（从零开始计）。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32)">
      <summary>从带格式的字符串中移除指定位置之间的赋值的字符。</summary>
      <returns>
如果该字符已成功移除，则为 true；否则为 false。</returns>
      <param name="startPosition">要移除的第一个赋值的字符的从零开始的索引。</param>
      <param name="endPosition">要移除的最后一个赋值的字符的从零开始的索引。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>从带格式的字符串中移除指定位置之间的赋值的字符，然后输出移除位置和描述性信息。</summary>
      <returns>
如果该字符已成功移除，则为 true；否则为 false。</returns>
      <param name="startPosition">要移除的第一个赋值的字符的从零开始的索引。</param>
      <param name="endPosition">要移除的最后一个赋值的字符的从零开始的索引。</param>
      <param name="testPosition">如果成功，则为带格式的字符串中实际移除字符的位置（从零开始计）；否则为该操作第一次失败时所处的位置。输出参数。</param>
      <param name="resultHint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述操作的结果。输出参数。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32)">
      <summary>用指定的字符值替换指定位置或指定位置后面的单个字符。</summary>
      <returns>
如果已成功替换该字符，则为 true；否则为 false。</returns>
      <param name="input">用于替换现有值的 <see cref="T:System.Char" /> 值。</param>
      <param name="position">用于搜索将要替换的第一个可编辑字符的位置（从零开始计）。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>在指定的开始和结束位置之间使用指定的字符值替换单个字符，然后输出移除位置和描述性信息。</summary>
      <returns>
如果已成功替换该字符，则为 true；否则为 false。</returns>
      <param name="input">用于替换现有值的 <see cref="T:System.Char" /> 值。</param>
      <param name="startPosition">带格式的字符串中的替换起始位置（从零开始计）。 </param>
      <param name="endPosition">带格式的字符串中的替换结束位置（从零开始计）。 </param>
      <param name="testPosition">如果成功，则为带格式字符串中实际替换最后一个字符的位置（从零开始计）；否则为该操作第一次失败时所处的位置。输出参数。</param>
      <param name="resultHint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述替换操作的结果。输出参数。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>用指定的字符值替换指定位置或指定位置后面的单个字符，然后输出移除位置和描述性信息。</summary>
      <returns>
如果已成功替换该字符，则为 true；否则为 false。</returns>
      <param name="input">用于替换现有值的 <see cref="T:System.Char" /> 值。</param>
      <param name="position">用于搜索将要替换的第一个可编辑字符的位置（从零开始计）。</param>
      <param name="testPosition">如果成功，则为带格式字符串中实际替换最后一个字符的位置（从零开始计）；否则为该操作第一次失败时所处的位置。输出参数。</param>
      <param name="resultHint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述替换操作的结果。输出参数。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32)">
      <summary>从指定位置开始使用指定字符串替换一定范围的可编辑字符。</summary>
      <returns>
如果所有的字符已成功替换，则为 true；否则为 false。</returns>
      <param name="input">用于替换现有可编辑字符的 <see cref="T:System.String" /> 值。</param>
      <param name="position">用于搜索将要替换的第一个可编辑字符的位置（从零开始计）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 参数为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>在指定的开始位置和结束位置之间的范围内使用指定的字符串替换可编辑字符，然后输出移除位置和描述性信息。</summary>
      <returns>
如果所有的字符已成功替换，则为 true；否则为 false。</returns>
      <param name="input">用于替换现有可编辑字符的 <see cref="T:System.String" /> 值。</param>
      <param name="startPosition">带格式的字符串中的替换起始位置（从零开始计）。 </param>
      <param name="endPosition">带格式的字符串中的替换结束位置（从零开始计）。 </param>
      <param name="testPosition">如果成功，则为带格式字符串中实际替换最后一个字符的位置（从零开始计）；否则为该操作第一次失败时所处的位置。输出参数。</param>
      <param name="resultHint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述替换操作的结果。输出参数。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>从指定位置开始使用指定字符串替换一定范围的可编辑字符，然后输出移除位置和描述性信息。</summary>
      <returns>
如果所有的字符已成功替换，则为 true；否则为 false。</returns>
      <param name="input">用于替换现有可编辑字符的 <see cref="T:System.String" /> 值。</param>
      <param name="position">用于搜索将要替换的第一个可编辑字符的位置（从零开始计）。</param>
      <param name="testPosition">如果成功，则为带格式字符串中实际替换最后一个字符的位置（从零开始计）；否则为该操作第一次失败时所处的位置。输出参数。</param>
      <param name="resultHint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述替换操作的结果。输出参数。</param>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnPrompt">
      <summary>获取或设置一个值，该值确定应如何处理与提示字符匹配的输入字符。</summary>
      <returns>
如果输入的提示字符会导致掩码中的当前可编辑位置被重置，则为 true；否则为 false，以指示要将提示字符作为正常输入字符进行处理。默认为 true。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnSpace">
      <summary>获取或设置一个值，该值确定应如何处理空白输入字符。</summary>
      <returns>
如果空白输入字符将导致重置掩码中的当前可编辑位置，则为 true；否则为 false，以指示要将其作为正常输入字符进行处理。默认为 true。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String)">
      <summary>将带格式的字符串设置为指定的输入字符串。</summary>
      <returns>
如果所有的字符已成功设置，则为 true；否则为 false。</returns>
      <param name="input">用于设置带格式字符串的 <see cref="T:System.String" /> 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name=" input" /> 参数为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>将带格式的字符串设置为指定的输入字符串，然后输出移除位置和描述性信息。</summary>
      <returns>
如果所有的字符已成功设置，则为 true；否则为 false。</returns>
      <param name="input">用于设置带格式字符串的 <see cref="T:System.String" /> 值。</param>
      <param name="testPosition">如果成功，则为带格式字符串中实际设置最后一个字符的位置（从零开始计）；否则为该操作第一次失败时所处的位置。输出参数。</param>
      <param name="resultHint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述设置操作的结果。输出参数。</param>
      <exception cref="T:System.ArgumentNullException">该<paramref name=" input" /> 参数为 null。</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.SkipLiterals">
      <summary>获取或设置一个值，该值指示掩码中的原义字符位置是否可由其相同的值改写。</summary>
      <returns>
如果允许往回添加原义字符，则为 true；如果不允许用户改写原义字符，则为 false。默认为 true。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToDisplayString">
      <summary>以可显示的形式返回带格式字符串。</summary>
      <returns>带格式的 <see cref="T:System.String" />，包含提示和掩码原义字符。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString">
      <summary>返回包含所有赋值的字符值的带格式字符串。</summary>
      <returns>带格式的 <see cref="T:System.String" />，其中包含所有赋值的字符值。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean)">
      <summary>返回带格式的字符串，还可以选择包含密码字符。</summary>
      <returns>带格式的 <see cref="T:System.String" />，包含原义字符、提示字符，还可以选择包含密码字符。</returns>
      <param name="ignorePasswordChar">
如果为 true，则返回实际的可编辑字符；如果为 false，则指示将接受 <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> 属性。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean)">
      <summary>返回带格式的字符串，还可以选择包含提示字符和原义字符。</summary>
      <returns>带格式的 <see cref="T:System.String" />，包含所有赋值的字符值，还可以选择包含原义字符和提示字符。</returns>
      <param name="includePrompt">
如果在返回字符串中包括提示字符，则为 true；否则为 false。</param>
      <param name="includeLiterals">
如果在返回字符串中包括原义字符，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary>返回带格式字符串的子字符串，可以选择包含提示字符、原义字符和密码字符。</summary>
      <returns>如果成功，则返回带格式的 <see cref="T:System.String" /> 的子字符串（包含所有赋值的字符值，还可以选择包含原义字符、提示字符和密码字符）；否则返回 <see cref="F:System.String.Empty" /> 字符串。</returns>
      <param name="ignorePasswordChar">
如果为 true，则返回实际的可编辑字符；如果为 false，则指示将接受 <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> 属性。</param>
      <param name="includePrompt">
如果在返回字符串中包括提示字符，则为 true；否则为 false。</param>
      <param name="includeLiterals">
如果在返回字符串中包括原义字符，则为 true；否则为 false。</param>
      <param name="startPosition">带格式的字符串中的起始输出位置（从零开始计）。 </param>
      <param name="length">要返回的字符数。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary>返回带格式字符串的子字符串，也可以选择包含提示字符和原义字符。</summary>
      <returns>如果成功，则返回带格式的 <see cref="T:System.String" /> 的子字符串（包含所有赋值的字符值，还可以选择包含原义字符和提示字符）；否则返回 <see cref="F:System.String.Empty" /> 字符串。</returns>
      <param name="includePrompt">
如果在返回字符串中包括提示字符，则为 true；否则为 false。</param>
      <param name="includeLiterals">
如果在返回字符串中包括原义字符，则为 true；否则为 false。</param>
      <param name="startPosition">带格式的字符串中的起始输出位置（从零开始计）。 </param>
      <param name="length">要返回的字符数。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Int32,System.Int32)">
      <summary>返回带格式字符串的子字符串，也可以选择包含密码字符。</summary>
      <returns>如果成功，则返回带格式的 <see cref="T:System.String" /> 的子字符串（包含原义字符、提示字符，还可以选择包含密码字符）；否则返回 <see cref="F:System.String.Empty" /> 字符串。</returns>
      <param name="ignorePasswordChar">
如果为 true，则返回实际的可编辑字符；如果为 false，则指示将接受 <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> 属性。</param>
      <param name="startPosition">带格式的字符串中的起始输出位置（从零开始计）。 </param>
      <param name="length">要返回的字符数。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Int32,System.Int32)">
      <summary>返回带格式字符串的子字符串。</summary>
      <returns>如果成功，则返回带格式的 <see cref="T:System.String" /> 的子字符串（包含所有赋值的字符值），否则返回 <see cref="F:System.String.Empty" /> 字符串。</returns>
      <param name="startPosition">带格式的字符串中的起始输出位置（从零开始计）。 </param>
      <param name="length">要返回的字符数。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyChar(System.Char,System.Int32,System.ComponentModel.MaskedTextResultHint@)">
      <summary>测试指定的字符是否可以在指定位置成功设置。</summary>
      <returns>
如果指定的字符对指定位置有效，则为 true；否则为 false。</returns>
      <param name="input">要测试的 <see cref="T:System.Char" /> 值。</param>
      <param name="position">测试输入字符时所根据的掩码位置。</param>
      <param name="hint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述操作的结果。输出参数。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)">
      <summary>测试指定的字符是否将在指定位置转义。</summary>
      <returns>
如果指定的字符将在指定位置转义，则为 true；否则为 false。</returns>
      <param name="input">要测试的 <see cref="T:System.Char" /> 值。</param>
      <param name="position">测试输入字符时所根据的掩码位置。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String)">
      <summary>测试指定的字符串是否可以成功设置。</summary>
      <returns>
如果指定的字符串表示有效输入，则为 true；否则为 false。</returns>
      <param name="input">要测试的 <see cref="T:System.String" /> 值。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>测试指定的字符串是否可以成功设置，然后输出位置和描述性信息。</summary>
      <returns>
如果指定的字符串表示有效输入，则为 true；否则为 false。 </returns>
      <param name="input">要测试的 <see cref="T:System.String" /> 值。</param>
      <param name="testPosition">如果成功，则为实际测试的最后一个字符的位置（从零开始计）；否则为测试第一次失败时所处的位置。输出参数。</param>
      <param name="resultHint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" />，用于简单地描述测试操作的结果。输出参数。</param>
    </member>
    <member name="T:System.ComponentModel.MaskedTextResultHint">
      <summary>指定简洁描述掩码文本分析操作结果的值。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Unknown">
      <summary>未知。操作结果无法确定。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.CharacterEscaped">
      <summary>成功。操作成功，因为文本、提示或空格字符是转义字符。有关转义字符的更多信息，请参见 <see cref="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)" /> 方法。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NoEffect">
      <summary>成功。主操作未执行，因为不需要；因此，未产生任何副作用。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SideEffect">
      <summary>成功。主操作未执行，因为不需要，但该方法产生了副作用。例如，<see cref="Overload:System.ComponentModel.MaskedTextProvider.RemoveAt" /> 方法可能删除未赋值的编辑位置，这会引起格式化字符串中顺序字符的左移。 </summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Success">
      <summary>成功。主操作成功。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AsciiCharacterExpected">
      <summary>操作未成功。输入字符中包含非 ASCII 字符集成员的字符。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AlphanumericCharacterExpected">
      <summary>操作未成功。输入字符中包含非字母数字字符。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.DigitExpected">
      <summary>操作未成功。输入字符中包含非数字字符。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.LetterExpected">
      <summary>操作未成功。输入字符中包含非字母字符。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SignedDigitExpected">
      <summary>操作未成功。输入字符中包含不是有符号数字的字符。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.InvalidInput">
      <summary>操作未成功。程序遇到无效的输入字符。有关无效字符的更多信息，请参见 <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)" /> 方法。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PromptCharNotAllowed">
      <summary>操作未成功。输入的提示字符无效，可能是由于 <see cref="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput" /> 属性设置为 false 所致。 </summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.UnavailableEditPosition">
      <summary>操作未成功。没有足够的可用编辑位置来满足请求。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NonEditPosition">
      <summary>操作未成功。格式化字符串中的当前位置为原义字符。 </summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PositionOutOfRange">
      <summary>操作未成功。指定的位置未在目标字符串范围内；通常小于零或大于目标字符串的长度。</summary>
    </member>
    <member name="T:System.ComponentModel.MemberDescriptor">
      <summary>表示一个类成员，例如某个属性 (Property) 或事件。这是一个抽象基类。</summary>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>用指定的 <see cref="T:System.ComponentModel.MemberDescriptor" /> 初始化 <see cref="T:System.ComponentModel.MemberDescriptor" /> 类的新实例。</summary>
      <param name="descr">一个 <see cref="T:System.ComponentModel.MemberDescriptor" />，它包含该成员的名称及其属性 (Attribute)。</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>用指定的 <see cref="T:System.ComponentModel.MemberDescriptor" /> 中的名称以及同时出现在旧 <see cref="T:System.ComponentModel.MemberDescriptor" /> 和 <see cref="T:System.Attribute" /> 数组中的属性 (Attribute) 初始化 <see cref="T:System.ComponentModel.MemberDescriptor" /> 类的新实例。</summary>
      <param name="oldMemberDescriptor">一个 <see cref="T:System.ComponentModel.MemberDescriptor" />，它具有该成员的名称及其属性 (Attribute)。</param>
      <param name="newAttributes">
        <see cref="T:System.Attribute" /> 对象的数组，这些对象具有要添加到成员的属性 (Attribute)。</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String)">
      <summary>用指定的成员名称初始化 <see cref="T:System.ComponentModel.MemberDescriptor" /> 类的新实例。</summary>
      <param name="name">成员名。</param>
      <exception cref="T:System.ArgumentException">该名称为空字符串 ("") 或 null。</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>用指定的成员名称和属性 (Attribute) 数组初始化 <see cref="T:System.ComponentModel.MemberDescriptor" /> 类的新实例。</summary>
      <param name="name">成员名。</param>
      <param name="attributes">包含成员属性 (Attribute) 的类型 <see cref="T:System.Attribute" /> 的数组。</param>
      <exception cref="T:System.ArgumentException">该名称为空字符串 ("") 或 null。</exception>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.AttributeArray">
      <summary>获取或设置属性 (Attribute) 数组。</summary>
      <returns>包含成员属性 (Attribute) 的类型 <see cref="T:System.Attribute" /> 的数组。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Attributes">
      <summary>获取该成员的属性 (Attribute) 集合。</summary>
      <returns>一个提供此成员的属性 (Attribute) 的 <see cref="T:System.ComponentModel.AttributeCollection" />；如果 <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" /> 中没有属性 (Attribute)，则为空集合。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Category">
      <summary>获取该成员所属的类别的名称，如 <see cref="T:System.ComponentModel.CategoryAttribute" /> 中所指定的。</summary>
      <returns>该成员所属的类别的名称。如果没有 <see cref="T:System.ComponentModel.CategoryAttribute" />，类别名将被设置为默认类别 Misc。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.CreateAttributeCollection">
      <summary>使用传递到构造函数的属性 (Attribute) 数组创建属性 (Attribute) 的集合。</summary>
      <returns>一个新 <see cref="T:System.ComponentModel.AttributeCollection" />，包含 <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" /> 属性 (Attribute)。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Description">
      <summary>获取成员的说明，如 <see cref="T:System.ComponentModel.DescriptionAttribute" /> 中所指定的。</summary>
      <returns>成员的说明。如果没有 <see cref="T:System.ComponentModel.DescriptionAttribute" />，属性 (Property) 值被设置为默认值，它是一个空字符串 ("")。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DesignTimeOnly">
      <summary>获取是否只能在设计时设置该成员，如 <see cref="T:System.ComponentModel.DesignOnlyAttribute" /> 中所指定的。</summary>
      <returns>
            如果只能在设计时设置该成员，则为 true；如果可以在运行时设置该成员，则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DisplayName">
      <summary>获取可以显示在窗口（如“属性”窗口）中的名称。</summary>
      <returns>为该成员显示的名称。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.Equals(System.Object)">
      <summary>将该实例与给定的对象进行比较以了解它们是否等效。</summary>
      <returns>
            如果等效，则为 true；否则为 false。</returns>
      <param name="obj">要与当前实例进行比较的对象。</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)">
      <summary>当在派生类中被重写时，将继承类的属性添加到父类中指定的属性 (Attribute) 列表。</summary>
      <param name="attributeList">一个列出父类中属性 (Attribute) 的 <see cref="T:System.Collections.IList" />。最初，它是空的。</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)">
      <summary>通过反射查找给定的方法，只搜索公共方法。</summary>
      <returns>一个表示该方法的 <see cref="T:System.Reflection.MethodInfo" />；如果找不到该方法，则为 null。</returns>
      <param name="componentClass">包含该方法的组件。</param>
      <param name="name">要查找的方法的名称。</param>
      <param name="args">该方法的参数数组，用于在重载方法之间进行选择。</param>
      <param name="returnType">为该方法返回的类型。</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)">
      <summary>带一个仅搜索公共方法的选项，通过反射查找给定的方法。</summary>
      <returns>一个表示该方法的 <see cref="T:System.Reflection.MethodInfo" />；如果找不到该方法，则为 null。</returns>
      <param name="componentClass">包含该方法的组件。</param>
      <param name="name">要查找的方法的名称。</param>
      <param name="args">该方法的参数数组，用于在重载方法之间进行选择。</param>
      <param name="returnType">为该方法返回的类型。</param>
      <param name="publicOnly">是否限制搜索公共方法。</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.MemberDescriptor" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary>检索应在成员调用期间使用的对象。</summary>
      <returns>成员调用期间使用的对象。</returns>
      <param name="type">调用目标的 <see cref="T:System.Type" />。</param>
      <param name="instance">潜在的调用目标。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或 <paramref name="instance" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvokee(System.Type,System.Object)">
      <summary>获取在其上调用方法的组件。</summary>
      <returns>要调用的组件的实例。当属性 (Property) 附加到可视化设计器时，此方法返回一个可视化设计器。</returns>
      <param name="componentClass">一个 <see cref="T:System.Type" />，表示该 <see cref="T:System.ComponentModel.MemberDescriptor" /> 要绑定到的组件的类型。例如，如果此 <see cref="T:System.ComponentModel.MemberDescriptor" /> 描述一个属性 (Property)，则该参数应该是在其上声明属性 (Property) 的类。</param>
      <param name="component">要调用的对象的实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="componentClass" /> 或 <paramref name="component" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetSite(System.Object)">
      <summary>获取给定组件的组件位置。</summary>
      <returns>该组件的位置，或者如果位置不存在，则为 null。</returns>
      <param name="component">要查找其位置的组件。</param>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.IsBrowsable">
      <summary>获取一个指示该成员是否可浏览的值，如 <see cref="T:System.ComponentModel.BrowsableAttribute" /> 中所指定的。</summary>
      <returns>
            如果成员可以浏览，则为 true；否则为 false。如果没有 <see cref="T:System.ComponentModel.BrowsableAttribute" />，则将属性 (Property) 值设置为默认值 true。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Name">
      <summary>获取此成员的名称。</summary>
      <returns>成员名。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.NameHashCode">
      <summary>获取此成员名称的哈希代码，如 <see cref="M:System.String.GetHashCode" /> 中所指定的。</summary>
      <returns>该成员名称的哈希代码。</returns>
    </member>
    <member name="T:System.ComponentModel.MergablePropertyAttribute">
      <summary>指定该属性能与“属性”窗口中属于其他对象的属性 (Property) 组合。</summary>
    </member>
    <member name="M:System.ComponentModel.MergablePropertyAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.MergablePropertyAttribute" /> 类的新实例。</summary>
      <param name="allowMerge">
                如果该属性可以与“属性”窗口中属于其他对象的属性进行组合，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.ComponentModel.MergablePropertyAttribute.AllowMerge">
      <summary>获取一个值，该值指示该属性 (Property) 能否与“属性”窗口属于其他对象的属性 (Property) 组合。</summary>
      <returns>
            如果该属性可以与“属性”窗口中属于其他对象的属性进行组合，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.ComponentModel.MergablePropertyAttribute.Default">
      <summary>指定默认值 <see cref="F:System.ComponentModel.MergablePropertyAttribute.Yes" />，它可以与“属性”窗口中属于其他对象的属性 (Property) 组合。此 static 字段是只读的。</summary>
    </member>
    <member name="M:System.ComponentModel.MergablePropertyAttribute.Equals(System.Object)">
      <summary>指示此实例与指定对象是否相等。</summary>
      <returns>
            如果 <paramref name="obj" /> 等于此实例，则为 true；否则为 false。</returns>
      <param name="obj">要比较的另一个对象。</param>
    </member>
    <member name="M:System.ComponentModel.MergablePropertyAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.MergablePropertyAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.MergablePropertyAttribute.IsDefaultAttribute">
      <summary>确定此属性是否为默认属性 (Attribute)。</summary>
      <returns>
            如果此属性 (Attribute) 是此属性 (Attribute) 类的默认值，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.ComponentModel.MergablePropertyAttribute.No">
      <summary>指定属性 (Property) 不能与“属性”窗口中属于其他对象的属性 (Property) 组合。此 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.MergablePropertyAttribute.Yes">
      <summary>指定属性 (Property) 能与“属性”窗口中属于其他对象的属性 (Property) 组合。此 static 字段是只读的。</summary>
    </member>
    <member name="T:System.ComponentModel.MultilineStringConverter">
      <summary>提供将多行字符串转换为单行字符串的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.MultilineStringConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>使用指定的上下文和区域性信息将给定的值对象转换为指定的类型。</summary>
      <returns>表示转换的 value 的 <see cref="T:System.Object" />。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />。如果传递 null，则采用当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">要将 value 参数转换为的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>使用指定的上下文和属性 (Attribute) 返回由 <paramref name="value" /> 参数指定的数组类型的属性 (Property) 的集合。</summary>
      <returns>具有为此数据类型公开的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />；或者如果没有属性，则为 null。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="value">一个 <see cref="T:System.Object" />，指定要为其获取属性的数组类型。</param>
      <param name="attributes">用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。</param>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>使用指定的上下文返回该对象是否支持属性。</summary>
      <returns>
            如果应调用 <see cref="Overload:System.ComponentModel.MultilineStringConverter.GetProperties" /> 来查找此对象的属性，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
    </member>
    <member name="T:System.ComponentModel.NestedContainer">
      <summary>提供 <see cref="T:System.ComponentModel.INestedContainer" /> 接口的基实现，该接口使容器可以拥有一个所属组件。</summary>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)">
      <summary>初始化 <see cref="T:System.ComponentModel.NestedContainer" /> 类的新实例。</summary>
      <param name="owner">拥有此嵌套容器的 <see cref="T:System.ComponentModel.IComponent" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owner" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary>为容器中的组件创建站点。</summary>
      <returns>新创建的 <see cref="T:System.ComponentModel.ISite" />。</returns>
      <param name="component">要为其创建站点的 <see cref="T:System.ComponentModel.IComponent" />。</param>
      <param name="name">要分配给 <paramref name="component" /> 的名称，或者为 null 以跳过名称分配。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
      <summary>释放由嵌套容器使用的资源。</summary>
      <param name="disposing">
                为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。</param>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.GetService(System.Type)">
      <summary>获取指定类型的服务对象（如果可用）。</summary>
      <returns>实现所请求服务的 <see cref="T:System.Object" />，或者，如果无法解析服务，则为 null。</returns>
      <param name="service">要检索的服务的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.Owner">
      <summary>获取此嵌套容器的所属组件。</summary>
      <returns>拥有此嵌套容器的 <see cref="T:System.ComponentModel.IComponent" />。</returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.OwnerName">
      <summary>获取所属组件的名称。</summary>
      <returns>所属组件的名称。</returns>
    </member>
    <member name="T:System.ComponentModel.NotifyParentPropertyAttribute">
      <summary>指示当此属性应用到的属性的值被修改时将通知父属性。无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.NotifyParentPropertyAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.NotifyParentPropertyAttribute" /> 类的新实例，使用指定的值确定是否通知父属性有关属性值的更改。</summary>
      <param name="notifyParent">
                如果应该向父属性通知更改，则为 true；否则为 false。</param>
    </member>
    <member name="F:System.ComponentModel.NotifyParentPropertyAttribute.Default">
      <summary>指示默认的属性 (Attribute) 状态，即属性 (Property) 不向父属性 (Property) 通知其值的更改。此字段为只读。</summary>
    </member>
    <member name="M:System.ComponentModel.NotifyParentPropertyAttribute.Equals(System.Object)">
      <summary>获取一个值，该值指示指定对象是否与当前对象相同。</summary>
      <returns>
            如果指定对象与当前对象相同，则为 true；否则为 false。</returns>
      <param name="obj">要测试相等的对象。</param>
    </member>
    <member name="M:System.ComponentModel.NotifyParentPropertyAttribute.GetHashCode">
      <summary>获取此对象的哈希代码。</summary>
      <returns>该属性所属对象的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.NotifyParentPropertyAttribute.IsDefaultAttribute">
      <summary>获取一个值，该值指示该属性的当前值是否为该属性的默认值。</summary>
      <returns>
            如果属性的当前值为该属性的默认值，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.ComponentModel.NotifyParentPropertyAttribute.No">
      <summary>指示不通知父属性有关属性值的更改。此字段为只读。</summary>
    </member>
    <member name="P:System.ComponentModel.NotifyParentPropertyAttribute.NotifyParent">
      <summary>获取或设置一个值，该值指示是否应该通知父属性有关属性值的更改。</summary>
      <returns>
            如果应该向父属性通知更改，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.ComponentModel.NotifyParentPropertyAttribute.Yes">
      <summary>指示通知父属性有关属性值的更改。此字段为只读。</summary>
    </member>
    <member name="T:System.ComponentModel.NullableConverter">
      <summary>提供可以为 null 的类型与其基础基元类型间的自动转换。</summary>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.ComponentModel.NullableConverter" /> 类的新实例。</summary>
      <param name="type">指定的可以为 null 的类型。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不是可以为 null 的类型。</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>返回该转换器是否可以使用指定的上下文将给定类型的对象转换为此转换器的类型。</summary>
      <returns>
            如果该转换器能够执行转换，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="sourceType">一个 <see cref="T:System.Type" />，表示要转换的类型。</param>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>返回此转换器是否可以使用指定的上下文将该对象转换为指定的类型。</summary>
      <returns>
如果该转换器能够执行转换，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="destinationType">一个 <see cref="T:System.Type" />，表示要转换到的类型。</param>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>使用指定的上下文和区域性信息将给定的对象转换为此转换器的类型。</summary>
      <returns>表示转换的 value 的 <see cref="T:System.Object" />。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="culture">用作当前区域性的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>使用指定的上下文和区域性信息将给定的值对象转换为指定的类型。</summary>
      <returns>表示转换的 value 的 <see cref="T:System.Object" />。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="culture">用作当前区域性的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">值参数要转换成的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <returns>一个 <see cref="T:System.Object" />，表示给定的 <see cref="T:System.Collections.IDictionary" />，或者如果无法创建该对象，则为 null。此方法始终返回 null。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="propertyValues">新属性值的 <see cref="T:System.Collections.IDictionary" />。</param>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <returns>
            如果更改此对象的属性需要调用 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> 来创建新值，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <returns>具有为此数据类型公开的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />；或者如果没有属性，则为 null。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="value">一个 <see cref="T:System.Object" />，指定要为其获取属性的数组类型。</param>
      <param name="attributes">用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。</param>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <returns>
            如果应调用 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> 来查找此对象的属性，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <returns>包含标准有效值集的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />；如果数据类型不支持标准值集，则为 null。</returns>
      <param name="context">提供格式上下文的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可用来提取有关从中调用此转换器的环境的附加信息。此参数或其属性可以为 null。</param>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <returns>
            如果从 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 返回的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 是可能值的穷举列表，则为 true；如果还可能有其他值，则为 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <returns>
            如果应调用 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 来查找对象支持的一组公共值，则为 true；否则，为 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="value">要测试其有效性的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.NullableType">
      <summary>获取可以为 null 的类型。</summary>
      <returns>表示可以为 null 的类型的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingType">
      <summary>获取基础类型。</summary>
      <returns>表示基础类型的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingTypeConverter">
      <summary>获取基础类型转换器。</summary>
      <returns>表示基础类型转换器的 <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ParenthesizePropertyNameAttribute">
      <summary>指示关联属性的名称在“属性”窗口中显示时是否带有括号。无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.ParenthesizePropertyNameAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.ParenthesizePropertyNameAttribute" /> 类的新实例，该实例指示关联属性 (Property) 显示时不应带括号。</summary>
    </member>
    <member name="M:System.ComponentModel.ParenthesizePropertyNameAttribute.#ctor(System.Boolean)">
      <summary>通过使用指定值来指示该属性 (Attribute) 显示时是否带有括号，初始化 <see cref="T:System.ComponentModel.ParenthesizePropertyNameAttribute" /> 类的新实例。</summary>
      <param name="needParenthesis">
                如果名称应括在括号中，则为 true；否则为 false。</param>
    </member>
    <member name="F:System.ComponentModel.ParenthesizePropertyNameAttribute.Default">
      <summary>用默认值（该值指示关联的属性 (Property) 显示时不应带有括号）初始化 <see cref="T:System.ComponentModel.ParenthesizePropertyNameAttribute" /> 类的新实例。此字段为只读。</summary>
    </member>
    <member name="M:System.ComponentModel.ParenthesizePropertyNameAttribute.Equals(System.Object)">
      <summary>将指定的对象与此对象进行比较并测试是否相等。</summary>
      <returns>
            如果相等，则为 true；否则为 false。</returns>
      <param name="o">要比较的对象。</param>
    </member>
    <member name="M:System.ComponentModel.ParenthesizePropertyNameAttribute.GetHashCode">
      <summary>获取此对象的哈希代码。</summary>
      <returns>该属性所属对象的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.ParenthesizePropertyNameAttribute.IsDefaultAttribute">
      <summary>获取一个值，该值指示该属性的当前值是否为该属性的默认值。</summary>
      <returns>
            如果属性的当前值为该属性的默认值，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.ParenthesizePropertyNameAttribute.NeedParenthesis">
      <summary>获取一个值，该值指示在“属性”窗口中显示属性的名称时是否带有括号。</summary>
      <returns>
            如果属性显示时带有括号，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ComponentModel.PasswordPropertyTextAttribute">
      <summary>指示对象的文本表示形式被星号一类的字符所遮盖。无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 类的新实例，有选择地显示密码文本。</summary>
      <param name="password">
                若要指示属性应作为密码文本显示，则为 true；否则为 false。默认为 false。</param>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Default">
      <summary>指定 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 的默认值。</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.Equals(System.Object)">
      <summary>确定两个 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 实例是否相等。</summary>
      <returns>
            如果指定的 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 等于当前的 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />，则为 true；否则为 false。</returns>
      <param name="o">与当前的 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 进行比较的 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />。</param>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.IsDefaultAttribute">
      <summary>返回此实例值是否为默认值的指示。</summary>
      <returns>
            如果该实例是此类的默认属性，则为 true；否则，为 false。</returns>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.No">
      <summary>指定文本属性并不作为密码使用。此 static（在 Visual Basic 中为 Shared）字段为只读字段。</summary>
    </member>
    <member name="P:System.ComponentModel.PasswordPropertyTextAttribute.Password">
      <summary>获取一个值，该值指示为其定义了 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 的属性是否应作为密码文本显示。</summary>
      <returns>
            如果属性应作为密码文本显示，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Yes">
      <summary>指定将文本属性作为密码使用。此 static（在 Visual Basic 中为 Shared）字段为只读字段。</summary>
    </member>
    <member name="T:System.ComponentModel.ProgressChangedEventArgs">
      <summary>为 <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.ProgressChangedEventArgs.#ctor(System.Int32,System.Object)">
      <summary>初始化 <see cref="T:System.ComponentModel.ProgressChangedEventArgs" /> 类的新实例。</summary>
      <param name="progressPercentage">已完成的异步任务的百分比。</param>
      <param name="userState">唯一的用户状态。</param>
    </member>
    <member name="P:System.ComponentModel.ProgressChangedEventArgs.ProgressPercentage">
      <summary>获取异步任务的进度百分比。</summary>
      <returns>指示异步任务进度的百分比值。</returns>
    </member>
    <member name="P:System.ComponentModel.ProgressChangedEventArgs.UserState">
      <summary>获取唯一的用户状态。</summary>
      <returns>指示用户状态的唯一 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ProgressChangedEventHandler">
      <summary>表示将处理 <see cref="T:System.ComponentModel.BackgroundWorker" /> 类的 <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> 事件的方法。无法继承此类。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.ProgressChangedEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventArgs">
      <summary>为 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventArgs.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> 类的新实例。</summary>
      <param name="propertyName">已更改的属性名。 </param>
    </member>
    <member name="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName">
      <summary>获取已更改的属性名。</summary>
      <returns>已更改的属性名。</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventHandler">
      <summary>表示将处理 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 事件的方法，该事件在更改组件上的属性时引发。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptor">
      <summary>提供类上的属性的抽象化。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>使用指定 <see cref="T:System.ComponentModel.MemberDescriptor" /> 中的名称和属性初始化 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 类的新实例。</summary>
      <param name="descr">一个 <see cref="T:System.ComponentModel.MemberDescriptor" />，它包含该属性 (Property) 的名称及其属性 (Attribute)。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>使用指定 <see cref="T:System.ComponentModel.MemberDescriptor" /> 中的名称以及同时出现在 <see cref="T:System.ComponentModel.MemberDescriptor" /> 和 <see cref="T:System.Attribute" /> 数组中的属性初始化 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 类的新实例。</summary>
      <param name="descr">一个 <see cref="T:System.ComponentModel.MemberDescriptor" />，包含成员的名称及其属性。</param>
      <param name="attrs">一个 <see cref="T:System.Attribute" /> 数组，包含要和该属性 (Property) 关联的属性 (Attribute)。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>使用指定的名称和属性初始化 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 类的新实例。</summary>
      <param name="name">属性的名称。</param>
      <param name="attrs">包含属性 (Property) 属性 (Attribute) 的类型 <see cref="T:System.Attribute" /> 的数组。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)">
      <summary>使其他对象在此属性更改时能得到通知。</summary>
      <param name="component">为其添加处理程序的组件。</param>
      <param name="handler">要作为侦听器添加的委托。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 或 <paramref name="handler" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)">
      <summary>当在派生类中被重写时，返回重置对象时是否更改其值。</summary>
      <returns>
            如果重置组件更改其值，则为 true；否则为 false。</returns>
      <param name="component">要测试重置功能的组件。</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.ComponentType">
      <summary>当在派生类中被重写时，获取该属性绑定到的组件的类型。</summary>
      <returns>一个 <see cref="T:System.Type" />，表示该属性绑定到的组件的类型。当调用 <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> 或 <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" /> 方法时，指定的对象可以是此类型的实例。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.Converter">
      <summary>获取该属性的类型转换器。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.TypeConverter" />，用于转换该属性的 <see cref="T:System.Type" />。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CreateInstance(System.Type)">
      <summary>创建指定类型的实例。</summary>
      <returns>该类型的新实例。</returns>
      <param name="type">一个 <see cref="T:System.Type" />，表示要创建的类型。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.Equals(System.Object)">
      <summary>将此对象与另一个对象进行比较，看看它们是否相等。</summary>
      <returns>
            如果值相等，则为 true；否则为 false。</returns>
      <param name="obj">与此 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 进行比较的对象。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.FillAttributes(System.Collections.IList)">
      <summary>将 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的属性添加到父类中的指定属性列表中。</summary>
      <param name="attributeList">一个列出父类中属性的 <see cref="T:System.Collections.IList" />。最初，它是空的。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties">
      <summary>返回默认的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Attribute[])">
      <summary>使用指定的属性数组作为筛选器返回 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，具有与指定的属性 (Attribute) 匹配的属性 (Property)。</returns>
      <param name="filter">用作筛选器的类型 <see cref="T:System.Attribute" /> 的数组。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object)">
      <summary>返回给定对象的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，具有指定组件的属性。</returns>
      <param name="instance">要获取其属性的组件。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])">
      <summary>使用指定的属性数组作为筛选器返回给定对象的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，具有匹配指定组件的指定属性 (Attribute) 的属性 (Property)。</returns>
      <param name="instance">要获取其属性的组件。</param>
      <param name="filter">用作筛选器的类型 <see cref="T:System.Attribute" /> 的数组。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetEditor(System.Type)">
      <summary>获取指定类型的编辑器。</summary>
      <returns>请求的编辑器类型的实例，或者如果未能找到编辑器，则为 null。</returns>
      <param name="editorBaseType">编辑器的基类型，用于区分属性所支持的多个编辑器。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetHashCode">
      <summary>返回该对象的哈希代码。</summary>
      <returns>此对象的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary>此方法返回应在成员调用期间使用的对象。</summary>
      <returns>应在成员调用期间使用的 <see cref="T:System.Object" />。</returns>
      <param name="type">调用目标的 <see cref="T:System.Type" />。</param>
      <param name="instance">潜在的调用目标。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetTypeFromName(System.String)">
      <summary>返回使用其名称的类型。</summary>
      <returns>与给定类型名称匹配的 <see cref="T:System.Type" />，或者如果未能找到匹配，则为 null。</returns>
      <param name="typeName">要检索的类型的程序集限定名称。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)">
      <summary>当在派生类中被重写时，获取组件上的属性的当前值。</summary>
      <returns>给定组件的属性的值。</returns>
      <param name="component">具有为其检索值的属性的组件。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(System.Object)">
      <summary>检索特定组件的 ValueChanged 事件处理程序的当前集合。</summary>
      <returns>一个组合多路广播事件处理程序，如果当前没有为 <paramref name="component" /> 分配的事件处理程序，则为 null。</returns>
      <param name="component">要为其检索事件处理程序的组件。</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsLocalizable">
      <summary>获取指示是否应该本地化该属性的值，如 <see cref="T:System.ComponentModel.LocalizableAttribute" /> 中所指定的值。</summary>
      <returns>
            如果在标记成员时将 <see cref="T:System.ComponentModel.LocalizableAttribute" /> 设置为 true，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsReadOnly">
      <summary>当在派生类中被重写时，获取指示该属性是否为只读的值。</summary>
      <returns>
            如果该属性为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.OnValueChanged(System.Object,System.EventArgs)">
      <summary>引发已实现的 ValueChanged 事件。</summary>
      <param name="component">引发事件的对象。</param>
      <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.PropertyType">
      <summary>当在派生类中被重写时，获取该属性的类型。</summary>
      <returns>一个表示属性类型的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)">
      <summary>使其他对象在此属性更改时能得到通知。</summary>
      <param name="component">要移除其处理程序的组件。</param>
      <param name="handler">要作为侦听器移除的委托。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 或 <paramref name="handler" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)">
      <summary>当在派生类中被重写时，将组件的此属性的值重置为默认值。</summary>
      <param name="component">具有要重置为默认值的属性值的组件。</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SerializationVisibility">
      <summary>获取指示是否应该序列化该属性的值，如 <see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" /> 中所指定的值。</summary>
      <returns>
        <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 枚举值之一，指定是否应该序列化该属性。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>当在派生类中被重写时，将组件的值设置为一个不同的值。</summary>
      <param name="component">具有要进行设置的属性值的组件。</param>
      <param name="value">新值。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>当在派生类中被重写时，确定一个值，该值指示是否需要永久保存此属性的值。</summary>
      <returns>
            如果属性应该被永久保存，则为 true；否则为 false。</returns>
      <param name="component">具有要检查其持久性的属性的组件。</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SupportsChangeEvents">
      <summary>获取一个值，该值指示此属性的值更改通知是否源自属性说明符的外部。</summary>
      <returns>
            如果值更改通知可能源自属性说明符的外部，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptorCollection">
      <summary>表示 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象的集合。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[])">
      <summary>初始化 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 类的新实例。</summary>
      <param name="properties">提供该集合属性的类型 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的数组。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[],System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 类的新实例，该类可以是只读类。</summary>
      <param name="properties">提供该集合属性的类型 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的数组。</param>
      <param name="readOnly">如果为 true，则指定该集合无法修改。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Add(System.ComponentModel.PropertyDescriptor)">
      <summary>将指定的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 添加到集合。</summary>
      <returns>要添加到集合的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的索引。</returns>
      <param name="value">要添加到集合中的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <exception cref="T:System.NotSupportedException">集合为只读。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Clear">
      <summary>从集合中移除所有 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象。</summary>
      <exception cref="T:System.NotSupportedException">集合为只读。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Contains(System.ComponentModel.PropertyDescriptor)">
      <summary>返回集合是否包含给定的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <returns>
            如果该集合包含给定的 <see cref="T:System.ComponentModel.PropertyDescriptor" />，则为 true；否则为 false。</returns>
      <param name="value">要在集合中查找的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.CopyTo(System.Array,System.Int32)">
      <summary>从指定的索引号开始，将整个集合复制到数组。</summary>
      <param name="array">要将集合元素复制到的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象的数组。</param>
      <param name="index">
        <paramref name="array" /> 参数的索引，复制从此位置开始。</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Count">
      <summary>获取集合中属性说明符的数目。</summary>
      <returns>集合中属性说明符的数目。</returns>
    </member>
    <member name="F:System.ComponentModel.PropertyDescriptorCollection.Empty">
      <summary>指定一个可以使用的空集合，而不是创建一个不带任何项的新集合。此 static 字段是只读的。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Find(System.String,System.Boolean)">
      <summary>返回具有指定名称的 <see cref="T:System.ComponentModel.PropertyDescriptor" />，使用布尔值指示是否忽略大小写。</summary>
      <returns>具有指定名称的 <see cref="T:System.ComponentModel.PropertyDescriptor" />，或者如果该属性不存在，则为 null。</returns>
      <param name="name">要从集合中返回的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的名称。</param>
      <param name="ignoreCase">
                如果要忽略属性名称的大小写，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.GetEnumerator">
      <summary>返回该类的枚举数。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 类型的枚举数。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.IndexOf(System.ComponentModel.PropertyDescriptor)">
      <summary>返回给定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的索引。</summary>
      <returns>给定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的索引。</returns>
      <param name="value">要返回其索引的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Insert(System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary>将 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 添加到集合中指定的索引号位置。</summary>
      <param name="index">向集合中其所在位置添加 <paramref name="value" /> 参数的索引。</param>
      <param name="value">要添加到集合中的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <exception cref="T:System.NotSupportedException">集合为只读。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary>使用指定的 <see cref="T:System.Collections.IComparer" /> 对此集合中的成员排序。</summary>
      <param name="sorter">用来将此集合中的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象排序的比较器。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String[])">
      <summary>对此集合中的成员排序。首先应用指定的顺序，然后应用此集合的默认排序，后者通常为字母顺序。</summary>
      <param name="names">字符串的数组，描述此集合中的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象的排序顺序。</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)">
      <summary>获取或设置指定索引处的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <returns>具有指定索引号的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
      <param name="index">要获取或设置的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的从零开始的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 参数不是 <see cref="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)" /> 的有效索引。</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.String)">
      <summary>获取或设置具有指定名称的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <returns>具有指定名称的 <see cref="T:System.ComponentModel.PropertyDescriptor" />，或者如果该属性不存在，则为 null。</returns>
      <param name="name">要从集合中获取的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的名称。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Remove(System.ComponentModel.PropertyDescriptor)">
      <summary>从集合中移除指定的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <param name="value">要从该集合中移除的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <exception cref="T:System.NotSupportedException">集合为只读。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.RemoveAt(System.Int32)">
      <summary>从集合中移除指定索引位置的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <param name="index">要从集合中移除的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的索引。</param>
      <exception cref="T:System.NotSupportedException">集合为只读。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort">
      <summary>使用该集合的默认排序（通常为字母顺序）对集合中的成员进行排序。</summary>
      <returns>新的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，它包含排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary>使用指定的 <see cref="T:System.Collections.IComparer" /> 对此集合中的成员排序。</summary>
      <returns>新的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，它包含排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象。</returns>
      <param name="comparer">用来将此集合中的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象排序的比较器。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[])">
      <summary>对此集合中的成员排序。首先应用指定的顺序，然后应用此集合的默认排序，后者通常为字母顺序。</summary>
      <returns>新的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，它包含排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象。</returns>
      <param name="names">字符串的数组，描述此集合中的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象的排序顺序。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary>对此集合中的成员排序。首先应用指定的顺序，然后使用指定的 <see cref="T:System.Collections.IComparer" /> 进行排序。</summary>
      <returns>新的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，它包含排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象。</returns>
      <param name="names">字符串的数组，描述此集合中的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象的排序顺序。</param>
      <param name="comparer">用来将此集合中的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象排序的比较器。</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#Count">
      <summary>获取集合中包含的元素数。</summary>
      <returns>集合中包含的元素数。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示对集合的访问是否为同步的（线程安全）。</summary>
      <returns>
            如果对该集合的访问是同步的（线程安全），则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对集合的访问的对象。</summary>
      <returns>可用于同步集合访问的对象。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>在 <see cref="T:System.Collections.IDictionary" /> 中添加一个具有所提供的键和值的元素。</summary>
      <param name="key">用作要添加的元素的键的 <see cref="T:System.Object" />。</param>
      <param name="value">用作要添加的元素的值的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">集合为只读。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Clear">
      <summary>从 <see cref="T:System.Collections.IDictionary" /> 中移除所有元素。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Contains(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IDictionary" /> 是否包含具有指定键的元素。</summary>
      <returns>
            如果 <see cref="T:System.Collections.IDictionary" /> 包含带有该键的元素，则为 true；否则为 false。</returns>
      <param name="key">要在 <see cref="T:System.Collections.IDictionary" /> 中定位的键。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#GetEnumerator">
      <summary>返回该类的枚举数。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 类型的枚举数。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 是否具有固定大小。</summary>
      <returns>
            如果 <see cref="T:System.Collections.IDictionary" /> 具有固定大小，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 是否为只读。</summary>
      <returns>
            如果 <see cref="T:System.Collections.IDictionary" /> 为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Item(System.Object)">
      <summary>获取或设置具有指定键的元素。</summary>
      <returns>带有指定键的元素。</returns>
      <param name="key">要获取或设置的元素的键。</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Keys">
      <summary>获取包含 <see cref="T:System.Collections.IDictionary" /> 的键的 <see cref="T:System.Collections.ICollection" />。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.IDictionary" /> 的键。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.IDictionary" /> 中移除带有指定键的元素。</summary>
      <param name="key">要移除的元素的键。</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Values">
      <summary>获取包含 <see cref="T:System.Collections.IDictionary" /> 中的值的 <see cref="T:System.Collections.ICollection" />。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.IDictionary" /> 中的值。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回 <see cref="T:System.Collections.IDictionary" /> 的 <see cref="T:System.Collections.IEnumerator" />。</summary>
      <returns>用于 <see cref="T:System.Collections.IDictionary" /> 的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary>将某项添加到 <see cref="T:System.Collections.IList" /> 中。</summary>
      <returns>新元素的插入位置。</returns>
      <param name="value">要添加到集合的项。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Clear">
      <summary>从集合中移除所有项。</summary>
      <exception cref="T:System.NotSupportedException">集合为只读。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary>确定集合中是否包含特定的值。</summary>
      <returns>
            如果在集合中找到该项，为 true；否则为 false。</returns>
      <param name="value">要在集合中定位的项。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>确定集合中指定项的索引。</summary>
      <returns>如果在列表中找到了，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
      <param name="value">要在集合中定位的项。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>将一项插入集合中的指定索引处。</summary>
      <param name="index">从零开始的索引，应在该位置插入 <paramref name="value" />。</param>
      <param name="value">要插入到集合中的项。</param>
      <exception cref="T:System.NotSupportedException">集合为只读。</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示集合是否具有固定大小。</summary>
      <returns>
            如果该集合具有固定大小，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示集合是否为只读。</summary>
      <returns>
            如果该集合为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置集合中指定索引处的项。</summary>
      <returns>指定索引处的元素。</returns>
      <param name="index">要获取或设置的项的从零开始的索引。</param>
      <exception cref="T:System.NotSupportedException">集合为只读。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小于 0。- 或 -<paramref name="index" /> 等于或大于 <see cref="P:System.ComponentModel.EventDescriptorCollection.Count" />。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary>从集合中移除指定的值的第一个匹配项。</summary>
      <param name="value">要从集合中移除的项。</param>
      <exception cref="T:System.NotSupportedException">集合为只读。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>移除指定索引处的项。</summary>
      <param name="index">从零开始的索引（属于要移除的项）。</param>
      <exception cref="T:System.NotSupportedException">集合为只读。</exception>
    </member>
    <member name="T:System.ComponentModel.PropertyTabAttribute">
      <summary>标识要为指定的类显示的属性选项卡。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String)">
      <summary>使用指定的选项卡类名称初始化 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 类的新实例。</summary>
      <param name="tabClassName">要创建的选项卡类型的程序集限定名。有关这种格式约定的示例，请参见 <see cref="P:System.Type.AssemblyQualifiedName" />。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String,System.ComponentModel.PropertyTabScope)">
      <summary>使用指定的选项卡类名和选项卡范围初始化 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 类的新实例。</summary>
      <param name="tabClassName">要创建的选项卡类型的程序集限定名。有关这种格式约定的示例，请参见 <see cref="P:System.Type.AssemblyQualifiedName" />。</param>
      <param name="tabScope">一个 <see cref="T:System.ComponentModel.PropertyTabScope" />，指示此选项卡的范围。如果范围是 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />，则只为具有相应 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 的组件显示它。如果它是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" />，则将为该文档的所有组件显示它。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tabScope" /> 不是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> 或 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type)">
      <summary>使用指定的选项卡类型初始化 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 类的新实例。</summary>
      <param name="tabClass">要创建的选项卡的类型。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type,System.ComponentModel.PropertyTabScope)">
      <summary>使用指定的选项卡类型和选项卡范围初始化 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 类的新实例。</summary>
      <param name="tabClass">要创建的选项卡的类型。</param>
      <param name="tabScope">一个 <see cref="T:System.ComponentModel.PropertyTabScope" />，指示此选项卡的范围。如果范围是 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />，则只为具有相应 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 的组件显示它。如果它是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" />，则将为该文档的所有组件显示它。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tabScope" /> 不是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> 或 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.ComponentModel.PropertyTabAttribute)">
      <summary>返回一个值，该值指示此实例是否与指定的属性相等。</summary>
      <returns>
            如果 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 实例相等，则为 true；否则，为 false。</returns>
      <param name="other">要与此实例进行比较的 <see cref="T:System.ComponentModel.PropertyTabAttribute" />，或 null。</param>
      <exception cref="T:System.TypeLoadException">找不到 <paramref name="other" /> 参数的 <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> 属性指定的类型。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <returns>
            如果 <paramref name="other" /> 引用相同的 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 实例，则为 true；否则，为 false。</returns>
      <param name="other">要与此实例比较的对象，或 null。</param>
      <exception cref="T:System.TypeLoadException">找不到 <paramref name=" other" /> 参数的 <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> 属性指定的类型。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.GetHashCode">
      <summary>获取此对象的哈希代码。</summary>
      <returns>该属性所属对象的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.String[],System.ComponentModel.PropertyTabScope[])">
      <summary>使用指定的选项卡类名称和选项卡范围数组初始化该属性。</summary>
      <param name="tabClassNames">类型的完全限定类型名的数组，这些类型是为“属性”窗口上的选项卡创建的。</param>
      <param name="tabScopes">每个选项卡的范围。如果范围是 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />，则只为具有相应 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 的组件显示它。如果它是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" />，则将为该文档的所有组件显示它。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tabScopes" /> 中的一个或多个值不是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> 或 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />。- 或 -<paramref name="tabClassNames" /> 的长度和 <paramref name="tabScopes" /> 数组的长度不匹配。- 或 -<paramref name="tabClassNames" /> 或 <paramref name="tabScopes" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.Type[],System.ComponentModel.PropertyTabScope[])">
      <summary>使用指定的选项卡类名称和选项卡范围数组初始化该属性。</summary>
      <param name="tabClasses">要创建的选项卡的类型。</param>
      <param name="tabScopes">每个选项卡的范围。如果范围是 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />，则只为具有相应 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 的组件显示它。如果它是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" />，则将为该文档的所有组件显示它。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tabScopes" /> 中的一个或多个值不是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> 或 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />。- 或 -<paramref name="tabClassNames" /> 的长度和 <paramref name="tabScopes" /> 数组的长度不匹配。- 或 -<paramref name="tabClassNames" /> 或 <paramref name="tabScopes" /> 为 null。</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClasses">
      <summary>获取此属性使用的选项卡的类型。</summary>
      <returns>指示此属性使用的选项卡类型的类型数组。</returns>
      <exception cref="T:System.TypeLoadException">找不到 <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> 属性指定的类型。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClassNames">
      <summary>获取此属性使用的选项卡类的名称。</summary>
      <returns>此属性使用的选项卡类的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabScopes">
      <summary>获取该 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 的每个选项卡的选项卡范围数组。</summary>
      <returns>指示选项卡范围的 <see cref="T:System.ComponentModel.PropertyTabScope" /> 对象的数组。</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyTabScope">
      <summary>定义指示“属性”窗口中选项卡的持续范围的标识符。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Static">
      <summary>此选项卡被添加到“属性”窗口中，并且不能被移除。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Global">
      <summary>此选项卡被添加到“属性”窗口中，并且只能由父组件将其显式移除。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Document">
      <summary>此选项卡是当前文档专用的。此选项卡被添加到“属性”窗口中，在当前选定文档更改时，此选项卡被移除。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Component">
      <summary>此选项卡是当前组件专用的。此选项卡只被添加到当前组件的“属性”窗口中，当不再选定该组件时，此选项卡被移除。</summary>
    </member>
    <member name="T:System.ComponentModel.ProvidePropertyAttribute">
      <summary>指定 <see cref="T:System.ComponentModel.IExtenderProvider" /> 的实施者提供给其他组件的属性的名称。无法继承此类</summary>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.String)">
      <summary>用该属性的名称和它的接收器类型初始化 <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> 类的新实例。</summary>
      <param name="propertyName">扩展到指定类型对象的属性名称。</param>
      <param name="receiverTypeName">此属性可以扩展的数据类型的名称。</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.Type)">
      <summary>用该属性的名称和它的 <see cref="T:System.Type" /> 初始化 <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> 类的新实例。</summary>
      <param name="propertyName">扩展到指定类型对象的属性名称。</param>
      <param name="receiverType">可以接收此属性的对象的数据类型的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前的 <see cref="T:System.ComponentModel.ProvidePropertyAttribute" />。</summary>
      <returns>
            如果给定对象的值等于当前对象的值，则为 true；否则为 false。</returns>
      <param name="obj">要进行值的相等性测试的对象。</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.PropertyName">
      <summary>获取该类提供的属性的名称。</summary>
      <returns>该类提供的属性的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.ReceiverTypeName">
      <summary>获取此属性可以扩展的数据类型的名称。</summary>
      <returns>此属性可以扩展的数据类型的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.TypeId">
      <summary>获取此属性的唯一标识符。</summary>
      <returns>表示此属性的唯一标识符的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ReadOnlyAttribute">
      <summary>指定该属性 (Attribute) 所绑定到的属性 (Property) 是只读属性 (Property) 还是读/写属性 (Property)。无法继承此类</summary>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.ReadOnlyAttribute" /> 类的新实例。</summary>
      <param name="isReadOnly">
                如果该属性 (Attribute) 所绑定到的属性 (Property) 为只读属性 (Property)，则为 true；如果该属性 (Property) 为读/写属性 (Property)，则为 false。</param>
    </member>
    <member name="F:System.ComponentModel.ReadOnlyAttribute.Default">
      <summary>指定 <see cref="T:System.ComponentModel.ReadOnlyAttribute" /> 的默认值，为 <see cref="F:System.ComponentModel.ReadOnlyAttribute.No" />（即此属性 (Attribute) 绑定到的属性 (Property) 是可读/写的）。此 static 字段是只读的。</summary>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.Equals(System.Object)">
      <summary>指示此实例与指定对象是否相等。</summary>
      <returns>
            如果 <paramref name="value" /> 等于此实例，则为 true；否则为 false。</returns>
      <param name="value">要比较的另一个对象。</param>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.ReadOnlyAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute">
      <summary>确定此属性是否为默认属性。</summary>
      <returns>
            如果此属性 (Attribute) 是此属性 (Attribute) 类的默认值，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.ReadOnlyAttribute.IsReadOnly">
      <summary>获取一个值，该值指示该属性 (Attribute) 绑定到的属性 (Property) 是否为只读属性 (Property)。</summary>
      <returns>
            如果该属性 (Attribute) 所绑定到的属性 (Property) 为只读属性 (Property)，则为 true；如果该属性 (Property) 为读/写属性 (Property)，则为 false。</returns>
    </member>
    <member name="F:System.ComponentModel.ReadOnlyAttribute.No">
      <summary>指定该属性 (Attribute) 绑定到的属性 (Property) 为读/写属性 (Property)，可以修改。此 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.ReadOnlyAttribute.Yes">
      <summary>指定此属性 (Attribute) 绑定到的属性 (Property) 为只读，并且不能在服务器资源管理器中修改。此 static 字段是只读的。</summary>
    </member>
    <member name="T:System.ComponentModel.RecommendedAsConfigurableAttribute">
      <summary>指定该属性 (Property) 可以用作应用程序设置。</summary>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" /> 类的新实例。</summary>
      <param name="recommendedAsConfigurable">
                如果该属性 (Attribute) 所绑定到的属性 (Property) 可以作为应用程序设置使用，则为 true；否则为 false。</param>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Default">
      <summary>指定 <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" /> 的默认值，即 <see cref="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No" />。此 static 字段是只读的。</summary>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.Equals(System.Object)">
      <summary>指示此实例与指定对象是否相等。</summary>
      <returns>
            如果 <paramref name="obj" /> 等于此实例，则为 true；否则为 false。</returns>
      <param name="obj">要比较的另一个对象。</param>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.IsDefaultAttribute">
      <summary>指示此实例的值是否为该类的默认值。</summary>
      <returns>
            如果该实例是此类的默认属性 (Attribute)，则为 true；否则，为 false。</returns>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No">
      <summary>指定属性 (Property) 不能用作应用程序设置。此 static 字段是只读的。</summary>
    </member>
    <member name="P:System.ComponentModel.RecommendedAsConfigurableAttribute.RecommendedAsConfigurable">
      <summary>获取一个值，该值指示该属性 (Attribute) 绑定到的属性 (Property) 是否可用作应用程序设置。</summary>
      <returns>
            如果该属性 (Attribute) 所绑定到的属性 (Property) 可以作为应用程序设置使用，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Yes">
      <summary>指定属性 (Property) 能用作应用程序设置。此 static 字段是只读的。</summary>
    </member>
    <member name="T:System.ComponentModel.ReferenceConverter">
      <summary>提供将对象引用与其他表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.ComponentModel.ReferenceConverter" /> 类的新实例。</summary>
      <param name="type">
        <see cref="T:System.Type" />，它表示与此引用转换器关联的类型。</param>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器是否可使用指定上下文将给定源类型的对象转换为引用对象。</summary>
      <returns>
            如果此对象可以执行转换，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="sourceType">
        <see cref="T:System.Type" />，表示要从中进行转换的类型。</param>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将给定对象转换为引用类型。</summary>
      <returns>表示转换的 <paramref name="value" /> 的 <see cref="T:System.Object" />。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />，它指定用于表示该字体的区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>使用指定上下文和参数将给定值对象转换为引用类型。</summary>
      <returns>被转换的对象。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />，它指定用于表示该字体的区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">对象要转换为的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取引用数据类型的标准值的集合。</summary>
      <returns>包含标准有效值集的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />；如果数据类型不支持标准值集，则为 null。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示从 <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 返回的标准值的列表是否为独占列表。</summary>
      <returns>
            返回 true，因为从 <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 返回的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 是可能的值的穷举列表。此方法从不返回 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示此对象是否支持可从列表中选取的标准值集。</summary>
      <returns>
            返回 true，因为可调用 <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 来查找对象支持的一组公共值。此方法从不返回 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.IsValueAllowed(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>返回一个值，该值指示某个特定值是否可以添加到标准值集合中。</summary>
      <returns>
            如果该值是允许值并可以添加到标准值集合中，则为 true；如果该值不能添加到标准值集合中，则为 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供附加上下文。</param>
      <param name="value">要检查的值。</param>
    </member>
    <member name="T:System.ComponentModel.RefreshEventArgs">
      <summary>为 <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Object)">
      <summary>用已更改的组件初始化 <see cref="T:System.ComponentModel.RefreshEventArgs" /> 类的新实例。</summary>
      <param name="componentChanged">已更改的组件。</param>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Type)">
      <summary>用已更改的组件类型初始化 <see cref="T:System.ComponentModel.RefreshEventArgs" /> 类的新实例。</summary>
      <param name="typeChanged">已更改的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.ComponentChanged">
      <summary>获取已更改属性、事件或扩展程序的组件。</summary>
      <returns>已更改其属性、事件或扩展程序的组件；如果同一类型的所有组件都已更改，则为 null。</returns>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.TypeChanged">
      <summary>获取已更改属性或事件的 <see cref="T:System.Type" />。</summary>
      <returns>已更改属性或事件的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.ComponentModel.RefreshEventHandler">
      <summary>表示处理当 <see cref="T:System.Type" /> 或组件在设计时被更改时引发的 <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" /> 事件的方法。</summary>
      <param name="e">包含被更改的组件或 <see cref="T:System.Type" /> 的 <see cref="T:System.ComponentModel.RefreshEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.RefreshProperties">
      <summary>定义指示“属性”窗口刷新类型的标识符。</summary>
    </member>
    <member name="F:System.ComponentModel.RefreshProperties.None">
      <summary>不需要进行刷新。</summary>
    </member>
    <member name="F:System.ComponentModel.RefreshProperties.All">
      <summary>应该重新查询该属性并刷新视图。</summary>
    </member>
    <member name="F:System.ComponentModel.RefreshProperties.Repaint">
      <summary>应该刷新该视图。</summary>
    </member>
    <member name="T:System.ComponentModel.RefreshPropertiesAttribute">
      <summary>指示在关联属性值更改时应刷新属性网格。无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.RefreshPropertiesAttribute.#ctor(System.ComponentModel.RefreshProperties)">
      <summary>初始化 <see cref="T:System.ComponentModel.RefreshPropertiesAttribute" /> 类的新实例。</summary>
      <param name="refresh">一个 <see cref="T:System.ComponentModel.RefreshProperties" /> 值，它指示刷新的性质。</param>
    </member>
    <member name="F:System.ComponentModel.RefreshPropertiesAttribute.All">
      <summary>指示在属性值更改时重新查询并刷新所有属性。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.RefreshPropertiesAttribute.Default">
      <summary>指示在该属性值更改时不刷新其他任何属性。此字段为只读。</summary>
    </member>
    <member name="M:System.ComponentModel.RefreshPropertiesAttribute.Equals(System.Object)">
      <summary>重写对象的 <see cref="Overload:System.Object.Equals" /> 方法。</summary>
      <returns>
            如果指定的对象相同，则为 true；否则为 false。</returns>
      <param name="value">要测试相等的对象。</param>
    </member>
    <member name="M:System.ComponentModel.RefreshPropertiesAttribute.GetHashCode">
      <summary>返回该对象的哈希代码。</summary>
      <returns>该属性所属的对象的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.RefreshPropertiesAttribute.IsDefaultAttribute">
      <summary>获取一个值，该值指示该属性的当前值是否为该属性的默认值。</summary>
      <returns>
            如果该属性的当前值是默认值，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.RefreshPropertiesAttribute.RefreshProperties">
      <summary>获取成员的刷新属性。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.RefreshProperties" />，指示成员的当前刷新属性。</returns>
    </member>
    <member name="F:System.ComponentModel.RefreshPropertiesAttribute.Repaint">
      <summary>指示在属性值更改时重新绘制所有属性。此字段为只读。</summary>
    </member>
    <member name="T:System.ComponentModel.RunInstallerAttribute">
      <summary>指定在安装程序集时是否应调用 Visual Studio 自定义操作安装程序或安装程序工具 (Installutil.exe)。</summary>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.RunInstallerAttribute" /> 类的新实例。</summary>
      <param name="runInstaller">
                如果在程序集安装过程中应调用某安装程序，则为 true；否则为 false。</param>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Default">
      <summary>指定默认可见性，即 <see cref="F:System.ComponentModel.RunInstallerAttribute.No" />。此 static 字段是只读的。</summary>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.Equals(System.Object)">
      <summary>确定指定的 <see cref="T:System.ComponentModel.RunInstallerAttribute" /> 的值是否与当前的 <see cref="T:System.ComponentModel.RunInstallerAttribute" /> 等效。</summary>
      <returns>
            如果指定的 <see cref="T:System.ComponentModel.RunInstallerAttribute" /> 等于当前的 <see cref="T:System.ComponentModel.RunInstallerAttribute" />，则为 true；否则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.GetHashCode">
      <summary>生成当前 <see cref="T:System.ComponentModel.RunInstallerAttribute" /> 的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.RunInstallerAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.IsDefaultAttribute">
      <summary>确定此属性是否为默认属性。</summary>
      <returns>
            如果此属性是此属性类的默认值，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.No">
      <summary>指定在安装程序集时不应调用 Visual Studio 自定义操作安装程序或安装程序工具 (Installutil.exe)。此 static 字段是只读的。</summary>
    </member>
    <member name="P:System.ComponentModel.RunInstallerAttribute.RunInstaller">
      <summary>获取一个值，该值指示在程序集安装期间是否调用某安装程序。</summary>
      <returns>
            如果在程序集安装过程中应调用某安装程序，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Yes">
      <summary>指定在安装程序集时应调用 Visual Studio 自定义操作安装程序或安装程序工具 (Installutil.exe)。此 static 字段是只读的。</summary>
    </member>
    <member name="T:System.ComponentModel.RunWorkerCompletedEventArgs">
      <summary>为 MethodNameCompleted 事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.RunWorkerCompletedEventArgs.#ctor(System.Object,System.Exception,System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs" /> 类的新实例。</summary>
      <param name="result">异步操作的结果。</param>
      <param name="error">在异步操作期间发生的任何错误。</param>
      <param name="cancelled">一个指示异步操作是否已被取消的值。</param>
    </member>
    <member name="P:System.ComponentModel.RunWorkerCompletedEventArgs.Result">
      <summary>获取表示异步操作结果的值。</summary>
      <returns>表示异步操作结果的 <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">
        <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> 不是 null。<see cref="P:System.Exception.InnerException" /> 属性持有对 <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> 的引用。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /> 为 true。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.ComponentModel.RunWorkerCompletedEventArgs.UserState">
      <summary>获取表示用户状态的值。</summary>
      <returns>表示用户状态的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.ComponentModel.RunWorkerCompletedEventHandler">
      <summary>
                    表示将处理 <see cref="T:System.ComponentModel.BackgroundWorker" /> 类的 <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /> 事件的方法。
                </summary>
      <param name="sender">
                    事件源。
                </param>
      <param name="e">
                    包含事件数据的 <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs" />。
                </param>
    </member>
    <member name="T:System.ComponentModel.SByteConverter">
      <summary>提供将 8 位无符号整数对象与字符串相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.SByteConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.SByteConverter" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ComponentModel.SettingsBindableAttribute">
      <summary>指定何时可将组件属性绑定到应用程序设置。</summary>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.SettingsBindableAttribute" /> 类的新实例。 </summary>
      <param name="bindable">
                若要指定适合将属性绑定到设置，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.ComponentModel.SettingsBindableAttribute.Bindable">
      <summary>获取一个值，该值指示是否适合将属性绑定到设置。 </summary>
      <returns>
            如果适合将属性绑定到设置，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.Equals(System.Object)">
      <summary>确定两个 <see cref="T:System.ComponentModel.SettingsBindableAttribute" /> 对象是否相等。</summary>
      <returns>
            如果 <paramref name="obj" /> 等于此实例的类型和值，则为 true；否则为 false。</returns>
      <param name="obj">要与之比较的值。</param>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.GetHashCode">
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.No">
      <summary>指定不适合将属性绑定到设置。</summary>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.Yes">
      <summary>指定适合将属性绑定到设置。</summary>
    </member>
    <member name="T:System.ComponentModel.SingleConverter">
      <summary>提供将单精度浮点数字对象与各种其他表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.SingleConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.SingleConverter" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ComponentModel.StringConverter">
      <summary>提供在字符串对象与其他表示形式之间实现相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.StringConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器是否可以使用指定的上下文将给定源类型中的对象转换为字符串。</summary>
      <returns>
            如果该转换器能够执行转换，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="sourceType">
        <see cref="T:System.Type" />，表示要从中进行转换的类型。</param>
    </member>
    <member name="M:System.ComponentModel.StringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将指定的值对象转换为 <see cref="T:System.String" /> 对象。</summary>
      <returns>表示转换的 value 的 <see cref="T:System.Object" />。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="culture">要使用的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">转换未能执行。</exception>
    </member>
    <member name="T:System.ComponentModel.SyntaxCheck">
      <summary>提供方法来验证计算机名称和路径是否符合特定语法。无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckMachineName(System.String)">
      <summary>检查计算机名称的语法以确认它不包含“\”。</summary>
      <returns>
            如果 <paramref name="value" /> 与正确的计算机名称格式匹配，则为 true；否则为 false。</returns>
      <param name="value">一个字符串，包含要检查的计算机名称。</param>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckPath(System.String)">
      <summary>检查路径的语法以查看它是否以“\\”开头。</summary>
      <returns>
            如果 <paramref name="value" /> 与正确的路径格式匹配，则为 true；否则为 false。</returns>
      <param name="value">一个字符串，包含要检查的路径。</param>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckRootedPath(System.String)">
      <summary>检查路径的语法以查看它是否以“\”或驱动器号“C:”开头。</summary>
      <returns>
            如果 <paramref name="value" /> 与正确的路径格式匹配，则为 true；否则为 false。</returns>
      <param name="value">一个字符串，包含要检查的路径。</param>
    </member>
    <member name="T:System.ComponentModel.TimeSpanConverter">
      <summary>提供将 <see cref="T:System.TimeSpan" /> 对象与其他表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.TimeSpanConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器是否可使用指定上下文将给定源类型的对象转换为 <see cref="T:System.TimeSpan" />。</summary>
      <returns>
            如果该转换器能够执行转换，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="sourceType">
        <see cref="T:System.Type" />，表示要从中进行转换的类型。</param>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器能否使用上下文将对象转换为给定的目标类型。</summary>
      <returns>
            如果该转换器能够执行转换，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="destinationType">表示要转换到的类型的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是目标类型的有效值。</exception>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将给定对象转换为 <see cref="T:System.TimeSpan" />。</summary>
      <returns>表示转换的 value 的 <see cref="T:System.Object" />。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="culture">一个可选的 <see cref="T:System.Globalization.CultureInfo" />。如果未提供区域性设置，则使用当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是目标类型的有效值。</exception>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将给定对象转换为其他类型。</summary>
      <returns>被转换的对象。</returns>
      <param name="context">格式化程序上下文。</param>
      <param name="culture">
        <paramref name="value" /> 将要转换到的区域性。</param>
      <param name="value">要转换的对象。</param>
      <param name="destinationType">对象要转换为的类型。</param>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemAttribute">
      <summary>表示工具箱项的属性。</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 类的新实例，并指定是否使用默认初始化值。</summary>
      <param name="defaultType">
                如果为 true，则创建默认类型的工具箱项属性；如果为 false，则不为该属性关联默认工具箱项支持。</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.String)">
      <summary>使用指定的类型名称初始化 <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 类的新实例。</summary>
      <param name="toolboxItemTypeName">工具箱项的类型名称和包含该类型的程序集的名称。</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Type)">
      <summary>使用工具箱项的指定类型初始化 <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 类的新实例。</summary>
      <param name="toolboxItemType">工具箱项的类型。</param>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.Default">
      <summary>初始化 <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 类的新实例并将类型设置为默认值 <see cref="T:System.Drawing.Design.ToolboxItem" />。此字段为只读。</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.Equals(System.Object)">
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.GetHashCode"></member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.IsDefaultAttribute">
      <summary>获取一个值，该值指示该属性的当前值是否为该属性的默认值。</summary>
      <returns>
            如果该属性的当前值是默认值，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.None">
      <summary>初始化 <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 类的新实例并将类型设置为 null。此字段为只读。</summary>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemType">
      <summary>获取或设置工具箱项的类型。</summary>
      <returns>工具箱项的类型。</returns>
      <exception cref="T:System.ArgumentException">找不到此类型。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemTypeName">
      <summary>获取或设置当前 <see cref="T:System.Drawing.Design.ToolboxItem" /> 的类型名称。</summary>
      <returns>当前工具箱项的完全限定类型名称。</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterAttribute">
      <summary>为工具箱项指定要使用的筛选器字符串和筛选器类型。</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String)">
      <summary>使用指定的筛选器字符串初始化 <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> 类的新实例。</summary>
      <param name="filterString">工具箱项的筛选器字符串。</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String,System.ComponentModel.ToolboxItemFilterType)">
      <summary>使用指定的筛选器字符串和类型初始化 <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> 类的新实例。</summary>
      <param name="filterString">工具箱项的筛选器字符串。</param>
      <param name="filterType">
        <see cref="T:System.ComponentModel.ToolboxItemFilterType" />，它指示筛选器的类型。</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Equals(System.Object)">
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterString">
      <summary>获取工具箱项的筛选器字符串。</summary>
      <returns>工具箱项的筛选器字符串。</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterType">
      <summary>获取筛选器的类型。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ToolboxItemFilterType" />，它指示筛选器的类型。</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.GetHashCode"></member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Match(System.Object)">
      <summary>指示指定对象是否有匹配的筛选器字符串。</summary>
      <returns>
            如果指定对象有匹配的筛选器字符串，则为 true；否则为 false。</returns>
      <param name="obj">针对其是否有匹配的筛选器字符串来进行测试的对象。</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.ToString"></member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.TypeId">
      <summary>获取属性的类型 ID。</summary>
      <returns>此属性的类型 ID。所有带有相同 <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> 筛选器字符串的对象都返回相同的类型 ID。</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterType">
      <summary>定义用于指示 <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> 使用的筛选器类型的标识符。</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Allow">
      <summary>指示某个工具箱项筛选器字符串是允许的，但不是必需的。</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Custom">
      <summary>指示需要自定义处理来确定是否使用工具箱项筛选器字符串。</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Prevent">
      <summary>指示某个工具箱项筛选器字符串不被允许。</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Require">
      <summary>指示若要启用工具箱项，必须存在工具箱项筛选器字符串。</summary>
    </member>
    <member name="T:System.ComponentModel.TypeConverter">
      <summary>提供一种将值的类型转换为其他类型以及访问标准值和子属性的统一方法。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.TypeConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>返回该转换器是否可以使用指定的上下文将给定类型的对象转换为此转换器的类型。</summary>
      <returns>
            如果该转换器能够执行转换，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="sourceType">一个 <see cref="T:System.Type" />，表示要转换的类型。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
      <summary>返回该转换器是否可以将给定类型的对象转换为此转换器的类型。</summary>
      <returns>
            如果该转换器能够执行转换，则为 true；否则为 false。</returns>
      <param name="sourceType">一个 <see cref="T:System.Type" />，表示要转换的类型。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>返回此转换器是否可以使用指定的上下文将该对象转换为指定的类型。</summary>
      <returns>
            如果该转换器能够执行转换，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="destinationType">一个 <see cref="T:System.Type" />，表示要转换到的类型。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">
      <summary>返回此转换器是否可将该对象转换为指定的类型。</summary>
      <returns>
            如果该转换器能够执行转换，则为 true；否则为 false。</returns>
      <param name="destinationType">一个 <see cref="T:System.Type" />，表示要转换到的类型。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>使用指定的上下文和区域性信息将给定的对象转换为此转换器的类型。</summary>
      <returns>表示转换的 value 的 <see cref="T:System.Object" />。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="culture">用作当前区域性的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">
      <summary>将给定值转换为此转换器的类型。</summary>
      <returns>表示转换的 value 的 <see cref="T:System.Object" />。</returns>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>使用不变区域性和指定上下文将给定字符串转换为此转换器的类型。</summary>
      <returns>一个 <see cref="T:System.Object" />，表示已转换的文本。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="text">要转换的 <see cref="T:System.String" />。</param>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)">
      <summary>使用不变区域性将给定字符串转换为此转换器的类型。</summary>
      <returns>一个 <see cref="T:System.Object" />，表示已转换的文本。</returns>
      <param name="text">要转换的 <see cref="T:System.String" />。</param>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
      <summary>使用指定的上下文和区域性信息将给定的文本转换为对象。</summary>
      <returns>一个 <see cref="T:System.Object" />，表示已转换的文本。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />。如果传递 null，则采用当前区域性。</param>
      <param name="text">要转换的 <see cref="T:System.String" />。</param>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>使用指定的上下文将给定的文本转换为对象。</summary>
      <returns>一个 <see cref="T:System.Object" />，表示已转换的文本。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="text">要转换的 <see cref="T:System.String" />。</param>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
      <summary>将指定文本转换为对象。</summary>
      <returns>一个 <see cref="T:System.Object" />，表示已转换的文本。</returns>
      <param name="text">要转换的对象的文本表示形式。</param>
      <exception cref="T:System.NotSupportedException">该字符串不能转换为适当的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>使用指定的上下文和区域性信息将给定的值对象转换为指定的类型。</summary>
      <returns>表示转换的 value 的 <see cref="T:System.Object" />。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />。如果传递 null，则采用当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">
        <paramref name="value" /> 参数要转换成的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 参数为 null。</exception>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
      <summary>使用参数将给定的值对象转换为指定的类型。</summary>
      <returns>表示转换的 value 的 <see cref="T:System.Object" />。</returns>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">
        <paramref name="value" /> 参数要转换到的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 参数为 null。</exception>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>使用指定的上下文将指定的值转换为区域性不变的字符串表示形式。</summary>
      <returns>
        <see cref="T:System.String" />，表示已转换的值。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)">
      <summary>将指定值转换为区域性不变的字符串表示形式。</summary>
      <returns>
        <see cref="T:System.String" />，表示已转换的值。</returns>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>使用指定的上下文和区域性信息将给定的值转换为字符串表示形式。</summary>
      <returns>表示转换的 value 的 <see cref="T:System.Object" />。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />。如果传递 null，则采用当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>使用给定的上下文将给定的值转换为字符串表示形式。</summary>
      <returns>表示转换的 value 的 <see cref="T:System.Object" />。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
      <summary>将指定值转换为字符串表示形式。</summary>
      <returns>表示转换的 value 的 <see cref="T:System.Object" />。</returns>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)">
      <summary>在给定 <see cref="T:System.Object" /> 的一组属性值的情况下重新创建该对象。</summary>
      <returns>一个 <see cref="T:System.Object" />，表示给定的 <see cref="T:System.Collections.IDictionary" />，或者如果无法创建该对象，则为 null。此方法始终返回 null。</returns>
      <param name="propertyValues">一个 <see cref="T:System.Collections.IDictionary" />，表示新属性 (Property) 值的字典。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>在已知对象的属性 (Property) 值集的情况下，使用指定的上下文创建与此 <see cref="T:System.ComponentModel.TypeConverter" /> 关联的类型的实例。</summary>
      <returns>一个 <see cref="T:System.Object" />，表示给定的 <see cref="T:System.Collections.IDictionary" />，或者如果无法创建该对象，则为 null。此方法始终返回 null。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="propertyValues">新属性 (Property) 值的 <see cref="T:System.Collections.IDictionary" />。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)">
      <summary>返回无法执行转换时引发的异常。</summary>
      <returns>一个 <see cref="T:System.Exception" />，表示当无法执行转换时引发的异常。</returns>
      <param name="value">要转换的 <see cref="T:System.Object" />，或者如果该对象不可用，则为 null。</param>
      <exception cref="T:System.NotSupportedException">由此方法自动引发。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)">
      <summary>返回无法执行转换时引发的异常。</summary>
      <returns>一个 <see cref="T:System.Exception" />，表示当无法执行转换时引发的异常。</returns>
      <param name="value">要转换的 <see cref="T:System.Object" />，或者如果该对象不可用，则为 null。</param>
      <param name="destinationType">一个 <see cref="T:System.Type" />，表示转换尝试转换到的类型。</param>
      <exception cref="T:System.NotSupportedException">由此方法自动引发。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported">
      <summary>返回对以下情况的确认：如果更改该对象上的某个值，是否需要调用 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> 方法来创建新值。</summary>
      <returns>
            如果更改此对象的属性需要调用 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> 来创建新值，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>返回有关更改该对象上的某个值是否需要使用指定的上下文调用 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> 以创建新值的情况。</summary>
      <returns>
如果更改此对象的属性需要调用 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> 来创建新值，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>使用指定的上下文返回值参数指定的数组类型的属性 (Property) 的集合。</summary>
      <returns>具有为此数据类型公开的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />；或者如果没有属性，则为 null。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="value">一个 <see cref="T:System.Object" />，指定要为其获取属性的数组类型。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>使用指定的上下文和属性 (Attribute) 返回由 value 参数指定的数组类型的属性 (Property) 的集合。</summary>
      <returns>具有为此数据类型公开的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />；或者如果没有属性，则为 null。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="value">一个 <see cref="T:System.Object" />，指定要为其获取属性的数组类型。</param>
      <param name="attributes">用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)">
      <summary>返回由值参数指定的数组类型的属性 (Property) 集合。</summary>
      <returns>具有为此数据类型公开的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />；或者如果没有属性，则为 null。</returns>
      <param name="value">一个 <see cref="T:System.Object" />，指定要为其获取属性的数组类型。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported">
      <summary>返回此对象是否支持属性。</summary>
      <returns>
            如果应调用 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> 来查找此对象的属性，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>使用指定的上下文返回该对象是否支持属性 (Property)。</summary>
      <returns>
如果应调用 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> 来查找此对象的属性，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues">
      <summary>从默认的上下文返回此类型转换器设计用于的数据类型的标准值集合。</summary>
      <returns>含有一组标准的有效值的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />，或者如果数据类型不支持一组标准值，则为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>当与格式上下文一起提供时，返回此类型转换器设计用于的数据类型的标准值集合。</summary>
      <returns>包含标准有效值集的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />；如果数据类型不支持标准值集，则为 null。</returns>
      <param name="context">提供格式上下文的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可用来提取有关从中调用此转换器的环境的附加信息。此参数或其属性 (Property) 可以为 null。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive">
      <summary>返回从 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 返回的标准值的集合是否为独占列表。</summary>
      <returns>
            如果从 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 返回的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 是可能值的穷举列表，则为 true；如果还可能有其他值，则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>使用指定的上下文返回从 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 返回的标准值的集合是否为可能值的独占列表。</summary>
      <returns>
如果从 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 返回的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 是可能值的穷举列表，则为 true；如果还可能有其他值，则为 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported">
      <summary>返回此对象是否支持可以从列表中选取的标准值集。</summary>
      <returns>
            如果应调用 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 来查找对象支持的一组公共值，则为 true；否则，为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>使用指定的上下文返回此对象是否支持可以从列表中选取的标准值集。</summary>
      <returns>
            如果应调用 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 来查找对象支持的一组公共值，则为 true；否则，为 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>返回给定值对象对于此类型和此指定的上下文是否有效。</summary>
      <returns>
            如果指定值对于该对象有效，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="value">要测试其有效性的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
      <summary>返回给定值对象对于此类型是否有效。</summary>
      <returns>
如果指定值对于该对象有效，则为 true；否则为 false。</returns>
      <param name="value">要测试其有效性的对象。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])">
      <summary>对属性 (Property) 的集合进行排序。</summary>
      <returns>包含已排序属性 (Property) 的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
      <param name="props">具有要排序的属性 (Property) 的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</param>
      <param name="names">按您要属性 (Property) 在集合中出现的顺序排列的名称的数组。</param>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor">
      <summary>表示一个 abstract 类，该类为没有属性的对象提供属性。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type)">
      <summary>初始化 <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" /> 类的一个新实例。</summary>
      <param name="componentType">一个 <see cref="T:System.Type" />，表示此属性说明符绑定到的组件的类型。</param>
      <param name="name">属性 (Property) 的名称。</param>
      <param name="propertyType">一个 <see cref="T:System.Type" />，表示此属性的数据类型。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type,System.Attribute[])">
      <summary>初始化 <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" /> 类的一个新实例。</summary>
      <param name="componentType">一个 <see cref="T:System.Type" />，表示此属性说明符绑定到的组件的类型。</param>
      <param name="name">属性 (Property) 的名称。</param>
      <param name="propertyType">一个 <see cref="T:System.Type" />，表示此属性的数据类型。</param>
      <param name="attributes">一个 <see cref="T:System.Attribute" /> 数组，具有要与该属性 (Property) 关联的属性 (Attribute)。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.CanResetValue(System.Object)">
      <summary>返回重置组件是否会更改该组件的值。</summary>
      <returns>
            如果重置组件更改该组件的值，则为 true；否则为 false。</returns>
      <param name="component">要测试重置功能的组件。</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ComponentType">
      <summary>获取该属性说明符绑定到的组件的类型。</summary>
      <returns>一个 <see cref="T:System.Type" />，表示此属性绑定到的组件的类型。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.IsReadOnly">
      <summary>获取指示该属性是否为只读的值。</summary>
      <returns>
            如果该属性为只读，则为 true；如果该属性为读/写，则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.PropertyType">
      <summary>获取属性的类型。</summary>
      <returns>一个表示属性类型的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ResetValue(System.Object)">
      <summary>重置组件的此属性的值。</summary>
      <param name="component">具有要重置的属性值的组件。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>返回此属性的值是否可以持续。</summary>
      <returns>
            如果属性的值可以持续，则为 true，否则为 false。</returns>
      <param name="component">具有要检查持久性的属性的组件。</param>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.StandardValuesCollection">
      <summary>表示值的集合。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.#ctor(System.Collections.ICollection)">
      <summary>初始化 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 类的新实例。</summary>
      <param name="values">一个 <see cref="T:System.Collections.ICollection" />，表示要放入集合的对象。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.CopyTo(System.Array,System.Int32)">
      <summary>将该集合的内容复制到数组。</summary>
      <param name="array">一个 <see cref="T:System.Array" />，表示要复制到的数组。</param>
      <param name="index">从其开始的索引。</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Count">
      <summary>获取集合中的对象数。</summary>
      <returns>集合中的对象数。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.GetEnumerator">
      <summary>返回该集合的枚举数。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 类型的枚举数。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Item(System.Int32)">
      <summary>获取指定索引号位置的对象。</summary>
      <returns>具有指定索引的 <see cref="T:System.Object" />。</returns>
      <param name="index">要从集合中获取的 <see cref="T:System.Object" /> 的从零开始的索引。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>将该集合的内容复制到数组。</summary>
      <param name="array">要复制到的数组。</param>
      <param name="index">数组中开始复制处的索引。</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#Count">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.Count" />。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 中包含的元素数。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#IsSynchronized">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.IsSynchronized" />。</summary>
      <returns>
            在所有情况下均为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#SyncRoot">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.SyncRoot" />。</summary>
      <returns>
            在所有情况下均为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverterAttribute">
      <summary>指定用作此属性所绑定到的对象的转换器的类型。无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor">
      <summary>使用默认类型转换器，即空字符串（""）初始化 <see cref="T:System.ComponentModel.TypeConverterAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.String)">
      <summary>通过将指定类型名称用作该属性所绑定到的对象的数据转换器，初始化 <see cref="T:System.ComponentModel.TypeConverterAttribute" /> 类的新实例。</summary>
      <param name="typeName">类的完全限定名，该类将用于此属性所绑定到的对象的数据转换。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)">
      <summary>通过将指定类型用作该属性所绑定到的对象的数据转换器，初始化 <see cref="T:System.ComponentModel.TypeConverterAttribute" /> 类的新实例。</summary>
      <param name="type">表示转换器类的类型的 <see cref="T:System.Type" />，它将用于该属性所绑定到的对象的数据转换。</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverterAttribute.ConverterTypeName">
      <summary>获取 <see cref="T:System.Type" /> 的完全限定的类型名，以将其用作此属性所绑定到的对象的转换器。</summary>
      <returns>
        <see cref="T:System.Type" /> 的完全限定的类型名，它将用作此属性所绑定到的对象的转换器；如果不存在，则为空字符串（""）。默认值为空字符串 ("")。</returns>
    </member>
    <member name="F:System.ComponentModel.TypeConverterAttribute.Default">
      <summary>指定用作此属性所绑定到的对象的转换器的类型。此 static 字段是只读的。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前的 <see cref="T:System.ComponentModel.TypeConverterAttribute" />。</summary>
      <returns>
            如果给定对象的值等于当前对象的值，则为 true；否则为 false。</returns>
      <param name="obj">要进行值的相等性测试的对象。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.TypeConverterAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProvider">
      <summary>向 <see cref="T:System.ComponentModel.TypeDescriptor" /> 提供补充元数据。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)">
      <summary>使用父类型说明提供程序初始化 <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 类的新实例。</summary>
      <param name="parent">父类型说明提供程序。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary>创建可以代替另一数据类型的对象。</summary>
      <returns>替代用 <see cref="T:System.Object" />。</returns>
      <param name="provider">可选的服务提供程序。</param>
      <param name="objectType">要创建的对象的类型。此参数决不能为 null。</param>
      <param name="argTypes">可选的类型数组，其中的类型表示要传递给对象的构造函数的参数类型。此数组可为 null 或长度为零。</param>
      <param name="args">要传递到对象的构造函数的参数值的数组（可选）。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)">
      <summary>获取每个对象均对应有的缓存，此缓存可作为键/值对的 <see cref="T:System.Collections.IDictionary" /> 进行访问。</summary>
      <returns>如果提供的对象支持缓存，则为 <see cref="T:System.Collections.IDictionary" />；否则为 null。</returns>
      <param name="instance">要获取与其对应的缓存的对象。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)">
      <summary>为给定的对象获取扩展的自定义类型说明符。</summary>
      <returns>可以为对象提供扩展元数据的 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />。</returns>
      <param name="instance">要为其获取扩展类型说明符的对象。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)">
      <summary>获取指定的组件的名称，如果指定的组件没有名称，则为 null。</summary>
      <returns>指定组件的名称。</returns>
      <param name="component">指定的组件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)">
      <summary>针对给定对象执行正常反射。</summary>
      <returns>
        <see cref="T:System.Type" />。</returns>
      <param name="instance">类型的实例（不应为 null）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)">
      <summary>针对某个类型执行正常反射。</summary>
      <returns>
        <see cref="T:System.Type" />。</returns>
      <param name="objectType">要为其检索 <see cref="T:System.Reflection.IReflect" /> 的对象的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectType" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)">
      <summary>针对具有给定类型的给定对象执行正常反射。</summary>
      <returns>
        <see cref="T:System.Type" />。</returns>
      <param name="objectType">要为其检索 <see cref="T:System.Reflection.IReflect" /> 的对象的类型。</param>
      <param name="instance">该类型的实例。可以为 null。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)">
      <summary>获取给定对象的自定义类型说明符。</summary>
      <returns>可以为该类型提供元数据的 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />。</returns>
      <param name="instance">该类型的实例。如果没有向 <see cref="T:System.ComponentModel.TypeDescriptor" /> 传递任何实例，则可以是 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)">
      <summary>获取给定类型的自定义类型说明符。</summary>
      <returns>可以为该类型提供元数据的 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />。</returns>
      <param name="objectType">要为其检索类型说明符的对象的类型。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
      <summary>获取给定类型和对象的自定义类型说明符。</summary>
      <returns>可以为该类型提供元数据的 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />。</returns>
      <param name="objectType">要为其检索类型说明符的对象的类型。</param>
      <param name="instance">该类型的实例。如果没有向 <see cref="T:System.ComponentModel.TypeDescriptor" /> 传递任何实例，则可以是 null。</param>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProviderAttribute">
      <summary>指定类的自定义类型说明提供程序。无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.String)">
      <summary>使用指定的类型名称初始化 <see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" /> 类的新实例。</summary>
      <param name="typeName">类型的限定名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.Type)">
      <summary>使用指定的类型初始化 <see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" /> 类的新实例。</summary>
      <param name="type">要存储在属性中的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptionProviderAttribute.TypeName">
      <summary>获取类型说明提供程序的类型名称。</summary>
      <returns>包含 <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 的限定类型名称的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptor">
      <summary>提供有关组件属性 (Attribute) 的信息，如组件的属性 (Attribute)、属性 (Property) 和事件。无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])">
      <summary>向目标组件实例添加类级别属性 (Attribute)。</summary>
      <returns>用于添加指定属性的新建 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
      <param name="instance">目标组件的一个实例。</param>
      <param name="attributes">要添加到组件类中的 <see cref="T:System.Attribute" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">其中一个参数或两个参数都是 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])">
      <summary>向目标组件类型添加类级别属性 (Attribute)。</summary>
      <returns>用于添加指定属性的新建 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
      <param name="type">目标组件的 <see cref="T:System.Type" />。</param>
      <param name="attributes">要添加到组件类中的 <see cref="T:System.Attribute" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">其中一个参数或两个参数都是 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)">
      <summary>为给定的编辑器基类型添加编辑器表。</summary>
      <param name="editorBaseType">要为其添加编辑器表的编辑器基类型。如果对于此类型已存在一个表，则此方法无任何作用。</param>
      <param name="table">要添加的 <see cref="T:System.Collections.Hashtable" />。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>为组件的单个实例添加类型说明提供程序。</summary>
      <param name="provider">要添加的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="instance">目标组件的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">其中一个参数或两个参数都是 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>为组件类添加类型说明提供程序。</summary>
      <param name="provider">要添加的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="type">目标组件的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">其中一个参数或两个参数都是 null。</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler">
      <summary>为目标组件获取或设置组件对象模型 (COM) 类型信息的提供程序。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.IComNativeDescriptorHandler" /> 实例，表示 COM 类型信息提供程序。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComObjectType">
      <summary>获取由目标组件表示的组件对象模型 (COM) 对象的类型。</summary>
      <returns>此组件表示的 COM 对象的 <see cref="T:System.Type" />；如果此组件表示的不是 COM 对象，则为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)">
      <summary>在两个对象之间创建主要-辅助关联。</summary>
      <param name="primary">主 <see cref="T:System.Object" />。</param>
      <param name="secondary">辅 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">其中一个参数或两个参数都是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="primary" /> 等于 <paramref name="secondary" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)">
      <summary>创建与指定组件关联的设计器和指定类型的设计器的实例。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.Design.IDesigner" />，它是组件设计器的实例；如果找不到任何设计器，则为 null。</returns>
      <param name="component">一个 <see cref="T:System.ComponentModel.IComponent" />，指定与设计器相关联的组件。</param>
      <param name="designerBaseType">一个 <see cref="T:System.Type" />，表示要创建的设计器的类型。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])">
      <summary>当传递现有的 <see cref="T:System.ComponentModel.EventDescriptor" /> 时，创建与现有的事件说明符相同的新事件说明符。</summary>
      <returns>一个新的 <see cref="T:System.ComponentModel.EventDescriptor" />，它将指定的元数据属性和现有的元数据属性 (Attribute) 合并在一起。</returns>
      <param name="componentType">要创建新事件的组件的类型。</param>
      <param name="oldEventDescriptor">现有的事件信息。</param>
      <param name="attributes">新属性 (Attribute)。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="TypeInformation, MemberAccess" />
      </PermissionSet>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])">
      <summary>通过从类型的指定事件动态生成说明符信息，创建与现有事件说明符相同的新事件说明符。</summary>
      <returns>绑定到类型的 <see cref="T:System.ComponentModel.EventDescriptor" />。</returns>
      <param name="componentType">该事件依赖的组件的类型。</param>
      <param name="name">事件的名称。</param>
      <param name="type">处理该事件的委托的类型。</param>
      <param name="attributes">该事件的属性 (Attribute)。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="TypeInformation, MemberAccess" />
      </PermissionSet>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary>创建可以代替另一数据类型的对象。</summary>
      <returns>如果找到关联的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />，则为替代数据类型的实例；否则为 null。</returns>
      <param name="provider">提供 <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 服务的服务提供程序。此参数可以为 null。</param>
      <param name="objectType">要创建的对象的 <see cref="T:System.Type" />。</param>
      <param name="argTypes">要传递到对象的构造函数的参数类型的数组（可选）。此参数可以为 null，也可以是长度为零的数组。</param>
      <param name="args">要传递到对象的构造函数的参数值的数组（可选）。如果不为 null，则该数组的元素个数必须与 <paramref name="argTypes" /> 相同。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argTypes" /> 不为 null 时，<paramref name="objectType" /> 为 null，或 <paramref name="args" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argTypes" /> 和 <paramref name="args" /> 的元素个数不同。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])">
      <summary>使用指定的现有 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 和属性 (Attribute) 数组，根据现有属性 (Property) 说明符新建属性 (Property) 说明符。</summary>
      <returns>一个新的 <see cref="T:System.ComponentModel.PropertyDescriptor" />，它将指定的元数据属性 (Attribute) 和现有的元数据属性 (Attribute) 合并在一起。</returns>
      <param name="componentType">属性 (Property) 所隶属的组件的 <see cref="T:System.Type" />。</param>
      <param name="oldPropertyDescriptor">现有的属性 (Property) 说明符。</param>
      <param name="attributes">该属性 (Property) 的新属性 (Attribute)。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="TypeInformation, MemberAccess" />
      </PermissionSet>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])">
      <summary>使用指定的属性 (Property) 名称、类型和属性 (Attribute) 数组创建一个属性 (Property) 说明符，并将其动态绑定到某个类型。</summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 被绑定到指定类型，并使指定的元数据属性 (Attribute) 与现有的元数据属性 (Attribute) 进行合并。</returns>
      <param name="componentType">属性 (Property) 所隶属的组件的 <see cref="T:System.Type" />。</param>
      <param name="name">属性 (Property) 的名称。</param>
      <param name="type">该属性 (Property) 的 <see cref="T:System.Type" />。</param>
      <param name="attributes">该属性 (Property) 的新属性 (Attribute)。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="TypeInformation, MemberAccess" />
      </PermissionSet>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)">
      <summary>返回以下类型的一个实例，该类型与指定的主要对象关联。</summary>
      <returns>如果存在关联，则为与主要对象关联的辅助类型的一个实例；如果不存在指定的关联，则为 <paramref name="primary" />。</returns>
      <param name="type">目标组件的 <see cref="T:System.Type" />。</param>
      <param name="primary">关联的主要对象。</param>
      <exception cref="T:System.ArgumentNullException">其中一个参数或两个参数都是 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)">
      <summary>返回指定组件的属性 (Attribute) 的集合。</summary>
      <returns>包含该组件的属性 (Attribute) 的 <see cref="T:System.ComponentModel.AttributeCollection" />。如果 <paramref name="component" /> 为 null，则此方法返回空集合。</returns>
      <param name="component">要获取其属性 (Attribute) 的组件。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)">
      <summary>返回指定组件的属性 (Attribute) 的集合，以及指示已创建自定义类型说明符的布尔值。</summary>
      <returns>包含该组件的属性 (Attribute) 的 <see cref="T:System.ComponentModel.AttributeCollection" />。如果该组件为 null，则此方法返回空集合。</returns>
      <param name="component">要获取其属性 (Attribute) 的组件。</param>
      <param name="noCustomTypeDesc">
                如果 <paramref name="component" /> 属于 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> 类型，则为 true 并使用自定义类型说明符中的基准属性 (Attribute) 集；否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)">
      <summary>返回指定类型组件的属性 (Attribute) 的集合。</summary>
      <returns>具有该类型组件的属性 (Attribute) 的 <see cref="T:System.ComponentModel.AttributeCollection" />。如果该组件为 null，则此方法返回空集合。</returns>
      <param name="componentType">目标组件的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object)">
      <summary>使用默认的类型说明符返回指定组件的类的名称。</summary>
      <returns>一个 <see cref="T:System.String" />，包含指定组件的类的名称。</returns>
      <param name="component">需要其类名的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)">
      <summary>使用自定义类型说明符返回指定组件的类的名称。</summary>
      <returns>一个 <see cref="T:System.String" />，包含指定组件的类的名称。</returns>
      <param name="component">需要其类名的 <see cref="T:System.Object" />。</param>
      <param name="noCustomTypeDesc">
                若要考虑自定义类型说明信息，为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程远程对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Type)">
      <summary>返回指定类型的类的名称。</summary>
      <returns>包含指定组件类型的类的名称的 <see cref="T:System.String" />。</returns>
      <param name="componentType">目标组件的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="componentType" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)">
      <summary>使用默认的类型说明符返回指定组件的名称。</summary>
      <returns>包含指定组件的名称的 <see cref="T:System.String" />，如果没有任何组件名，则为 null。</returns>
      <param name="component">需要其类名的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程远程对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)">
      <summary>使用自定义类型说明符返回指定组件的名称。</summary>
      <returns>指定组件的类的名称；如果没有任何组件名，则为 null。</returns>
      <param name="component">需要其类名的 <see cref="T:System.Object" />。</param>
      <param name="noCustomTypeDesc">
                若要考虑自定义类型说明信息，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程远程对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object)">
      <summary>返回指定组件类型的类型转换器。</summary>
      <returns>指定组件的 <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
      <param name="component">要获取其转换器的组件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程远程对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)">
      <summary>使用自定义类型说明符返回指定组件类型的类型转换器。</summary>
      <returns>指定组件的 <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
      <param name="component">要获取其转换器的组件。</param>
      <param name="noCustomTypeDesc">
                若要考虑自定义类型说明信息，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程远程对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Type)">
      <summary>返回指定类型的类型转换器。</summary>
      <returns>指定类型的 <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
      <param name="type">目标组件的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)">
      <summary>返回指定组件的默认事件。</summary>
      <returns>具有默认事件的 <see cref="T:System.ComponentModel.EventDescriptor" />，或者如果没有事件，则为 null。</returns>
      <param name="component">要获取其事件的组件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程远程对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)">
      <summary>使用自定义类型说明符返回组件的默认事件。</summary>
      <returns>具有默认事件的 <see cref="T:System.ComponentModel.EventDescriptor" />，或者如果没有事件，则为 null。</returns>
      <param name="component">要获取其事件的组件。</param>
      <param name="noCustomTypeDesc">
                若要考虑自定义类型说明信息，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程远程对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)">
      <summary>返回指定类型组件的默认事件。</summary>
      <returns>具有默认事件的 <see cref="T:System.ComponentModel.EventDescriptor" />，或者如果没有事件，则为 null。</returns>
      <param name="componentType">目标组件的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)">
      <summary>返回指定组件的默认属性 (Property)。</summary>
      <returns>具有默认属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />，或者如果没有属性，则为 null。</returns>
      <param name="component">要获取其默认属性的组件。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程远程对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)">
      <summary>使用自定义类型说明符返回指定组件的默认属性 (Property)。</summary>
      <returns>具有默认属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />，或者如果没有属性，则为 null。</returns>
      <param name="component">要获取其默认属性的组件。</param>
      <param name="noCustomTypeDesc">
                若要考虑自定义类型说明信息，则为 true；否则为 false。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程远程对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)">
      <summary>返回指定类型组件的默认属性 (Property)。</summary>
      <returns>具有默认属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />，或者如果没有属性，则为 null。</returns>
      <param name="componentType">表示要获取其属性 (Property) 的类的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)">
      <summary>用指定的基类型获取指定组件的编辑器。</summary>
      <returns>可被强制转换为指定编辑器类型的编辑器的一个实例，如果找不到请求类型的编辑器，则为 null。</returns>
      <param name="component">要获取其编辑器的组件。</param>
      <param name="editorBaseType">一个 <see cref="T:System.Type" />，表示要查找的编辑器的基类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 或 <paramref name="editorBaseType" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程远程对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)">
      <summary>使用指定的基类型和自定义类型说明符返回指定组件的编辑器。</summary>
      <returns>可被强制转换为指定编辑器类型的编辑器的一个实例，如果找不到请求类型的编辑器，则为 null。</returns>
      <param name="component">要获取其编辑器的组件。</param>
      <param name="editorBaseType">一个 <see cref="T:System.Type" />，表示要查找的编辑器的基类型。</param>
      <param name="noCustomTypeDesc">一个指示是否应考虑自定义类型说明信息的标志。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 或 <paramref name="editorBaseType" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程远程对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)">
      <summary>使用指定的基类型返回指定类型的编辑器。</summary>
      <returns>可被强制转换为给定基类型的编辑器对象的一个实例，如果找不到请求类型的编辑器，则为 null。</returns>
      <param name="type">目标组件的 <see cref="T:System.Type" />。</param>
      <param name="editorBaseType">一个 <see cref="T:System.Type" />，表示正在尝试查找的编辑器的基类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或 <paramref name="editorBaseType" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object)">
      <summary>返回指定组件的事件的集合。</summary>
      <returns>具有此组件的事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
      <param name="component">要获取其事件的组件。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程远程对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])">
      <summary>通过将指定的属性 (Attribute) 数组用作筛选器来返回指定组件的事件的集合。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.EventDescriptorCollection" />，包含与此组件的指定属性匹配的事件。</returns>
      <param name="component">要获取其事件的组件。</param>
      <param name="attributes">可用作筛选器的类型 <see cref="T:System.Attribute" /> 的数组。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程远程对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)">
      <summary>通过将指定的属性 (Attribute) 数组用作筛选器并使用自定义类型说明符来返回指定组件的事件的集合。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.EventDescriptorCollection" />，包含与此组件的指定属性匹配的事件。</returns>
      <param name="component">要获取其事件的组件。</param>
      <param name="attributes">用作筛选器的类型 <see cref="T:System.Attribute" /> 的数组。</param>
      <param name="noCustomTypeDesc">
                若要考虑自定义类型说明信息，则为 true；否则为 false。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程远程对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)">
      <summary>使用自定义类型说明符返回指定组件的事件的集合。</summary>
      <returns>具有此组件的事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
      <param name="component">要获取其事件的组件。</param>
      <param name="noCustomTypeDesc">
                若要考虑自定义类型说明信息，则为 true；否则为 false。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程远程对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type)">
      <summary>返回指定类型组件的事件的集合。</summary>
      <returns>具有此组件的事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
      <param name="componentType">目标组件的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])">
      <summary>通过将指定的属性 (Attribute) 数组用作筛选器来返回指定类型组件的事件的集合。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.EventDescriptorCollection" />，包含与此组件的指定属性匹配的事件。</returns>
      <param name="componentType">目标组件的 <see cref="T:System.Type" />。</param>
      <param name="attributes">可用作筛选器的类型 <see cref="T:System.Attribute" /> 的数组。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)">
      <summary>返回组件的完全限定名。</summary>
      <returns>指定组件的完全限定名，如果该组件没有名称，则为 null。</returns>
      <param name="component">要查找其名称的 <see cref="T:System.ComponentModel.Component" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)">
      <summary>返回指定组件的属性 (Property) 的集合。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，具有指定组件的属性 (Property)。</returns>
      <param name="component">要获取其属性的组件。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程远程对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])">
      <summary>通过将指定的属性 (Attribute) 数组用作筛选器来返回指定组件的属性 (Property) 的集合。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，具有匹配指定组件的指定属性 (Attribute) 的属性 (Property)。</returns>
      <param name="component">要获取其属性的组件。</param>
      <param name="attributes">用作筛选器的类型 <see cref="T:System.Attribute" /> 的数组。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程远程对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)">
      <summary>通过将指定的属性 (Attribute) 数组用作筛选器并使用自定义类型说明符来返回指定组件的属性 (Property) 的集合。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，具有与指定组件的指定属性匹配的事件。</returns>
      <param name="component">要获取其属性的组件。</param>
      <param name="attributes">用作筛选器的类型 <see cref="T:System.Attribute" /> 的数组。</param>
      <param name="noCustomTypeDesc">
                如果考虑自定义类型说明信息，为 true；否则为 false。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程远程对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)">
      <summary>使用默认类型说明符来返回指定组件的属性 (Property) 的集合。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，具有指定组件的属性 (Property)。</returns>
      <param name="component">要获取其属性的组件。</param>
      <param name="noCustomTypeDesc">
                如果考虑自定义类型说明信息，为 true；否则为 false。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程远程对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type)">
      <summary>返回指定类型组件的属性 (Property) 的集合。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，具有指定类型组件的属性 (Property)。</returns>
      <param name="componentType">一个 <see cref="T:System.Type" />，表示要获取其属性 (Property) 的组件。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])">
      <summary>通过将指定的属性 (Attribute) 数组用作筛选器来返回指定类型组件的属性 (Property) 的集合。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，具有与此类型的组件的指定属性 (Property) 匹配的属性 (Property)。</returns>
      <param name="componentType">目标组件的 <see cref="T:System.Type" />。</param>
      <param name="attributes">用作筛选器的类型 <see cref="T:System.Attribute" /> 的数组。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Object)">
      <summary>返回指定组件的类型说明提供程序。</summary>
      <returns>与指定组件关联的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
      <param name="instance">目标组件的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Type)">
      <summary>返回指定类型的类型说明提供程序。</summary>
      <returns>与指定类型关联的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
      <param name="type">目标组件的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)">
      <summary>如果给定对象，则返回可用于执行反射的 <see cref="T:System.Type" />。</summary>
      <returns>指定对象的 <see cref="T:System.Type" />。</returns>
      <param name="instance">目标组件的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)">
      <summary>如果给定类类型，则返回可用于执行反射的 <see cref="T:System.Type" />。</summary>
      <returns>指定类的 <see cref="T:System.Type" />。</returns>
      <param name="type">目标组件的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Object)">
      <summary>从缓存中清除指定组件的属性 (Property) 和事件。</summary>
      <param name="component">其属性 (Property) 或事件已更改的组件。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)">
      <summary>从缓存中清除指定程序集的属性 (Property) 和事件。</summary>
      <param name="assembly">表示要刷新的程序集的 <see cref="T:System.Reflection.Assembly" />。将刷新程序集中的每个 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)">
      <summary>从缓存中清除指定模块的属性 (Property) 和事件。</summary>
      <param name="module">表示要刷新的模块的 <see cref="T:System.Reflection.Module" />。将刷新模块中的每个 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Type)">
      <summary>从缓存中清除指定类型的组件的属性 (Property) 和事件。</summary>
      <param name="type">目标组件的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="E:System.ComponentModel.TypeDescriptor.Refreshed">
      <summary>清除组件的缓存时发生。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)">
      <summary>移除两个对象之间的关联。</summary>
      <param name="primary">主 <see cref="T:System.Object" />。</param>
      <param name="secondary">辅 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">其中一个参数或两个参数都是 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)">
      <summary>移除主要对象的所有关联。</summary>
      <param name="primary">处于关联中的主要 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="primary" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>移除以前添加的且与指定对象关联的类型说明提供程序。</summary>
      <param name="provider">要移除的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="instance">目标组件的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">其中一个参数或两个参数都是 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>移除以前添加的且与指定类型关联的类型说明提供程序。</summary>
      <param name="provider">要移除的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="type">目标组件的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">其中一个参数或两个参数都是 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)">
      <summary>使用说明符的名称对说明符进行排序。</summary>
      <param name="infos">一个 <see cref="T:System.Collections.IList" />，包含要排序的说明符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="infos" /> 为 null。</exception>
    </member>
    <member name="T:System.ComponentModel.TypeListConverter">
      <summary>提供可用于以可用类型填充列表框的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.#ctor(System.Type[])">
      <summary>将类型数组用作可用的类型来初始化 <see cref="T:System.ComponentModel.TypeListConverter" /> 类的新实例。</summary>
      <param name="types">用作可用类型的类型 <see cref="T:System.Type" /> 的数组。</param>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器是否可以使用给定上下文转换源对象的指定 <see cref="T:System.Type" />。</summary>
      <returns>
            如果该转换器能够执行转换，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="sourceType">源对象的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器能否使用上下文将对象转换为给定的目标类型。</summary>
      <returns>
            如果该转换器能够执行转换，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="destinationType">表示要转换到的类型的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将指定对象转换为转换器的本机类型。</summary>
      <returns>表示转换的 value 的 <see cref="T:System.Object" />。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />，它指定用于表示该字体的区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将给定的值对象转换为指定的目标类型。</summary>
      <returns>表示转换的 <paramref name="value" /> 的 <see cref="T:System.Object" />。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="culture">一个可选的 <see cref="T:System.Globalization.CultureInfo" />。如果未提供区域性设置，则使用当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">要将值转换成的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取此验证器设计用于的数据类型的标准值集合。</summary>
      <returns>包含标准有效值集的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />；如果数据类型不支持标准值集，则为 null。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示从 <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 方法返回的标准值的列表是否为独占列表。</summary>
      <returns>
            返回 true，因为从 <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 返回的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 是可能的值的穷举列表。此方法从不返回 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示此对象是否支持可使用指定上下文从列表中选取的标准值集。</summary>
      <returns>
            返回 true，因为应当调用 <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 来查找对象支持的一组公共值。此方法从不返回 false。</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
    </member>
    <member name="T:System.ComponentModel.UInt16Converter">
      <summary>提供将 16 位无符号整数对象与其他表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.UInt16Converter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.UInt16Converter" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ComponentModel.UInt32Converter">
      <summary>提供将 32 位无符号整数对象与其他各种表示形式互相转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.UInt32Converter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.UInt32Converter" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ComponentModel.UInt64Converter">
      <summary>提供将 64 位无符号整数对象与其他表示形式相互转换的类型转换器。</summary>
    </member>
    <member name="M:System.ComponentModel.UInt64Converter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.UInt64Converter" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ComponentModel.WarningException">
      <summary>指定按警告（而不是错误）处理的异常。</summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.WarningException" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化数据和上下文初始化 <see cref="T:System.ComponentModel.WarningException" /> 类的新实例。</summary>
      <param name="info">要用于反序列化的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">用于反序列化的目标。</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String)">
      <summary>使用指定消息（但不带帮助文件）初始化 <see cref="T:System.ComponentModel.WarningException" /> 类的新实例。</summary>
      <param name="message">显示给最终用户的消息。</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.Exception)">
      <summary>使用指定的详细说明和指定的异常初始化 <see cref="T:System.ComponentModel.WarningException" /> 类的新实例。</summary>
      <param name="message">该错误的详细说明。</param>
      <param name="innerException">对导致此异常的内部异常的引用。</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String)">
      <summary>使用指定消息和对指定帮助文件的访问权限初始化 <see cref="T:System.ComponentModel.WarningException" /> 类的新实例。</summary>
      <param name="message">显示给最终用户的消息。</param>
      <param name="helpUrl">要在用户请求帮助时显示的帮助文件。</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String,System.String)">
      <summary>使用指定消息和对指定帮助文件和主题的访问权限初始化 <see cref="T:System.ComponentModel.WarningException" /> 类的新实例。</summary>
      <param name="message">显示给最终用户的消息。</param>
      <param name="helpUrl">要在用户请求帮助时显示的帮助文件。</param>
      <param name="helpTopic">要在用户请求帮助时显示的帮助主题。</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用参数名和其他异常信息来设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="info">存储正用于序列化或反序列化正由 <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" /> 序列化或反序列化的对象的数据。</param>
      <param name="context">描述生成该异常的流的源和目标，以及用于保留该上下文和附加的由调用方定义的上下文的序列化方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 null。</exception>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpTopic">
      <summary>获取与该警告关联的帮助主题。</summary>
      <returns>与该警告关联的帮助主题。</returns>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpUrl">
      <summary>获取与该警告关联的帮助文件。</summary>
      <returns>与该警告关联的帮助文件。</returns>
    </member>
    <member name="T:System.ComponentModel.Win32Exception">
      <summary>针对 Win32 错误代码引发异常。</summary>
    </member>
    <member name="M:System.ComponentModel.Win32Exception.#ctor">
      <summary>使用出现的最后一个 Win32 错误初始化 <see cref="T:System.ComponentModel.Win32Exception" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Win32Exception.#ctor(System.Int32)">
      <summary>使用指定错误初始化 <see cref="T:System.ComponentModel.Win32Exception" /> 类的新实例。</summary>
      <param name="error">与此异常关联的 Win32 错误代码。</param>
    </member>
    <member name="M:System.ComponentModel.Win32Exception.#ctor(System.Int32,System.String)">
      <summary>使用指定错误和指定的详细说明初始化 <see cref="T:System.ComponentModel.Win32Exception" /> 类的新实例。</summary>
      <param name="error">与此异常关联的 Win32 错误代码。</param>
      <param name="message">该错误的详细说明。</param>
    </member>
    <member name="M:System.ComponentModel.Win32Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用指定的上下文和序列化信息初始化 <see cref="T:System.ComponentModel.Win32Exception" /> 类的新实例。</summary>
      <param name="info">与此异常关联的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">表示此异常的上下文的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.ComponentModel.Win32Exception.#ctor(System.String)">
      <summary>使用指定的详细说明初始化 <see cref="T:System.ComponentModel.Win32Exception" /> 类的新实例。</summary>
      <param name="message">该错误的详细说明。</param>
    </member>
    <member name="M:System.ComponentModel.Win32Exception.#ctor(System.String,System.Exception)">
      <summary>使用指定的详细说明和指定异常初始化 <see cref="T:System.ComponentModel.Win32Exception" /> 类的新实例。</summary>
      <param name="message">该错误的详细说明。</param>
      <param name="innerException">对导致此异常的内部异常的引用。</param>
    </member>
    <member name="M:System.ComponentModel.Win32Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用发生此 <see cref="T:System.ComponentModel.Win32Exception" /> 的文件名和行号设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">有关源或目标的上下文信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 null。</exception>
    </member>
    <member name="P:System.ComponentModel.Win32Exception.NativeErrorCode">
      <summary>获取与此异常关联的 Win32 错误代码。</summary>
      <returns>与此异常关联的 Win32 错误代码。</returns>
    </member>
    <member name="T:System.ComponentModel.DateTimeOffsetConverter">
      <summary>
                    提供将 <see cref="T:System.DateTimeOffset" /> 结构与其他各种表示形式相互转换的类型转换器。
                </summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.#ctor">
      <summary>
                    初始化 <see cref="T:System.ComponentModel.DateTimeOffsetConverter" /> 类的新实例。
                </summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
                    返回一个值，该值指示是否可将指定源类型的对象转换为 <see cref="T:System.DateTimeOffset" />。
                </summary>
      <returns>
                    如果可以将指定的类型转换为 <see cref="T:System.DateTimeOffset" />，则为 true；否则为 false。
                </returns>
      <param name="context">
                    日期格式上下文。
                </param>
      <param name="sourceType">
                    要检查的源类型。
                </param>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
                    返回一个值，该值指示是否可将 <see cref="T:System.DateTimeOffset" /> 转换为指定类型的对象。
                </summary>
      <returns>
                    如果可以将 <see cref="T:System.DateTimeOffset" /> 转换为指定的类型，则为 true；否则为 false。
                </returns>
      <param name="context">
                    日期格式上下文。
                </param>
      <param name="destinationType">
                    要检查的目标类型。
                </param>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
                    将指定对象转换为 <see cref="T:System.DateTimeOffset" />。
                </summary>
      <returns>
                    表示指定对象的 <see cref="T:System.DateTimeOffset" />。
                </returns>
      <param name="context">
                    日期格式上下文。
                </param>
      <param name="culture">
                    日期区域性。
                </param>
      <param name="value">
要转换的对象。
                </param>
      <exception cref="T:System.NotSupportedException">
不能执行转换。
                </exception>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
将 <see cref="T:System.DateTimeOffset" /> 转换为指定类型的对象。
                </summary>
      <returns>
                    一个表示 <see cref="T:System.DateTimeOffset" /> 的指定类型的对象。
                </returns>
      <param name="context">
                    日期格式上下文。
                </param>
      <param name="culture">
                    日期区域性。
                </param>
      <param name="value">
                    要转换的 <see cref="T:System.DateTimeOffset" />。
                </param>
      <param name="destinationType">
                    要转换到的类型。
                </param>
      <exception cref="T:System.NotSupportedException">
不能执行转换。
                </exception>
    </member>
    <member name="T:System.ComponentModel.INotifyPropertyChanging">
      <summary>通知客户端某个属性值将更改。</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging">
      <summary>在属性值更改时发生。</summary>
    </member>
    <member name="T:System.ComponentModel.PropertyChangingEventArgs">
      <summary>为 <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging" /> 事件提供数据。 </summary>
    </member>
    <member name="M:System.ComponentModel.PropertyChangingEventArgs.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.PropertyChangingEventArgs" /> 类的一个新实例。</summary>
      <param name="propertyName">其值将更改的属性的名称。</param>
    </member>
    <member name="P:System.ComponentModel.PropertyChangingEventArgs.PropertyName">
      <summary>获取其值将更改的属性的名称。</summary>
      <returns>其值将更改的属性的名称。</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyChangingEventHandler">
      <summary>表示将对 <see cref="T:System.ComponentModel.INotifyPropertyChanging" /> 接口的 <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging" /> 事件进行处理的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.PropertyChangingEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventArgs">
      <summary>为 <see cref="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ActiveDesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost,System.ComponentModel.Design.IDesignerHost)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" /> 类的新实例。</summary>
      <param name="oldDesigner">正在失活的文档。</param>
      <param name="newDesigner">正在激活的文档。</param>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.NewDesigner">
      <summary>获取正在激活的文档。</summary>
      <returns>此 <see cref="T:System.ComponentModel.Design.IDesignerHost" /> 表示正在激活的文档。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.OldDesigner">
      <summary>获取正在失活的文档。</summary>
      <returns>此 <see cref="T:System.ComponentModel.Design.IDesignerHost" /> 表示正在失活的文档。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventHandler">
      <summary>表示将处理 <see cref="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.CheckoutException">
      <summary>当签出已签入源代码管理程序中的文件的尝试已取消或失败时将引发的异常。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor">
      <summary>在不使用任何关联消息或错误代码的情况下初始化 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化数据和上下文初始化 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 类的新实例。</summary>
      <param name="info">要用于反序列化的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">用于反序列化的目标。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String)">
      <summary>用指定的消息初始化 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 类的新实例。</summary>
      <param name="message">描述异常的消息。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Exception)">
      <summary>使用指定的详细说明和指定的异常初始化 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 类的新实例。</summary>
      <param name="message">该错误的详细说明。</param>
      <param name="innerException">对导致此异常的内部异常的引用。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Int32)">
      <summary>使用指定的消息和错误代码初始化 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 类的新实例。</summary>
      <param name="message">描述异常的消息。</param>
      <param name="errorCode">要传递的错误代码。</param>
    </member>
    <member name="F:System.ComponentModel.Design.CheckoutException.Canceled">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 类的新实例，该类指定签出已取消。此字段为只读。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.CommandID">
      <summary>表示唯一的命令标识符，此标识符由一个命令 ID 数字和一个 GUID 菜单组标识符组成。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.#ctor(System.Guid,System.Int32)">
      <summary>使用指定的菜单组 GUID 和命令 ID 号初始化 <see cref="T:System.ComponentModel.Design.CommandID" /> 类的新实例。</summary>
      <param name="menuGroup">此菜单命令所属组的 GUID。</param>
      <param name="commandID">此菜单命令的数字标识符。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.Equals(System.Object)">
      <summary>确定两个 <see cref="T:System.ComponentModel.Design.CommandID" /> 实例是否相等。</summary>
      <returns>
            如果指定的对象与其相等，则为 true；否则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.GetHashCode">
      <returns>
                    当前 <see cref="T:System.Object" /> 的哈希代码。
                </returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.Guid">
      <summary>获取由此 <see cref="T:System.ComponentModel.Design.CommandID" /> 标识的菜单命令所属菜单组的 GUID。</summary>
      <returns>此命令所属命令组的 GUID。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.ID">
      <summary>获取命令数字 ID。</summary>
      <returns>命令 ID 号。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.ToString">
      <summary>返回表示当前对象的 <see cref="T:System.String" />。</summary>
      <returns>包含命令 ID 信息（包括 GUID 和整数标识符）的字符串。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventArgs">
      <summary>为 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> 事件提供数据。无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangedEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" /> 类的新实例。</summary>
      <param name="component">已更改的组件。</param>
      <param name="member">表示已更改的成员的 <see cref="T:System.ComponentModel.MemberDescriptor" />。</param>
      <param name="oldValue">已更改成员的旧值。</param>
      <param name="newValue">已更改成员的新值。</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Component">
      <summary>获取已修改的组件。</summary>
      <returns>表示已修改的组件的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Member">
      <summary>获取已更改的成员。</summary>
      <returns>指示已更改的成员的 <see cref="T:System.ComponentModel.MemberDescriptor" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.NewValue">
      <summary>获取已更改成员的新值。</summary>
      <returns>已更改成员的新值。此属性可为 null。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.OldValue">
      <summary>获取已更改成员的旧值。</summary>
      <returns>已更改成员的旧值。此属性可为 null。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventHandler">
      <summary>表示将处理 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventArgs">
      <summary>为 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> 事件提供数据。无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangingEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" /> 类的新实例。</summary>
      <param name="component">将要更改的组件。</param>
      <param name="member">指示将要更改的组件成员的 <see cref="T:System.ComponentModel.MemberDescriptor" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Component">
      <summary>获取将要更改的组件或作为将要更改的成员的父容器的组件。</summary>
      <returns>将要更改成员的组件。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Member">
      <summary>获取将要更改的成员。</summary>
      <returns>指示将要更改的成员的 <see cref="T:System.ComponentModel.MemberDescriptor" />（如果已知），或者为 null（如果未知）。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventHandler">
      <summary>表示将处理 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" /> 事件。</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventArgs">
      <summary>为 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />、<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />、<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" /> 和 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentEventArgs.#ctor(System.ComponentModel.IComponent)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.ComponentEventArgs" /> 类的新实例。</summary>
      <param name="component">作为事件源的组件。</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentEventArgs.Component">
      <summary>获取与该事件关联的组件。</summary>
      <returns>与该事件关联的组件。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventHandler">
      <summary>表示将处理为组件级事件引发的下列事件的方法：<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />、<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />、<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" /> 和 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" />。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.Design.ComponentEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventArgs">
      <summary>为 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentRenameEventArgs.#ctor(System.Object,System.String,System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" /> 类的新实例。</summary>
      <param name="component">要重命名的组件。 </param>
      <param name="oldName">组件的旧名称。 </param>
      <param name="newName">组件的新名称。 </param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.Component">
      <summary>获取所命名的组件。</summary>
      <returns>所命名的组件。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.NewName">
      <summary>获取组件在重命名事件发生后的名称。</summary>
      <returns>组件在重命名事件发生后的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.OldName">
      <summary>获取组件在重命名事件发生前的名称。</summary>
      <returns>组件先前的名称。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventHandler">
      <summary>表示将处理 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerCollection">
      <summary>表示设计器的集合。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.Collections.IList)">
      <summary>初始化包含指定设计器集的 <see cref="T:System.ComponentModel.Design.DesignerCollection" /> 类的新实例。</summary>
      <param name="designers">包含要添加的设计器集合的列表。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.ComponentModel.Design.IDesignerHost[])">
      <summary>初始化包含指定设计器的 <see cref="T:System.ComponentModel.Design.DesignerCollection" /> 类的新实例。</summary>
      <param name="designers">要存储的 <see cref="T:System.ComponentModel.Design.IDesignerHost" /> 对象数组。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Count">
      <summary>获取集合中的设计器数。</summary>
      <returns>集合中的设计器数。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.GetEnumerator">
      <summary>获取此集合的新枚举数。</summary>
      <returns>枚举集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Item(System.Int32)">
      <summary>获取指定索引处的设计器。</summary>
      <returns>指定索引处的设计器。</returns>
      <param name="index">要返回的设计器的索引。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>将该集合的元素复制到 <see cref="T:System.Array" />（从特定的 <see cref="T:System.Array" /> 索引开始）。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，用作从集合复制的元素的目标数组。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，在此处开始复制。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#Count">
      <summary>获取集合中包含的元素数。</summary>
      <returns>集合中包含的元素数。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>
            如果对 <see cref="T:System.Collections.ICollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对集合的访问的对象。</summary>
      <returns>可用于同步集合访问的对象。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>获取此集合的新枚举数。</summary>
      <returns>枚举集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventArgs">
      <summary>提供有关 <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" /> 和 <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" /> 事件的数据。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.DesignerEventArgs" /> 类的新实例。</summary>
      <param name="host">文档的 <see cref="T:System.ComponentModel.Design.IDesignerHost" />。 </param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerEventArgs.Designer">
      <summary>获取文档的宿主。</summary>
      <returns>文档的 <see cref="T:System.ComponentModel.Design.IDesignerHost" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventHandler">
      <summary>表示要处理 <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" /> 和 <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" /> 事件的方法，这两种事件在创建或释放文档时引发。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.Design.DesignerEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService">
      <summary>提供用于获取和设置设计器选项值的基类。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.DesignerOptionService" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.CreateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.String,System.Object)">
      <summary>使用给定名称创建新的 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 并将其添加到给定父级。</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />。</returns>
      <param name="parent">父设计器选项集合。除根对象集合外，所有集合都有父项。</param>
      <param name="name">此集合的名称。</param>
      <param name="value">提供此集合的属性的对象。如果集合不应提供任何属性，则可以是 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parent" /> 或 <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 是空字符串。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.Options">
      <summary>获取此服务的选项集合。</summary>
      <returns>用可用的设计器选项进行填充的 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.PopulateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary>填充 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />。</summary>
      <param name="options">要填充的集合。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.ShowDialog(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.Object)">
      <summary>显示给定对象的选项对话框。</summary>
      <returns>
            如果显示对话框，则为 true；否则为 false。</returns>
      <param name="options">包含要调用的对象的选项集合。</param>
      <param name="optionObject">实际选项对象。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#GetOptionValue(System.String,System.String)">
      <summary>获取在此包中定义的选项的值。</summary>
      <returns>名为 <paramref name="valueName" /> 的选项的值。</returns>
      <param name="pageName">将选项绑定到的页面。</param>
      <param name="valueName">选项值的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pageName" /> 或 <paramref name="valueName" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#SetOptionValue(System.String,System.String,System.Object)">
      <summary>设置在此包中定义的选项的值。</summary>
      <param name="pageName">将选项绑定到的页面。</param>
      <param name="valueName">选项值的名称。</param>
      <param name="value">选项的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pageName" /> 或 <paramref name="valueName" /> 为 null。</exception>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection">
      <summary>包含设计器选项的集合。无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.CopyTo(System.Array,System.Int32)">
      <summary>从目标数组的指定索引处开始，将整个集合复制到兼容的一维 <see cref="T:System.Array" />。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，用作从集合复制的元素的目标数组。<paramref name="array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，在此处开始复制。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Count">
      <summary>获取此 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 包含的子选项集合的数量。</summary>
      <returns>此 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 包含的子选项集合的数量。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.GetEnumerator">
      <summary>返回可用于循环访问此集合的 <see cref="T:System.Collections.IEnumerator" />。</summary>
      <returns>可用于循环访问此集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.IndexOf(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary>返回在此集合范围内给定值的第一个匹配项的索引。</summary>
      <returns>如果在整个集合中找到匹配项，则为第一个匹配项的索引；否则为该集合的下限减 1。</returns>
      <param name="value">要在集合中定位的对象。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.Int32)">
      <summary>在给定索引处获取子集合。</summary>
      <returns>指定索引处的子集合。</returns>
      <param name="index">要获取的子集合的索引（索引从零开始）。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.String)">
      <summary>在给定名称处获取子集合。</summary>
      <returns>带有由 <paramref name="name" /> 参数指定的名称的子集合，如果未找到该名称，则为 null。</returns>
      <param name="name">子集合的名称。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Name">
      <summary>获取此 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 的名称。</summary>
      <returns>此 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Parent">
      <summary>获取父集合对象。</summary>
      <returns>父集合对象，如果不存在父级，则为 null。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Properties">
      <summary>获取由此 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 提供的属性集合，以及它的所有子级。</summary>
      <returns>由此 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 提供的属性集合，以及它的所有子级。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.ShowDialog">
      <summary>显示对话框用户界面 (UI)，用户可以通过它配置此 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 中的选项。</summary>
      <returns>
            如果可以显示对话框，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示对集合的访问是否经过同步因而是线程安全的。</summary>
      <returns>
            如果对集合的访问是同步的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对集合的访问的对象。</summary>
      <returns>可用于同步集合访问的对象。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Add(System.Object)">
      <summary>将某项添加到 <see cref="T:System.Collections.IList" /> 中。</summary>
      <returns>新元素的插入位置。</returns>
      <param name="value">要添加到 <see cref="T:System.Collections.IList" /> 的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Clear">
      <summary>从集合中移除所有项。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Contains(System.Object)">
      <summary>确定集合中是否包含特定的值。</summary>
      <returns>
            如果在集合中找到 <see cref="T:System.Object" />，则为 true；否则为 false。</returns>
      <param name="value">要在集合中定位的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>确定集合中特定项的索引。</summary>
      <returns>如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
      <param name="value">要在集合中定位的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>将一项插入集合中指定索引处。</summary>
      <param name="index">从零开始的索引，应在该位置插入 <paramref name="value" />。</param>
      <param name="value">要插入到集合中的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示集合是否具有固定大小。</summary>
      <returns>
            如果该集合具有固定大小，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示集合是否为只读。</summary>
      <returns>
            如果该集合为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置指定索引处的元素。</summary>
      <returns>指定索引处的元素。</returns>
      <param name="index">要获得或设置的元素从零开始的索引。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary>从集合中移除特定对象的第一个匹配项。</summary>
      <param name="value">要从该集合中移除的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>移除指定索引处的集合项。</summary>
      <param name="index">从零开始的索引（属于要移除的项）。</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransaction">
      <summary>提供一种方法来对一系列的设计时操作进行分组，从而提高性能并使得大多数类型的更改都能撤消。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor">
      <summary>在不使用说明的情况下初始化 <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor(System.String)">
      <summary>使用指定的事务说明初始化 <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> 类的新实例。</summary>
      <param name="description">此事务的说明。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Cancel">
      <summary>取消事务或尝试回滚由事务的事件作出的更改。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Canceled">
      <summary>获取一个值，该值指示是否已取消事务。</summary>
      <returns>
            如果事务已取消，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Commit">
      <summary>提交此事务。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Committed">
      <summary>获取一个值，该值指示是否已提交事务。</summary>
      <returns>
            如果事务已提交，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Description">
      <summary>获取事务的说明。</summary>
      <returns>事务的说明。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">
                为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Finalize">
      <summary>释放与此对象关联的资源。如果此事务尚未被提交，则此重写方法将提交此事务。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCancel">
      <summary>引发 Cancel 事件。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCommit">
      <summary>执行提交事务的实际工作。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.System#IDisposable#Dispose">
      <summary>释放由 <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> 使用的所有资源。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs">
      <summary>提供有关 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> 和 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> 事件的数据。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean)">
      <summary>使用指示设计器是否已对事务调用 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> 的指定值来初始化 <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" /> 类的新实例。</summary>
      <param name="commit">指示事务是否已提交的值。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean,System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" /> 类的新实例。</summary>
      <param name="commit">指示事务是否已提交的值。</param>
      <param name="lastTransaction">
                如果这是最后要关闭的事务，则为 true；否则，为 false。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.LastTransaction">
      <summary>获取一个值，该值指示这是不是最后要关闭的事务。</summary>
      <returns>
            如果这是最后要关闭的事务，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.TransactionCommitted">
      <summary>指示设计器是否已对事务调用 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" />。</summary>
      <returns>
            如果设计器已对事务调用 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" />，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventHandler">
      <summary>表示处理设计器的 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> 和 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerb">
      <summary>表示可从设计器中调用的谓词。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 类的一个新实例。</summary>
      <param name="text">显示给用户的菜单命令的文本。</param>
      <param name="handler">执行谓词的操作的事件处理程序。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 类的一个新实例。</summary>
      <param name="text">显示给用户的菜单命令的文本。</param>
      <param name="handler">执行谓词的操作的事件处理程序。</param>
      <param name="startCommandID">此谓词的起始命令 ID。默认情况下，设计器结构将为谓词保留一系列命令 ID。您可以通过提供自定义的命令 ID 来将其重写。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Description">
      <summary>获取或设置谓词菜单项的说明。</summary>
      <returns>描述菜单项的字符串。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Text">
      <summary>获取菜单上的谓词命令的文本说明。</summary>
      <returns>谓词命令的说明。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.ToString">
      <summary>重写 <see cref="M:System.Object.ToString" />。</summary>
      <returns>谓词的文本，如果文本字段为空，则为空字符串 ("")。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerbCollection">
      <summary>表示 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 对象的集合。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor(System.ComponentModel.Design.DesignerVerb[])">
      <summary>使用指定的 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 对象的数组，初始化 <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> 类的新实例。</summary>
      <param name="value">指示要在集合中包含的谓词的 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Add(System.ComponentModel.Design.DesignerVerb)">
      <summary>将指定的 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 添加到集合。</summary>
      <returns>集合中添加谓词处的索引。</returns>
      <param name="value">要添加到集合中的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerb[])">
      <summary>向集合中添加指定的设计器谓词组。</summary>
      <param name="value">要添加到集合中的 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerbCollection)">
      <summary>将指定的设计器谓词集合添加到集合中。</summary>
      <param name="value">要添加到集合中的 <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Contains(System.ComponentModel.Design.DesignerVerb)">
      <summary>获取一个值，用以指示集合中是否存在指定的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</summary>
      <returns>
            如果集合中存在指定对象，则为 true；否则为 false。</returns>
      <param name="value">要在集合中搜索的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.CopyTo(System.ComponentModel.Design.DesignerVerb[],System.Int32)">
      <summary>从指定的目标索引开始，将集合成员复制到指定的 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 数组中。</summary>
      <param name="array">要将集合成员复制到的数组。</param>
      <param name="index">开始复制的目标索引。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.IndexOf(System.ComponentModel.Design.DesignerVerb)">
      <summary>获取指定的 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 的索引。</summary>
      <returns>指定对象的索引（如果在列表中找到）；否则为 -1。</returns>
      <param name="value">要在集合中获取索引的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Insert(System.Int32,System.ComponentModel.Design.DesignerVerb)">
      <summary>在指定索引处插入指定的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</summary>
      <param name="index">集合中要插入谓词的索引。</param>
      <param name="value">要在集合中插入的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerbCollection.Item(System.Int32)">
      <summary>获取或设置指定索引处的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</summary>
      <returns>集合中每个有效索引处的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</returns>
      <param name="index">获取或设置 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 处的索引。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnClear">
      <summary>引发 Clear 事件。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnInsert(System.Int32,System.Object)">
      <summary>引发 Insert 事件。</summary>
      <param name="index">插入项处的索引。</param>
      <param name="value">要插入的对象。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnRemove(System.Int32,System.Object)">
      <summary>引发 Remove 事件。</summary>
      <param name="index">移除项处的索引。</param>
      <param name="value">要移除的对象。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>引发 Set 事件。</summary>
      <param name="index">设置项处的索引。</param>
      <param name="oldValue">旧对象。</param>
      <param name="newValue">新对象。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnValidate(System.Object)">
      <summary>引发 Validate 事件。</summary>
      <param name="value">要验证的对象。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Remove(System.ComponentModel.Design.DesignerVerb)">
      <summary>从集合中移除指定的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</summary>
      <param name="value">要从该集合中移除的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContext">
      <summary>表示可在设计时支持许可证提供程序的设计时许可证上下文。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary>获取已保存的许可证密钥。</summary>
      <returns>匹配指定类型且已保存的许可证密钥。</returns>
      <param name="type">许可证密钥的类型。</param>
      <param name="resourceAssembly">要从其中获取密钥的程序集。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary>获取已保存的许可证密钥。</summary>
      <param name="type">许可证密钥的类型。</param>
      <param name="key">许可证密钥。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesigntimeLicenseContext.UsageMode">
      <summary>获取许可证用法模式。</summary>
      <returns>指示上下文的许可模式的 <see cref="T:System.ComponentModel.LicenseUsageMode" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContextSerializer">
      <summary>为设计时许可证上下文序列化提供支持。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContextSerializer.Serialize(System.IO.Stream,System.String,System.ComponentModel.Design.DesigntimeLicenseContext)">
      <summary>使用指定的密钥和输出流将指定设计时许可证上下文中的许可证序列化。</summary>
      <param name="o">要输出到的流。 </param>
      <param name="cryptoKey">要用于加密的密钥。 </param>
      <param name="context">指示许可证上下文的 <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" />。 </param>
    </member>
    <member name="T:System.ComponentModel.Design.HelpContextType">
      <summary>定义标识符，用以指示有关帮助信息请求所源自的上下文的信息。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Ambient">
      <summary>常规上下文。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Window">
      <summary>窗口。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Selection">
      <summary>选项。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.ToolWindowSelection">
      <summary>工具窗口选项。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordAttribute">
      <summary>指定类或成员的上下文关键字。无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 类的新实例。</summary>
      <param name="keyword">“帮助”关键字值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.Type)">
      <summary>初始化给定类型的 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 类的新实例。</summary>
      <param name="t">将采用“帮助”关键字的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="t" /> 为 null。</exception>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordAttribute.Default">
      <summary>表示 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 的默认值。此字段为只读。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.Equals(System.Object)">
      <summary>确定两个 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 实例是否相等。</summary>
      <returns>
            如果指定的 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 等于当前的 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />，则为 true；否则为 false。</returns>
      <param name="obj">与当前的 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 进行比较的 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.HelpKeywordAttribute.HelpKeyword">
      <summary>获取由此属性提供的“帮助”关键字。</summary>
      <returns>此属性提供的“帮助”关键字。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.IsDefaultAttribute">
      <summary>确定“帮助”关键字是否为 null。</summary>
      <returns>
            如果“帮助”关键字为 null，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordType">
      <summary>定义用于指示帮助关键字类型的标识符。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.F1Keyword">
      <summary>按 F1 请求其帮助的关键字。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.GeneralKeyword">
      <summary>常规关键字。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.FilterKeyword">
      <summary>筛选关键字。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentChangeService">
      <summary>提供一个接口来为添加、更改、移除或重命名组件的事件添加和移除事件处理程序，并提供方法来引发 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> 或 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> 事件。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded">
      <summary>在组件已添加时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding">
      <summary>在添加组件的过程中发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged">
      <summary>在组件已更改时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging">
      <summary>在更改组件的过程中发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved">
      <summary>在组件已移除时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving">
      <summary>在移除组件的过程中发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename">
      <summary>在组件已重命名时发生。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary>向组件更改服务通知特定组件已更改。</summary>
      <param name="component">已更改的组件。</param>
      <param name="member">已更改的成员。如果此更改与单个成员无关，则它将为 null。</param>
      <param name="oldValue">该成员的旧值。仅当成员不为 null 时它才有效。</param>
      <param name="newValue">该成员的新值。仅当成员不为 null 时它才有效。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>向组件更改服务通知特定组件正在发生更改。</summary>
      <param name="component">将要更改的组件。</param>
      <param name="member">正在更改的成员。如果此更改与单个成员无关，则它将为 null。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentDiscoveryService">
      <summary>启用组件的设计时枚举。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes(System.ComponentModel.Design.IDesignerHost,System.Type)">
      <summary>获取可用组件类型的列表。</summary>
      <returns>可用组件类型的列表。</returns>
      <param name="designerHost">提供设计时服务的设计器宿主。可以为 null。</param>
      <param name="baseType">指定要检索的组件的基类型。可以为 null。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentInitializer">
      <summary>在组件创建期间提供一组推荐的默认值。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeExistingComponent(System.Collections.IDictionary)">
      <summary>将组件的实例还原为其默认状态。</summary>
      <param name="defaultValues">默认属性值（即名称/值对）的字典，用于重置组件的状态。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeNewComponent(System.Collections.IDictionary)">
      <summary>使用一组推荐值初始化新组件。</summary>
      <param name="defaultValues">默认属性值（即名称/值对）的字典，用于初始化组件的状态。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesigner">
      <summary>提供用于生成自定义设计器的基本框架。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Component">
      <summary>获取此设计器正在设计的基组件。</summary>
      <returns>表示此设计器所设计的基组件的 <see cref="T:System.ComponentModel.IComponent" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.DoDefaultAction">
      <summary>执行此设计器的默认行为。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>用指定的组件初始化设计器。</summary>
      <param name="component">与此设计器相关联的组件。</param>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Verbs">
      <summary>获取或设置设计器所支持的设计时谓词。</summary>
      <returns>设计器所支持的 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 对象数组，或者在组件无谓词的情况下为 null。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerEventService">
      <summary>出现以下情况时提供事件通知：添加和移除根设计器、选定的组件已更改、当前的根设计器已更改。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner">
      <summary>获取当前处于活动状态的文档的根设计器。</summary>
      <returns>当前处于活动状态的文档，在没有活动文档的情况下为 null。</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged">
      <summary>在当前根设计器更改时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated">
      <summary>在创建根设计器时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed">
      <summary>在释放文档的根设计器时发生。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.Designers">
      <summary>获取开发环境中当前处于活动状态的设计文档的根设计器的集合。</summary>
      <returns>包含已创建且尚未释放的根设计器的 <see cref="T:System.ComponentModel.Design.DesignerCollection" />。</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.SelectionChanged">
      <summary>在当前的设计器视图选择出现更改时发生。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerFilter">
      <summary>提供使设计器能够访问和筛选 <see cref="T:System.ComponentModel.TypeDescriptor" /> 字典的接口，<see cref="T:System.ComponentModel.TypeDescriptor" /> 存储组件设计器可以向设计时环境公开的属性 (Property)、属性 (Attribute) 和事件说明符。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System.Collections.IDictionary)">
      <summary>当在派生类中被重写后，允许设计器更改或移除它通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公开的属性集中的项。</summary>
      <param name="attributes">组件的类的 <see cref="T:System.Attribute" /> 对象。属性字典中的关键字是属性的 <see cref="P:System.Attribute.TypeId" /> 值。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System.Collections.IDictionary)">
      <summary>当在派生类中重写后，允许设计器更改或移除它通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公开的事件集中的项。</summary>
      <param name="events">
        <see cref="T:System.ComponentModel.EventDescriptor" /> 对象，它表示组件的类的事件。事件字典中的关键字是事件名。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System.Collections.IDictionary)">
      <summary>当在派生类中重写后，允许设计器更改或移除它通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公开的属性集中的项。</summary>
      <param name="properties">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象，它表示组件的类的属性。属性字典中的关键字是属性名。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System.Collections.IDictionary)">
      <summary>当在派生类中被重写时，允许设计器将项添加到它通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公开的属性集中。</summary>
      <param name="attributes">组件的类的 <see cref="T:System.Attribute" /> 对象。属性字典中的关键字是属性的 <see cref="P:System.Attribute.TypeId" /> 值。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System.Collections.IDictionary)">
      <summary>当在派生类中被重写时，允许设计器将项添加到它通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公开的事件集中。</summary>
      <param name="events">
        <see cref="T:System.ComponentModel.EventDescriptor" /> 对象，它表示组件的类的事件。事件字典中的关键字是事件名。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System.Collections.IDictionary)">
      <summary>当在派生类中被重写时，允许设计器将项添加到它通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公开的属性集中。</summary>
      <param name="properties">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象，它表示组件的类的属性。属性字典中的关键字是属性名。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHost">
      <summary>提供用于管理设计器事务和组件的接口。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.Activate">
      <summary>激活此宿主所承载的设计器。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Activated">
      <summary>在激活此设计器时发生。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Container">
      <summary>获取此设计器宿主的容器。</summary>
      <returns>此宿主的 <see cref="T:System.ComponentModel.IContainer" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type)">
      <summary>创建指定类型的组件，并将其添加到设计文档中。</summary>
      <returns>新创建的组件。</returns>
      <param name="componentClass">要创建的组件的类型。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type,System.String)">
      <summary>创建指定类型和名称的组件，并将其添加到设计文档中。</summary>
      <returns>新创建的组件。</returns>
      <param name="componentClass">要创建的组件的类型。</param>
      <param name="name">组件的名称。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction">
      <summary>创建 <see cref="T:System.ComponentModel.Design.DesignerTransaction" />，它可封装事件序列以提高性能并启用撤消和重复支持功能。</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> 的新实例。在完成事务中的步骤后，应对此对象调用 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction(System.String)">
      <summary>使用指定的事务说明创建 <see cref="T:System.ComponentModel.Design.DesignerTransaction" />，它可封装事件序列以提高性能并启用撤消和重复支持功能。</summary>
      <returns>新的 <see cref="T:System.ComponentModel.Design.DesignerTransaction" />。在完成事务中的步骤后，应对此对象调用 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" />。</returns>
      <param name="description">新创建的事务的标题或说明。</param>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Deactivated">
      <summary>在停用此设计器时发生。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.DestroyComponent(System.ComponentModel.IComponent)">
      <summary>销毁指定组件并将其从设计器容器中移除。</summary>
      <param name="component">要销毁的组件。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetDesigner(System.ComponentModel.IComponent)">
      <summary>获取包含指定组件的设计器实例。</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.IDesigner" />；或者在指定组件没有设计器的情况下为 null。</returns>
      <param name="component">要为其检索设计器的 <see cref="T:System.ComponentModel.IComponent" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetType(System.String)">
      <summary>获取指定的完全限定类型名称的实例。</summary>
      <returns>指定类型名称的类型对象，或者在无法找到该类型的情况下为 null。</returns>
      <param name="typeName">要加载的类型的名称。</param>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.InTransaction">
      <summary>获取一个值，该值指示设计器宿主当前是否在事务中。</summary>
      <returns>
            如果事务正在进行，则为 true；否则为 false。</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.LoadComplete">
      <summary>在此设计器加载完文档时发生。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Loading">
      <summary>获取一个值，该值指示设计器宿主当前是否正在加载文档。</summary>
      <returns>
            如果设计器宿主当前正在加载文档，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponent">
      <summary>获取用作当前设计的根组件的基类的实例。</summary>
      <returns>根组件类的实例。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponentClassName">
      <summary>获取所设计的类的完全限定名。</summary>
      <returns>基组件类的完全限定名。</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed">
      <summary>添加 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> 事件的事件处理程序。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing">
      <summary>添加 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> 事件的事件处理程序。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.TransactionDescription">
      <summary>获取当前事务的说明。</summary>
      <returns>当前事务的说明。</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened">
      <summary>添加 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened" /> 事件的事件处理程序。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening">
      <summary>添加 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening" /> 事件的事件处理程序。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerOptionService">
      <summary>提供对设计器选项的访问；在 Visual Studio .NET 开发环境中，设计器选项位于工具菜单的选项命令下。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.GetOptionValue(System.String,System.String)">
      <summary>获取指定的 Windows 窗体设计器选项的值。</summary>
      <returns>指定选项的值。</returns>
      <param name="pageName">定义该选项的页的名称。</param>
      <param name="valueName">该选项属性的名称。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.SetOptionValue(System.String,System.String,System.Object)">
      <summary>设置指定的 Windows 窗体设计器选项的值。</summary>
      <param name="pageName">定义该选项的页的名称。</param>
      <param name="valueName">该选项属性的名称。</param>
      <param name="value">新值。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDictionaryService">
      <summary>在设计器可用来存储用户定义数据的服务中提供基本的、组件站点特定的键值对字典。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetKey(System.Object)">
      <summary>获取对应于指定值的键。</summary>
      <returns>关联键，或者在不存在关联键的情况下为 null。</returns>
      <param name="value">要在字典中查找的值。 </param>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetValue(System.Object)">
      <summary>获取对应于指定键的值。</summary>
      <returns>关联值，或者在不存在关联值的情况下为 null。</returns>
      <param name="key">要为其查找值的键。 </param>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.SetValue(System.Object,System.Object)">
      <summary>设置指定的键值对。</summary>
      <param name="key">用作与值相关联的键的对象。 </param>
      <param name="value">要存储的值。 </param>
    </member>
    <member name="T:System.ComponentModel.Design.IEventBindingService">
      <summary>为注册组件事件的事件处理程序提供服务。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary>为指定组件和事件的事件处理程序方法创建唯一的名称。</summary>
      <returns>为此事件的事件处理程序方法建议的名称。</returns>
      <param name="component">事件连接到的组件实例。</param>
      <param name="e">要为其创建名称的事件。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(System.ComponentModel.EventDescriptor)">
      <summary>获取其方法签名与指定事件兼容的事件处理程序方法的集合。</summary>
      <returns>字符串的集合。</returns>
      <param name="e">要为其获取兼容事件处理程序方法的事件。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEvent(System.ComponentModel.PropertyDescriptor)">
      <summary>为指定属性说明符（如果它表示事件）所表示的事件获取 <see cref="T:System.ComponentModel.EventDescriptor" />。</summary>
      <returns>属性所表示的事件的 <see cref="T:System.ComponentModel.EventDescriptor" />，或者在属性不表示事件的情况下为 null。</returns>
      <param name="property">表示事件的属性。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperties(System.ComponentModel.EventDescriptorCollection)">
      <summary>将一组事件说明符转换为一组属性说明符。</summary>
      <returns>对事件集进行描述的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象数组。</returns>
      <param name="events">要转换为属性的事件。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperty(System.ComponentModel.EventDescriptor)">
      <summary>将单个事件说明符转换为属性说明符。</summary>
      <returns>对事件进行描述的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
      <param name="e">要转换的事件。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode">
      <summary>显示设计器的用户代码。</summary>
      <returns>
            如果显示该代码，则为 true，否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary>显示指定事件的用户代码。</summary>
      <returns>
            如果显示该代码，则为 true，否则为 false。</returns>
      <param name="component">事件要连接到组件。</param>
      <param name="e">要显示的事件。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.Int32)">
      <summary>在指定行显示设计器的用户代码。</summary>
      <returns>
            如果显示该代码，则为 true，否则为 false。</returns>
      <param name="lineNumber">要放置插入符号的行号。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderListService">
      <summary>提供可列出扩展程序提供程序的接口。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderListService.GetExtenderProviders">
      <summary>获取组件的扩展程序提供程序集。</summary>
      <returns>列出处于活动状态的扩展程序提供程序的 <see cref="T:System.ComponentModel.IExtenderProvider" /> 类型的数组。如果没有提供程序，则返回空数组。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderProviderService">
      <summary>提供一个接口，用于在设计时添加和移除扩展程序提供程序。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.AddExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary>添加指定的扩展程序提供程序。</summary>
      <param name="provider">要添加的扩展程序提供程序。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.RemoveExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary>移除指定的扩展程序提供程序。</summary>
      <param name="provider">要移除的扩展程序提供程序。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IHelpService">
      <summary>提供在设计时显示“帮助”主题和添加及移除“帮助”关键字的方法。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.AddContextAttribute(System.String,System.String,System.ComponentModel.Design.HelpKeywordType)">
      <summary>向该文档添加上下文属性。</summary>
      <param name="name">要添加的属性的名称。</param>
      <param name="value">属性值。</param>
      <param name="keywordType">
        <see cref="T:System.ComponentModel.Design.HelpKeywordType" /> 枚举中的关键字类型。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ClearContextAttributes">
      <summary>从文档中移除所有现有的上下文属性。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)">
      <summary>创建用于管理子上下文的局部 <see cref="T:System.ComponentModel.Design.IHelpService" />。</summary>
      <returns>新创建的 <see cref="T:System.ComponentModel.Design.IHelpService" />。</returns>
      <param name="contextType">要添加的子上下文的优先级类型。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveContextAttribute(System.String,System.String)">
      <summary>移除先前添加的上下文属性。</summary>
      <param name="name">要移除的属性的名称。</param>
      <param name="value">要移除的属性的值。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveLocalContext(System.ComponentModel.Design.IHelpService)">
      <summary>移除用 <see cref="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)" /> 创建的上下文。</summary>
      <param name="localContext">要移除的局部上下文 <see cref="T:System.ComponentModel.Design.IHelpService" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromKeyword(System.String)">
      <summary>显示对应于指定关键字的帮助主题。</summary>
      <param name="helpKeyword">要显示的帮助主题的关键字。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromUrl(System.String)">
      <summary>显示对应于指定 URL 的帮助主题。</summary>
      <param name="helpUrl">要显示帮助主题的 URL。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IInheritanceService">
      <summary>提供了一组用于标识组件中所含组件的方法。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.AddInheritedComponents(System.ComponentModel.IComponent,System.ComponentModel.IContainer)">
      <summary>在指定的组件中搜索实现 <see cref="T:System.ComponentModel.IComponent" /> 接口的字段，并将它们逐一添加到指定的容器，同时存储它们的继承级别，继承级别可以使用 <see cref="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)" /> 方法检索。</summary>
      <param name="component">要搜索的 <see cref="T:System.ComponentModel.IComponent" />。从这个组件开始搜索。</param>
      <param name="container">要向其添加组件的 <see cref="T:System.ComponentModel.IContainer" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)">
      <summary>获取指定组件的继承属性。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.InheritanceAttribute" /> 的实例，用于描述指定组件的继承级别。</returns>
      <param name="component">要为其检索继承属性的 <see cref="T:System.ComponentModel.IComponent" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IMenuCommandService">
      <summary>提供的方法用于管理设计模式下可用的全局设计器谓词和菜单命令，以及显示某些类型的快捷菜单。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddCommand(System.ComponentModel.Design.MenuCommand)">
      <summary>将指定的标准菜单命令添加到菜单中。</summary>
      <param name="command">要添加的 <see cref="T:System.ComponentModel.Design.MenuCommand" />。</param>
      <exception cref="T:System.InvalidOperationException">菜单上已存在指定 <see cref="T:System.ComponentModel.Design.MenuCommand" /> 的 <see cref="T:System.ComponentModel.Design.CommandID" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary>将指定的设计器谓词添加到全局设计器谓词集中。</summary>
      <param name="verb">要添加的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.FindCommand(System.ComponentModel.Design.CommandID)">
      <summary>搜索指定的命令 ID 并返回与之关联的菜单命令。</summary>
      <returns>与该命令 ID 相关联的 <see cref="T:System.ComponentModel.Design.MenuCommand" />，或者在未找到命令的情况下返回 null。</returns>
      <param name="commandID">要搜索的 <see cref="T:System.ComponentModel.Design.CommandID" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID)">
      <summary>调用与指定的命令 ID 匹配的菜单或设计器谓词命令。</summary>
      <returns>
            如果成功地找到并调用命令，则为 true；否则为 false。</returns>
      <param name="commandID">要搜索和执行的命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveCommand(System.ComponentModel.Design.MenuCommand)">
      <summary>从菜单移除指定的标准菜单命令。</summary>
      <param name="command">要移除的 <see cref="T:System.ComponentModel.Design.MenuCommand" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary>从全局设计器谓词的集合中移除指定的设计器谓词。</summary>
      <param name="verb">要移除的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)">
      <summary>在指定位置显示指定的快捷菜单。</summary>
      <param name="menuID">要显示的快捷菜单的 <see cref="T:System.ComponentModel.Design.CommandID" />。</param>
      <param name="x">屏幕上的 x 坐标，菜单此处显示。</param>
      <param name="y">屏幕上的 y 坐标，菜单此处显示。</param>
    </member>
    <member name="P:System.ComponentModel.Design.IMenuCommandService.Verbs">
      <summary>获取或设置当前可用的设计器谓词数组。</summary>
      <returns>指示当前可用设计器谓词的 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 类型的数组。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IReferenceService">
      <summary>提供的接口用于：按名称或类型获取对项目内对象的引用、获取指定对象的名称、在设计器项目内定位指定对象的父对象。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetComponent(System.Object)">
      <summary>获取包含指定组件的组件。</summary>
      <returns>包含指定对象的基 <see cref="T:System.ComponentModel.IComponent" />，如果不存在父组件，则为 null。</returns>
      <param name="reference">为其检索父组件的对象。 </param>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetName(System.Object)">
      <summary>获取指定组件的名称。</summary>
      <returns>所引用对象的名称，或者在对象引用无效的情况下为 null。</returns>
      <param name="reference">要返回其名称的对象。 </param>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReference(System.String)">
      <summary>获取对其名称与指定名称匹配的组件的引用。</summary>
      <returns>指定名称所引用的对象，或者在未找到引用的情况下为 null。</returns>
      <param name="name">要返回其引用的组件的名称。 </param>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences">
      <summary>获取对项目组件的所有可用的引用。</summary>
      <returns>带有可用于 <see cref="T:System.ComponentModel.Design.IReferenceService" /> 的引用的所有对象的数组。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences(System.Type)">
      <summary>获取对指定类型组件的所有可用引用。</summary>
      <returns>指定类型的所有可用对象的数组。</returns>
      <param name="baseType">要返回对其实例引用的对象类型。 </param>
    </member>
    <member name="T:System.ComponentModel.Design.IResourceService">
      <summary>为设计器提供访问特定 <see cref="T:System.Globalization.CultureInfo" /> 资源类型的资源读取器和编写器的接口。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceReader(System.Globalization.CultureInfo)">
      <summary>查找并返回指定区域性的资源阅读器。</summary>
      <returns>包含区域性资源的 <see cref="T:System.Resources.IResourceReader" /> 接口，或者在区域性没有相应资源的情况下为 null。</returns>
      <param name="info">要为其检索资源阅读器的资源的 <see cref="T:System.Globalization.CultureInfo" />。 </param>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceWriter(System.Globalization.CultureInfo)">
      <summary>查找并返回指定区域性的资源编写器。</summary>
      <returns>指定区域性的 <see cref="T:System.Resources.IResourceWriter" /> 接口。</returns>
      <param name="info">要为其创建资源编写器的资源的 <see cref="T:System.Globalization.CultureInfo" />。 </param>
    </member>
    <member name="T:System.ComponentModel.Design.IRootDesigner">
      <summary>提供对根级设计器视图技术的支持。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IRootDesigner.GetView(System.ComponentModel.Design.ViewTechnology)">
      <summary>获取指定视图技术的视图对象。</summary>
      <returns>表示此设计器的视图的对象。</returns>
      <param name="technology">指示特定视图技术的 <see cref="T:System.ComponentModel.Design.ViewTechnology" />。</param>
      <exception cref="T:System.ArgumentException">指定的视图技术不受支持或不存在。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.IRootDesigner.SupportedTechnologies">
      <summary>获取此设计器可为其显示提供支持的技术集。</summary>
      <returns>受支持的 <see cref="T:System.ComponentModel.Design.ViewTechnology" /> 值的数组。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ISelectionService">
      <summary>为设计器提供用于选择组件的接口。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetComponentSelected(System.Object)">
      <summary>获取一个值，该值指示当前是否选定指定组件。</summary>
      <returns>
            如果该组件是用户当前选择的一部分，则为 true；否则为 false。</returns>
      <param name="component">要测试的组件。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetSelectedComponents">
      <summary>获取当前选定的组件的集合。</summary>
      <returns>表示当前选定的组件集的集合。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.PrimarySelection">
      <summary>获取当前为主选定对象的对象。</summary>
      <returns>当前为主选定对象的对象。</returns>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanged">
      <summary>在当前选择出现更改时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanging">
      <summary>在将要更改当前选择时发生。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.SelectionCount">
      <summary>获取选定对象的计数。</summary>
      <returns>选定对象的数目。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection)">
      <summary>选择指定的组件集合。</summary>
      <param name="components">要选择的组件的集合。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection,System.ComponentModel.Design.SelectionTypes)">
      <summary>从匹配指定选择类型的指定组件集合中选择组件。</summary>
      <param name="components">要选择的组件的集合。</param>
      <param name="selectionType">
        <see cref="T:System.ComponentModel.Design.SelectionTypes" /> 枚举中的一个值。默认为 <see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IServiceContainer">
      <summary>提供服务的容器。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary>将指定的服务添加到服务容器中。</summary>
      <param name="serviceType">要添加的服务类型。</param>
      <param name="callback">用于创建服务的回调对象。这允许将服务声明为可用，但将对象的创建延迟到请求该服务之后。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary>将指定服务添加到服务容器中，并可选择将该服务提升到父服务容器。</summary>
      <param name="serviceType">要添加的服务类型。</param>
      <param name="callback">用于创建服务的回调对象。这允许将服务声明为可用，但将对象的创建延迟到请求该服务之后。</param>
      <param name="promote">true，则将此请求提升到任何父服务容器；否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object)">
      <summary>将指定的服务添加到服务容器中。</summary>
      <param name="serviceType">要添加的服务类型。</param>
      <param name="serviceInstance">要添加的服务类型的实例。此对象必须实现 <paramref name="serviceType" /> 参数指示的类型或从其继承。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary>将指定服务添加到服务容器中，并可选择将该服务提升到任何父服务容器。</summary>
      <param name="serviceType">要添加的服务类型。</param>
      <param name="serviceInstance">要添加的服务类型的实例。此对象必须实现 <paramref name="serviceType" /> 参数指示的类型或从其继承。</param>
      <param name="promote">true，则将此请求提升到任何父服务容器；否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type)">
      <summary>从服务容器中移除指定的服务类型。</summary>
      <param name="serviceType">要移除的服务类型。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary>从服务容器中移除指定的服务类型，并可选择将该服务提升到父服务容器。</summary>
      <param name="serviceType">要移除的服务类型。</param>
      <param name="promote">true，则将此请求提升到任何父服务容器；否则为 false。</param>
    </member>
    <member name="T:System.ComponentModel.Design.ITreeDesigner">
      <summary>为建立一组相关的自定义设计器提供支持。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Children">
      <summary>获取子设计器的集合。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />，其中包含当前设计器的 <see cref="T:System.ComponentModel.Design.IDesigner" /> 子对象的集合。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Parent">
      <summary>获取父设计器。</summary>
      <returns>表示父设计器的 <see cref="T:System.ComponentModel.Design.IDesigner" />，如果没有父设计器，则为 null。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDescriptorFilterService">
      <summary>提供在设计模式下修改组件的成员说明符集的接口。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>筛选组件通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公开的属性 (Attribute)。</summary>
      <returns>
            如果将缓存经过筛选的属性 (Attribute) 集，则为 true；如果筛选服务必须再次查询，则为 false。</returns>
      <param name="component">要筛选其属性 (Attribute) 的组件。</param>
      <param name="attributes">可修改的属性 (Attribute) 字典。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>筛选组件通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公开的事件。</summary>
      <returns>
            如果将缓存经过筛选的事件集，则为 true；如果筛选服务必须再次查询，则为 false。</returns>
      <param name="component">要为其筛选事件的组件。</param>
      <param name="events">可修改的事件字典。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>筛选组件通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公开的属性 (Property)。</summary>
      <returns>
            如果将缓存经过筛选的属性 (Property) 集，则为 true；如果筛选服务必须再次查询，则为 false。</returns>
      <param name="component">要筛选其属性 (Property) 的组件。</param>
      <param name="properties">可修改的属性 (Property)字典。</param>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDiscoveryService">
      <summary>发现设计时可用的类型。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDiscoveryService.GetTypes(System.Type,System.Boolean)">
      <summary>检索可用类型的列表。</summary>
      <returns>与 <paramref name="baseType" /> 和 <paramref name="excludeGlobalTypes" /> 指定的条件相匹配的类型的集合。</returns>
      <param name="baseType">要匹配的基类型。可以为 null。</param>
      <param name="excludeGlobalTypes">指示是否应检查来自所有引用程序集的类型。</param>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeResolutionService">
      <summary>提供按名称检索程序集或类型的接口。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName)">
      <summary>获取请求的程序集。</summary>
      <returns>所请求的程序集的实例，或者如果找不到任何程序集，则为 null。</returns>
      <param name="name">要检索的程序集的名称。 </param>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName,System.Boolean)">
      <summary>获取请求的程序集。</summary>
      <returns>所请求的程序集的实例，或者如果找不到任何程序集，则为 null。</returns>
      <param name="name">要检索的程序集的名称。 </param>
      <param name="throwOnError">
如果在无法找到程序集时此方法应引发异常，则为 true；否则为 false，而且当无法找到程序集时，此方法将返回 null。 </param>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetPathOfAssembly(System.Reflection.AssemblyName)">
      <summary>获取从中加载程序集的文件的路径。</summary>
      <returns>从中加载程序集的文件的路径。</returns>
      <param name="name">程序集的名称。 </param>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String)">
      <summary>用指定的名称加载类型。</summary>
      <returns>与指定名称对应的 <see cref="T:System.Type" /> 的实例，或者如果找不到任何类型，则为 null。</returns>
      <param name="name">类型名称。如果类型名不是指示程序集的完全限定名，则此服务将搜索其引用的程序集的内部集合。 </param>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean)">
      <summary>用指定的名称加载类型。</summary>
      <returns>与指定名称对应的 <see cref="T:System.Type" /> 的实例，或者如果找不到任何类型，则为 null。</returns>
      <param name="name">类型名称。如果类型名不是指示程序集的完全限定名，则此服务将搜索其引用的程序集的内部集合。 </param>
      <param name="throwOnError">
如果在无法找到程序集时此方法应引发异常，则为 true；否则为 false，而且当无法找到程序集时，此方法将返回 null。 </param>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>用指定的名称加载类型。</summary>
      <returns>与指定名称对应的 <see cref="T:System.Type" /> 的实例，或者如果找不到任何类型，则为 null。</returns>
      <param name="name">类型名称。如果类型名不是指示程序集的完全限定名，则此服务将搜索其引用的程序集的内部集合。 </param>
      <param name="throwOnError">
如果在无法找到程序集时此方法应引发异常，则为 true；否则为 false，而且当无法找到程序集时，此方法将返回 null。 </param>
      <param name="ignoreCase">
                如果为 true，则在搜索类型时忽略大小写；否则为 false。 </param>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.ReferenceAssembly(System.Reflection.AssemblyName)">
      <summary>将引用添加到指定程序集中。</summary>
      <param name="name">此 <see cref="T:System.Reflection.AssemblyName" /> 指示要引用的程序集。 </param>
    </member>
    <member name="T:System.ComponentModel.Design.MenuCommand">
      <summary>表示 Windows 菜单项或工具栏命令项。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.#ctor(System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.MenuCommand" /> 类的新实例。</summary>
      <param name="handler">在用户选择菜单项或工具栏按钮时引发的事件。</param>
      <param name="command">将此菜单命令链接到环境菜单的唯一命令 ID。</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Checked">
      <summary>获取或设置一个值，用以指示是否选中此菜单项。</summary>
      <returns>
            如果选中该项，则为 true；否则为 false。</returns>
    </member>
    <member name="E:System.ComponentModel.Design.MenuCommand.CommandChanged">
      <summary>在菜单命令出现更改时发生。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.CommandID">
      <summary>获取与此菜单命令相关联的 <see cref="T:System.ComponentModel.Design.CommandID" />。</summary>
      <returns>与此菜单命令相关联的 <see cref="T:System.ComponentModel.Design.CommandID" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Enabled">
      <summary>获取一个值，该值指示此菜单项是否可用。</summary>
      <returns>
            如果已启用此项，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke">
      <summary>调用该命令。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke(System.Object)">
      <summary>使用给定参数调用命令。</summary>
      <param name="arg">供该命令使用的可选参数。</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.OleStatus">
      <summary>获取此菜单项的 OLE 命令状态代码。</summary>
      <returns>一个整数，由反映此菜单项状态的状态标志组合而成。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.OnCommandChanged(System.EventArgs)">
      <summary>引发 <see cref="E:System.ComponentModel.Design.MenuCommand.CommandChanged" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Properties">
      <summary>获取与 <see cref="T:System.ComponentModel.Design.MenuCommand" /> 关联的公共属性。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> 包含 <see cref="T:System.ComponentModel.Design.MenuCommand" /> 的公共属性。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Supported">
      <summary>获取或设置一个值，用以指示是否支持此菜单项。</summary>
      <returns>
            如果支持此项（默认情况），则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.ToString">
      <summary>返回此菜单命令的字符串表示形式。</summary>
      <returns>一个字符串，它包含 <see cref="P:System.ComponentModel.Design.MenuCommand.CommandID" /> 属性的值并附加所设置的任何标志的名称，两者用竖线 (|) 分隔。 这些标志属性包括 <see cref="P:System.ComponentModel.Design.MenuCommand.Checked" />、<see cref="P:System.ComponentModel.Design.MenuCommand.Enabled" />、<see cref="P:System.ComponentModel.Design.MenuCommand.Supported" /> 和 <see cref="P:System.ComponentModel.Design.MenuCommand.Visible" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Visible">
      <summary>获取或设置一个值，用以指示此菜单项是否可见。</summary>
      <returns>
            如果此项可见，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.SelectionTypes">
      <summary>定义用于指示选择类型的标识符。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Auto">
      <summary>表示常规选择。此选择服务对 Ctrl 和 Shift 键作出响应，以支持在所选内容中添加或移除组件。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Normal">
      <summary>表示常规选择。此选择服务对 Ctrl 和 Shift 键作出响应，以支持在所选内容中添加或移除组件。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Replace">
      <summary>表示当选择的内容被替换时发生的选择。此选择服务用替换内容替换当前选定的内容。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseDown">
      <summary>表示当鼠标指针位于组件上时，用户按下鼠标按钮所发生的选择。如果已选定指针下的组件，则将该组件提升为主选定组件，而不是取消选择。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseUp">
      <summary>表示选定组件后用户立即释放鼠标按钮时发生的选择。如果新选择的组件已被选定，则将该组件提升为主选定组件，而不是取消选择。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Click">
      <summary>表示当用户单击组件时发生的选择。如果新选择的组件已被选定，则将该组件提升为主选定组件，而不是取消选择。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Primary">
      <summary>表示当用户单击组件时发生的主选择。如果所选内容列表中的组件已被选定，则将该组件提升为主所选内容。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Toggle">
      <summary>表示切换所选内容，它在当前所选内容与所提供的所选内容之间切换。如果组件已被选定并且以选择类型 <see cref="F:System.ComponentModel.Design.SelectionTypes.Toggle" /> 传入 <see cref="Overload:System.ComponentModel.Design.ISelectionService.SetSelectedComponents" />，则该组件选择将被取消。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Add">
      <summary>表示添加所选内容，它向当前所选内容中添加选择的组件，以保持当前选定组件的集合。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Remove">
      <summary>表示移除所选内容，它从当前所选内容中移除选择的组件，以保持当前选定组件的集合。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Valid">
      <summary>将有效选择类型标识为 <see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" />、<see cref="F:System.ComponentModel.Design.SelectionTypes.Replace" />、<see cref="F:System.ComponentModel.Design.SelectionTypes.MouseDown" />、<see cref="F:System.ComponentModel.Design.SelectionTypes.MouseUp" /> 或 <see cref="F:System.ComponentModel.Design.SelectionTypes.Click" />。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceContainer">
      <summary>提供 <see cref="T:System.ComponentModel.Design.IServiceContainer" /> 接口的简单实现。无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.ServiceContainer" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor(System.IServiceProvider)">
      <summary>使用指定的父服务提供程序初始化 <see cref="T:System.ComponentModel.Design.ServiceContainer" /> 类的新实例。</summary>
      <param name="parentProvider">父服务提供程序。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary>将指定的服务添加到服务容器中。</summary>
      <param name="serviceType">要添加的服务类型。</param>
      <param name="callback">可创建该服务的回调对象。它允许将服务声明为可用，但是会将对象的创建延迟到请求该服务之后。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" />或 <paramref name="callback" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">容器中已存在类型为 <paramref name="serviceType" /> 的服务。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary>将指定的服务添加到服务容器中。</summary>
      <param name="serviceType">要添加的服务类型。</param>
      <param name="callback">可创建该服务的回调对象。它允许将服务声明为可用，但是会将对象的创建延迟到请求该服务之后。</param>
      <param name="promote">
如果应将此服务添加到任何父服务容器，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" />或 <paramref name="callback" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">容器中已存在类型为 <paramref name="serviceType" /> 的服务。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object)">
      <summary>将指定的服务添加到服务容器中。</summary>
      <param name="serviceType">要添加的服务类型。</param>
      <param name="serviceInstance">要添加的服务的实例。此对象必须实现 <paramref name="serviceType" /> 参数所指示的类型或从其继承。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 或 <paramref name="serviceInstance" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">容器中已存在类型为 <paramref name="serviceType" /> 的服务。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary>将指定的服务添加到服务容器中。</summary>
      <param name="serviceType">要添加的服务类型。</param>
      <param name="serviceInstance">要添加的服务类型的实例。此对象必须实现 <paramref name="serviceType" /> 参数指示的类型或从其继承。</param>
      <param name="promote">
如果应将此服务添加到任何父服务容器，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 或 <paramref name="serviceInstance" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">容器中已存在类型为 <paramref name="serviceType" /> 的服务。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.ServiceContainer.DefaultServices">
      <summary>获取由 <see cref="T:System.ComponentModel.Design.ServiceContainer" /> 直接实现的默认服务。</summary>
      <returns>默认服务。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose">
      <summary>释放此服务容器。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose(System.Boolean)">
      <summary>释放此服务容器。</summary>
      <param name="disposing">
                如果 <see cref="T:System.ComponentModel.Design.ServiceContainer" /> 正在被释放的过程中，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.GetService(System.Type)">
      <summary>获取所请求的服务。</summary>
      <returns>服务的实例（如果可以找到该服务），或者在无法找到该服务的情况下为 null。</returns>
      <param name="serviceType">要检索的服务类型。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type)">
      <summary>从服务容器中移除指定的服务类型。</summary>
      <param name="serviceType">要移除的服务类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary>从服务容器中移除指定的服务类型。</summary>
      <param name="serviceType">要移除的服务类型。</param>
      <param name="promote">
                如果应该从任何父服务容器中移除此服务，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 为 null。</exception>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceCreatorCallback">
      <summary>提供一种回调机制，它可以即需创建服务的实例。</summary>
      <returns>由 <paramref name="serviceType" /> 指定的服务；如果未能创建服务，则为 null。</returns>
      <param name="container">请求创建服务的服务容器。</param>
      <param name="serviceType">要创建的服务的类型。</param>
    </member>
    <member name="T:System.ComponentModel.Design.StandardCommands">
      <summary>定义可用于大多数应用程序的标准命令集的标识符。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardCommands.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.StandardCommands" /> 类的新实例。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignBottom">
      <summary>获取“AlignBottom”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignHorizontalCenters">
      <summary>获取“AlignHorizontalCenters”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignLeft">
      <summary>获取“AlignLeft”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignRight">
      <summary>获取“AlignRight”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignToGrid">
      <summary>获取“AlignToGrid”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignTop">
      <summary>获取“AlignTop”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignVerticalCenters">
      <summary>获取“AlignVerticalCenters”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeBottom">
      <summary>获取“ArrangeBottom”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeIcons">
      <summary>获取“ArrangeIcons”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeRight">
      <summary>获取“ArrangeRight”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringForward">
      <summary>获取“BringForward”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringToFront">
      <summary>获取“BringToFront”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterHorizontally">
      <summary>获取“CenterHorizontally”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterVertically">
      <summary>获取“CenterVertically”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Copy">
      <summary>获取“Copy”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Cut">
      <summary>获取“Cut”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Delete">
      <summary>获取“Delete”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.DocumentOutline">
      <summary>获取“Document Outline”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.F1Help">
      <summary>获取“F1Help”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Group">
      <summary>获取“Group”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceConcatenate">
      <summary>获取“HorizSpaceConcatenate”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceDecrease">
      <summary>获取“HorizSpaceDecrease”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceIncrease">
      <summary>获取“HorizSpaceIncrease”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceMakeEqual">
      <summary>获取“HorizSpaceMakeEqual”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LineupIcons">
      <summary>获取“LineupIcons”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LockControls">
      <summary>获取“LockControls”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelRedo">
      <summary>获取“MultiLevelRedo”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelUndo">
      <summary>获取“MultiLevelUndo”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Paste">
      <summary>获取“Paste”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Properties">
      <summary>获取“Properties”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.PropertiesWindow">
      <summary>获取“PropertiesWindow”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Redo">
      <summary>获取“Redo”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Replace">
      <summary>获取“Replace”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SelectAll">
      <summary>获取“SelectAll”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendBackward">
      <summary>获取“SendBackward”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendToBack">
      <summary>获取“SendToBack”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowGrid">
      <summary>获取“ShowGrid”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowLargeIcons">
      <summary>获取“ShowLargeIcons”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControl">
      <summary>获取“SizeToControl”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlHeight">
      <summary>获取“SizeToControlHeight”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlWidth">
      <summary>获取“SizeToControlWidth”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToFit">
      <summary>获取“SizeToFit”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToGrid">
      <summary>获取“SizeToGrid”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SnapToGrid">
      <summary>获取“SnapToGrid”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.TabOrder">
      <summary>获取“TabOrder”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Undo">
      <summary>获取“Undo”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Ungroup">
      <summary>获取“Ungroup”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbFirst">
      <summary>获取一组谓词中的第一个。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbLast">
      <summary>获取一组谓词中的最后一个。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceConcatenate">
      <summary>获取“VertSpaceConcatenate”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceDecrease">
      <summary>获取“VertSpaceDecrease”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceIncrease">
      <summary>获取“VertSpaceIncrease”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceMakeEqual">
      <summary>获取“VertSpaceMakeEqual”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewCode">
      <summary>获取“ViewCode”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewGrid">
      <summary>获取“ViewGrid”命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。此字段为只读。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.StandardToolWindows">
      <summary>定义 GUID 标识符，它们对应于在设计环境中提供的标准工具窗口集。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardToolWindows.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.StandardToolWindows" /> 类的新实例。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ObjectBrowser">
      <summary>获取对象浏览器的 GUID。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.OutputWindow">
      <summary>获取输出窗口的 GUID。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ProjectExplorer">
      <summary>获取解决方案资源管理器的 GUID。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.PropertyBrowser">
      <summary>获取“属性”窗口的 GUID。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.RelatedLinks">
      <summary>获取相关链接框架的 GUID。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ServerExplorer">
      <summary>获取服务器资源管理器的 GUID。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.TaskList">
      <summary>获取任务列表的 GUID。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.Toolbox">
      <summary>获取工具箱的 GUID。此字段为只读。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.ViewTechnology">
      <summary>定义设计器宿主所支持的技术集的标识符。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Passthrough">
      <summary>表示将视图对象直接传递给开发环境的模式。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.WindowsForms">
      <summary>表示由 Windows 窗体控件对象为根设计器提供显示的模式。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Default">
      <summary>指定默认的视图技术支持。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHostTransactionState">
      <summary>指定设计器宿主用于报告事务状态的方法。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHostTransactionState.IsClosingTransaction">
      <summary>获取一个值，该值指示设计器宿主是否正在关闭事务。 </summary>
      <returns>
            如果设计器正在关闭事务，则为 true；否则为 false。 </returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ComponentSerializationService">
      <summary>提供用于将一组组件或可序列化的对象序列化到序列化存储区的基类。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.CreateStore">
      <summary>创建一个新的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</summary>
      <returns>新的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore)">
      <summary>将给定存储区反序列化以产生一个对象集合。</summary>
      <returns>根据存储状态创建的对象集合。</returns>
      <param name="store">要反序列化的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 不包含任何具有序列化容器可以处理的格式的数据。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary>将给定存储区反序列化，并使用反序列化的 <see cref="T:System.ComponentModel.IComponent" /> 对象填充给定的 <see cref="T:System.ComponentModel.IContainer" />。</summary>
      <returns>根据存储状态创建的对象集合。</returns>
      <param name="store">要反序列化的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="container">
        <see cref="T:System.ComponentModel.IComponent" /> 对象将要添加到的 <see cref="T:System.ComponentModel.IContainer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 或 <paramref name="container" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 不包含任何具有序列化容器可以处理的格式的数据。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary>将给定的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 反序列化为给定的容器。</summary>
      <param name="store">要反序列化的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="container">
        <see cref="T:System.ComponentModel.IComponent" /> 对象将要添加到的容器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 或 <paramref name="container" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 不包含任何具有序列化容器可以处理的格式的数据。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean)">
      <summary>将给定 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 反序列化为给定容器，还可以验证回收类型。</summary>
      <param name="store">要反序列化的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="container">
        <see cref="T:System.ComponentModel.IComponent" /> 对象将要添加到的容器。</param>
      <param name="validateRecycledTypes">
                为 true 时，保证只有在应用于同类型对象时，反序列化才起作用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 或 <paramref name="container" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 不包含任何具有序列化容器可以处理的格式的数据。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean,System.Boolean)">
      <summary>将给定 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 反序列化为给定容器，还可以应用默认属性值。</summary>
      <param name="store">要反序列化的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="container">
        <see cref="T:System.ComponentModel.IComponent" /> 对象将要添加到的容器。</param>
      <param name="validateRecycledTypes">
                为 true 时，保证只有在应用于同类型对象时，反序列化才起作用。</param>
      <param name="applyDefaults">
                为 true 时，表示应当应用默认属性值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 或 <paramref name="container" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 不包含任何具有序列化容器可以处理的格式的数据。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.LoadStore(System.IO.Stream)">
      <summary>从流中加载 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</summary>
      <returns>新 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 实例。</returns>
      <param name="stream">将要从中加载存储区的 <see cref="T:System.IO.Stream" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="stream" /> 不包含由前面某个对 <see cref="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)" /> 的调用保存的数据。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Serialize(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary>将给定的对象序列化为给定的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</summary>
      <param name="store">
        <paramref name="value" /> 的状态将写入的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="value">要序列化的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" />或 <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 已关闭，或者 <paramref name="store" /> 不是序列化存储区的支持类型。使用 <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" /> 返回的存储区。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary>根据默认属性值序列化给定对象。</summary>
      <param name="store">
        <paramref name="value" /> 的状态将序列化到的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="value">要序列化的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" />或 <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 已关闭，或者 <paramref name="store" /> 不是序列化存储区的支持类型。使用 <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" /> 返回的存储区。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMember(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>序列化给定对象上的给定成员。</summary>
      <param name="store">
        <paramref name="member" /> 的状态将序列化到的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="owningObject">在其上附加 <paramref name="member" /> 的对象。</param>
      <param name="member">
        <see cref="T:System.ComponentModel.MemberDescriptor" /> 指定要序列化的成员。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" />或 <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 已关闭，或者 <paramref name="store" /> 不是序列化存储区的支持类型。使用 <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" /> 返回的存储区。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMemberAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>根据默认属性值，序列化给定对象上的给定成员。</summary>
      <param name="store">
        <paramref name="member" /> 的状态将序列化到的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="owningObject">在其上附加 <paramref name="member" /> 的对象。</param>
      <param name="member">要序列化的成员。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" />或 <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 已关闭，或者 <paramref name="store" /> 不是序列化存储区的支持类型。使用 <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" /> 返回的存储区。</exception>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ContextStack">
      <summary>提供堆栈对象，序列化程序可使用该对象向嵌套的序列化程序提供信息。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Append(System.Object)">
      <summary>将对象追加到堆栈的结尾，而不是将其推到堆栈的顶部。</summary>
      <param name="context">要追加到堆栈中的上下文对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Current">
      <summary>获取堆栈上的当前对象。</summary>
      <returns>堆栈上的当前对象，或者如果未推入任何对象则为 null。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Int32)">
      <summary>获取堆栈上指定级别的对象。</summary>
      <returns>堆栈上指定级别的对象，或者在该级别不存在任何对象则为 null。</returns>
      <param name="level">要在堆栈上检索的对象的级别。级别 0 是堆栈的顶级，级别 1 是接下来的一级，依次类推。此级别必须大于或等于 0。如果级别大于该堆栈上的级别数，它返回 null。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="level" /> 小于 0。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Type)">
      <summary>获取堆栈上从指定类型继承或者实现指定类型的第一个对象。</summary>
      <returns>堆栈上从指定类型继承或者实现指定类型的第一个对象，或者如果在堆栈上没有任何对象实现此类型则为 null。</returns>
      <param name="type">要从上下文堆栈检索的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Pop">
      <summary>从堆栈中移除当前对象并返回其值。</summary>
      <returns>已从堆栈中移除的对象；如果堆栈中没有对象，则返回 null。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Push(System.Object)">
      <summary>将指定对象推入（即放置）到堆栈上。</summary>
      <param name="context">推入到堆栈上的上下文对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> 属性被放置在序列化程序上，以指示要用作该类型序列化程序的默认提供程序的类。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.String)">
      <summary>用命名的提供程序类型初始化 <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> 类的新实例。</summary>
      <param name="providerTypeName">序列化提供程序类型的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerTypeName" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.Type)">
      <summary>使用给定的提供程序类型初始化 <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> 类的新实例。</summary>
      <param name="providerType">序列化提供程序的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerType" /> 为 null。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.ProviderTypeName">
      <summary>获取序列化提供程序的类型名。</summary>
      <returns>包含提供程序名称的字符串。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerLoader">
      <summary>提供可用于实现自定义设计器加载程序的基本设计器加载程序接口。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.BeginLoad(System.ComponentModel.Design.Serialization.IDesignerLoaderHost)">
      <summary>开始加载一个设计器。</summary>
      <param name="host">此加载程序用来加载组件的加载程序宿主。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Dispose">
      <summary>释放由 <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Flush">
      <summary>将缓存的更改写入设计器的加载位置。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerLoader.Loading">
      <summary>获取一个值，该值指示加载程序当前是否正在加载文档。</summary>
      <returns>
            如果加载程序当前正加载一个文档，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute">
      <summary>指示某个序列化管理器的序列化程序，它将用于序列化此属性所应用到的类型的值。无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" /> 类的新实例。</summary>
      <param name="serializerTypeName">序列化程序的数据类型的完全限定名。</param>
      <param name="baseSerializerTypeName">序列化程序的基数据类型的完全限定名。只要序列化程序具有不同的基类型，就可以为一个类提供多个序列化程序。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.Type)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" /> 类的新实例。</summary>
      <param name="serializerTypeName">序列化程序的数据类型的完全限定名。</param>
      <param name="baseSerializerType">序列化程序的基数据类型。只要序列化程序具有不同的基类型，就可以为一个类提供多个序列化程序。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.Type,System.Type)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" /> 类的新实例。</summary>
      <param name="serializerType">序列化程序的数据类型。</param>
      <param name="baseSerializerType">序列化程序的基数据类型。只要序列化程序具有不同的基类型，就可以为一个类提供多个序列化程序。</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerBaseTypeName">
      <summary>获取序列化程序基类型的完全限定类型名。</summary>
      <returns>序列化程序基类型的完全限定类型名。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerTypeName">
      <summary>获取序列化程序的完全限定类型名。</summary>
      <returns>序列化程序的完全限定类型名。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.TypeId">
      <summary>指示此属性类型的唯一 ID。</summary>
      <returns>此属性类型的唯一 ID。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost">
      <summary>提供一个接口，该接口可扩展设计器宿主以支持从序列化状态加载。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad(System.String,System.Boolean,System.Collections.ICollection)">
      <summary>结束设计器加载操作。</summary>
      <param name="baseClassName">此设计器正在设计的文档的基类的完全限定名。</param>
      <param name="successful">
                如果设计器已成功加载，则为 true；否则为 false。</param>
      <param name="errorCollection">包含加载期间遇到的错误（如果有的话）的集合。如果没有遇到任何错误，则传递空集合或 null。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload">
      <summary>重新加载设计文档。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderService">
      <summary>提供一个接口，该接口可以扩展设计器加载程序以支持外部组件的异步加载。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency">
      <summary>将外部组件注册为由此接口管理的加载进程的一部分。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(System.Boolean,System.Collections.ICollection)">
      <summary>发出信号表示已完成依赖加载。</summary>
      <param name="successful">
                如果设计器的加载成功，则为 true；如果出现的错误阻止了加载完成，则为 false。</param>
      <param name="errorCollection">加载期间发生的错误（如果有的话）的集合。如果没有发生任何错误，则传递空集合或 null。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload">
      <summary>重新加载设计文档。</summary>
      <returns>
            如果接受重新加载请求，则为 true；如果加载程序不允许重新加载，则为 false。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager">
      <summary>提供可以管理设计时序列化的接口。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary>向序列化管理器添加指定的序列化提供程序。</summary>
      <param name="provider">要添加的序列化提供程序。</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context">
      <summary>获取基于堆栈的、用户定义的存储区域，该区域对于序列化程序之间的通讯十分有用。</summary>
      <returns>存储数据的 <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)">
      <summary>创建指定类型的实例并将其添加到已命名实例的集合中。</summary>
      <returns>新创建的对象实例。</returns>
      <param name="type">要创建的数据类型。</param>
      <param name="arguments">要传递到此类型的构造函数的参数。</param>
      <param name="name">对象的名称。此名称可用于以后通过 <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)" /> 访问该对象。如果传递了 null，则仍将创建该对象，但无法按名称访问它。</param>
      <param name="addToContainer">如果为 true，则该对象将被添加到设计容器中。该对象必须实现 <see cref="T:System.ComponentModel.IComponent" /> 才能使此功能生效。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)">
      <summary>获取指定名称的已创建对象的实例，如果该对象不存在则为 null。</summary>
      <returns>具有给定名称的对象的实例，如果按该名称无法找到任何对象则为 null。</returns>
      <param name="name">要检索的对象的名称。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)">
      <summary>获取指定对象的名称，如果该对象不具有名称则为 null。</summary>
      <returns>对象的名称，如果对象是未命名的，则为 null。</returns>
      <param name="value">要检索其名称的对象。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(System.Type,System.Type)">
      <summary>为指定对象类型获取所请求类型的序列化程序。</summary>
      <returns>请求的序列化程序的实例，如果不能找到任何适当的序列化程序，则为 null。</returns>
      <param name="objectType">要为其获取序列化程序的对象类型。</param>
      <param name="serializerType">要检索的序列化程序的类型。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(System.String)">
      <summary>获取指定名称的类型。</summary>
      <returns>该类型的实例，如果无法加载该类型，则为 null。</returns>
      <param name="typeName">要加载的类型的完全限定名。</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties">
      <summary>指示可利用可用序列化程序进行序列化的自定义属性。</summary>
      <returns>包含要进行序列化的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary>从序列化管理器移除自定义的序列化提供程序。</summary>
      <param name="provider">要移除的提供程序。该对象必须已使用 <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" /> 添加过。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(System.Object)">
      <summary>报告序列化中的错误。</summary>
      <param name="errorInformation">要报告的错误。该信息对象可以是任何对象类型。如果它是一个异常，则将提取该异常的消息并报告给用户。如果它是任何其他类型，则将调用 <see cref="M:System.Object.ToString" /> 以向用户显示该信息。</param>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName">
      <summary>当 <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)" /> 无法在序列化管理器的名称表中找到指定名称时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete">
      <summary>在序列化完成时发生。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(System.Object,System.String)">
      <summary>设置指定的现有对象的名称。</summary>
      <param name="instance">要命名的对象实例。</param>
      <param name="name">提供给实例的名称。</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider">
      <summary>提供一个支持访问序列化程序的接口。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider.GetSerializer(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Type,System.Type)">
      <summary>获取使用指定属性的序列化程序。</summary>
      <returns>所请求类型的序列化程序的实例，如果不能满足该请求则为 null。</returns>
      <param name="manager">请求序列化程序的序列化管理器。</param>
      <param name="currentSerializer">指定类型的当前序列化程序的实例。如果不存在指定类型的序列化程序，则这可能为 null。</param>
      <param name="objectType">要序列化的对象的数据类型。</param>
      <param name="serializerType">要创建的序列化程序的数据类型。</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationService">
      <summary>提供一个可调用序列化和反序列化的接口。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Deserialize(System.Object)">
      <summary>反序列化指定的序列化数据对象并返回由这些数据表示的对象的集合。</summary>
      <returns>从指定的序列化数据对象重新生成的对象的 <see cref="T:System.Collections.ICollection" />。</returns>
      <param name="serializationData">包含序列化的数据的对象。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Serialize(System.Collections.ICollection)">
      <summary>序列化指定的对象集合并将其存储在序列化数据对象中。</summary>
      <returns>包含指定的对象集合的序列化状态的对象。</returns>
      <param name="objects">要序列化的对象的集合。</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.INameCreationService">
      <summary>提供可以生成对象的唯一名称的服务。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.CreateName(System.ComponentModel.IContainer,System.Type)">
      <summary>创建一个新名称，该名称对于指定容器中的所有组件来说是唯一的。</summary>
      <returns>数据类型的唯一名称。</returns>
      <param name="container">将新对象添加到的容器。</param>
      <param name="dataType">接收该名称的对象的数据类型。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.IsValidName(System.String)">
      <summary>获取一个值，该值指示指定名称是否有效。</summary>
      <returns>
            如果该名称有效，则为 true；否则为 false。</returns>
      <param name="name">要验证的名称。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.ValidateName(System.String)">
      <summary>获取一个值，该值指示指定名称是否有效。</summary>
      <param name="name">要验证的名称。</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.InstanceDescriptor">
      <summary>提供创建对象的实例所需的信息。无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection)">
      <summary>使用指定的成员信息和参数初始化 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> 类的新实例。</summary>
      <param name="member">说明符的成员信息。它可以是 <see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.ConstructorInfo" />、<see cref="T:System.Reflection.FieldInfo" /> 或 <see cref="T:System.Reflection.PropertyInfo" />。如果这是 <see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.FieldInfo" /> 或 <see cref="T:System.Reflection.PropertyInfo" />，则它必须表示 static 成员。</param>
      <param name="arguments">要向该成员传递的参数的集合。如果没有自变量，则此参数可以为 null 或空集合。该集合也可以由 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> 的其他实例组成。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 的类型为 <see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.FieldInfo" /> 或 <see cref="T:System.Reflection.PropertyInfo" />，并不表示一个 static 成员。<paramref name="member" /> 的类型为 <see cref="T:System.Reflection.PropertyInfo" /> 而且不可读。<paramref name="member" /> 的类型为 <see cref="T:System.Reflection.MethodInfo" /> 或 <see cref="T:System.Reflection.ConstructorInfo" />，而且 <paramref name="arguments" /> 中的参数数目与 <paramref name="member." /> 的签名不匹配<paramref name="member" /> 的类型为 <see cref="T:System.Reflection.ConstructorInfo" /> 并表示一个 static 成员。<paramref name="member" /> 的类型为 <see cref="T:System.Reflection.FieldInfo" />，而且 <paramref name="arguments" /> 中的参数数目不为零。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection,System.Boolean)">
      <summary>使用指定的成员信息、参数以及指示指定的信息是否完全描述该实例的值，初始化 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> 类的新实例。</summary>
      <param name="member">说明符的成员信息。它可以是 <see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.ConstructorInfo" />、<see cref="T:System.Reflection.FieldInfo" /> 或 <see cref="T:System.Reflection.PropertyInfo" />。如果这是 <see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.FieldInfo" /> 或 <see cref="T:System.Reflection.PropertyInfo" />，则它必须表示 static 成员。</param>
      <param name="arguments">要向该成员传递的参数的集合。如果没有自变量，则此参数可以为 null 或空集合。该集合也可以由 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> 的其他实例组成。</param>
      <param name="isComplete">
                如果指定的信息完全描述该实例，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 的类型为 <see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.FieldInfo" /> 或 <see cref="T:System.Reflection.PropertyInfo" />，并不表示一个 static 成员<paramref name="member" /> 的类型为 <see cref="T:System.Reflection.PropertyInfo" /> 而且不可读。<paramref name="member" /> 的类型为 <see cref="T:System.Reflection.MethodInfo" /> 或 <see cref="T:System.Reflection.ConstructorInfo" />，而且 <paramref name="arguments" /> 中的参数数目与 <paramref name="member" /> 的签名不匹配。<paramref name="member" /> 的类型为 <see cref="T:System.Reflection.ConstructorInfo" /> 并表示一个 static 成员。<paramref name="member" /> 的类型为 <see cref="T:System.Reflection.FieldInfo" />，而且 <paramref name="arguments" /> 中的参数数目不为零。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.Arguments">
      <summary>获取参数的集合，这些参数可用于重新构造此实例说明符所表示的对象的实例。</summary>
      <returns>可用于创建该对象的参数的 <see cref="T:System.Collections.ICollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.Invoke">
      <summary>调用此实例说明符并返回该说明符所描述的对象。</summary>
      <returns>该实例说明符所描述的对象。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.IsComplete">
      <summary>获取一个值，该值指示此 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> 的内容是否完全标识该实例。</summary>
      <returns>
            如果该实例被完全描述，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.MemberInfo">
      <summary>获取描述与此说明符关联的实例的成员信息。</summary>
      <returns>一个 <see cref="T:System.Reflection.MemberInfo" />，描述与此对象关联的实例。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationship">
      <summary>表示某个对象和某个成员之间的单一关系。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 类的新实例。</summary>
      <param name="owner">拥有 <paramref name="member" /> 的对象。</param>
      <param name="member">要与 <paramref name="owner" /> 相关的成员。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owner" /> 或 <paramref name="member" /> 为 null。</exception>
    </member>
    <member name="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty">
      <summary>表示空成员关系。此字段为只读。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.Equals(System.Object)">
      <summary>确定两个 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 实例是否相等。</summary>
      <returns>
            如果指定的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 等同于当前的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />，则为 true；否则为 false。</returns>
      <param name="obj">与当前的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 进行比较的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 的哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.IsEmpty">
      <summary>获取一个值，指示该关系是否等同于 <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" /> 关系。</summary>
      <returns>
            如果该关系等同于 <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" /> 关系，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Member">
      <summary>获取相关成员。</summary>
      <returns>传递至 <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)" /> 的成员。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Equality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>测试两个指定的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构是否等效。</summary>
      <returns>如果这两个 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构等同，则此运算符返回 true；否则返回 false。</returns>
      <param name="left">相等运算符左侧的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构。</param>
      <param name="right">相等运算符右侧的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Inequality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>测试两个指定的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构是否不同。</summary>
      <returns>如果这两个 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构不同，则此运算符返回 true；否则返回 false。</returns>
      <param name="left">不等运算符左侧的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构。</param>
      <param name="right">不等运算符右侧的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构。</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Owner">
      <summary>获取所属对象。</summary>
      <returns>传递至 <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)" /> 的所属对象。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationshipService">
      <summary>提供用于将一个成员与另一个成员相关的基类。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationshipService" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.GetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>获取到给定源关系的关系。</summary>
      <returns>到 <paramref name="source" /> 的关系，如果不存在关系，则为 <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" />。</returns>
      <param name="source">源关系。</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>建立源对象与目标对象之间的关系。</summary>
      <returns>与 <paramref name="source" /> 关联的当前关系，如果不存在关系，则为 <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" />。</returns>
      <param name="source">源关系。这是关系分配的左侧。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 为空，或者该服务不支持这种关系。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>建立源对象与目标对象之间的关系。</summary>
      <returns>封装源对象和目标对象之间关系的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构，如果不存在关系，则为 null。</returns>
      <param name="sourceOwner">源关系的所有者。</param>
      <param name="sourceMember">源关系的成员。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceOwner" /> 或 <paramref name="sourceMember" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceOwner" /> 或 <paramref name="sourceMember" /> 为空，或者该服务不支持这种关系。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>在源对象和目标关系之间创建关系。</summary>
      <param name="source">源关系。</param>
      <param name="relationship">要设置到源中的关系。</param>
      <exception cref="T:System.ArgumentException">服务不支持该关系。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SupportsRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>获取一个值，指示是否支持给定关系。</summary>
      <returns>
            如果支持给定的两个对象之间的关系，则为 true；否则为 false。</returns>
      <param name="source">源关系。</param>
      <param name="relationship">要设置到源中的关系。</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs">
      <summary>为 <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" /> 类的新实例。</summary>
      <param name="name">要解析的名称。 </param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Name">
      <summary>获取要解析的对象的名称。</summary>
      <returns>要解析的对象的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Value">
      <summary>获取或设置与该名称匹配的对象。</summary>
      <returns>与该名称相关联的对象。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventHandler">
      <summary>表示处理序列化管理器的 <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute">
      <summary>指示用于根设计器对象的基序列化程序。无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary>使用指定属性初始化 <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> 类的新实例。</summary>
      <param name="serializerTypeName">序列化程序的数据类型的完全限定名。</param>
      <param name="baseSerializerTypeName">序列化程序的基类型的名称。一个类可以包含多个序列化程序，因为所有序列化程序都具有不同的基类型。</param>
      <param name="reloadable">
如果此序列化程序支持动态重新加载文档，则为 true；否则，为 false。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.Type,System.Boolean)">
      <summary>使用指定属性初始化 <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> 类的新实例。</summary>
      <param name="serializerTypeName">序列化程序的数据类型的完全限定名。</param>
      <param name="baseSerializerType">序列化程序的基类型的名称。一个类可以包含多个序列化程序，因为所有序列化程序都具有不同的基类型。</param>
      <param name="reloadable">
如果此序列化程序支持动态重新加载文档，则为 true；否则，为 false。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.Type,System.Type,System.Boolean)">
      <summary>使用指定属性初始化 <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> 类的新实例。</summary>
      <param name="serializerType">序列化程序的数据类型。</param>
      <param name="baseSerializerType">序列化程序的基类型。一个类可以包含多个序列化程序，因为所有序列化程序都具有不同的基类型。</param>
      <param name="reloadable">
如果此序列化程序支持动态重新加载文档，则为 true；否则，为 false。</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable">
      <summary>获取一个值，该值指示根序列化程序是否支持在不首先释放设计器宿主的条件下即可重新加载设计文档。</summary>
      <returns>
            如果根序列化程序支持重新加载，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerBaseTypeName">
      <summary>获取序列化程序的基类型的完全限定类型名。</summary>
      <returns>序列化程序的基类型的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerTypeName">
      <summary>获取序列化程序的完全限定类型名。</summary>
      <returns>序列化程序的类型的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.TypeId">
      <summary>获取此属性类型的唯一 ID。</summary>
      <returns>一个包含此属性类型的唯一 ID 的对象。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.SerializationStore">
      <summary>提供用于存储 <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" /> 序列化数据的基类。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Close">
      <summary>关闭序列化存储区。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">
                为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.SerializationStore.Errors">
      <summary>获取序列化或反序列化过程中发生的错误集合。</summary>
      <returns>包含序列化或反序列化过程中发生的错误的 <see cref="T:System.Collections.ICollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)">
      <summary>将存储区保存到给定流。</summary>
      <param name="stream">作为存储区序列化目标的流。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.System#IDisposable#Dispose">
      <summary>释放由 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 使用的所有资源。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2">
      <summary>提供扩展 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" /> 的接口，以指定在加载设计文档时是否允许发生错误。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.CanReloadWithErrors">
      <summary>获取或设置一个值，以指示发生错误时是否可以重新加载。</summary>
      <returns>
            如果设计器加载程序在检测到错误时可以重新加载设计文档，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.IgnoreErrorsDuringReload">
      <summary>获取或设置一个值，以指示在调用 <see cref="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload" /> 时是否应忽略错误。</summary>
      <returns>
            如果设计器加载程序在重新加载时将忽略错误，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="T:System.Configuration.ApplicationScopedSettingAttribute">
      <summary>指定应用程序设置属性具有适用于应用程序所有用户的公共值。无法继承此类。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Configuration.ApplicationScopedSettingAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ApplicationScopedSettingAttribute" /> 类的新实例。 </summary>
    </member>
    <member name="T:System.Configuration.ApplicationSettingsBase">
      <summary>作为派生具体包装类以实现 Window 窗体应用程序中的应用程序设置功能的基类。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsBase.#ctor">
      <summary>将 <see cref="T:System.Configuration.ApplicationSettingsBase" /> 类的实例初始化为其默认状态。</summary>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsBase.#ctor(System.ComponentModel.IComponent)">
      <summary>使用提供的所有者组件初始化 <see cref="T:System.Configuration.ApplicationSettingsBase" /> 类的实例。</summary>
      <param name="owner">将作为应用程序设置对象的所有者的组件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owner" /> 为 null。</exception>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsBase.#ctor(System.ComponentModel.IComponent,System.String)">
      <summary>使用提供的所有者组件和设置键初始化 <see cref="T:System.Configuration.ApplicationSettingsBase" /> 类的实例。</summary>
      <param name="owner">将作为应用程序设置对象的所有者的组件。</param>
      <param name="settingsKey">唯一标识包装类的单独实例的 <see cref="T:System.String" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owner" /> 为 null。</exception>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsBase.#ctor(System.String)">
      <summary>使用提供的设置键初始化 <see cref="T:System.Configuration.ApplicationSettingsBase" /> 类的实例。</summary>
      <param name="settingsKey">唯一标识包装类的单独实例的 <see cref="T:System.String" />。</param>
    </member>
    <member name="P:System.Configuration.ApplicationSettingsBase.Context">
      <summary>获取与设置组关联的应用程序设置上下文。</summary>
      <returns>与设置组关联的 <see cref="T:System.Configuration.SettingsContext" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsBase.GetPreviousVersion(System.String)">
      <summary>返回同一应用程序的早期版本的命名设置属性的值。</summary>
      <returns>一个 <see cref="T:System.Object" />，如果找到指定的 <see cref="T:System.Configuration.SettingsProperty" />，则为其值；否则为 null。</returns>
      <param name="propertyName">一个 <see cref="T:System.String" />，包含要返回其值的设置属性的名称。</param>
      <exception cref="T:System.Configuration.SettingsPropertyNotFoundException">该属性不存在。属性计数为零，或在数据存储区中找不到该属性。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, ControlPrincipal" />
      </PermissionSet>
    </member>
    <member name="P:System.Configuration.ApplicationSettingsBase.Item(System.String)">
      <summary>获取或设置指定的应用程序设置属性的值。</summary>
      <returns>如果找到的话，则为命名的设置属性的值；否则为 null。</returns>
      <param name="propertyName">包含要访问属性的名称的 <see cref="T:System.String" />。</param>
      <exception cref="T:System.Configuration.SettingsPropertyNotFoundException">没有与当前包装关联的属性，或者找不到指定的属性。</exception>
      <exception cref="T:System.Configuration.SettingsPropertyIsReadOnlyException">已尝试设置只读属性。</exception>
      <exception cref="T:System.Configuration.SettingsPropertyWrongTypeException">在设置操作期间，所提供值的类型与设置属性不兼容。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsBase.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
      <summary>引发 <see cref="E:System.Configuration.ApplicationSettingsBase.PropertyChanged" /> 事件。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />。</param>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsBase.OnSettingChanging(System.Object,System.Configuration.SettingChangingEventArgs)">
      <summary>引发 <see cref="E:System.Configuration.ApplicationSettingsBase.SettingChanging" /> 事件。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Configuration.SettingChangingEventArgs" />。</param>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsBase.OnSettingsLoaded(System.Object,System.Configuration.SettingsLoadedEventArgs)">
      <summary>引发 <see cref="E:System.Configuration.ApplicationSettingsBase.SettingsLoaded" /> 事件。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Configuration.SettingsLoadedEventArgs" />。</param>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsBase.OnSettingsSaving(System.Object,System.ComponentModel.CancelEventArgs)">
      <summary>引发 <see cref="E:System.Configuration.ApplicationSettingsBase.SettingsSaving" /> 事件。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.CancelEventArgs" />。</param>
    </member>
    <member name="P:System.Configuration.ApplicationSettingsBase.Properties">
      <summary>获取包装中的设置属性的集合。</summary>
      <returns>一个 <see cref="T:System.Configuration.SettingsPropertyCollection" />，包含当前包装中使用的所有 <see cref="T:System.Configuration.SettingsProperty" /> 对象。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">找不到关联的设置提供程序，或者其实例化失败。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="E:System.Configuration.ApplicationSettingsBase.PropertyChanged">
      <summary>发生在更改应用程序设置属性的值之后。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Configuration.ApplicationSettingsBase.PropertyValues">
      <summary>获取属性值的集合。</summary>
      <returns>一个由属性值构成的 <see cref="T:System.Configuration.SettingsPropertyValueCollection" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Configuration.ApplicationSettingsBase.Providers">
      <summary>获取包装所使用的应用程序设置提供程序的集合。</summary>
      <returns>一个 <see cref="T:System.Configuration.SettingsProviderCollection" />，包含当前设置包装的设置属性使用的所有 <see cref="T:System.Configuration.SettingsProvider" /> 对象。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsBase.Reload">
      <summary>从永久存储刷新应用程序设置属性值。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsBase.Reset">
      <summary>将保持的应用程序设置值还原为其对应的默认属性。</summary>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsBase.Save">
      <summary>存储应用程序设置属性的当前值。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="E:System.Configuration.ApplicationSettingsBase.SettingChanging">
      <summary>发生在更改应用程序设置属性的值之前。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Configuration.ApplicationSettingsBase.SettingsKey">
      <summary>获取或设置应用程序设置组的设置键。</summary>
      <returns>一个 <see cref="T:System.String" />，包含当前设置组的设置键。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Configuration.ApplicationSettingsBase.SettingsLoaded">
      <summary>在从存储区中检索应用程序设置之后发生。</summary>
    </member>
    <member name="E:System.Configuration.ApplicationSettingsBase.SettingsSaving">
      <summary>发生在将值保存到数据存储区中之前。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsBase.Upgrade">
      <summary>更新应用程序设置，以反映最近安装的应用程序。</summary>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.Configuration.ApplicationSettingsGroup">
      <summary>表示配置文件内的一组相关应用程序设置节。无法继承此类。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsGroup.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ApplicationSettingsGroup" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Configuration.AppSettingsReader">
      <summary>提供一种从配置文件中读取特定类型的值的方法。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.AppSettingsReader.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.AppSettingsReader" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.AppSettingsReader.GetValue(System.String,System.Type)">
      <summary>从 <see cref="P:System.Configuration.ConfigurationSettings.AppSettings" /> 属性中获取指定键的值，并返回指定类型的对象，该对象包含来自配置文件的值。</summary>
      <returns>指定键的值。</returns>
      <param name="key">要为其获取值的键。</param>
      <param name="type">要返回的对象的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。- 或 -<paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">&lt;appSettings&gt; 配置节中不存在 <paramref name="key" />。- 或 -<paramref name="key" /> 的 &lt;appSettings&gt; 配置节中的值不属于 <paramref name="type" /> 类型。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Configuration.ClientSettingsSection">
      <summary>表示配置文件中用户范围的应用程序设置组。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.ClientSettingsSection.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ClientSettingsSection" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Configuration.ClientSettingsSection.Settings">
      <summary>获取节中的客户端设置的集合。</summary>
      <returns>包含在当前配置节中找到的所有客户端设置的 <see cref="T:System.Configuration.SettingElementCollection" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Configuration.ConfigurationException">
      <summary>发生配置系统错误时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.ConfigurationException.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationException" /> 类的一个新实例。 </summary>
    </member>
    <member name="M:System.Configuration.ConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationException" /> 类的新实例。 </summary>
      <param name="info">包含要反序列化的信息的对象。</param>
      <param name="context">有关源或目标的上下文信息。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationException" /> 类的一个新实例。 </summary>
      <param name="message">描述引发该 <see cref="T:System.Configuration.ConfigurationException" /> 异常的原因的消息。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationException" /> 类的一个新实例。 </summary>
      <param name="message">描述引发该 <see cref="T:System.Configuration.ConfigurationException" /> 异常的原因的消息。</param>
      <param name="inner">导致引发此 <see cref="T:System.Configuration.ConfigurationException" /> 的内部异常（如果有）。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationException.#ctor(System.String,System.Exception,System.String,System.Int32)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationException" /> 类的新实例。 </summary>
      <param name="message">描述引发该 <see cref="T:System.Configuration.ConfigurationException" /> 异常的原因的消息。</param>
      <param name="inner">导致引发此 <see cref="T:System.Configuration.ConfigurationException" /> 的内部异常（如果有）。</param>
      <param name="filename">导致引发此 <see cref="T:System.Configuration.ConfigurationException" /> 的配置文件的路径。</param>
      <param name="line">配置文件中引发此 <see cref="T:System.Configuration.ConfigurationException" /> 处的行号。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationException.#ctor(System.String,System.Exception,System.Xml.XmlNode)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationException" /> 类的一个新实例。 </summary>
      <param name="message">描述引发该 <see cref="T:System.Configuration.ConfigurationException" /> 异常的原因的消息。</param>
      <param name="inner">导致引发此 <see cref="T:System.Configuration.ConfigurationException" /> 的内部异常（如果有）。</param>
      <param name="node">导致引发此 <see cref="T:System.Configuration.ConfigurationException" /> 的 <see cref="T:System.Xml.XmlNode" />。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationException.#ctor(System.String,System.String,System.Int32)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationException" /> 类的新实例。 </summary>
      <param name="message">描述引发该 <see cref="T:System.Configuration.ConfigurationException" /> 异常的原因的消息。</param>
      <param name="filename">导致引发此 <see cref="T:System.Configuration.ConfigurationException" /> 的配置文件的路径。</param>
      <param name="line">配置文件中引发此 <see cref="T:System.Configuration.ConfigurationException" /> 处的行号。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationException.#ctor(System.String,System.Xml.XmlNode)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationException" /> 类的一个新实例。 </summary>
      <param name="message">描述引发该 <see cref="T:System.Configuration.ConfigurationException" /> 异常的原因的消息。</param>
      <param name="node">导致引发此 <see cref="T:System.Configuration.ConfigurationException" /> 的 <see cref="T:System.Xml.XmlNode" />。</param>
    </member>
    <member name="P:System.Configuration.ConfigurationException.BareMessage">
      <summary>获取对引发此配置异常的原因的说明。</summary>
      <returns>对引发此 <see cref="T:System.Configuration.ConfigurationException" /> 异常的原因的说明。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Configuration.ConfigurationException.Filename">
      <summary>获取导致引发此配置异常的配置文件的路径。</summary>
      <returns>导致引发此 <see cref="T:System.Configuration.ConfigurationException" /> 异常的配置文件的路径。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Configuration.ConfigurationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用发生此配置异常处的文件名和行号设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</summary>
      <param name="info">包含要序列化的信息的对象。</param>
      <param name="context">有关源或目标的上下文信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.ConfigurationException.GetXmlNodeFilename(System.Xml.XmlNode)">
      <summary>获取引发此配置异常时从中加载内部 <see cref="T:System.Xml.XmlNode" /> 对象的配置文件的路径。</summary>
      <returns>一个 string，表示节点文件名。</returns>
      <param name="node">导致引发此 <see cref="T:System.Configuration.ConfigurationException" /> 异常的 <see cref="T:System.Xml.XmlNode" />。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Configuration.ConfigurationException.GetXmlNodeLineNumber(System.Xml.XmlNode)">
      <summary>获取引发此配置异常时内部 <see cref="T:System.Xml.XmlNode" /> 对象所表示的配置文件中的行号。</summary>
      <returns>一个 int，表示节点行号。</returns>
      <param name="node">导致引发此 <see cref="T:System.Configuration.ConfigurationException" /> 异常的 <see cref="T:System.Xml.XmlNode" />。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Configuration.ConfigurationException.Line">
      <summary>获取配置文件中引发此配置异常处的行号。</summary>
      <returns>配置文件中引发此 <see cref="T:System.Configuration.ConfigurationException" /> 异常处的行号。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Configuration.ConfigurationException.Message">
      <summary>获取对引发此配置异常的原因的补充说明。</summary>
      <returns>对引发此 <see cref="T:System.Configuration.ConfigurationException" /> 异常的原因的补充说明。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="T:System.Configuration.ConfigurationSettings">
      <summary>提供 1.0 和 1.1 版运行时对读取配置节和公共配置设置的支持。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Configuration.ConfigurationSettings.AppSettings">
      <summary>获取配置文件应用程序设置节的只读 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</summary>
      <returns>配置文件应用程序设置节的只读 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Configuration.ConfigurationSettings.GetConfig(System.String)">
      <summary>返回传递的配置节名称和路径的 <see cref="T:System.Configuration.ConfigurationSection" /> 对象。</summary>
      <returns>传递的配置节名称和路径的 <see cref="T:System.Configuration.ConfigurationSection" /> 对象。说明：<see cref="T:System.Configuration.ConfigurationSettings" /> 类仅提供向后兼容性。应改为使用 <see cref="T:System.Configuration.ConfigurationManager" /> 类或 <see cref="T:System.Web.Configuration.WebConfigurationManager" /> 类。</returns>
      <param name="sectionName">一个配置名称和路径，如“system.net/settings”。</param>
      <exception cref="T:System.Configuration.ConfigurationException">无法检索请求的节。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.Configuration.ConfigXmlDocument">
      <summary>包装相应的 <see cref="T:System.Xml.XmlDocument" /> 类型并带有报告文件名和行号所需的信息。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.ConfigXmlDocument.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ConfigXmlDocument" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.ConfigXmlDocument.CreateAttribute(System.String,System.String,System.String)">
      <summary>创建配置元素属性。</summary>
      <returns>
        <see cref="P:System.Xml.Serialization.XmlAttributes.XmlAttribute" /> 属性。</returns>
      <param name="prefix">前缀定义。</param>
      <param name="localName">在本地使用的名称。</param>
      <param name="namespaceUri">分配给命名空间的 URL。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.ConfigXmlDocument.CreateCDataSection(System.String)">
      <summary>创建 XML CData 节。</summary>
      <returns>
        <see cref="T:System.Xml.XmlCDataSection" /> 值。</returns>
      <param name="data">要使用的数据。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.ConfigXmlDocument.CreateComment(System.String)">
      <summary>创建 XML 注释。</summary>
      <returns>
        <see cref="T:System.Xml.XmlComment" /> 值。</returns>
      <param name="data">注释数据。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.ConfigXmlDocument.CreateElement(System.String,System.String,System.String)">
      <summary>创建配置元素。</summary>
      <returns>
        <see cref="T:System.Xml.XmlElement" /> 值。</returns>
      <param name="prefix">前缀定义。</param>
      <param name="localName">在本地使用的名称。</param>
      <param name="namespaceUri">URL 的命名空间。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.ConfigXmlDocument.CreateSignificantWhitespace(System.String)">
      <summary>创建空白。</summary>
      <returns>
        <see cref="T:System.Xml.XmlSignificantWhitespace" /> 值。</returns>
      <param name="data">要使用的数据。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.ConfigXmlDocument.CreateTextNode(System.String)">
      <summary>创建文本节点。</summary>
      <returns>
        <see cref="T:System.Xml.XmlText" /> 值。</returns>
      <param name="text">要使用的文本。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.ConfigXmlDocument.CreateWhitespace(System.String)">
      <summary>创建空白。</summary>
      <returns>
        <see cref="T:System.Xml.XmlWhitespace" /> 值。</returns>
      <param name="data">要使用的数据。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Configuration.ConfigXmlDocument.Filename">
      <summary>获取配置文件名。</summary>
      <returns>配置文件名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Configuration.ConfigXmlDocument.LineNumber">
      <summary>获取当前节点行号。</summary>
      <returns>当前节点的行号。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.ConfigXmlDocument.Load(System.String)">
      <summary>加载配置文件。</summary>
      <param name="filename">文件名。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.ConfigXmlDocument.LoadSingleElement(System.String,System.Xml.XmlTextReader)">
      <summary>加载单个配置元素。</summary>
      <param name="filename">文件名。</param>
      <param name="sourceReader">读取器的源。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Configuration.ConfigXmlDocument.System#Configuration#Internal#IConfigErrorInfo#Filename">
      <summary>获取配置文件名。</summary>
      <returns>文件名。</returns>
    </member>
    <member name="P:System.Configuration.ConfigXmlDocument.System#Configuration#Internal#IConfigErrorInfo#LineNumber">
      <summary>获取配置行号。</summary>
      <returns>行号。</returns>
    </member>
    <member name="T:System.Configuration.DefaultSettingValueAttribute">
      <summary>指定应用程序设置属性的默认值。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Configuration.DefaultSettingValueAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Configuration.DefaultSettingValueAttribute" /> 类的实例。</summary>
      <param name="value">表示属性的默认值的 <see cref="T:System.String" />。 </param>
    </member>
    <member name="P:System.Configuration.DefaultSettingValueAttribute.Value">
      <summary>获取应用程序设置属性的默认值。</summary>
      <returns>表示属性的默认值的 <see cref="T:System.String" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Configuration.DictionarySectionHandler">
      <summary>提供配置节中的键/值对配置信息。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.DictionarySectionHandler.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.DictionarySectionHandler" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.DictionarySectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
      <summary>基于指定的参数，新建配置处理程序并将其添加到节处理程序集合中。</summary>
      <returns>配置对象。</returns>
      <param name="parent">父对象。</param>
      <param name="context">配置上下文对象。</param>
      <param name="section">节 XML 节点。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Configuration.DictionarySectionHandler.KeyAttributeName">
      <summary>获取 XML 属性名称，用作键/值对中的键。</summary>
      <returns>一个字符串值，包含键属性的名称。</returns>
    </member>
    <member name="P:System.Configuration.DictionarySectionHandler.ValueAttributeName">
      <summary>获取用作键/值对中的值的 XML 属性名称。</summary>
      <returns>一个字符串值，包含值属性的名称。</returns>
    </member>
    <member name="T:System.Configuration.IApplicationSettingsProvider">
      <summary>为基于客户端的应用程序的设置提供程序定义扩展功能。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.IApplicationSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)">
      <summary>返回同一应用程序早期版本的指定设置属性的值。</summary>
      <returns>包含指定属性设置值的 <see cref="T:System.Configuration.SettingsPropertyValue" />，该值为早期版本的应用程序中最后设置的值；或者，如果找不到该设置，则为 null。</returns>
      <param name="context">描述当前应用程序用法的 <see cref="T:System.Configuration.SettingsContext" />。</param>
      <param name="property">要返回其值的 <see cref="T:System.Configuration.SettingsProperty" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.IApplicationSettingsProvider.Reset(System.Configuration.SettingsContext)">
      <summary>将与指定应用程序关联的应用程序设置重置为其默认值。</summary>
      <param name="context">描述当前应用程序用法的 <see cref="T:System.Configuration.SettingsContext" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.IApplicationSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)">
      <summary>向提供程序指出应用程序已升级。这给提供程序提供了一个机会，使其可以相应地升级其存储的设置。</summary>
      <param name="context">描述当前应用程序用法的 <see cref="T:System.Configuration.SettingsContext" />。</param>
      <param name="properties">一个包含设置属性组（将要检索该组中的值）的 <see cref="T:System.Configuration.SettingsPropertyCollection" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Configuration.IConfigurationSectionHandler">
      <summary>处理对特定的配置节的访问。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.IConfigurationSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
      <summary>创建配置节处理程序。</summary>
      <returns>创建的节处理程序对象。</returns>
      <param name="parent">父对象。</param>
      <param name="configContext">配置上下文对象。</param>
      <param name="section">节 XML 节点。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Configuration.IConfigurationSystem">
      <summary>提供标准配置方法。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.IConfigurationSystem.GetConfig(System.String)">
      <summary>获取指定的配置。</summary>
      <returns>表示配置的对象。</returns>
      <param name="configKey">配置键。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.IConfigurationSystem.Init">
      <summary>用于初始化。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Configuration.IgnoreSectionHandler">
      <summary>为不是由 <see cref="N:System.Configuration" /> 类型处理的配置节提供旧式节处理程序定义。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.IgnoreSectionHandler.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.IgnoreSectionHandler" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.IgnoreSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
      <summary>创建新的配置处理程序并将指定的配置对象添加到节处理程序集合中。</summary>
      <returns>已创建的配置处理程序对象。</returns>
      <param name="parent">对应父配置节中的配置设置。 </param>
      <param name="configContext">配置节处理程序为其计算配置值的虚拟路径。通常，该参数是保留参数，并为 null。 </param>
      <param name="section">一个 <see cref="T:System.Xml.XmlNode" />，它包含要处理的配置信息。提供对配置节 XML 内容的直接访问。 </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Configuration.IPersistComponentSettings">
      <summary>定义存储和检索应用程序设置的控件或类的标准功能。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.IPersistComponentSettings.LoadComponentSettings">
      <summary>将控件的应用程序设置读入相应的属性中，并更新控件状态。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.IPersistComponentSettings.ResetComponentSettings">
      <summary>将控件的应用程序设置属性重置为其默认值。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings">
      <summary>保持控件的应用程序设置属性。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Configuration.IPersistComponentSettings.SaveSettings">
      <summary>获取或设置一个值，该值指示控件是否应自动保持其应用程序设置属性。</summary>
      <returns>
如果控件应自动保持其状态，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Configuration.IPersistComponentSettings.SettingsKey">
      <summary>获取或设置控件当前实例的应用程序设置键的值。</summary>
      <returns>一个 <see cref="T:System.String" />，包含该控件的当前实例的设置键。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Configuration.ISettingsProviderService">
      <summary>提供用于定义备用应用程序设置提供程序的接口。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.ISettingsProviderService.GetSettingsProvider(System.Configuration.SettingsProperty)">
      <summary>返回与指定设置属性兼容的设置提供程序。</summary>
      <returns>如果找到，则为能保存指定设置属性的 <see cref="T:System.Configuration.SettingsProvider" />；否则为 null。</returns>
      <param name="property">需要序列化的 <see cref="T:System.Configuration.SettingsProperty" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Configuration.LocalFileSettingsProvider">
      <summary>为应用程序设置类提供持久性存储。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.LocalFileSettingsProvider.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.LocalFileSettingsProvider" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Configuration.LocalFileSettingsProvider.ApplicationName">
      <summary>获取或设置当前运行的应用程序的名称。</summary>
      <returns>一个字符串，包含应用程序的显示名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.LocalFileSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)">
      <summary>返回同一应用程序的早期版本的命名设置属性的值。</summary>
      <returns>如果找到，则为表示应用程序设置的 <see cref="T:System.Configuration.SettingsPropertyValue" />；否则为 null。</returns>
      <param name="context">一个 <see cref="T:System.Configuration.SettingsContext" />，描述使用应用程序设置属性的上下文。</param>
      <param name="property">要返回其值的 <see cref="T:System.Configuration.SettingsProperty" />。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, ControlPrincipal" />
      </PermissionSet>
    </member>
    <member name="M:System.Configuration.LocalFileSettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)">
      <summary>为指定的应用程序实例和设置属性组返回设置属性值的集合。</summary>
      <returns>一个包含指定设置属性组的值的 <see cref="T:System.Configuration.SettingsPropertyValueCollection" />。</returns>
      <param name="context"></param>
      <param name="properties">一个包含设置属性组（将要检索该组中的值）的 <see cref="T:System.Configuration.SettingsPropertyCollection" />。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">遇到了用户范围的设置，但是当前的配置仅支持应用程序范围的设置。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, ControlPrincipal" />
      </PermissionSet>
    </member>
    <member name="M:System.Configuration.LocalFileSettingsProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
      <param name="name">该提供程序的友好名称。</param>
      <param name="values"></param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.LocalFileSettingsProvider.Reset(System.Configuration.SettingsContext)">
      <summary>将与指定的应用程序关联的所有应用程序设置属性重置为其默认值。</summary>
      <param name="context">描述当前应用程序用法的 <see cref="T:System.Configuration.SettingsContext" />。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">遇到了用户范围的设置，但是当前的配置仅支持应用程序范围的设置。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Configuration.LocalFileSettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)">
      <summary>设置指定的属性设置组的值。</summary>
      <param name="context">描述当前应用程序用法的 <see cref="T:System.Configuration.SettingsContext" />。</param>
      <param name="values">表示要设置的属性设置组的 <see cref="T:System.Configuration.SettingsPropertyValueCollection" />。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">遇到了用户范围的设置，但是当前的配置仅支持应用程序范围的设置。- 或 -将设置保存到配置文件时发生一般性失败。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, ControlPrincipal" />
      </PermissionSet>
    </member>
    <member name="M:System.Configuration.LocalFileSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)">
      <summary>尝试从相同应用程序的早期版本迁移以前的用户范围设置。</summary>
      <param name="context">描述当前应用程序用法的 <see cref="T:System.Configuration.SettingsContext" />。</param>
      <param name="properties">一个包含设置属性组（将要检索该组中的值）的 <see cref="T:System.Configuration.SettingsPropertyCollection" />。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">遇到了用户范围的设置，但是当前的配置仅支持应用程序范围的设置。- 或 -无法访问早期版本的配置文件。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, ControlPrincipal" />
      </PermissionSet>
    </member>
    <member name="T:System.Configuration.NameValueFileSectionHandler">
      <summary>提供对配置文件的访问。此类型支持 .NET Framework 配置基础结构，不应从代码直接使用。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.NameValueFileSectionHandler.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.NameValueFileSectionHandler" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.NameValueFileSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
      <summary>基于指定的参数，新建配置处理程序并将其添加到节处理程序集合中。</summary>
      <returns>配置对象。</returns>
      <param name="parent">父对象。</param>
      <param name="configContext">配置上下文对象。</param>
      <param name="section">节 XML 节点。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="section" /> 的 file 属性中指定的文件存在，但无法加载。- 或 -<paramref name="section" /> 的 name 属性与 file 属性中指定文件的根元素不匹配。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="T:System.Configuration.NameValueSectionHandler">
      <summary>提供配置节中的名称/值对配置信息。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.NameValueSectionHandler.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.NameValueSectionHandler" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.NameValueSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
      <summary>基于指定的参数，新建配置处理程序并将其添加到节处理程序集合中。</summary>
      <returns>配置对象。</returns>
      <param name="parent">父对象。</param>
      <param name="context">配置上下文对象。</param>
      <param name="section">节 XML 节点。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Configuration.NameValueSectionHandler.KeyAttributeName">
      <summary>获取 XML 属性名称，用作键/值对中的键。</summary>
      <returns>一个包含键属性名称的 <see cref="T:System.String" /> 值。</returns>
    </member>
    <member name="P:System.Configuration.NameValueSectionHandler.ValueAttributeName">
      <summary>获取用作键/值对中的值的 XML 属性名称。</summary>
      <returns>一个包含值属性名称的 <see cref="T:System.String" /> 值。</returns>
    </member>
    <member name="T:System.Configuration.NoSettingsVersionUpgradeAttribute">
      <summary>指定设置提供程序应禁用检测到应用程序升级时调用的任何逻辑。无法继承此类。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Configuration.NoSettingsVersionUpgradeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.NoSettingsVersionUpgradeAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Configuration.SettingAttribute">
      <summary>表示用于将设置信息关联到设置属性的自定义设置属性。</summary>
    </member>
    <member name="M:System.Configuration.SettingAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.SettingAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Configuration.SettingChangingEventArgs">
      <summary>为 <see cref="E:System.Configuration.ApplicationSettingsBase.SettingChanging" /> 事件提供数据。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.SettingChangingEventArgs.#ctor(System.String,System.String,System.String,System.Object,System.Boolean)">
      <summary>初始化 <see cref="T:System.Configuration.SettingChangingEventArgs" /> 类的实例。</summary>
      <param name="settingName">包含应用程序设置名称的 <see cref="T:System.String" />。</param>
      <param name="settingClass">包含设置类别说明的 <see cref="T:System.String" />。此参数常被设置为应用程序设置组的名称。</param>
      <param name="settingKey">包含应用程序设置键的 <see cref="T:System.String" />。</param>
      <param name="newValue">包含要分配给应用程序设置属性的新值的 <see cref="T:System.Object" />。</param>
      <param name="cancel">
                要取消事件时为 true；否则为 false。</param>
    </member>
    <member name="P:System.Configuration.SettingChangingEventArgs.NewValue">
      <summary>获取要分配给应用程序设置属性的新值。</summary>
      <returns>包含要分配给应用程序设置属性的新值的 <see cref="T:System.Object" />。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Configuration.SettingChangingEventArgs.SettingClass">
      <summary>获取应用程序设置属性的类别。</summary>
      <returns>包含设置类别说明的 <see cref="T:System.String" />。此参数通常被设置为应用程序设置组的名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Configuration.SettingChangingEventArgs.SettingKey">
      <summary>获取与属性关联的应用程序设置键。</summary>
      <returns>包含应用程序设置键的 <see cref="T:System.String" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Configuration.SettingChangingEventArgs.SettingName">
      <summary>获取与应用程序设置属性关联的应用程序设置的名称。</summary>
      <returns>包含应用程序设置名称的 <see cref="T:System.String" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Configuration.SettingChangingEventHandler">
      <summary>表示将处理 <see cref="E:System.Configuration.ApplicationSettingsBase.SettingChanging" /> 事件的方法。 </summary>
      <param name="sender">事件的源，通常为从 <see cref="T:System.Configuration.ApplicationSettingsBase" /> 类派生的应用程序设置包装类。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Configuration.SettingChangingEventArgs" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Configuration.SettingElement">
      <summary>表示用于更新配置中的元素的简化配置元素。无法继承此类。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.SettingElement.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.SettingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.SettingElement.#ctor(System.String,System.Configuration.SettingsSerializeAs)">
      <summary>根据提供的参数初始化 <see cref="T:System.Configuration.SettingElement" /> 类的新实例。</summary>
      <param name="name">
        <see cref="T:System.Configuration.SettingElement" /> 对象的名称。</param>
      <param name="serializeAs">一个 <see cref="T:System.Configuration.SettingsSerializeAs" /> 对象。此对象是一个枚举，它用作序列化方案以存储配置设置。</param>
    </member>
    <member name="M:System.Configuration.SettingElement.Equals(System.Object)">
      <summary>将当前 <see cref="T:System.Configuration.SettingElement" /> 实例与指定的对象进行比较。</summary>
      <returns>
如果 <see cref="T:System.Configuration.SettingElement" /> 实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="settings">要比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.SettingElement.GetHashCode">
      <summary>获取唯一的值，该值表示当前 <see cref="T:System.Configuration.SettingElement" /> 实例。</summary>
      <returns>表示当前 <see cref="T:System.Configuration.SettingElement" /> 实例的唯一值。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Configuration.SettingElement.Name">
      <summary>获取或设置 <see cref="T:System.Configuration.SettingElement" /> 对象的名称。</summary>
      <returns>
        <see cref="T:System.Configuration.SettingElement" /> 对象的名称。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Configuration.SettingElement.SerializeAs">
      <summary>获取或设置用于存留 <see cref="T:System.Configuration.SettingElement" /> 对象的值的序列化机制。</summary>
      <returns>一个 <see cref="T:System.Configuration.SettingsSerializeAs" /> 对象。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Configuration.SettingElement.Value">
      <summary>使用 <see cref="T:System.Configuration.SettingValueElement" /> 对象获取或设置 <see cref="T:System.Configuration.SettingElement" /> 对象的值。</summary>
      <returns>包含 <see cref="T:System.Configuration.SettingElement" /> 对象的值的 <see cref="T:System.Configuration.SettingValueElement" /> 对象。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.Configuration.SettingElementCollection">
      <summary>包含 <see cref="T:System.Configuration.SettingElement" /> 对象的集合。无法继承此类。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.SettingElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.SettingElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.SettingElementCollection.Add(System.Configuration.SettingElement)">
      <summary>将 <see cref="T:System.Configuration.SettingElement" /> 对象添加到集合中。</summary>
      <param name="element">要添加到集合的 <see cref="T:System.Configuration.SettingElement" /> 对象。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Configuration.SettingElementCollection.Clear">
      <summary>从集合中移除所有 <see cref="T:System.Configuration.SettingElement" /> 对象。</summary>
    </member>
    <member name="P:System.Configuration.SettingElementCollection.CollectionType">
      <summary>获取配置集合的类型。</summary>
      <returns>集合的 <see cref="T:System.Configuration.ConfigurationElementCollectionType" /> 对象。</returns>
    </member>
    <member name="M:System.Configuration.SettingElementCollection.Get(System.String)">
      <summary>从集合中获取 <see cref="T:System.Configuration.SettingElement" /> 对象。 </summary>
      <returns>一个 <see cref="T:System.Configuration.SettingElement" /> 对象。</returns>
      <param name="elementKey">表示集合中的 <see cref="T:System.Configuration.SettingElement" /> 对象的字符串值。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.SettingElementCollection.Remove(System.Configuration.SettingElement)">
      <summary>从集合中移除 <see cref="T:System.Configuration.SettingElement" /> 对象。</summary>
      <param name="element">一个 <see cref="T:System.Configuration.SettingElement" /> 对象。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.Configuration.SettingsAttributeDictionary">
      <summary>表示用于描述配置对象以及 <see cref="T:System.Configuration.SettingsProperty" /> 对象的键/值对的集合。</summary>
    </member>
    <member name="M:System.Configuration.SettingsAttributeDictionary.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.SettingsAttributeDictionary" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.SettingsAttributeDictionary.#ctor(System.Configuration.SettingsAttributeDictionary)">
      <summary>初始化 <see cref="T:System.Configuration.SettingsAttributeDictionary" /> 类的新实例。</summary>
      <param name="attributes"></param>
    </member>
    <member name="T:System.Configuration.SettingsBase">
      <summary>提供了用于支持用户属性设置的基类。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.SettingsBase.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.SettingsBase" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Configuration.SettingsBase.Context">
      <summary>获取关联的设置上下文。</summary>
      <returns>与设置实例关联的 <see cref="T:System.Configuration.SettingsContext" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.SettingsBase.Initialize(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection,System.Configuration.SettingsProviderCollection)">
      <summary>初始化 <see cref="T:System.Configuration.SettingsBase" /> 对象使用的内部属性。</summary>
      <param name="context">与设置属性相关的设置上下文。</param>
      <param name="properties">可以从 <see cref="T:System.Configuration.SettingsBase" /> 实例进行访问的设置属性。</param>
      <param name="providers">加载和保存属性值时应该使用的经过初始化的提供程序。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Configuration.SettingsBase.IsSynchronized">
      <summary>获取一个值，该值指示对此对象的访问是否同步（线程安全）。</summary>
      <returns>
            如果对 <see cref="T:System.Configuration.SettingsBase" /> 的访问是同步的，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Configuration.SettingsBase.Item(System.String)">
      <summary>获取或设置指定设置属性的值。</summary>
      <returns>如果找到，则为该命名的设置属性的值。</returns>
      <param name="propertyName">包含要访问属性的名称的 <see cref="T:System.String" />。</param>
      <exception cref="T:System.Configuration.SettingsPropertyNotFoundException">不存在与当前对象关联的属性，或无法找到指定的属性。</exception>
      <exception cref="T:System.Configuration.SettingsPropertyIsReadOnlyException">已尝试设置只读属性。</exception>
      <exception cref="T:System.Configuration.SettingsPropertyWrongTypeException">在设置操作期间，所提供值的类型与设置属性不兼容。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, ControlPrincipal" />
      </PermissionSet>
    </member>
    <member name="P:System.Configuration.SettingsBase.Properties">
      <summary>获取设置属性的集合。</summary>
      <returns>包含所有 <see cref="T:System.Configuration.SettingsProperty" /> 对象的 <see cref="T:System.Configuration.SettingsPropertyCollection" /> 集合。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Configuration.SettingsBase.PropertyValues">
      <summary>获取设置属性值的集合。</summary>
      <returns>一个 <see cref="T:System.Configuration.SettingsPropertyValue" /> 对象的集合，表示 <see cref="T:System.Configuration.SettingsBase" /> 实例所管理属性的实际数据值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Configuration.SettingsBase.Providers">
      <summary>获取设置提供程序的集合。</summary>
      <returns>包含 <see cref="T:System.Configuration.SettingsProvider" /> 对象的 <see cref="T:System.Configuration.SettingsProviderCollection" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.SettingsBase.Save">
      <summary>存储设置属性的当前值。</summary>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Configuration.SettingsBase.Synchronized(System.Configuration.SettingsBase)">
      <summary>提供同步（线程安全）的 <see cref="T:System.Configuration.SettingsBase" /> 类。</summary>
      <returns>同步的 <see cref="T:System.Configuration.SettingsBase" /> 类。</returns>
      <param name="settingsBase">用于支持用户属性设置的类。</param>
    </member>
    <member name="T:System.Configuration.SettingsContext">
      <summary>提供上下文信息，这些信息可由提供程序在保持设置时可使用。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.SettingsContext.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.SettingsContext" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Configuration.SettingsDescriptionAttribute">
      <summary>提供描述单个配置属性的字符串。无法继承此类。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Configuration.SettingsDescriptionAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Configuration.SettingsDescriptionAttribute" /> 类的实例。</summary>
      <param name="description">用作说明性文字的 <see cref="T:System.String" />。</param>
    </member>
    <member name="P:System.Configuration.SettingsDescriptionAttribute.Description">
      <summary>获取关联的配置属性的说明性文字。</summary>
      <returns>包含关联的配置属性的说明性文字的 <see cref="T:System.String" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Configuration.SettingsGroupDescriptionAttribute">
      <summary>提供描述应用程序设置属性组的字符串。无法继承此类。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Configuration.SettingsGroupDescriptionAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Configuration.SettingsGroupDescriptionAttribute" /> 类的新实例。</summary>
      <param name="description">一个 <see cref="T:System.String" />，包含应用程序设置组的说明性文字。</param>
    </member>
    <member name="P:System.Configuration.SettingsGroupDescriptionAttribute.Description">
      <summary>应用程序设置属性组的说明性文字。</summary>
      <returns>一个 <see cref="T:System.String" />，包含应用程序设置组的说明性文字。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Configuration.SettingsGroupNameAttribute">
      <summary>为应用程序设置属性组指定名称。无法继承此类。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Configuration.SettingsGroupNameAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Configuration.SettingsGroupNameAttribute" /> 类的新实例。</summary>
      <param name="groupName">包含应用程序设置属性组名称的 <see cref="T:System.String" />。</param>
    </member>
    <member name="P:System.Configuration.SettingsGroupNameAttribute.GroupName">
      <summary>获取应用程序设置属性组的名称。</summary>
      <returns>包含应用程序设置属性组名称的 <see cref="T:System.String" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Configuration.SettingsLoadedEventArgs">
      <summary>为 <see cref="E:System.Configuration.ApplicationSettingsBase.SettingsLoaded" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.Configuration.SettingsLoadedEventArgs.#ctor(System.Configuration.SettingsProvider)">
      <summary>初始化 <see cref="T:System.Configuration.SettingsLoadedEventArgs" /> 类的新实例。</summary>
      <param name="provider">从中加载设置的 <see cref="T:System.Configuration.SettingsProvider" /> 对象。</param>
    </member>
    <member name="P:System.Configuration.SettingsLoadedEventArgs.Provider">
      <summary>获取用于存储配置设置的设置提供程序。</summary>
      <returns>设置提供程序。</returns>
    </member>
    <member name="T:System.Configuration.SettingsLoadedEventHandler">
      <summary>表示将处理 <see cref="E:System.Configuration.ApplicationSettingsBase.SettingsLoaded" /> 事件的方法。</summary>
      <param name="sender">事件的源，通常为设置类。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Configuration.SettingsLoadedEventArgs" /> 对象。</param>
    </member>
    <member name="T:System.Configuration.SettingsManageability">
      <summary>提供若干值，以指示应该对应用程序设置使用哪些服务。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Configuration.SettingsManageability.Roaming">
      <summary>使应用程序设置可以存储在漫游用户配置文件中。有关漫游用户配置文件的更多信息，请参见 独立存储和漫游。</summary>
    </member>
    <member name="T:System.Configuration.SettingsManageabilityAttribute">
      <summary>为应用程序属性指定特殊服务。无法继承此类。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Configuration.SettingsManageabilityAttribute.#ctor(System.Configuration.SettingsManageability)">
      <summary>初始化 <see cref="T:System.Configuration.SettingsManageabilityAttribute" /> 类的新实例。</summary>
      <param name="manageability">枚举所请求服务的 <see cref="T:System.Configuration.SettingsManageability" /> 值。 </param>
    </member>
    <member name="P:System.Configuration.SettingsManageabilityAttribute.Manageability">
      <summary>获取已请求的特殊服务集。</summary>
      <returns>使用逻辑运算符 OR 将所有对应于所请求服务的 <see cref="T:System.Configuration.SettingsManageability" /> 枚举值组合在一起所产生的值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Configuration.SettingsProperty">
      <summary>在内部作为类使用，表示有关个别配置属性的元数据。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.SettingsProperty.#ctor(System.Configuration.SettingsProperty)">
      <summary>根据所提供的参数初始化 <see cref="T:System.Configuration.SettingsProperty" /> 类的新实例。</summary>
      <param name="propertyToCopy">指定现有 <see cref="T:System.Configuration.SettingsProperty" /> 对象的副本。</param>
    </member>
    <member name="M:System.Configuration.SettingsProperty.#ctor(System.String)">
      <summary>根据所提供的参数初始化 <see cref="T:System.Configuration.SettingsProperty" /> 类的新实例。</summary>
      <param name="name"></param>
    </member>
    <member name="M:System.Configuration.SettingsProperty.#ctor(System.String,System.Type,System.Configuration.SettingsProvider,System.Boolean,System.Object,System.Configuration.SettingsSerializeAs,System.Configuration.SettingsAttributeDictionary,System.Boolean,System.Boolean)">
      <summary>根据提供的参数创建 <see cref="T:System.Configuration.SettingsProperty" /> 类的新实例。</summary>
      <param name="name">
        <see cref="T:System.Configuration.SettingsProperty" /> 对象的名称。</param>
      <param name="propertyType">
        <see cref="T:System.Configuration.SettingsProperty" /> 对象的类型。</param>
      <param name="provider">用于持久性的 <see cref="T:System.Configuration.SettingsProvider" /> 对象。</param>
      <param name="isReadOnly">一个 <see cref="T:System.Boolean" /> 值，指定 <see cref="T:System.Configuration.SettingsProperty" /> 对象是否为只读。</param>
      <param name="defaultValue">
        <see cref="T:System.Configuration.SettingsProperty" /> 对象的默认值。</param>
      <param name="serializeAs">一个 <see cref="T:System.Configuration.SettingsSerializeAs" /> 对象。此对象是用于设置存储应用程序设置的序列化方案的枚举。</param>
      <param name="attributes">一个 <see cref="T:System.Configuration.SettingsAttributeDictionary" /> 对象。</param>
      <param name="throwOnErrorDeserializing">一个布尔值，指定未成功反序列化属性时是否引发错误。</param>
      <param name="throwOnErrorSerializing">一个布尔值，指定未成功序列化属性时是否引发错误。</param>
    </member>
    <member name="P:System.Configuration.SettingsProperty.Attributes">
      <summary>获取 <see cref="T:System.Configuration.SettingsAttributeDictionary" /> 对象，该对象包含 <see cref="T:System.Configuration.SettingsProperty" /> 对象的属性。</summary>
      <returns>一个 <see cref="T:System.Configuration.SettingsAttributeDictionary" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Configuration.SettingsProperty.DefaultValue">
      <summary>获取或设置 <see cref="T:System.Configuration.SettingsProperty" /> 对象的默认值。</summary>
      <returns>包含 <see cref="T:System.Configuration.SettingsProperty" /> 对象的默认值的对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Configuration.SettingsProperty.IsReadOnly">
      <summary>获取或设置一个值，该值指定 <see cref="T:System.Configuration.SettingsProperty" /> 对象是否为只读。</summary>
      <returns>
            如果 <see cref="T:System.Configuration.SettingsProperty" /> 为只读，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Configuration.SettingsProperty.Name">
      <summary>获取或设置 <see cref="T:System.Configuration.SettingsProperty" /> 的名称。</summary>
      <returns>
        <see cref="T:System.Configuration.SettingsProperty" /> 的名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Configuration.SettingsProperty.PropertyType">
      <summary>获取或设置 <see cref="T:System.Configuration.SettingsProperty" /> 的类型。</summary>
      <returns>
        <see cref="T:System.Configuration.SettingsProperty" /> 的类型。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Configuration.SettingsProperty.Provider">
      <summary>获取或设置 <see cref="T:System.Configuration.SettingsProperty" /> 的提供程序。</summary>
      <returns>一个 <see cref="T:System.Configuration.SettingsProvider" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Configuration.SettingsProperty.SerializeAs">
      <summary>获取或设置 <see cref="T:System.Configuration.SettingsProperty" /> 的 <see cref="T:System.Configuration.SettingsSerializeAs" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.SettingsSerializeAs" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Configuration.SettingsProperty.ThrowOnErrorDeserializing">
      <summary>获取或设置一个值，该值指定未成功反序列化属性时是否引发错误。</summary>
      <returns>
            未成功反序列化属性时如果引发错误，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.SettingsProperty.ThrowOnErrorSerializing">
      <summary>获取或设置一个值，该值指定未成功序列化属性时是否引发错误。</summary>
      <returns>
            未成功序列化属性时如果引发错误，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Configuration.SettingsPropertyCollection">
      <summary>包含 <see cref="T:System.Configuration.SettingsProperty" /> 对象的集合。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.SettingsPropertyCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.Add(System.Configuration.SettingsProperty)">
      <summary>将 <see cref="T:System.Configuration.SettingsProperty" /> 对象添加到集合中。</summary>
      <param name="property">一个 <see cref="T:System.Configuration.SettingsProperty" /> 对象。</param>
      <exception cref="T:System.NotSupportedException">集合为只读。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.Clear">
      <summary>从集合中移除所有 <see cref="T:System.Configuration.SettingsProperty" /> 对象。</summary>
      <exception cref="T:System.NotSupportedException">集合为只读。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.Clone">
      <summary>创建现有集合的一个副本。</summary>
      <returns>一个 <see cref="T:System.Configuration.SettingsPropertyCollection" /> 类。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.CopyTo(System.Array,System.Int32)">
      <summary>将此 <see cref="T:System.Configuration.SettingsPropertyCollection" /> 对象复制到数组。</summary>
      <param name="array">要向其复制对象的数组。</param>
      <param name="index">开始复制的索引位置。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Configuration.SettingsPropertyCollection.Count">
      <summary>获取一个值，指定集合中的 <see cref="T:System.Configuration.SettingsProperty" /> 对象数。</summary>
      <returns>集合中的 <see cref="T:System.Configuration.SettingsProperty" /> 对象数。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.GetEnumerator">
      <summary>在将 <see cref="T:System.Collections.IEnumerator" /> 对象应用于集合时获取该对象。</summary>
      <returns>应用于集合时的 <see cref="T:System.Collections.IEnumerator" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Configuration.SettingsPropertyCollection.IsSynchronized">
      <summary>获取一个值，指示对集合的访问是否同步（线程安全）。</summary>
      <returns>
            如果对 <see cref="T:System.Configuration.SettingsPropertyCollection" /> 的访问是同步的，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Configuration.SettingsPropertyCollection.Item(System.String)">
      <summary>获取具有指定名称的集合项。</summary>
      <returns>具有指定 <paramref name="name" /> 的 <see cref="T:System.Configuration.SettingsProperty" /> 对象。</returns>
      <param name="name">
        <see cref="T:System.Configuration.SettingsProperty" /> 对象的名称。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.OnAdd(System.Configuration.SettingsProperty)">
      <summary>在添加 <see cref="T:System.Configuration.SettingsPropertyCollection" /> 实例的内容时执行其他自定义处理。</summary>
      <param name="property">一个 <see cref="T:System.Configuration.SettingsProperty" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.OnAddComplete(System.Configuration.SettingsProperty)">
      <summary>在添加 <see cref="T:System.Configuration.SettingsPropertyCollection" /> 实例的内容之后执行其他自定义处理。</summary>
      <param name="property">一个 <see cref="T:System.Configuration.SettingsProperty" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.OnClear">
      <summary>在清除 <see cref="T:System.Configuration.SettingsPropertyCollection" /> 实例的内容时执行其他自定义处理。</summary>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.OnClearComplete">
      <summary>在清除 <see cref="T:System.Configuration.SettingsPropertyCollection" /> 实例的内容之后执行其他自定义处理。</summary>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.OnRemove(System.Configuration.SettingsProperty)">
      <summary>在移除 <see cref="T:System.Configuration.SettingsPropertyCollection" /> 实例的内容时执行其他自定义处理。</summary>
      <param name="property">一个 <see cref="T:System.Configuration.SettingsProperty" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.OnRemoveComplete(System.Configuration.SettingsProperty)">
      <summary>在移除 <see cref="T:System.Configuration.SettingsPropertyCollection" /> 实例的内容之后执行其他自定义处理。</summary>
      <param name="property">一个 <see cref="T:System.Configuration.SettingsProperty" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.Remove(System.String)">
      <summary>从集合中移除 <see cref="T:System.Configuration.SettingsProperty" /> 对象。</summary>
      <param name="name">
        <see cref="T:System.Configuration.SettingsProperty" /> 对象的名称。</param>
      <exception cref="T:System.NotSupportedException">集合为只读。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.SetReadOnly">
      <summary>将集合设置为只读。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Configuration.SettingsPropertyCollection.SyncRoot">
      <summary>获取用于同步对集合的访问的对象。</summary>
      <returns>用于同步对集合的访问的对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Configuration.SettingsPropertyIsReadOnlyException">
      <summary>提供只读 <see cref="T:System.Configuration.SettingsProperty" /> 对象的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.SettingsPropertyIsReadOnlyException.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.SettingsPropertyIsReadOnlyException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.SettingsPropertyIsReadOnlyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>根据提供的参数初始化 <see cref="T:System.Configuration.SettingsPropertyIsReadOnlyException" /> 类的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，包含有关所引发异常的序列化对象数据。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，包含有关序列化流的源或目标的上下文信息。</param>
    </member>
    <member name="M:System.Configuration.SettingsPropertyIsReadOnlyException.#ctor(System.String)">
      <summary>根据提供的参数初始化 <see cref="T:System.Configuration.SettingsPropertyIsReadOnlyException" /> 类的新实例。</summary>
      <param name="message">包含异常消息的字符串。</param>
    </member>
    <member name="M:System.Configuration.SettingsPropertyIsReadOnlyException.#ctor(System.String,System.Exception)">
      <summary>根据提供的参数初始化 <see cref="T:System.Configuration.SettingsPropertyIsReadOnlyException" /> 类的新实例。</summary>
      <param name="message">包含异常消息的字符串。</param>
      <param name="innerException">导致当前异常的异常。</param>
    </member>
    <member name="T:System.Configuration.SettingsPropertyNotFoundException">
      <summary>提供未找到的 <see cref="T:System.Configuration.SettingsProperty" /> 对象的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.SettingsPropertyNotFoundException.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.SettingsPropertyNotFoundException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.SettingsPropertyNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用所提供的参数初始化 <see cref="T:System.Configuration.SettingsPropertyNotFoundException" /> 类的新实例。</summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="M:System.Configuration.SettingsPropertyNotFoundException.#ctor(System.String)">
      <summary>根据提供的参数初始化 <see cref="T:System.Configuration.SettingsPropertyNotFoundException" /> 类的新实例。</summary>
      <param name="message"></param>
    </member>
    <member name="M:System.Configuration.SettingsPropertyNotFoundException.#ctor(System.String,System.Exception)">
      <summary>使用所提供的参数初始化 <see cref="T:System.Configuration.SettingsPropertyNotFoundException" /> 类的新实例。</summary>
      <param name="message"></param>
      <param name="innerException">导致当前异常的异常。</param>
    </member>
    <member name="T:System.Configuration.SettingsPropertyValue">
      <summary>包含可由 <see cref="T:System.Configuration.SettingsBase" /> 的实例加载和存储的设置属性的值。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.SettingsPropertyValue.#ctor(System.Configuration.SettingsProperty)">
      <summary>根据所提供的参数初始化 <see cref="T:System.Configuration.SettingsPropertyValue" /> 类的新实例。</summary>
      <param name="property">指定一个 <see cref="T:System.Configuration.SettingsProperty" /> 对象。</param>
    </member>
    <member name="P:System.Configuration.SettingsPropertyValue.Deserialized">
      <summary>获取或设置 <see cref="T:System.Configuration.SettingsProperty" /> 对象的值是否已反序列化。</summary>
      <returns>
            如果 <see cref="T:System.Configuration.SettingsProperty" /> 对象的值已反序列化，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Configuration.SettingsPropertyValue.IsDirty">
      <summary>获取或设置 <see cref="T:System.Configuration.SettingsProperty" /> 对象的值是否已更改。</summary>
      <returns>
            如果 <see cref="T:System.Configuration.SettingsProperty" /> 对象的值已更改，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Configuration.SettingsPropertyValue.Name">
      <summary>从关联的 <see cref="T:System.Configuration.SettingsProperty" /> 对象中获取属性名。</summary>
      <returns>
        <see cref="T:System.Configuration.SettingsProperty" /> 对象的名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Configuration.SettingsPropertyValue.Property">
      <summary>获取 <see cref="T:System.Configuration.SettingsProperty" /> 对象。</summary>
      <returns>描述 <see cref="T:System.Configuration.SettingsPropertyValue" /> 对象的 <see cref="T:System.Configuration.SettingsProperty" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Configuration.SettingsPropertyValue.PropertyValue">
      <summary>获取或设置 <see cref="T:System.Configuration.SettingsProperty" /> 对象的值。</summary>
      <returns>
        <see cref="T:System.Configuration.SettingsProperty" /> 对象的值。设置此值时，<see cref="P:System.Configuration.SettingsPropertyValue.IsDirty" /> 属性设置为 true，而 <see cref="P:System.Configuration.SettingsPropertyValue.UsingDefaultValue" /> 设置为 false。第一次访问 <see cref="P:System.Configuration.SettingsPropertyValue.PropertyValue" /> 属性中的某个值时，如果该值最初是用 <see cref="P:System.Configuration.SettingsPropertyValue.SerializedValue" /> 属性以序列化表示形式存储在 <see cref="T:System.Configuration.SettingsPropertyValue" /> 对象中的，则 <see cref="P:System.Configuration.SettingsPropertyValue.PropertyValue" /> 属性将触发基础值的反序列化。其副作用是，<see cref="P:System.Configuration.SettingsPropertyValue.Deserialized" /> 属性将设置为 true。如果此事件链发生在 ASP.NET 内，当反序列化过程中出现错误时，ASP.NET 的运行状况监视功能会将错误记录下来。默认情况下，这意味着在 ASP.NET 下运行时，反序列化错误将显示在应用程序事件日志中。如果此过程发生在 ASP.NET 外，当反序列化过程中出现错误时，将取消错误，逻辑的其余部分仍在反序列化过程中发生。当尝试反序列化时，如果不存在可以反序列化的序列化值，则 <see cref="T:System.Configuration.SettingsPropertyValue" /> 对象将尝试返回默认值（如果按照关联的 <see cref="T:System.Configuration.SettingsProperty" /> 实例的定义配置了默认值）。在这种情况下，如果 <see cref="P:System.Configuration.SettingsProperty.DefaultValue" /> 属性设置为 null 或字符串“[null]”，则 <see cref="T:System.Configuration.SettingsPropertyValue" /> 对象将把 <see cref="P:System.Configuration.SettingsPropertyValue.PropertyValue" /> 属性初始化为 null（对于引用类型）或默认值（对于关联的值类型）。另一方面，如果 <see cref="P:System.Configuration.SettingsProperty.DefaultValue" /> 属性包含有效的对象引用或字符串值（不是“[null]”），则返回 <see cref="P:System.Configuration.SettingsProperty.DefaultValue" /> 属性。当尝试反序列化时，如果不存在可以反序列化的序列化值，而且没有指定默认值，则对于字符串类型返回空字符串。对于所有其他类型，调用 <see cref="M:System.Activator.CreateInstance(System.Type)" /> 将返回默认实例。对于引用类型，这意味着将尝试使用默认构造函数创建对象实例。如果此尝试失败，则返回 null。</returns>
      <exception cref="T:System.ArgumentException">尝试使用 <see cref="P:System.Configuration.SettingsProperty.DefaultValue" /> 属性中的默认值时出现错误。将 <see cref="P:System.Configuration.SettingsProperty.DefaultValue" /> 属性转换为有效类型的尝试失败，或者得到的值与 <see cref="P:System.Configuration.SettingsProperty.PropertyType" /> 定义的类型不兼容。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Configuration.SettingsPropertyValue.SerializedValue">
      <summary>获取或设置 <see cref="T:System.Configuration.SettingsProperty" /> 对象的序列化值。</summary>
      <returns>
        <see cref="T:System.Configuration.SettingsProperty" /> 对象的序列化值。</returns>
      <exception cref="T:System.ArgumentException">属性的序列化选项表明要使用字符串类型转换器，但类型转换器不可用。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, ControlPrincipal" />
      </PermissionSet>
    </member>
    <member name="P:System.Configuration.SettingsPropertyValue.UsingDefaultValue">
      <summary>获取一个布尔值，该值指定 <see cref="T:System.Configuration.SettingsPropertyValue" /> 对象的值是否是由关联的 <see cref="T:System.Configuration.SettingsProperty" /> 对象的 <see cref="P:System.Configuration.SettingsProperty.DefaultValue" /> 属性值定义的默认值。</summary>
      <returns>
            如果 <see cref="T:System.Configuration.SettingsProperty" /> 对象的值是默认值，则为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Configuration.SettingsPropertyValueCollection">
      <summary>包含设置属性值的集合，这些值将 <see cref="T:System.Configuration.SettingsProperty" /> 对象映射到 <see cref="T:System.Configuration.SettingsPropertyValue" /> 对象。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.SettingsPropertyValueCollection.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.SettingsPropertyValueCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.SettingsPropertyValueCollection.Add(System.Configuration.SettingsPropertyValue)">
      <summary>将 <see cref="T:System.Configuration.SettingsPropertyValue" /> 对象添加到集合中。</summary>
      <param name="property">一个 <see cref="T:System.Configuration.SettingsPropertyValue" /> 对象。</param>
      <exception cref="T:System.NotSupportedException">试图将某项添加到集合中，但集合被标记为只读。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.SettingsPropertyValueCollection.Clear">
      <summary>从集合中移除所有 <see cref="T:System.Configuration.SettingsPropertyValue" /> 对象。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.SettingsPropertyValueCollection.Clone">
      <summary>创建现有集合的一个副本。</summary>
      <returns>
        <see cref="T:System.Configuration.SettingsPropertyValueCollection" /> 类。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.SettingsPropertyValueCollection.CopyTo(System.Array,System.Int32)">
      <summary>将此 <see cref="T:System.Configuration.SettingsPropertyValueCollection" /> 集合复制到数组。</summary>
      <param name="array">要向其复制集合的数组。</param>
      <param name="index">开始复制的索引位置。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Configuration.SettingsPropertyValueCollection.Count">
      <summary>获取一个值，指定集合中的 <see cref="T:System.Configuration.SettingsPropertyValue" /> 对象数。</summary>
      <returns>集合中的 <see cref="T:System.Configuration.SettingsPropertyValue" /> 对象数。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.SettingsPropertyValueCollection.GetEnumerator">
      <summary>在将 <see cref="T:System.Collections.IEnumerator" /> 对象应用于集合时获取该对象。</summary>
      <returns>应用于集合时的 <see cref="T:System.Collections.IEnumerator" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Configuration.SettingsPropertyValueCollection.IsSynchronized">
      <summary>获取一个值，指示对集合的访问是否同步（线程安全）。</summary>
      <returns>
如果对 <see cref="T:System.Configuration.SettingsPropertyValueCollection" /> 集合的访问是同步的，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Configuration.SettingsPropertyValueCollection.Item(System.String)">
      <summary>获取集合中的项。</summary>
      <returns>具有指定 <paramref name="name" /> 的 <see cref="T:System.Configuration.SettingsPropertyValue" /> 对象。</returns>
      <param name="name">一个 <see cref="T:System.Configuration.SettingsPropertyValue" /> 对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.SettingsPropertyValueCollection.Remove(System.String)">
      <summary>从集合中移除 <see cref="T:System.Configuration.SettingsPropertyValue" /> 对象。</summary>
      <param name="name">
        <see cref="T:System.Configuration.SettingsPropertyValue" /> 对象的名称。</param>
      <exception cref="T:System.NotSupportedException">试图从集合中移除某项，但集合被标记为只读。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.SettingsPropertyValueCollection.SetReadOnly">
      <summary>将集合设置为只读。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Configuration.SettingsPropertyValueCollection.SyncRoot">
      <summary>获取用于同步对集合的访问的对象。</summary>
      <returns>用于同步对集合的访问的对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Configuration.SettingsPropertyWrongTypeException">
      <summary>提供在对 <see cref="T:System.Configuration.SettingsProperty" /> 对象使用无效类型时引发的异常。</summary>
    </member>
    <member name="M:System.Configuration.SettingsPropertyWrongTypeException.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.SettingsPropertyWrongTypeException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.SettingsPropertyWrongTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>基于提供的参数初始化 <see cref="T:System.Configuration.SettingsPropertyWrongTypeException" /> 类的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它存有有关所引发异常的序列化的对象数据。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含有关序列化流的源或目标的上下文信息。</param>
    </member>
    <member name="M:System.Configuration.SettingsPropertyWrongTypeException.#ctor(System.String)">
      <summary>基于提供的参数初始化 <see cref="T:System.Configuration.SettingsPropertyWrongTypeException" /> 类的新实例。</summary>
      <param name="message">包含异常消息的字符串。</param>
    </member>
    <member name="M:System.Configuration.SettingsPropertyWrongTypeException.#ctor(System.String,System.Exception)">
      <summary>基于提供的参数初始化 <see cref="T:System.Configuration.SettingsPropertyWrongTypeException" /> 类的新实例。</summary>
      <param name="message">包含异常消息的字符串。</param>
      <param name="innerException">导致当前异常的异常。</param>
    </member>
    <member name="T:System.Configuration.SettingsProvider">
      <summary>在应用程序设置结构中作为派生自定义设置提供程序的基类。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.SettingsProvider.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.SettingsProvider" /> 类的实例。</summary>
    </member>
    <member name="P:System.Configuration.SettingsProvider.ApplicationName">
      <summary>获取或设置当前运行的应用程序的名称。</summary>
      <returns>一个 <see cref="T:System.String" />，包含应用程序的简短名称，该名称中不包含完整的路径或扩展名，例如 SimpleAppSettings。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.SettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)">
      <summary>返回指定应用程序实例的设置属性值集合和设置属性组。</summary>
      <returns>一个包含指定设置属性组的值的 <see cref="T:System.Configuration.SettingsPropertyValueCollection" />。</returns>
      <param name="context">
        <see cref="T:System.Configuration.SettingsContext" />，描述当前应用程序的用法。</param>
      <param name="collection">一个包含设置属性组（将要检索该组中的值）的 <see cref="T:System.Configuration.SettingsPropertyCollection" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.SettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)">
      <summary>设置指定的属性设置组的值。</summary>
      <param name="context">描述当前应用程序用法的 <see cref="T:System.Configuration.SettingsContext" />。</param>
      <param name="collection">表示要设置的属性设置组的 <see cref="T:System.Configuration.SettingsPropertyValueCollection" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Configuration.SettingsProviderAttribute">
      <summary>指定用于存储当前应用程序设置类或属性的设置提供程序。无法继承此类。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Configuration.SettingsProviderAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Configuration.SettingsProviderAttribute" /> 类的实例。</summary>
      <param name="providerTypeName">包含设置提供程序的名称的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.Configuration.SettingsProviderAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Configuration.SettingsProviderAttribute" /> 类的新实例。</summary>
      <param name="providerType">一个包含设置提供程序类型的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Configuration.SettingsProviderAttribute.ProviderTypeName">
      <summary>获取设置提供程序的类型名称。</summary>
      <returns>包含设置提供程序的名称的 <see cref="T:System.String" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Configuration.SettingsProviderCollection">
      <summary>表示应用程序设置提供程序的集合。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.SettingsProviderCollection.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.SettingsProviderCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.SettingsProviderCollection.Add(System.Configuration.Provider.ProviderBase)">
      <summary>将新设置提供程序添加到集合中。</summary>
      <param name="provider">要添加到集合中的 <see cref="T:System.Configuration.Provider.ProviderBase" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="provider" /> 参数的类型不为 <see cref="T:System.Configuration.SettingsProvider" />。 - 或 -提供程序参数的 <see cref="P:System.Configuration.Provider.ProviderBase.Name" /> 属性为 null 或是一个空字符串。- 或 -集合中已经存在一个具有相同 <see cref="P:System.Configuration.Provider.ProviderBase.Name" /> 的设置提供程序。</exception>
      <exception cref="T:System.NotSupportedException">集合为只读。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="provider" /> 参数为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Configuration.SettingsProviderCollection.Item(System.String)">
      <summary>获取集合中与指定名称相匹配的设置提供程序。</summary>
      <returns>如果找到了匹配项，则为与名称参数所指定的名称匹配的 <see cref="T:System.Configuration.SettingsProvider" />；否则为 null。</returns>
      <param name="name">包含设置提供程序友好名称的 <see cref="T:System.String" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 null。</exception>
      <exception cref="T:System.NotSupportedException">当设置此值时，集合为只读。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Configuration.SettingsSavingEventHandler">
      <summary>表示将处理 <see cref="E:System.Configuration.ApplicationSettingsBase.SettingsSaving" /> 事件的方法。 </summary>
      <param name="sender">事件的源，通常为数据容器或数据绑定集合。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.CancelEventArgs" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Configuration.SettingsSerializeAs">
      <summary>确定用于存储应用程序设置的序列化方案。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Configuration.SettingsSerializeAs.String">
      <summary>设置属性被序列化为纯文本。</summary>
    </member>
    <member name="F:System.Configuration.SettingsSerializeAs.Xml">
      <summary>使用 XML 序列化将设置属性序列化为 XML。</summary>
    </member>
    <member name="F:System.Configuration.SettingsSerializeAs.Binary">
      <summary>设置属性使用二进制对象序列化方法来进行序列化。</summary>
    </member>
    <member name="F:System.Configuration.SettingsSerializeAs.ProviderSpecific">
      <summary>设置提供程序具有属性或其类型的隐式知识，将选择适当的序列化机制。通常用于自定义序列化。</summary>
    </member>
    <member name="T:System.Configuration.SettingsSerializeAsAttribute">
      <summary>指定设置提供程序应使用的序列化机制。无法继承此类。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Configuration.SettingsSerializeAsAttribute.#ctor(System.Configuration.SettingsSerializeAs)">
      <summary>初始化 <see cref="T:System.Configuration.SettingsSerializeAsAttribute" /> 类的实例。</summary>
      <param name="serializeAs">用于指定序列化方案的 <see cref="T:System.Configuration.SettingsSerializeAs" /> 枚举值。</param>
    </member>
    <member name="P:System.Configuration.SettingsSerializeAsAttribute.SerializeAs">
      <summary>获取用于指定序列化方案的 <see cref="T:System.Configuration.SettingsSerializeAs" /> 枚举值。</summary>
      <returns>用于指定序列化方案的 <see cref="T:System.Configuration.SettingsSerializeAs" /> 枚举值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Configuration.SettingValueElement">
      <summary>包含表示设置的序列化值的 XML。无法继承此类。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.SettingValueElement.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.SettingValueElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.SettingValueElement.Equals(System.Object)">
      <summary>将当前的 <see cref="T:System.Configuration.SettingValueElement" /> 实例与指定的对象进行比较。</summary>
      <returns>
            如果 <see cref="T:System.Configuration.SettingValueElement" /> 实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="settingValue">要比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.SettingValueElement.GetHashCode">
      <summary>获取表示 <see cref="T:System.Configuration.SettingValueElement" /> 当前实例的唯一值。</summary>
      <returns>表示 <see cref="T:System.Configuration.SettingValueElement" /> 当前实例的唯一值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Configuration.SettingValueElement.ValueXml">
      <summary>使用 <see cref="T:System.Xml.XmlNode" /> 对象，获取或设置 <see cref="T:System.Configuration.SettingValueElement" /> 对象的值。</summary>
      <returns>包含 <see cref="T:System.Configuration.SettingElement" /> 值的 <see cref="T:System.Xml.XmlNode" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Configuration.SingleTagSectionHandler">
      <summary>处理 .config 文件中由单个 XML 标记所表示的各配置节。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.SingleTagSectionHandler.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.SingleTagSectionHandler" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.SingleTagSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
      <summary>供内部使用，以创建此对象的新实例。</summary>
      <returns>创建的对象处理程序。</returns>
      <param name="parent">此对象的父级。</param>
      <param name="context">此对象的上下文。</param>
      <param name="section">配置中的 <see cref="T:System.Xml.XmlNode" /> 对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Configuration.SpecialSetting">
      <summary>指定应用程序设置属性的特殊设置类别。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Configuration.SpecialSetting.ConnectionString">
      <summary>该配置属性表示一个通常用于数据存储区或网络资源的连接字符串。 </summary>
    </member>
    <member name="F:System.Configuration.SpecialSetting.WebServiceUrl">
      <summary>该配置属性表示 Web 服务的统一资源定位器 (URL)。</summary>
    </member>
    <member name="T:System.Configuration.SpecialSettingAttribute">
      <summary>指示应用程序设置属性具有特别意义。无法继承此类。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Configuration.SpecialSettingAttribute.#ctor(System.Configuration.SpecialSetting)">
      <summary>初始化 <see cref="T:System.Configuration.SpecialSettingAttribute" /> 类的新实例。</summary>
      <param name="specialSetting">定义应用程序设置属性的类别的 <see cref="T:System.Configuration.SpecialSetting" /> 枚举值。</param>
    </member>
    <member name="P:System.Configuration.SpecialSettingAttribute.SpecialSetting">
      <summary>获取描述应用程序设置属性的特殊设置类别的值。</summary>
      <returns>定义应用程序设置属性的类别的 <see cref="T:System.Configuration.SpecialSetting" /> 枚举值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Configuration.UserScopedSettingAttribute">
      <summary>指定应用程序设置组或属性对于应用程序的每个用户包含不同的值。无法继承此类。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Configuration.UserScopedSettingAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.UserScopedSettingAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Configuration.UserSettingsGroup">
      <summary>表示配置文件内的一组相关用户设置节。无法继承此类。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Configuration.UserSettingsGroup.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.UserSettingsGroup" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Configuration.IdnElement">
      <summary>在 <see cref="T:System.Uri" /> 类中提供用于国际域名 (IDN) 处理的配置设置。</summary>
    </member>
    <member name="M:System.Configuration.IdnElement.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.IdnElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Configuration.IdnElement.Enabled">
      <summary>获取或设置 <see cref="T:System.Configuration.IdnElement" /> 配置设置的值。</summary>
      <returns>一个 <see cref="T:System.UriIdnScope" />，其中包含用于 IDN 处理的当前配置设置。</returns>
    </member>
    <member name="T:System.Configuration.IriParsingElement">
      <summary>在 <see cref="T:System.Uri" /> 类中提供用于国际化资源标识符 (IRI) 处理的配置设置。</summary>
    </member>
    <member name="M:System.Configuration.IriParsingElement.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.IriParsingElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Configuration.IriParsingElement.Enabled">
      <summary>获取或设置 <see cref="T:System.Configuration.IriParsingElement" /> 配置设置的值。</summary>
      <returns>一个布尔值，指示是否启用国际化资源标识符 (IRI) 处理。</returns>
    </member>
    <member name="T:System.Configuration.UriSection">
      <summary>表示配置文件中的 Uri 节。</summary>
    </member>
    <member name="M:System.Configuration.UriSection.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.UriSection" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Configuration.UriSection.Idn">
      <summary>获取一个 <see cref="T:System.Configuration.IdnElement" /> 对象，其中包含 <see cref="T:System.Uri" /> 类中用于国际化域名 (IDN) 处理的配置设置。</summary>
    </member>
    <member name="P:System.Configuration.UriSection.IriParsing">
      <summary>获取一个 <see cref="T:System.Configuration.IriParsingElement" /> 对象，其中包含 <see cref="T:System.Uri" /> 类中用于国际化资源标识符 (IRI) 分析的配置设置。</summary>
    </member>
    <member name="T:System.Diagnostics.BooleanSwitch">
      <summary>提供一个简单的开/关开关来控制调试和跟踪输出。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.BooleanSwitch.#ctor(System.String,System.String)">
      <summary>用指定的显示名称和说明初始化 <see cref="T:System.Diagnostics.BooleanSwitch" /> 类的新实例。</summary>
      <param name="displayName">要显示在用户界面上的名称。 </param>
      <param name="description">开关说明。 </param>
    </member>
    <member name="M:System.Diagnostics.BooleanSwitch.#ctor(System.String,System.String,System.String)">
      <summary>用指定的显示名称、说明和默认开关值初始化 <see cref="T:System.Diagnostics.BooleanSwitch" /> 类的新实例。 </summary>
      <param name="displayName">要显示在用户界面上的名称。 </param>
      <param name="description">开关说明。 </param>
      <param name="defaultSwitchValue">开关的默认值。</param>
    </member>
    <member name="P:System.Diagnostics.BooleanSwitch.Enabled">
      <summary>获取或设置一个指示开关已启用还是已禁用的值。</summary>
      <returns>
如果启用此开关，则为 true；否则为 false。默认为 false。</returns>
      <exception cref="T:System.Security.SecurityException">调用方没有正确的权限。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.BooleanSwitch.OnValueChanged">
      <summary>确定 <see cref="P:System.Diagnostics.Switch.Value" /> 属性的新值是否可分析为布尔值。</summary>
    </member>
    <member name="T:System.Diagnostics.ConsoleTraceListener">
      <summary>将跟踪或调试输出定向到标准输出或标准错误流。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.ConsoleTraceListener.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.ConsoleTraceListener" /> 类的新实例，并将跟踪输出写入标准输出流中。</summary>
    </member>
    <member name="M:System.Diagnostics.ConsoleTraceListener.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Diagnostics.ConsoleTraceListener" /> 类的一个新实例，并利用一个选项将跟踪输出写入标准输出流或标准错误流中。</summary>
      <param name="useErrorStream">
                若为 true，则将跟踪和调试输出写入标准错误流中；若为 false，则将跟踪和调试输出写入标准输出流中。</param>
    </member>
    <member name="T:System.Diagnostics.CorrelationManager">
      <summary>关联同属于某个逻辑事务的多个跟踪。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.CorrelationManager.ActivityId">
      <summary>获取或设置全局活动的标识。</summary>
      <returns>标识全局活动的 <see cref="T:System.Guid" /> 结构。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.CorrelationManager.LogicalOperationStack">
      <summary>从调用上下文中获取逻辑操作堆栈。</summary>
      <returns>表示调用上下文的逻辑操作堆栈的 <see cref="T:System.Collections.Stack" /> 对象。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.CorrelationManager.StartLogicalOperation">
      <summary>启动线程上的逻辑操作。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.CorrelationManager.StartLogicalOperation(System.Object)">
      <summary>启动线程上具有指定标识的逻辑操作。</summary>
      <param name="operationId">用于标识操作的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operationId" /> 参数为 null。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.CorrelationManager.StopLogicalOperation">
      <summary>停止当前的逻辑操作。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.CorrelationManager.LogicalOperationStack" /> 属性为空堆栈。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Diagnostics.CounterCreationData">
      <summary>定义自定义计数器的计数器类型、名称和帮助字符串。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.CounterCreationData.#ctor">
      <summary>将 <see cref="T:System.Diagnostics.CounterCreationData" /> 类的新实例初始化为 NumberOfItems32 类型的计数器，其名称和帮助字符串为空。</summary>
    </member>
    <member name="M:System.Diagnostics.CounterCreationData.#ctor(System.String,System.String,System.Diagnostics.PerformanceCounterType)">
      <summary>使用指定的计数器名称和帮助字符串，将 <see cref="T:System.Diagnostics.CounterCreationData" /> 类的新实例初始化为指定类型的计数器。</summary>
      <param name="counterName">计数器的名称，该名称在其类别中必须是唯一的。</param>
      <param name="counterHelp">描述计数器行为的文本。</param>
      <param name="counterType">标识计数器行为的 <see cref="T:System.Diagnostics.PerformanceCounterType" />。</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">为 <paramref name="counterType" /> 指定的值不是 <see cref="T:System.Diagnostics.PerformanceCounterType" /> 枚举的成员。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="counterHelp" /> 为 null。</exception>
    </member>
    <member name="P:System.Diagnostics.CounterCreationData.CounterHelp">
      <summary>获取或设置自定义计数器的说明。</summary>
      <returns>描述计数器行为的文本。</returns>
      <exception cref="T:System.ArgumentNullException">指定的值为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.CounterCreationData.CounterName">
      <summary>获取或设置自定义计数器的名称。</summary>
      <returns>计数器的名称，该名称在其类别内是唯一的。</returns>
      <exception cref="T:System.ArgumentNullException">指定的值为 null。</exception>
      <exception cref="T:System.ArgumentException">指定值的长度不在 1 到 80 个字符之间，或者包含双引号、控制字符或者前导或尾随空格。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.CounterCreationData.CounterType">
      <summary>获取或设置自定义计数器的性能计数器类型。</summary>
      <returns>定义性能计数器行为的 <see cref="T:System.Diagnostics.PerformanceCounterType" />。</returns>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指定的类型不是 <see cref="T:System.Diagnostics.PerformanceCounterType" /> 枚举的成员。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.Diagnostics.CounterCreationDataCollection">
      <summary>提供 <see cref="T:System.Diagnostics.CounterCreationData" /> 对象的强类型集合。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.#ctor">
      <summary>在没有关联的 <see cref="T:System.Diagnostics.CounterCreationData" /> 实例的情况下，初始化 <see cref="T:System.Diagnostics.CounterCreationDataCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.#ctor(System.Diagnostics.CounterCreationData[])">
      <summary>使用指定的 <see cref="T:System.Diagnostics.CounterCreationData" /> 实例数组来初始化 <see cref="T:System.Diagnostics.CounterCreationDataCollection" /> 类的新实例。</summary>
      <param name="value">
        <see cref="T:System.Diagnostics.CounterCreationData" /> 实例数组，将使用这些实例初始化该 <see cref="T:System.Diagnostics.CounterCreationDataCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.#ctor(System.Diagnostics.CounterCreationDataCollection)">
      <summary>使用指定的 <see cref="T:System.Diagnostics.CounterCreationData" /> 实例集合来初始化 <see cref="T:System.Diagnostics.CounterCreationDataCollection" /> 类的新实例。</summary>
      <param name="value">一个 <see cref="T:System.Diagnostics.CounterCreationDataCollection" />，它包含用于初始化该 <see cref="T:System.Diagnostics.CounterCreationDataCollection" /> 的 <see cref="T:System.Diagnostics.CounterCreationData" /> 实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.Add(System.Diagnostics.CounterCreationData)">
      <summary>向集合添加 <see cref="T:System.Diagnostics.CounterCreationData" /> 类的实例。</summary>
      <returns>新 <see cref="T:System.Diagnostics.CounterCreationData" /> 对象的索引。</returns>
      <param name="value">要追加到现有集合中的 <see cref="T:System.Diagnostics.CounterCreationData" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Diagnostics.CounterCreationData" /> 对象。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.AddRange(System.Diagnostics.CounterCreationData[])">
      <summary>将指定的 <see cref="T:System.Diagnostics.CounterCreationData" /> 实例数组添加到该集合中。</summary>
      <param name="value">要追加到现有集合的 <see cref="T:System.Diagnostics.CounterCreationData" /> 实例的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.AddRange(System.Diagnostics.CounterCreationDataCollection)">
      <summary>将指定的 <see cref="T:System.Diagnostics.CounterCreationData" /> 实例集合添加到该集合中。</summary>
      <param name="value">要追加到现有集合的 <see cref="T:System.Diagnostics.CounterCreationData" /> 实例的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.Contains(System.Diagnostics.CounterCreationData)">
      <summary>确定集合中是否存在某 <see cref="T:System.Diagnostics.CounterCreationData" /> 实例。</summary>
      <returns>
            如果集合中存在指定 <see cref="T:System.Diagnostics.CounterCreationData" /> 对象，则为 true；否则为 false。</returns>
      <param name="value">要在集合中查找的 <see cref="T:System.Diagnostics.CounterCreationData" /> 对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.CopyTo(System.Diagnostics.CounterCreationData[],System.Int32)">
      <summary>从数组中指定的索引位置开始，将 <see cref="T:System.Diagnostics.CounterCreationData" /> 的元素复制到数组。</summary>
      <param name="array">要添加到集合的 <see cref="T:System.Diagnostics.CounterCreationData" /> 实例的数组。</param>
      <param name="index">要添加新实例的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 等于或大于 array 的长度。- 或 -此 <see cref="T:System.Diagnostics.CounterCreationDataCollection" /> 中的元素数大于从 <paramref name="index" /> 到目标数组末尾之间的可用空间。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.IndexOf(System.Diagnostics.CounterCreationData)">
      <summary>返回该集合中 <see cref="T:System.Diagnostics.CounterCreationData" /> 对象的索引。</summary>
      <returns>如果找到指定的 <see cref="T:System.Diagnostics.CounterCreationData" />，则为其在集合中从零开始的索引；否则为 -1。</returns>
      <param name="value">要在集合中定位的 <see cref="T:System.Diagnostics.CounterCreationData" /> 对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.Insert(System.Int32,System.Diagnostics.CounterCreationData)">
      <summary>将 <see cref="T:System.Diagnostics.CounterCreationData" /> 对象插入集合中的指定索引处。</summary>
      <param name="index">要插入 <see cref="T:System.Diagnostics.CounterCreationData" /> 的位置的从零开始的索引。</param>
      <param name="value">要插入到集合中的 <see cref="T:System.Diagnostics.CounterCreationData" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Diagnostics.CounterCreationData" /> 对象。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。- 或 -<paramref name="index" /> 大于集合中的项数。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.CounterCreationDataCollection.Item(System.Int32)">
      <summary>为 <see cref="T:System.Diagnostics.CounterCreationData" /> 集合编制索引。</summary>
      <returns>集合索引，用于访问该集合中的单个元素。</returns>
      <param name="index">
        <see cref="T:System.Diagnostics.CounterCreationDataCollection" /> 的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。- 或 -<paramref name="index" /> 大于或等于集合中的项数。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.OnValidate(System.Object)">
      <summary>检查指定的对象以确定它是否为有效的 <see cref="T:System.Diagnostics.CounterCreationData" /> 类型。</summary>
      <param name="value">将要验证的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Diagnostics.CounterCreationData" /> 对象。</exception>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.Remove(System.Diagnostics.CounterCreationData)">
      <summary>从集合中移除 <see cref="T:System.Diagnostics.CounterCreationData" /> 对象。</summary>
      <param name="value">要从该集合中移除的 <see cref="T:System.Diagnostics.CounterCreationData" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Diagnostics.CounterCreationData" /> 对象。- 或 -
                集合中不存在 <paramref name="value" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.CounterSample">
      <summary>定义存放性能计数器的原始数据的结构。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.CounterSample.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Diagnostics.PerformanceCounterType)">
      <summary>初始化 <see cref="T:System.Diagnostics.CounterSample" /> 结构的新实例，然后将 <see cref="P:System.Diagnostics.CounterSample.CounterTimeStamp" /> 属性设置为 0（零）。</summary>
      <param name="rawValue">与性能计数器样本关联的数值。</param>
      <param name="baseValue">可选的计数器基原始值，仅当该样本基于多个计数器时才使用。</param>
      <param name="counterFrequency">读取计数器的频率。</param>
      <param name="systemFrequency">系统读取计数器的频率。</param>
      <param name="timeStamp">原始时间戳。</param>
      <param name="timeStamp100nSec">原始的高保真时间戳。</param>
      <param name="counterType">
        <see cref="T:System.Diagnostics.PerformanceCounterType" /> 对象，它指示计数器的类型，此样本是该计数器的快照。</param>
    </member>
    <member name="M:System.Diagnostics.CounterSample.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Diagnostics.PerformanceCounterType,System.Int64)">
      <summary>初始化 <see cref="T:System.Diagnostics.CounterSample" /> 结构的新实例，然后将 <see cref="P:System.Diagnostics.CounterSample.CounterTimeStamp" /> 属性设置为传入的值。</summary>
      <param name="rawValue">与性能计数器样本关联的数值。</param>
      <param name="baseValue">可选的计数器基原始值，仅当该样本基于多个计数器时才使用。</param>
      <param name="counterFrequency">读取计数器的频率。</param>
      <param name="systemFrequency">系统读取计数器的频率。</param>
      <param name="timeStamp">原始时间戳。</param>
      <param name="timeStamp100nSec">原始的高保真时间戳。</param>
      <param name="counterType">
        <see cref="T:System.Diagnostics.PerformanceCounterType" /> 对象，它指示计数器的类型，此样本是该计数器的快照。</param>
      <param name="counterTimeStamp">样本采集时间。</param>
    </member>
    <member name="P:System.Diagnostics.CounterSample.BaseValue">
      <summary>获取可选的计数器基原始值。</summary>
      <returns>基原始值，仅在样本是基于多个计数器时才使用该值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.CounterSample.Calculate(System.Diagnostics.CounterSample)">
      <summary>使用单个采样点计算计数器的性能数据。此方法通常用于非计算所得的性能计数器类型。</summary>
      <returns>计算的性能值。</returns>
      <param name="counterSample">
        <see cref="T:System.Diagnostics.CounterSample" /> 结构，用作性能数据计算的基点。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.CounterSample.Calculate(System.Diagnostics.CounterSample,System.Diagnostics.CounterSample)">
      <summary>使用两个采样点计算计数器的性能数据。此方法通常用于计算所得的性能计数器类型，如平均值。</summary>
      <returns>计算的性能值。</returns>
      <param name="counterSample">
        <see cref="T:System.Diagnostics.CounterSample" /> 结构，用作性能数据计算的基点。</param>
      <param name="nextCounterSample">
        <see cref="T:System.Diagnostics.CounterSample" /> 结构，用作性能数据计算的结束点。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.CounterSample.CounterFrequency">
      <summary>获取原始计数器频率。</summary>
      <returns>读取计数器的频率。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.CounterSample.CounterTimeStamp">
      <summary>获取计数器的时间戳。</summary>
      <returns>样本采集时间。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.CounterSample.CounterType">
      <summary>获取性能计数器类型。</summary>
      <returns>
        <see cref="T:System.Diagnostics.PerformanceCounterType" /> 对象，它指示计数器的类型，此样本是该计数器的快照。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.CounterSample.Empty">
      <summary>定义 NumberOfItems32 类型的、未初始化并且为空的性能计数器样本。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.CounterSample.Equals(System.Diagnostics.CounterSample)">
      <summary>指示指定的 <see cref="T:System.Diagnostics.CounterSample" /> 结构是否等于当前的 <see cref="T:System.Diagnostics.CounterSample" /> 结构。</summary>
      <returns>
            如果 <paramref name="sample" /> 等于当前的实例，则为 true；否则为 false。</returns>
      <param name="sample">要与此实例进行比较的 <see cref="T:System.Diagnostics.CounterSample" /> 结构。</param>
    </member>
    <member name="M:System.Diagnostics.CounterSample.Equals(System.Object)">
      <summary>指示指定的结构是否为 <see cref="T:System.Diagnostics.CounterSample" /> 结构且与当前的 <see cref="T:System.Diagnostics.CounterSample" /> 结构相同。</summary>
      <returns>
            如果 <paramref name="o" /> 是 <see cref="T:System.Diagnostics.CounterSample" /> 结构且与当前实例相同，则为 true；否则为 false。</returns>
      <param name="o">要与当前结构进行比较的 <see cref="T:System.Diagnostics.CounterSample" /> 结构。</param>
    </member>
    <member name="M:System.Diagnostics.CounterSample.GetHashCode">
      <summary>获取当前计数器示例的哈希代码。</summary>
      <returns>当前计数器示例的哈希代码。</returns>
    </member>
    <member name="M:System.Diagnostics.CounterSample.op_Equality(System.Diagnostics.CounterSample,System.Diagnostics.CounterSample)">
      <summary>返回一个值，该值指示两个 <see cref="T:System.Diagnostics.CounterSample" /> 结构是否相等。</summary>
      <returns>
            如果 <paramref name="a" /> 和 <paramref name="b" /> 相等，则为 true；否则为 false。</returns>
      <param name="a">一个 <see cref="T:System.Diagnostics.CounterSample" /> 结构。</param>
      <param name="b">要与 <paramref name="a" /> 参数指定的结构进行比较的另一个 <see cref="T:System.Diagnostics.CounterSample" /> 结构。</param>
    </member>
    <member name="M:System.Diagnostics.CounterSample.op_Inequality(System.Diagnostics.CounterSample,System.Diagnostics.CounterSample)">
      <summary>返回一个值，该值指示两个 <see cref="T:System.Diagnostics.CounterSample" /> 结构是否不等。</summary>
      <returns>
            如果 <paramref name="a" /> 和 <paramref name="b" /> 不相等，则为 true；否则为 false。</returns>
      <param name="a">一个 <see cref="T:System.Diagnostics.CounterSample" /> 结构。</param>
      <param name="b">要与 <paramref name="a" /> 参数指定的结构进行比较的另一个 <see cref="T:System.Diagnostics.CounterSample" /> 结构。</param>
    </member>
    <member name="P:System.Diagnostics.CounterSample.RawValue">
      <summary>获取计数器的原始值。</summary>
      <returns>与性能计数器样本关联的数值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.CounterSample.SystemFrequency">
      <summary>获取原始系统频率。</summary>
      <returns>系统读取计数器的频率。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.CounterSample.TimeStamp">
      <summary>获取原始时间戳。</summary>
      <returns>系统时间戳。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.CounterSample.TimeStamp100nSec">
      <summary>获取原始的高保真时间戳。</summary>
      <returns>系统时间戳，精度在 0.1 毫秒内。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.CounterSampleCalculator">
      <summary>为解释性能计数器数据提供一组实用工具函数。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.CounterSampleCalculator.ComputeCounterValue(System.Diagnostics.CounterSample)">
      <summary>对单个原始计数器样本的计算所得值进行运算。</summary>
      <returns>性能计数器计算值的浮点表示形式。</returns>
      <param name="newSample">
        <see cref="T:System.Diagnostics.CounterSample" />，它指示系统采集的最新样本。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.CounterSampleCalculator.ComputeCounterValue(System.Diagnostics.CounterSample,System.Diagnostics.CounterSample)">
      <summary>对两个原始计数器样本计算所得值进行运算。</summary>
      <returns>性能计数器计算值的浮点表示形式。</returns>
      <param name="oldSample">
        <see cref="T:System.Diagnostics.CounterSample" />，它指示系统以前采集的样本。</param>
      <param name="newSample">
        <see cref="T:System.Diagnostics.CounterSample" />，它指示系统采集的最新样本。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="oldSample" /> 使用的计数器类型不同于 <paramref name="newSample" />。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">
        <paramref name="newSample" /> 计数器类型有一个性能数据助手 (PDH) 错误。有关更多信息，请参见本文档 Win32 和 COM 开发一节中的“检查 PDH 接口返回值”</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="T:System.Diagnostics.DataReceivedEventArgs">
      <summary>提供有关 <see cref="E:System.Diagnostics.Process.OutputDataReceived" /> 和 <see cref="E:System.Diagnostics.Process.ErrorDataReceived" /> 事件的数据。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.DataReceivedEventArgs.Data">
      <summary>获取写入到重定向 <see cref="T:System.Diagnostics.Process" /> 输出流的字符行。</summary>
      <returns>由关联的 <see cref="T:System.Diagnostics.Process" /> 写入到其重定向 <see cref="P:System.Diagnostics.Process.StandardOutput" /> 或 <see cref="P:System.Diagnostics.Process.StandardError" /> 流中的行。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.DataReceivedEventHandler">
      <summary>表示将处理 <see cref="T:System.Diagnostics.Process" /> 的 <see cref="E:System.Diagnostics.Process.OutputDataReceived" /> 事件或 <see cref="E:System.Diagnostics.Process.ErrorDataReceived" /> 事件的方法。</summary>
      <param name="sender">事件源。 </param>
      <param name="e">包含事件数据的 <see cref="T:System.Diagnostics.DataReceivedEventArgs" />。 </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Debug">
      <summary>提供一组帮助调试代码的方法和属性。无法继承此类。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean)">
      <summary>检查条件，如果该条件为 false，则输出调用堆栈。</summary>
      <param name="condition">
                若要禁止显示消息，则为 true；否则为 false。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String)">
      <summary>检查条件，如果该条件为 false，则显示消息。</summary>
      <param name="condition">
                若要禁止显示消息，则为 true；否则为 false。</param>
      <param name="message">要显示的消息。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String)">
      <summary>检查条件，如果条件为 false，则显示两条指定的消息。</summary>
      <param name="condition">
                若要禁止显示消息，则为 true；否则为 false。</param>
      <param name="message">要显示的消息。</param>
      <param name="detailMessage">要显示的详细消息。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.Debug.AutoFlush">
      <summary>获取或设置一个值，通过该值指示每次写入后是否应在 <see cref="P:System.Diagnostics.Debug.Listeners" /> 上调用 <see cref="M:System.Diagnostics.Debug.Flush" />。</summary>
      <returns>
            如果每次写入后都在 <see cref="P:System.Diagnostics.Debug.Listeners" /> 上调用 <see cref="M:System.Diagnostics.Debug.Flush" />，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Debug.Close">
      <summary>刷新输出缓冲区，然后对所有 <see cref="P:System.Diagnostics.Debug.Listeners" /> 调用 Close 方法。</summary>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Debug.Fail(System.String)">
      <summary>发出指定的错误信息。</summary>
      <param name="message">要发出的消息。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Debug.Fail(System.String,System.String)">
      <summary>发出错误信息及详细的错误信息。</summary>
      <param name="message">要发出的消息。</param>
      <param name="detailMessage">要发出的详细消息。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Debug.Flush">
      <summary>刷新输出缓冲区并使放入缓冲区的数据写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合。</summary>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Debug.Indent">
      <summary>将当前的 <see cref="P:System.Diagnostics.Debug.IndentLevel" /> 增加 1。</summary>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.Debug.IndentLevel">
      <summary>获取或设置缩进级别。</summary>
      <returns>缩进级别。默认值为 0。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.Debug.IndentSize">
      <summary>获取或设置缩进的空格数。</summary>
      <returns>缩进的空格数。默认值为四。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.Debug.Listeners">
      <summary>获取监视调试输出的侦听器集合。</summary>
      <returns>
        <see cref="T:System.Diagnostics.TraceListenerCollection" />，它表示监视该调试输出的 <see cref="T:System.Diagnostics.TraceListener" /> 类型的集合。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Debug.Print(System.String)">
      <summary>将后跟行结束符的消息写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="message">要写入的消息。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Debug.Print(System.String,System.Object[])">
      <summary>将后跟行结束符的格式化字符串写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="format">一个包含与零个或多个格式项混合的文本的复合格式字符串，它与 <paramref name="args" /> 数组中的对象相对应。</param>
      <param name="args">包含零个或多个要格式化的对象的对象数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。- 或 - 表示要设置格式的参数的数字小于零，或者大于等于要设置格式的指定对象的数目。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Debug.Unindent">
      <summary>将当前的 <see cref="P:System.Diagnostics.Debug.IndentLevel" /> 减少 1。</summary>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Debug.Write(System.Object)">
      <summary>将对象的 <see cref="M:System.Object.ToString" /> 方法的值写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器中。</summary>
      <param name="value">一个对象，其名称被发送到 <see cref="P:System.Diagnostics.Debug.Listeners" />。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Debug.Write(System.Object,System.String)">
      <summary>将类别名称和对象的 <see cref="M:System.Object.ToString" /> 方法值写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="value">一个对象，其名称被发送到 <see cref="P:System.Diagnostics.Debug.Listeners" />。</param>
      <param name="category">用于组织输出的类别名称。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Debug.Write(System.String)">
      <summary>将消息写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="message">要写入的消息。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Debug.Write(System.String,System.String)">
      <summary>将类别名称和消息写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="message">要写入的消息。</param>
      <param name="category">用于组织输出的类别名称。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.Object)">
      <summary>如果条件为 true，则将对象的 <see cref="M:System.Object.ToString" /> 方法值写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="condition">
                若要使消息被写入，则为 true；否则为 false。</param>
      <param name="value">一个对象，其名称被发送到 <see cref="P:System.Diagnostics.Debug.Listeners" />。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.Object,System.String)">
      <summary>如果条件为 true，则将类别名称和对象的 <see cref="M:System.Object.ToString" /> 方法值写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="condition">
                若要使消息被写入，则为 true；否则为 false。</param>
      <param name="value">一个对象，其名称被发送到 <see cref="P:System.Diagnostics.Debug.Listeners" />。</param>
      <param name="category">用于组织输出的类别名称。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)">
      <summary>如果条件为 true，则将消息写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="condition">
                若要使消息被写入，则为 true；否则为 false。</param>
      <param name="message">要写入的消息。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String,System.String)">
      <summary>如果条件为 true，则将类别名称和消息写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="condition">
                若要使消息被写入，则为 true；否则为 false。</param>
      <param name="message">要写入的消息。</param>
      <param name="category">用于组织输出的类别名称。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.Object)">
      <summary>将对象的 <see cref="M:System.Object.ToString" /> 方法的值写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器中。</summary>
      <param name="value">一个对象，其名称被发送到 <see cref="P:System.Diagnostics.Debug.Listeners" />。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.Object,System.String)">
      <summary>将类别名称和对象的 <see cref="M:System.Object.ToString" /> 方法值写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="value">一个对象，其名称被发送到 <see cref="P:System.Diagnostics.Debug.Listeners" />。</param>
      <param name="category">用于组织输出的类别名称。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.String)">
      <summary>将后跟行结束符的消息写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="message">要写入的消息。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.String,System.String)">
      <summary>将类别名称和消息写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="message">要写入的消息。</param>
      <param name="category">用于组织输出的类别名称。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.Object)">
      <summary>如果条件为 true，则将对象的 <see cref="M:System.Object.ToString" /> 方法值写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="condition">
                若要使消息被写入，则为 true；否则为 false。</param>
      <param name="value">一个对象，其名称被发送到 <see cref="P:System.Diagnostics.Debug.Listeners" />。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.Object,System.String)">
      <summary>如果条件为 true，则将类别名称和对象的 <see cref="M:System.Object.ToString" /> 方法值写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="condition">
                若要使消息被写入，则为 true；否则为 false。</param>
      <param name="value">一个对象，其名称被发送到 <see cref="P:System.Diagnostics.Debug.Listeners" />。</param>
      <param name="category">用于组织输出的类别名称。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)">
      <summary>如果条件为 true，则将消息写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="condition">
                若要使消息被写入，则为 true；否则为 false。</param>
      <param name="message">要写入的消息。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String,System.String)">
      <summary>如果条件为 true，则将类别名称和消息写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="condition">
                若要使消息被写入，则为 true；否则为 false。</param>
      <param name="message">要写入的消息。</param>
      <param name="category">用于组织输出的类别名称。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.Diagnostics.DefaultTraceListener">
      <summary>提供跟踪的默认输出方法和行为。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.DefaultTraceListener.#ctor">
      <summary>在将 <see cref="P:System.Diagnostics.TraceListener.Name" /> 属性值设置为其默认值的情况下，初始化 <see cref="T:System.Diagnostics.DefaultTraceListener" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Diagnostics.DefaultTraceListener.AssertUiEnabled">
      <summary>获取或设置一个值，该值指示应用程序是否以用户界面模式运行。</summary>
      <returns>
            如果启用了用户界面模式，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.DefaultTraceListener.Fail(System.String)">
      <summary>为总是失败的断言发出或显示消息和堆栈跟踪。</summary>
      <param name="message">要发出或显示的消息。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
        <IPermission class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.DefaultTraceListener.Fail(System.String,System.String)">
      <summary>为总是失败的断言发出或显示详细消息和堆栈跟踪。</summary>
      <param name="message">要发出或显示的消息。</param>
      <param name="detailMessage">要发出或显示的详细消息。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
        <IPermission class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.DefaultTraceListener.LogFileName">
      <summary>获取或设置要在其中写入跟踪或调试消息的日志文件的名称。</summary>
      <returns>要写入跟踪或调试消息的日志文件名。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.DefaultTraceListener.Write(System.String)">
      <summary>将输出写入 OutputDebugString 函数和 <see cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)" /> 方法。</summary>
      <param name="message">要写入 OutputDebugString 和 <see cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)" /> 的消息。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.DefaultTraceListener.WriteLine(System.String)">
      <summary>将输出写入 OutputDebugString 函数和 <see cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)" /> 方法，后接回车符和换行符 (\r\n)。</summary>
      <param name="message">要写入 OutputDebugString 和 <see cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)" /> 的消息。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.Diagnostics.DelimitedListTraceListener">
      <summary>将跟踪或调试输出定向到文本编写器（如流编写器）或流（如文件流）。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.DelimitedListTraceListener.#ctor(System.IO.Stream)">
      <summary>初始化写入指定输出流的 <see cref="T:System.Diagnostics.DelimitedListTraceListener" /> 类的新实例。</summary>
      <param name="stream">接收输出的 <see cref="T:System.IO.Stream" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.DelimitedListTraceListener.#ctor(System.IO.Stream,System.String)">
      <summary>初始化写入指定输出流并具有指定名称的 <see cref="T:System.Diagnostics.DelimitedListTraceListener" /> 类的新实例。</summary>
      <param name="stream">接收输出的 <see cref="T:System.IO.Stream" />。</param>
      <param name="name">跟踪侦听器的新实例的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.DelimitedListTraceListener.#ctor(System.IO.TextWriter)">
      <summary>初始化写入指定文本编写器的 <see cref="T:System.Diagnostics.DelimitedListTraceListener" /> 类的新实例。</summary>
      <param name="writer">接收输出的 <see cref="T:System.IO.TextWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.DelimitedListTraceListener.#ctor(System.IO.TextWriter,System.String)">
      <summary>初始化写入指定文本编写器并具有指定名称的 <see cref="T:System.Diagnostics.DelimitedListTraceListener" /> 类的新实例。</summary>
      <param name="writer">接收输出的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="name">跟踪侦听器的新实例的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.DelimitedListTraceListener.#ctor(System.String)">
      <summary>初始化写入指定文件的 <see cref="T:System.Diagnostics.DelimitedListTraceListener" /> 类的新实例。 </summary>
      <param name="fileName">要接收输出的文件的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.DelimitedListTraceListener.#ctor(System.String,System.String)">
      <summary>初始化写入指定文件并具有指定名称的 <see cref="T:System.Diagnostics.DelimitedListTraceListener" /> 类的新实例。</summary>
      <param name="fileName">要接收输出的文件的名称。</param>
      <param name="name">跟踪侦听器的新实例的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 为 null。</exception>
    </member>
    <member name="P:System.Diagnostics.DelimitedListTraceListener.Delimiter">
      <summary>获取或设置分隔列表的分隔符。</summary>
      <returns>分隔列表的分隔符。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Diagnostics.DelimitedListTraceListener.Delimiter" /> 被设置为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Diagnostics.DelimitedListTraceListener.Delimiter" /> 设置为空字符串 ("")。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.DelimitedListTraceListener.GetSupportedAttributes">
      <summary>返回分隔的跟踪侦听器支持的自定义配置文件属性。</summary>
      <returns>包含单个值“delimiter”的字符串数组。</returns>
    </member>
    <member name="M:System.Diagnostics.DelimitedListTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
      <summary>向输出文件或流中写入跟踪信息、数据对象和事件信息。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" /> 对象。</param>
      <param name="source">标识输出时使用的名称，通常为生成跟踪事件的应用程序的名称。</param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一，指定引发跟踪的事件类型。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="data">要向输出文件或流中写入的数据对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.DelimitedListTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
      <summary>向输出文件或流中写入跟踪信息、数据对象数组和事件信息。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" /> 对象。</param>
      <param name="source">标识输出时使用的名称，通常为生成跟踪事件的应用程序的名称。</param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一，指定引发跟踪的事件类型。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="data">要向输出文件或流中写入的数据对象数组。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.DelimitedListTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
      <summary>将跟踪信息、消息和事件信息写入输出文件或流中。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" /> 对象。</param>
      <param name="source">标识输出时使用的名称，通常为生成跟踪事件的应用程序的名称。</param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一，指定引发跟踪的事件类型。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="message">要向输出文件或流中写入的跟踪消息。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.DelimitedListTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
      <summary>将跟踪信息、格式化对象数组和事件信息写入输出文件或流中。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" /> 对象。</param>
      <param name="source">标识输出时使用的名称，通常为生成跟踪事件的应用程序的名称。</param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一，指定引发跟踪的事件类型。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="format">包含零个或多个格式项的格式字符串，这些项与 <paramref name="args" /> 数组中的对象相对应。</param>
      <param name="args">包含零个或多个要格式化的对象的数组。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Diagnostics.DiagnosticsConfigurationHandler">
      <summary>处理配置文件的诊断节。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.DiagnosticsConfigurationHandler.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.DiagnosticsConfigurationHandler" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.DiagnosticsConfigurationHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
      <summary>分析配置文件的 &lt;system.diagnostics&gt; 元素 节的配置设置。</summary>
      <returns>新的配置对象，格式为 <see cref="T:System.Collections.Hashtable" />。</returns>
      <param name="parent">从父路径继承的对象</param>
      <param name="configContext">保留。用于 ASP.NET 中，以传递正在计算的配置的虚拟路径。</param>
      <param name="section">位于要处理的节的根 XML 节点。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">找不到开关。- 或 -找不到断言。- 或 -找不到跟踪。- 或 -找不到性能计数器。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.Diagnostics.EntryWrittenEventArgs">
      <summary>为 <see cref="E:System.Diagnostics.EventLog.EntryWritten" /> 事件提供数据。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EntryWrittenEventArgs.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.EntryWrittenEventArgs" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.EntryWrittenEventArgs.#ctor(System.Diagnostics.EventLogEntry)">
      <summary>用指定的事件日志项初始化 <see cref="T:System.Diagnostics.EntryWrittenEventArgs" /> 类的新实例。</summary>
      <param name="entry">一个 <see cref="T:System.Diagnostics.EventLogEntry" />，它表示写入的项。 </param>
    </member>
    <member name="P:System.Diagnostics.EntryWrittenEventArgs.Entry">
      <summary>获取写入到日志中的事件日志项。</summary>
      <returns>一个 <see cref="T:System.Diagnostics.EventLogEntry" />，它表示写入到事件日志中的项。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.EntryWrittenEventHandler">
      <summary>表示将要处理 <see cref="T:System.Diagnostics.EventLog" /> 的 <see cref="E:System.Diagnostics.EventLog.EntryWritten" /> 事件的方法。</summary>
      <param name="sender">事件源。 </param>
      <param name="e">包含事件数据的 <see cref="T:System.Diagnostics.EntryWrittenEventArgs" />。 </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.EventInstance">
      <summary>表示事件日志项的非特定语言信息。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventInstance.#ctor(System.Int64,System.Int32)">
      <summary>使用事件项的本地化消息和类别文本的指定资源标识符初始化 <see cref="T:System.Diagnostics.EventInstance" /> 类的一个新实例。</summary>
      <param name="instanceId">资源标识符，与事件源的消息资源文件中定义的字符串对应。</param>
      <param name="categoryId">资源标识符，与事件源的类别资源文件中定义的字符串对应。如果没有为事件指定类别，则为零。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="instanceId" /> 参数是负值或大于 <see cref="F:System.UInt32.MaxValue" /> 的值。- 或 - <paramref name="categoryId" /> 参数是负值或大于 <see cref="F:System.UInt16.MaxValue" /> 的值。 </exception>
    </member>
    <member name="M:System.Diagnostics.EventInstance.#ctor(System.Int64,System.Int32,System.Diagnostics.EventLogEntryType)">
      <summary>使用事件项的本地化消息和类别文本的指定资源标识符以及指定的事件日志项类型初始化 <see cref="T:System.Diagnostics.EventInstance" /> 类的一个新实例。</summary>
      <param name="instanceId">资源标识符，与事件源的消息资源文件中定义的字符串对应。 </param>
      <param name="categoryId">资源标识符，与事件源的类别资源文件中定义的字符串对应。如果没有为事件指定类别，则为零。 </param>
      <param name="entryType">指示事件类型的 <see cref="T:System.Diagnostics.EventLogEntryType" /> 值。 </param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="entryType" /> 不是有效的 <see cref="T:System.Diagnostics.EventLogEntryType" /> 值。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="instanceId" /> 是负值或大于 <see cref="F:System.UInt32.MaxValue" /> 的值。- 或 - <paramref name="categoryId" /> 是负值或大于 <see cref="F:System.UInt16.MaxValue" /> 的值。 </exception>
    </member>
    <member name="P:System.Diagnostics.EventInstance.CategoryId">
      <summary>获取或设置指定事件项的应用程序定义类别的资源标识符。</summary>
      <returns>数字型类别值或资源标识符，与事件源的类别资源文件中定义的字符串对应。默认值为零，这意味着将不会为该事件项显示类别。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性设置为负值或大于 <see cref="F:System.UInt16.MaxValue" /> 的值。 </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventInstance.EntryType">
      <summary>获取或设置事件日志项的事件类型。</summary>
      <returns>指示事件项类型的 <see cref="T:System.Diagnostics.EventLogEntryType" /> 值。默认值为 <see cref="F:System.Diagnostics.EventLogEntryType.Information" />。</returns>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">该属性未设置为有效的 <see cref="T:System.Diagnostics.EventLogEntryType" /> 值。 </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventInstance.InstanceId">
      <summary>获取或设置指定事件项的消息文本的资源标识符。</summary>
      <returns>资源标识符，与事件源的消息资源文件中定义的字符串对应。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性设置为负值或大于 <see cref="F:System.UInt32.MaxValue" /> 的值。 </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.EventLog">
      <summary>提供与 Windows 事件日志的交互。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventLog.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.EventLog" /> 类的新实例。不将该实例与任何日志关联。</summary>
    </member>
    <member name="M:System.Diagnostics.EventLog.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.EventLog" /> 类的新实例。将该实例与本地计算机上的日志关联。</summary>
      <param name="logName">本地计算机上日志的名称。</param>
      <exception cref="T:System.ArgumentNullException">日志名称为 null。</exception>
      <exception cref="T:System.ArgumentException">日志名称无效。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLog.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.EventLog" /> 类的新实例。将该实例与指定计算机的日志关联。</summary>
      <param name="logName">指定的计算机上日志的名称</param>
      <param name="machineName">日志所在的计算机。</param>
      <exception cref="T:System.ArgumentNullException">日志名称为 null。</exception>
      <exception cref="T:System.ArgumentException">日志名称无效。- 或 -计算机名称无效。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLog.#ctor(System.String,System.String,System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.EventLog" /> 类的新实例。将实例与指定的计算机上的日志关联，并为 <see cref="T:System.Diagnostics.EventLog" /> 实例创建或分配指定的源。</summary>
      <param name="logName">指定的计算机上日志的名称</param>
      <param name="machineName">日志所在的计算机。</param>
      <param name="source">事件日志项的源。</param>
      <exception cref="T:System.ArgumentNullException">日志名称为 null。</exception>
      <exception cref="T:System.ArgumentException">日志名称无效。- 或 -计算机名称无效。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLog.BeginInit">
      <summary>开始初始化用于窗体或由其他组件使用的 <see cref="T:System.Diagnostics.EventLog" />。此初始化在运行时发生。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Diagnostics.EventLog" /> 已初始化完毕。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.EventLog.Clear">
      <summary>从事件日志中移除所有项。</summary>
      <exception cref="T:System.ComponentModel.Win32Exception">未成功清除事件日志。- 或 -无法打开日志。一个 Windows 错误代码不可用。</exception>
      <exception cref="T:System.ArgumentException">没有为 <see cref="P:System.Diagnostics.EventLog.Log" /> 属性指定值。确保日志名称不是一个空字符串。</exception>
      <exception cref="T:System.InvalidOperationException">该日志不存在。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.EventLog.Close">
      <summary>关闭事件日志并释放读写句柄。</summary>
      <exception cref="T:System.ComponentModel.Win32Exception">事件日志的读句柄或写句柄未成功释放。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.EventLog.CreateEventSource(System.Diagnostics.EventSourceCreationData)">
      <summary>建立一个应用程序作为写入本地化事件消息的有效事件源，建立时使用为该事件源以及对应的事件日志指定的配置属性。</summary>
      <param name="sourceData">事件源及其目标事件日志的配置属性。</param>
      <exception cref="T:System.ArgumentException">在 <paramref name="sourceData" /> 中指定的计算机名称无效。- 或 -在 <paramref name="sourceData" /> 中指定的源名称为 null。- 或 -在 <paramref name="sourceData" /> 中指定的日志名称无效。事件日志名称必须由可打印字符组成，且不得包含字符“*”、“?”或“\”。- 或 -在 <paramref name="sourceData" /> 中指定的日志名称对用户日志创建无效。事件日志名称 AppEvent、SysEvent 和 SecEvent 是保留为系统使用的。- 或 -该日志名称与一个现有事件源名称相匹配。- 或 -在 <paramref name="sourceData" /> 中指定的源名称导致注册表项路径的长度超过 254 个字符。- 或 -在 <paramref name="sourceData" /> 中指定的日志名称的前 8 个字符不唯一。- 或 -在 <paramref name="sourceData" /> 中指定的源名称已经注册过。- 或 -在 <paramref name="sourceData" /> 中指定的源名称与一个现有事件日志名称相匹配。</exception>
      <exception cref="T:System.InvalidOperationException">事件日志的注册表项未能打开。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceData" /> 为null。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.EventLog.CreateEventSource(System.String,System.String)">
      <summary>建立一个应用程序，使用指定的 <see cref="P:System.Diagnostics.EventLog.Source" /> 作为向本地计算机上的日志中写入日志项的有效事件源。此方法还可在本地计算机上创建一个新的自定义日志。</summary>
      <param name="source">应用程序在本地计算机上注册时所采用的源名称。</param>
      <param name="logName">源的项写入的日志名。可能的值包括：应用程序、系统或自定义事件日志。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 为空字符串 ("") 或 null。- 或 -<paramref name="logName" /> 不是有效的事件日志名称。事件日志名称必须由可打印字符组成，且不得包含字符“*”、“?”或“\”。- 或 -在 <paramref name="sourceData" /> 中指定的日志名称对用户日志创建无效。事件日志名称 AppEvent、SysEvent 和 SecEvent 是保留为系统使用的。- 或 -该日志名称与一个现有事件源名称相匹配。- 或 -此源名称导致注册表项路径的长度超过 254 个字符。- 或 -<paramref name="logName" /> 的前 8 个字符与现有事件日志名称的前 8 个字符相匹配。- 或 -无法注册该源，因为它已存在于本地计算机上。- 或 -该源名称与一个现有事件日志名称相匹配。</exception>
      <exception cref="T:System.InvalidOperationException">事件日志的注册表项未能在本地计算机上打开。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.EventLog.CreateEventSource(System.String,System.String,System.String)">
      <summary>建立一个应用程序，使用指定的 <see cref="P:System.Diagnostics.EventLog.Source" /> 作为向 <paramref name="machineName" /> 所指定的计算机上的日志中写入日志项的有效事件源。此方法还可用于在指定计算机上创建新的自定义日志。</summary>
      <param name="source">应用程序在指定计算机上用来注册的源。</param>
      <param name="logName">源的项写入的日志名。可能的值包括：应用程序、系统或自定义事件日志。如果不指定值，则 <paramref name="logName" /> 默认为应用程序。</param>
      <param name="machineName">用来注册此事件源的计算机名称，对于本地计算机则为“.”。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="machineName" /> 不是有效的计算机名称。- 或 -<paramref name="source" /> 为空字符串 ("") 或 null。- 或 -<paramref name="logName" /> 不是有效的事件日志名称。事件日志名称必须由可打印字符组成，且不得包含字符“*”、“?”或“\”。- 或 -在 <paramref name="sourceData" /> 中指定的日志名称对用户日志创建无效。事件日志名称 AppEvent、SysEvent 和 SecEvent 是保留为系统使用的。- 或 -该日志名称与一个现有事件源名称相匹配。- 或 -此源名称导致注册表项路径的长度超过 254 个字符。- 或 -<paramref name="logName" /> 的前 8 个字符与指定计算机上现有事件日志名称的前 8 个字符相匹配。- 或 -源无法注册，因为它已存在于指定的计算机上。- 或 -该源名称与一个现有事件源名称相匹配。</exception>
      <exception cref="T:System.InvalidOperationException">事件日志的注册表项未能在指定的计算机上打开。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.EventLog.Delete(System.String)">
      <summary>从本地计算机上移除事件日志。</summary>
      <param name="logName">要删除的日志的名称。可能的值包括：应用程序、安全性、系统和计算机上的任何自定义事件日志。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="logName" /> 为空字符串 ("") 或 null。</exception>
      <exception cref="T:System.InvalidOperationException">事件日志的注册表项未能在本地计算机上打开。- 或 -本地计算机上不存在该日志。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">未成功清除事件日志。- 或 -无法打开日志。一个 Windows 错误代码不可用。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.EventLog.Delete(System.String,System.String)">
      <summary>从指定的计算机上移除事件日志。</summary>
      <param name="logName">要删除的日志的名称。可能的值包括：应用程序、安全性、系统和指定计算机上的任何自定义事件日志。</param>
      <param name="machineName">要从中删除日志的计算机名称，对于本地计算机则为“.”。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="logName" /> 为空字符串 ("") 或 null。- 或 -<paramref name="machineName" /> 不是有效的计算机名称。</exception>
      <exception cref="T:System.InvalidOperationException">事件日志的注册表项未能在指定的计算机上打开。- 或 -指定的计算机上不存在该日志。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">未成功清除事件日志。- 或 -无法打开日志。一个 Windows 错误代码不可用。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)">
      <summary>从本地计算机的事件日志中移除事件源注册。</summary>
      <param name="source">应用程序在事件日志系统中用来注册的名称。</param>
      <exception cref="T:System.ArgumentException">本地计算机的注册表中不存在 <paramref name="source" /> 参数。- 或 -您对事件日志的注册表项没有写访问权。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.EventLog.DeleteEventSource(System.String,System.String)">
      <summary>从指定的计算机上移除应用程序的事件源注册。</summary>
      <param name="source">应用程序在事件日志系统中用来注册的名称。</param>
      <param name="machineName">要从中移除注册的计算机名称，对于本地计算机则为“.”。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="machineName" /> 参数无效。 - 或 -指定计算机的注册表中不存在 <paramref name="source" /> 参数。- 或 -您对事件日志的注册表项没有写访问权。</exception>
      <exception cref="T:System.InvalidOperationException">
                无法删除 <paramref name="source" />，原因是在注册表中，<paramref name="source" /> 的父注册表项不包含与其同名的子项。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.EventLog.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Diagnostics.EventLog" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">
                为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。</param>
    </member>
    <member name="P:System.Diagnostics.EventLog.EnableRaisingEvents">
      <summary>获取或设置一个值，用以指示 <see cref="T:System.Diagnostics.EventLog" /> 是否接收 <see cref="E:System.Diagnostics.EventLog.EntryWritten" /> 事件通知。</summary>
      <returns>
            如果 <see cref="T:System.Diagnostics.EventLog" /> 在有项写入日志时接收通知，则为 true；否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">事件日志位于远程计算机上。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.EventLog.EndInit">
      <summary>结束用于窗体或由其他组件使用的 <see cref="T:System.Diagnostics.EventLog" /> 的初始化。此初始化在运行时发生。</summary>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.EventLog.Entries">
      <summary>获取事件日志的内容。</summary>
      <returns>
        <see cref="T:System.Diagnostics.EventLogEntryCollection" />，保留事件日志中的项。每个项均与 <see cref="T:System.Diagnostics.EventLogEntry" /> 类的一个实例关联。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="E:System.Diagnostics.EventLog.EntryWritten">
      <summary>向本地计算机上的事件日志写入项时发生。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventLog.Exists(System.String)">
      <summary>确定该日志是否存在于本地计算机上。</summary>
      <returns>
            如果该日志存在于本地计算机上，则为 true；否则为 false。</returns>
      <param name="logName">要搜索的日志名称。可能的值包括：应用程序、安全、系统、其他应用程序特定的日志（如与 Active Directory 关联的日志）或计算机上的任何自定义日志。</param>
      <exception cref="T:System.ArgumentException">logName 为 null 或该值为空。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.EventLog.Exists(System.String,System.String)">
      <summary>确定该日志是否存在于指定的计算机上。</summary>
      <returns>
            如果该日志存在于指定的计算机上，则为 true；否则为 false。</returns>
      <param name="logName">要搜索的日志。可能的值包括：应用程序、安全、系统、其他应用程序特定的日志（如与 Active Directory 关联的日志）或计算机上的任何自定义日志。</param>
      <param name="machineName">要在其上搜索日志的计算机的名称，对于本地计算机则为“.”。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="machineName" /> 参数的格式无效。请确保对在其上执行搜索的计算机使用了正确的语法。- 或 -<paramref name="logName" /> 为 null 或该值为空。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.EventLog.GetEventLogs">
      <summary>在本地计算机上搜索所有的事件日志并创建一个包含该列表的 <see cref="T:System.Diagnostics.EventLog" /> 对象数组。</summary>
      <returns>
        <see cref="T:System.Diagnostics.EventLog" /> 类型的数组，表示本地计算机上的日志。</returns>
      <exception cref="T:System.SystemException">您对注册表没有读访问权。- 或 -计算机上没有事件日志服务。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.EventLog.GetEventLogs(System.String)">
      <summary>在给定计算机上搜索所有事件日志并创建一个包含该列表的 <see cref="T:System.Diagnostics.EventLog" /> 对象数组。</summary>
      <returns>
        <see cref="T:System.Diagnostics.EventLog" /> 类型的数组，表示给定计算机上的日志。</returns>
      <param name="machineName">在其上搜索事件日志的计算机。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="machineName" /> 参数是无效的计算机名称。</exception>
      <exception cref="T:System.InvalidOperationException">您对注册表没有读访问权。- 或 -计算机上没有事件日志服务。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.EventLog.Log">
      <summary>获取或设置读取或写入的日志名称。</summary>
      <returns>日志的名称。这可以是 Application、System 和 Security，或一个自定义的日志名称。默认值为空字符串 ("")。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventLog.LogDisplayName">
      <summary>获取事件日志的友好名称。</summary>
      <returns>表示系统的事件查看器中事件日志的名称。</returns>
      <exception cref="T:System.InvalidOperationException">此计算机的注册表中不存在指定的 <see cref="P:System.Diagnostics.EventLog.Log" />。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.EventLog.LogNameFromSourceName(System.String,System.String)">
      <summary>获取指定的源注册到的日志名称。</summary>
      <returns>与注册表中的指定源关联的日志名称。</returns>
      <param name="source">事件源的名称。</param>
      <param name="machineName">要在其上进行查找的计算机的名称，对于本地计算机则为“.”。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.EventLog.MachineName">
      <summary>获取或设置在其上读取或写入事件的计算机名称。</summary>
      <returns>事件日志驻留的服务器名称。默认为本地计算机 (".")。</returns>
      <exception cref="T:System.ArgumentException">计算机名称无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.EventLog.MaximumKilobytes">
      <summary>获取或设置最大事件日志大小（以 KB 为单位）。</summary>
      <returns>以 KB 为单位的最大事件日志大小。默认值为 512，表示最大文件大小为 512 KB。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">指定值小于 64，或大于 4194240，或不是 64 的偶数倍。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.EventLog.Log" /> 值不是有效的日志名。- 或 -事件日志的注册表项无法在目标计算机上打开。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.EventLog.MinimumRetentionDays">
      <summary>获取要在事件日志中保留项的天数。</summary>
      <returns>事件日志中的项被保留的天数。默认值为 7。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.EventLog.ModifyOverflowPolicy(System.Diagnostics.OverflowAction,System.Int32)">
      <summary>更改已配置的行为，以便在事件日志达到其最大文件大小时写入新项。</summary>
      <param name="action">向事件日志写入新项的溢出行为。</param>
      <param name="retentionDays">每个事件日志项要保留的最小天数。只有在 <paramref name="action" /> 设置为 <see cref="F:System.Diagnostics.OverflowAction.OverwriteOlder" /> 时，才使用此参数。</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="action" /> 不是有效的 <see cref="P:System.Diagnostics.EventLog.OverflowAction" /> 值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="retentionDays" /> 小于 1 或大于 365。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.EventLog.Log" /> 值不是有效的日志名。- 或 -事件日志的注册表项无法在目标计算机上打开。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.EventLog.OverflowAction">
      <summary>获取在事件日志达到其最大日志文件大小时存储新项的已配置行为。</summary>
      <returns>
        <see cref="T:System.Diagnostics.OverflowAction" /> 值，指定在事件日志达到其最大日志大小时存储新项的已配置行为。默认为 <see cref="F:System.Diagnostics.OverflowAction.OverwriteOlder" />。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.EventLog.RegisterDisplayName(System.String,System.Int64)">
      <summary>指定该事件日志的本地化名称，它显示在服务器的事件查看器中。</summary>
      <param name="resourceFile">本地化资源文件的完全指定的路径。</param>
      <param name="resourceId">资源标识符，它在资源文件内指明一个本地化字符串。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.EventLog.Log" /> 值不是有效的日志名。- 或 -事件日志的注册表项无法在目标计算机上打开。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.EventLog.Source">
      <summary>获取或设置在写入事件日志时要注册和使用的源名称。</summary>
      <returns>在事件日志中注册为项源的名称。默认值为空字符串 ("")。</returns>
      <exception cref="T:System.ArgumentException">此源名称导致注册表项路径的长度超过 254 个字符。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.EventLog.SourceExists(System.String)">
      <summary>确定事件源是否已在本地计算机上注册。</summary>
      <returns>
            如果事件源已在本地计算机上注册，则为 true；否则为 false。</returns>
      <param name="source">事件源的名称。</param>
      <exception cref="T:System.Security.SecurityException">
                未找到 <paramref name="source" />，无法搜索部分或全部事件日志。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.EventLog.SourceExists(System.String,System.String)">
      <summary>确定事件源是否已在指定的计算机上注册。</summary>
      <returns>
            如果该事件源已在给定计算机上注册，则为 true；否则为 false。</returns>
      <param name="source">事件源的名称。</param>
      <param name="machineName">在其上查看的计算机的名称，对于本地计算机则为“.”。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="machineName" /> 是无效的计算机名称。</exception>
      <exception cref="T:System.Security.SecurityException">
                未找到 <paramref name="source" />，无法搜索部分或全部事件日志。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.EventLog.SynchronizingObject">
      <summary>获取或设置用于封送事件处理程序调用的对象，该调用在有 <see cref="T:System.Diagnostics.EventLog" /> 项写入事件时发出。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ISynchronizeInvoke" />，用于封送由事件日志上的 <see cref="E:System.Diagnostics.EventLog.EntryWritten" /> 事件引发的事件处理程序调用。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.EventLog.WriteEntry(System.String)">
      <summary>将信息类型项与给定的消息文本一起写入事件日志。</summary>
      <param name="message">要写入事件日志的字符串。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Diagnostics.EventLog" /> 的 <see cref="P:System.Diagnostics.EventLog.Source" /> 属性尚未设置。- 或 -该方法试图注册新的事件源，但 <see cref="P:System.Diagnostics.EventLog.MachineName" /> 中的计算机名称无效。- 或 -已为其他事件日志注册了该源。- 或 -该消息字符串的长度超过了 32766 个字节。- 或 -此源名称导致注册表项路径的长度超过 254 个字符。</exception>
      <exception cref="T:System.InvalidOperationException">事件日志的注册表项未能打开。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">将事件项写入事件日志时，操作系统报告了一个错误。一个 Windows 错误代码不可用。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType)">
      <summary>将错误、警告、信息、成功审核或失败审核项与给定的消息文本一起写入事件日志。</summary>
      <param name="message">要写入事件日志的字符串。</param>
      <param name="type">
        <see cref="T:System.Diagnostics.EventLogEntryType" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Diagnostics.EventLog" /> 的 <see cref="P:System.Diagnostics.EventLog.Source" /> 属性尚未设置。- 或 -该方法试图注册新的事件源，但 <see cref="P:System.Diagnostics.EventLog.MachineName" /> 中的计算机名称无效。- 或 -已为其他事件日志注册了该源。- 或 -该消息字符串的长度超过了 32766 个字节。- 或 -此源名称导致注册表项路径的长度超过 254 个字符。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="type" /> 不是有效的 <see cref="T:System.Diagnostics.EventLogEntryType" />。</exception>
      <exception cref="T:System.InvalidOperationException">事件日志的注册表项未能打开。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">将事件项写入事件日志时，操作系统报告了一个错误。一个 Windows 错误代码不可用。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32)">
      <summary>将一个包含给定消息文本和应用程序定义的事件标识符的项写入事件日志。</summary>
      <param name="message">要写入事件日志的字符串。</param>
      <param name="type">
        <see cref="T:System.Diagnostics.EventLogEntryType" /> 值之一。</param>
      <param name="eventID">事件的应用程序特定标识符。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Diagnostics.EventLog" /> 的 <see cref="P:System.Diagnostics.EventLog.Source" /> 属性尚未设置。- 或 -该方法试图注册新的事件源，但 <see cref="P:System.Diagnostics.EventLog.MachineName" /> 中的计算机名称无效。- 或 -已为其他事件日志注册了该源。- 或 -<paramref name="eventID" /> 小于零或大于 <see cref="F:System.UInt16.MaxValue" />。- 或 -该消息字符串的长度超过了 32766 个字节。- 或 -此源名称导致注册表项路径的长度超过 254 个字符。</exception>
      <exception cref="T:System.InvalidOperationException">事件日志的注册表项未能打开。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="type" /> 不是有效的 <see cref="T:System.Diagnostics.EventLogEntryType" />。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">将事件项写入事件日志时，操作系统报告了一个错误。一个 Windows 错误代码不可用。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16)">
      <summary>将一个包含给定消息文本、应用程序定义的事件标识符和应用程序定义的类别的项写入事件日志。</summary>
      <param name="message">要写入事件日志的字符串。</param>
      <param name="type">
        <see cref="T:System.Diagnostics.EventLogEntryType" /> 值之一。</param>
      <param name="eventID">事件的应用程序特定标识符。</param>
      <param name="category">与消息关联的应用程序特定子类别。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Diagnostics.EventLog" /> 的 <see cref="P:System.Diagnostics.EventLog.Source" /> 属性尚未设置。- 或 -该方法试图注册新的事件源，但 <see cref="P:System.Diagnostics.EventLog.MachineName" /> 中的计算机名称无效。- 或 -已为其他事件日志注册了该源。- 或 -<paramref name="eventID" /> 小于零或大于 <see cref="F:System.UInt16.MaxValue" />。- 或 -该消息字符串的长度超过了 32766 个字节。- 或 -此源名称导致注册表项路径的长度超过 254 个字符。</exception>
      <exception cref="T:System.InvalidOperationException">事件日志的注册表项未能打开。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="type" /> 不是有效的 <see cref="T:System.Diagnostics.EventLogEntryType" />。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">将事件项写入事件日志时，操作系统报告了一个错误。一个 Windows 错误代码不可用。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])">
      <summary>将一个包含给定消息文本、应用程序定义的事件标识符和应用程序定义的类别的项写入事件日志，并向消息追加二进制数据。</summary>
      <param name="message">要写入事件日志的字符串。</param>
      <param name="type">
        <see cref="T:System.Diagnostics.EventLogEntryType" /> 值之一。</param>
      <param name="eventID">事件的应用程序特定标识符。</param>
      <param name="category">与消息关联的应用程序特定子类别。</param>
      <param name="rawData">包含与此项关联的二进制数据的字节数组。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Diagnostics.EventLog" /> 的 <see cref="P:System.Diagnostics.EventLog.Source" /> 属性尚未设置。- 或 -该方法试图注册新的事件源，但 <see cref="P:System.Diagnostics.EventLog.MachineName" /> 中的计算机名称无效。- 或 -已为其他事件日志注册了该源。- 或 -<paramref name="eventID" /> 小于零或大于 <see cref="F:System.UInt16.MaxValue" />。- 或 -该消息字符串的长度超过了 32766 个字节。- 或 -此源名称导致注册表项路径的长度超过 254 个字符。</exception>
      <exception cref="T:System.InvalidOperationException">事件日志的注册表项未能打开。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="type" /> 不是有效的 <see cref="T:System.Diagnostics.EventLogEntryType" />。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">将事件项写入事件日志时，操作系统报告了一个错误。一个 Windows 错误代码不可用。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.String)">
      <summary>使用指定的注册事件源将信息类型项与给定的消息文本一起写入事件日志。</summary>
      <param name="source">应用程序在指定计算机上用来注册的源。</param>
      <param name="message">要写入事件日志的字符串。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 值是空字符串 ("")。- 或 -<paramref name="source" /> 值为 null。- 或 -该消息字符串的长度超过了 32766 个字节。- 或 -此源名称导致注册表项路径的长度超过 254 个字符。</exception>
      <exception cref="T:System.InvalidOperationException">事件日志的注册表项未能打开。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">将事件项写入事件日志时，操作系统报告了一个错误。一个 Windows 错误代码不可用。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType)">
      <summary>使用指定的注册事件源，将错误、警告、信息、成功审核或失败审核项与给定的消息文本一起写入事件日志。</summary>
      <param name="source">应用程序在指定计算机上用来注册的源。</param>
      <param name="message">要写入事件日志的字符串。</param>
      <param name="type">
        <see cref="T:System.Diagnostics.EventLogEntryType" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 值是空字符串 ("")。- 或 -<paramref name="source" /> 值为 null。- 或 -该消息字符串的长度超过了 32766 个字节。- 或 -此源名称导致注册表项路径的长度超过 254 个字符。</exception>
      <exception cref="T:System.InvalidOperationException">事件日志的注册表项未能打开。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="type" /> 不是有效的 <see cref="T:System.Diagnostics.EventLogEntryType" />。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">将事件项写入事件日志时，操作系统报告了一个错误。一个 Windows 错误代码不可用。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32)">
      <summary>通过指定的注册事件源，将一个包含给定消息文本和应用程序定义的事件标识符的项写入事件日志。</summary>
      <param name="source">应用程序在指定计算机上用来注册的源。</param>
      <param name="message">要写入事件日志的字符串。</param>
      <param name="type">
        <see cref="T:System.Diagnostics.EventLogEntryType" /> 值之一。</param>
      <param name="eventID">事件的应用程序特定标识符。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 值是空字符串 ("")。- 或 -<paramref name="source" /> 值为 null。- 或 -<paramref name="eventID" /> 小于零或大于 <see cref="F:System.UInt16.MaxValue" />。- 或 -该消息字符串的长度超过了 32766 个字节。- 或 -此源名称导致注册表项路径的长度超过 254 个字符。</exception>
      <exception cref="T:System.InvalidOperationException">事件日志的注册表项未能打开。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="type" /> 不是有效的 <see cref="T:System.Diagnostics.EventLogEntryType" />。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">将事件项写入事件日志时，操作系统报告了一个错误。一个 Windows 错误代码不可用。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16)">
      <summary>通过指定的注册事件源，将一个包含给定消息文本、应用程序定义的事件标识符和应用程序定义的类别的项写入事件日志。事件查看器可使用 <paramref name="category" /> 筛选日志中的事件。</summary>
      <param name="source">应用程序在指定计算机上用来注册的源。</param>
      <param name="message">要写入事件日志的字符串。</param>
      <param name="type">
        <see cref="T:System.Diagnostics.EventLogEntryType" /> 值之一。</param>
      <param name="eventID">事件的应用程序特定标识符。</param>
      <param name="category">与消息关联的应用程序特定子类别。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 值是空字符串 ("")。- 或 -<paramref name="source" /> 值为 null。- 或 -<paramref name="eventID" /> 小于零或大于 <see cref="F:System.UInt16.MaxValue" />。- 或 -该消息字符串的长度超过了 32766 个字节。- 或 -此源名称导致注册表项路径的长度超过 254 个字符。</exception>
      <exception cref="T:System.InvalidOperationException">事件日志的注册表项未能打开。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="type" /> 不是有效的 <see cref="T:System.Diagnostics.EventLogEntryType" />。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">将事件项写入事件日志时，操作系统报告了一个错误。一个 Windows 错误代码不可用。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])">
      <summary>通过指定的注册事件源，将一个包含给定消息文本、应用程序定义的事件标识符和应用程序定义的类别的项写入事件日志，并向消息追加二进制数据。</summary>
      <param name="source">应用程序在指定计算机上用来注册的源。</param>
      <param name="message">要写入事件日志的字符串。</param>
      <param name="type">
        <see cref="T:System.Diagnostics.EventLogEntryType" /> 值之一。</param>
      <param name="eventID">事件的应用程序特定标识符。</param>
      <param name="category">与消息关联的应用程序特定子类别。</param>
      <param name="rawData">包含与此项关联的二进制数据的字节数组。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 值是空字符串 ("")。- 或 -<paramref name="source" /> 值为 null。- 或 -<paramref name="eventID" /> 小于零或大于 <see cref="F:System.UInt16.MaxValue" />。- 或 -该消息字符串的长度超过了 32766 个字节。- 或 -此源名称导致注册表项路径的长度超过 254 个字符。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="type" /> 不是有效的 <see cref="T:System.Diagnostics.EventLogEntryType" />。</exception>
      <exception cref="T:System.InvalidOperationException">事件日志的注册表项未能打开。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">将事件项写入事件日志时，操作系统报告了一个错误。一个 Windows 错误代码不可用。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.EventLog.WriteEvent(System.Diagnostics.EventInstance,System.Byte[],System.Object[])">
      <summary>写入包含给定的事件数据、消息替换字符串和关联的二进制数据的事件日志项。</summary>
      <param name="instance">表示本地化事件日志项的 <see cref="T:System.Diagnostics.EventInstance" /> 实例。</param>
      <param name="data">包含与此项关联的二进制数据的字节数组。</param>
      <param name="values">要合并到事件日志项的消息文本中的字符串数组。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Diagnostics.EventLog" /> 的 <see cref="P:System.Diagnostics.EventLog.Source" /> 属性尚未设置。- 或 -该方法试图注册新的事件源，但 <see cref="P:System.Diagnostics.EventLog.MachineName" /> 中的计算机名称无效。- 或 -已为其他事件日志注册了该源。- 或 -<paramref name="instance.InstanceId" /> 小于零或大于 <see cref="F:System.UInt16.MaxValue" />。- 或 -<paramref name="values" /> 超过了 256 个元素。- 或 -<paramref name="values" /> 元素中有一个超过了 32766 个字节。- 或 -此源名称导致注册表项路径的长度超过 254 个字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">事件日志的注册表项未能打开。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">将事件项写入事件日志时，操作系统报告了一个错误。一个 Windows 错误代码不可用。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.EventLog.WriteEvent(System.Diagnostics.EventInstance,System.Object[])">
      <summary>向事件日志写入本地化项。</summary>
      <param name="instance">表示本地化事件日志项的 <see cref="T:System.Diagnostics.EventInstance" /> 实例。</param>
      <param name="values">要合并到事件日志项的消息文本中的字符串数组。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Diagnostics.EventLog" /> 的 <see cref="P:System.Diagnostics.EventLog.Source" /> 属性尚未设置。- 或 -该方法试图注册新的事件源，但 <see cref="P:System.Diagnostics.EventLog.MachineName" /> 中的计算机名称无效。- 或 -已为其他事件日志注册了该源。- 或 -<paramref name="instance.InstanceId" /> 小于零或大于 <see cref="F:System.UInt16.MaxValue" />。- 或 -<paramref name="values" /> 超过了 256 个元素。- 或 -<paramref name="values" /> 元素中有一个超过了 32766 个字节。- 或 -此源名称导致注册表项路径的长度超过 254 个字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">事件日志的注册表项未能打开。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">将事件项写入事件日志时，操作系统报告了一个错误。一个 Windows 错误代码不可用。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.EventLog.WriteEvent(System.String,System.Diagnostics.EventInstance,System.Byte[],System.Object[])">
      <summary>使用指定的已注册事件源写入包含给定的事件数据、消息替换字符串和关联的二进制数据的事件日志项。</summary>
      <param name="source">在指定的计算机上为应用程序注册的事件源的名称。</param>
      <param name="instance">表示本地化事件日志项的 <see cref="T:System.Diagnostics.EventInstance" /> 实例。</param>
      <param name="data">包含与此项关联的二进制数据的字节数组。</param>
      <param name="values">要合并到事件日志项的消息文本中的字符串数组。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 值是空字符串 ("")。- 或 -<paramref name="source" /> 值为 null。- 或 -<paramref name="instance.InstanceId" /> 小于零或大于 <see cref="F:System.UInt16.MaxValue" />。- 或 -<paramref name="values" /> 超过了 256 个元素。- 或 -<paramref name="values" /> 元素中有一个超过了 32766 个字节。- 或 -此源名称导致注册表项路径的长度超过 254 个字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">事件日志的注册表项未能打开。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">将事件项写入事件日志时，操作系统报告了一个错误。一个 Windows 错误代码不可用。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.EventLog.WriteEvent(System.String,System.Diagnostics.EventInstance,System.Object[])">
      <summary>使用指定的已注册事件源写入包含给定事件数据和消息替换字符串的事件日志项。</summary>
      <param name="source">在指定的计算机上为应用程序注册的事件源的名称。</param>
      <param name="instance">表示本地化事件日志项的 <see cref="T:System.Diagnostics.EventInstance" /> 实例。</param>
      <param name="values">要合并到事件日志项的消息文本中的字符串数组。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 值是空字符串 ("")。- 或 -<paramref name="source" /> 值为 null。- 或 -<paramref name="instance.InstanceId" /> 小于零或大于 <see cref="F:System.UInt16.MaxValue" />。- 或 -<paramref name="values" /> 超过了 256 个元素。- 或 -<paramref name="values" /> 元素中有一个超过了 32766 个字节。- 或 -此源名称导致注册表项路径的长度超过 254 个字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">事件日志的注册表项未能打开。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">将事件项写入事件日志时，操作系统报告了一个错误。一个 Windows 错误代码不可用。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="T:System.Diagnostics.EventLogEntry">
      <summary>在事件日志中封装单个记录。无法继承此类。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.Category">
      <summary>获取与该项的 <see cref="P:System.Diagnostics.EventLogEntry.CategoryNumber" /> 属性关联的文本。</summary>
      <returns>应用程序特定的类别文本。</returns>
      <exception cref="T:System.Exception">不能为与类别关联的插入字符串之一分配空间。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.CategoryNumber">
      <summary>获取事件日志项的类别号。</summary>
      <returns>该项的应用程序特定类别号。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.Data">
      <summary>获取与该项关联的二进制数据。</summary>
      <returns>包含与此项关联的二进制数据的字节数组。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.EntryType">
      <summary>获取该项的事件类型。</summary>
      <returns>
        <see cref="T:System.Diagnostics.EventLogEntryType" />，它指示与事件日志中的项关联的事件类型。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventLogEntry.Equals(System.Diagnostics.EventLogEntry)">
      <summary>对两个事件日志项进行比较。</summary>
      <returns>
            如果 <see cref="T:System.Diagnostics.EventLogEntry" /> 对象完全相同，则为 true；否则为 false。</returns>
      <param name="otherEntry">要比较的 <see cref="T:System.Diagnostics.EventLogEntry" />。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.EventID">
      <summary>获取当前事件项的应用程序特定事件标识符。</summary>
      <returns>事件消息的应用程序特定标识符。</returns>
      <filterpriority>3</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.Index">
      <summary>获取该项在事件日志中的索引。</summary>
      <returns>该项在事件日志中的索引。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.InstanceId">
      <summary>获取指定事件项的消息文本的资源标识符。</summary>
      <returns>资源标识符，与事件源的消息资源文件中的字符串定义对应。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.MachineName">
      <summary>获取在其上生成该项的计算机的名称。</summary>
      <returns>包含事件日志的计算机的名称。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.Message">
      <summary>获取与该事件项关联的本地化消息。</summary>
      <returns>消息的格式化、本地化文本。其中包含关联的替换字符串。</returns>
      <exception cref="T:System.Exception">不能为与消息关联的插入字符串之一分配空间。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.ReplacementStrings">
      <summary>获取与该项关联的替换字符串。</summary>
      <returns>类型为 <see cref="T:System.String" /> 的数组，它包含存储在事件项中的插入字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.Source">
      <summary>获取生成该事件的应用程序的名称。</summary>
      <returns>在事件日志中注册为该事件的源的名称。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventLogEntry.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用将目标对象序列化所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="info">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">此序列化的目标（请参见 <see cref="T:System.Runtime.Serialization.StreamingContext" />）。</param>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.TimeGenerated">
      <summary>获取生成该事件的本地时间。</summary>
      <returns>
        <see cref="T:System.DateTime" />，它表示生成此事件时的本地时间。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.TimeWritten">
      <summary>获取在日志中写入该事件的本地时间。</summary>
      <returns>一个 <see cref="T:System.DateTime" />，它表示在日志中写入该事件时的本地时间。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.UserName">
      <summary>获取负责该事件的用户的名称。</summary>
      <returns>唯一标识用户或组的安全标识符 (SID)。</returns>
      <exception cref="T:System.SystemException">不能为用户的 SID 获取帐户信息。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Diagnostics.EventLogEntryCollection">
      <summary>定义 <see cref="T:System.Diagnostics.EventLogEntry" /> 实例集合的大小和枚举数。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventLogEntryCollection.CopyTo(System.Diagnostics.EventLogEntry[],System.Int32)">
      <summary>从特定的数组索引开始，将 <see cref="T:System.Diagnostics.EventLogEntryCollection" /> 的元素复制到 <see cref="T:System.Diagnostics.EventLogEntry" /> 实例的数组。</summary>
      <param name="entries">
        <see cref="T:System.Diagnostics.EventLogEntry" /> 实例的一维数组，它是从集合复制来的元素的目标。该数组必须具有从零开始的索引。</param>
      <param name="index">复制开始时所在的数组中的从零开始的索引。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventLogEntryCollection.Count">
      <summary>获取事件日志中的项数（即 <see cref="T:System.Diagnostics.EventLogEntry" /> 集合中的元素个数）。</summary>
      <returns>当前在事件日志中的项数。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.EventLogEntryCollection.GetEnumerator">
      <summary>支持在 <see cref="T:System.Diagnostics.EventLogEntryCollection" /> 对象上进行简单迭代。</summary>
      <returns>可用于在集合上进行迭代的对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventLogEntryCollection.Item(System.Int32)">
      <summary>基于从 0（零）开始的索引，获取事件日志中的项。</summary>
      <returns>位于 <paramref name="index" /> 参数所指定的位置的事件日志项。</returns>
      <param name="index">与事件日志项关联的从零开始的索引。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.EventLogEntryCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>将该集合的元素复制到 <see cref="T:System.Array" />（从特定的 <see cref="T:System.Array" /> 索引开始）。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，这是从集合中复制的元素的目标。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="P:System.Diagnostics.EventLogEntryCollection.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Diagnostics.EventLogEntryCollection" /> 的访问（线程安全）。</summary>
      <returns>
            如果对该集合的访问不是同步的（线程安全），则为 false。</returns>
    </member>
    <member name="P:System.Diagnostics.EventLogEntryCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取一个对象，该对象可用于同步对 <see cref="T:System.Diagnostics.EventLogEntryCollection" /> 对象的访问。</summary>
      <returns>可用于同步集合访问的对象。</returns>
    </member>
    <member name="T:System.Diagnostics.EventLogEntryType">
      <summary>指定事件日志项的事件类型。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.EventLogEntryType.Error">
      <summary>错误事件。它指示用户应该知道的严重问题（通常是功能或数据的丢失）。</summary>
    </member>
    <member name="F:System.Diagnostics.EventLogEntryType.Warning">
      <summary>警告事件。它指示并不立即具有重要性的问题，但此问题可能表示将来会导致问题的条件。</summary>
    </member>
    <member name="F:System.Diagnostics.EventLogEntryType.Information">
      <summary>信息事件。它指示重要、成功的操作。</summary>
    </member>
    <member name="F:System.Diagnostics.EventLogEntryType.SuccessAudit">
      <summary>成功审核事件。它指示当审核访问尝试成功（例如成功登录）时发生的安全事件。</summary>
    </member>
    <member name="F:System.Diagnostics.EventLogEntryType.FailureAudit">
      <summary>失败审核事件。它指示当审核访问尝试失败（例如打开文件的尝试失败）时发生的安全事件。</summary>
    </member>
    <member name="T:System.Diagnostics.EventLogPermission">
      <summary>允许控制事件日志的代码访问权限。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventLogPermission.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.EventLogPermission" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.EventLogPermission.#ctor(System.Diagnostics.EventLogPermissionAccess,System.String)">
      <summary>用指定的访问级别和要使用的计算机的名称，初始化 <see cref="T:System.Diagnostics.EventLogPermission" /> 类的新实例。</summary>
      <param name="permissionAccess">
        <see cref="T:System.Diagnostics.EventLogPermissionAccess" /> 值之一。 </param>
      <param name="machineName">在其上读取或写入事件的计算机的名称。 </param>
    </member>
    <member name="M:System.Diagnostics.EventLogPermission.#ctor(System.Diagnostics.EventLogPermissionEntry[])">
      <summary>使用指定的权限访问级别项初始化 <see cref="T:System.Diagnostics.EventLogPermission" /> 类的新实例。</summary>
      <param name="permissionAccessEntries">
        <see cref="T:System.Diagnostics.EventLogPermissionEntry" /> 对象的数组。<see cref="P:System.Diagnostics.EventLogPermission.PermissionEntries" /> 属性被设置为该值。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="permissionAccessEntries" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLogPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>使用指定的权限状态初始化 <see cref="T:System.Diagnostics.EventLogPermission" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。 </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 参数不是有效的 <see cref="T:System.Security.Permissions.PermissionState" /> 值。 </exception>
    </member>
    <member name="P:System.Diagnostics.EventLogPermission.PermissionEntries">
      <summary>获取此权限请求的权限项集合。</summary>
      <returns>一个 <see cref="T:System.Diagnostics.EventLogPermissionEntryCollection" />，它包含此权限请求的权限项。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.EventLogPermissionAccess">
      <summary>定义 <see cref="T:System.Diagnostics.EventLog" /> 权限类使用的访问级别。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.EventLogPermissionAccess.None">
      <summary>
        <see cref="T:System.Diagnostics.EventLog" /> 没有权限。</summary>
    </member>
    <member name="F:System.Diagnostics.EventLogPermissionAccess.Write">
      <summary>
        <see cref="T:System.Diagnostics.EventLog" /> 可以写入到现有的日志，还可以创建事件源和日志。</summary>
    </member>
    <member name="F:System.Diagnostics.EventLogPermissionAccess.Administer">
      <summary>
        <see cref="T:System.Diagnostics.EventLog" /> 可以创建事件源、读取现有的日志、删除事件源或日志、对项作出响应、清除事件日志、侦听事件和访问所有事件日志的集合。</summary>
    </member>
    <member name="F:System.Diagnostics.EventLogPermissionAccess.Browse">
      <summary>
        <see cref="T:System.Diagnostics.EventLog" /> 可以读取现有的日志。Note 此成员现在已过时，请使用 <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /> 代替。</summary>
    </member>
    <member name="F:System.Diagnostics.EventLogPermissionAccess.Instrument">
      <summary>
        <see cref="T:System.Diagnostics.EventLog" /> 可以读取或写入到现有的日志，还可以创建事件源和日志。Note 此成员现在已过时，请使用 <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /> 代替。</summary>
    </member>
    <member name="F:System.Diagnostics.EventLogPermissionAccess.Audit">
      <summary>
        <see cref="T:System.Diagnostics.EventLog" /> 可以读取现有的日志、删除事件源或日志、对项作出响应、清除事件日志、侦听事件和访问所有事件日志的集合。Note 此成员现在已过时，请使用 <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /> 代替。</summary>
    </member>
    <member name="T:System.Diagnostics.EventLogPermissionAttribute">
      <summary>允许对事件日志进行声明性权限检查。 </summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>初始化 <see cref="T:System.Diagnostics.EventLogPermissionAttribute" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。 </param>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionAttribute.CreatePermission">
      <summary>基于 <see cref="P:System.Diagnostics.EventLogPermissionAttribute.MachineName" /> 属性 (Property) 和请求的访问级别（通过属性 (Attribute) 上的 <see cref="P:System.Diagnostics.EventLogPermissionAttribute.PermissionAccess" /> 属性 (Property) 设置）创建权限。</summary>
      <returns>一个 <see cref="T:System.Security.IPermission" />，它表示创建的权限。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.EventLogPermissionAttribute.MachineName">
      <summary>获取或设置在其上可以读取事件的计算机的名称。</summary>
      <returns>在其上可以读取事件的计算机的名称。默认值是“.”。</returns>
      <exception cref="T:System.ArgumentException">计算机名称无效。 </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventLogPermissionAttribute.PermissionAccess">
      <summary>获取或设置权限请求中使用的访问级别。</summary>
      <returns>
        <see cref="T:System.Diagnostics.EventLogPermissionAccess" /> 值的按位组合。默认值为 <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.EventLogPermissionEntry">
      <summary>定义为 <see cref="T:System.Diagnostics.EventLog" /> 设置的代码访问安全性权限的最小单位。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntry.#ctor(System.Diagnostics.EventLogPermissionAccess,System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.EventLogPermissionEntry" /> 类的新实例。</summary>
      <param name="permissionAccess">
        <see cref="T:System.Diagnostics.EventLogPermissionAccess" /> 值的按位组合。<see cref="P:System.Diagnostics.EventLogPermissionEntry.PermissionAccess" /> 属性被设置为该值。 </param>
      <param name="machineName">在其上读取或写入事件的计算机的名称。<see cref="P:System.Diagnostics.EventLogPermissionEntry.MachineName" /> 属性被设置为该值。 </param>
      <exception cref="T:System.ArgumentException">计算机名称无效。 </exception>
    </member>
    <member name="P:System.Diagnostics.EventLogPermissionEntry.MachineName">
      <summary>获取在其上读取或写入事件的计算机的名称。</summary>
      <returns>在其上读取或写入事件的计算机的名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventLogPermissionEntry.PermissionAccess">
      <summary>获取在权限请求中使用的权限访问级别。</summary>
      <returns>
        <see cref="T:System.Diagnostics.EventLogPermissionAccess" /> 值的按位组合。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.EventLogPermissionEntryCollection">
      <summary>包含 <see cref="T:System.Diagnostics.EventLogPermissionEntry" /> 对象的强类型集合。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.Add(System.Diagnostics.EventLogPermissionEntry)">
      <summary>向此集合添加指定的 <see cref="T:System.Diagnostics.EventLogPermissionEntry" />。</summary>
      <returns>所添加的 <see cref="T:System.Diagnostics.EventLogPermissionEntry" /> 的从零开始的索引。</returns>
      <param name="value">要添加的 <see cref="T:System.Diagnostics.EventLogPermissionEntry" />。 </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.AddRange(System.Diagnostics.EventLogPermissionEntry[])">
      <summary>向此集合中追加一组指定的权限项。</summary>
      <param name="value">
        <see cref="T:System.Diagnostics.EventLogPermissionEntry" /> 类型对象的数组，它包含要添加的权限项。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.AddRange(System.Diagnostics.EventLogPermissionEntryCollection)">
      <summary>向此集合中追加一组指定的权限项。</summary>
      <param name="value">一个 <see cref="T:System.Diagnostics.EventLogPermissionEntryCollection" />，它包含要添加的权限项。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.Contains(System.Diagnostics.EventLogPermissionEntry)">
      <summary>确定该集合是否包含指定的 <see cref="T:System.Diagnostics.EventLogPermissionEntry" />。</summary>
      <returns>
如果指定的 <see cref="T:System.Diagnostics.EventLogPermissionEntry" /> 属于该集合，则为 true；否则为 false。</returns>
      <param name="value">要查找的 <see cref="T:System.Diagnostics.EventLogPermissionEntry" />。 </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.CopyTo(System.Diagnostics.EventLogPermissionEntry[],System.Int32)">
      <summary>将权限项从此集合复制到数组中（从数组中特定的索引开始复制）。</summary>
      <param name="array">接收该集合权限项的 <see cref="T:System.Diagnostics.EventLogPermissionEntry" /> 类型的数组。 </param>
      <param name="index">从零开始的索引，将从此索引位置开始复制权限项。 </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.IndexOf(System.Diagnostics.EventLogPermissionEntry)">
      <summary>确定指定权限项在此集合中的索引。</summary>
      <returns>指定权限项的从零开始的索引；或者，如果集合中未找到该权限项，则为 -1。</returns>
      <param name="value">要搜索的权限项。 </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.Insert(System.Int32,System.Diagnostics.EventLogPermissionEntry)">
      <summary>将权限项插入此集合中指定的索引位置。</summary>
      <param name="index">集合的从零开始的索引，将在此索引位置插入权限项。 </param>
      <param name="value">将插入此集合中的权限项。 </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventLogPermissionEntryCollection.Item(System.Int32)">
      <summary>获取或设置指定索引位置的对象。</summary>
      <returns>位于指定索引位置的 <see cref="T:System.Diagnostics.EventLogPermissionEntry" />。</returns>
      <param name="index">集合中从零开始的索引。 </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.OnClear">
      <summary>在清除此集合内容之后执行其他自定义进程。</summary>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.OnInsert(System.Int32,System.Object)">
      <summary>在将一个新的权限项插入此集合之前执行其他自定义进程。</summary>
      <param name="index">从零开始的索引，在该处插入 <paramref name="value" />。 </param>
      <param name="value">在 <paramref name="index" /> 处的权限项的新值。 </param>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.OnRemove(System.Int32,System.Object)">
      <summary>当从此集合中移除一个新的权限项时执行其他自定义进程。</summary>
      <param name="index">从零开始的索引，可在该位置找到 <paramref name="value" />。 </param>
      <param name="value">要从 <paramref name="index" /> 处移除的权限项。 </param>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>当在此集合中设置值之前执行其他自定义进程。</summary>
      <param name="index">从零开始的索引，可在该位置找到 <paramref name="oldValue" />。 </param>
      <param name="oldValue">要用 <paramref name="newValue" /> 替换的值。 </param>
      <param name="newValue">在 <paramref name="index" /> 处的权限项的新值。 </param>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.Remove(System.Diagnostics.EventLogPermissionEntry)">
      <summary>从此集合中移除指定的权限项。</summary>
      <param name="value">要移除的权限项。 </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.EventLogTraceListener">
      <summary>提供一个简单侦听器，它将跟踪或调试输出指向 <see cref="T:System.Diagnostics.EventLog" />。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventLogTraceListener.#ctor">
      <summary>在没有跟踪侦听器的情况下，初始化 <see cref="T:System.Diagnostics.EventLogTraceListener" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.EventLogTraceListener.#ctor(System.Diagnostics.EventLog)">
      <summary>使用指定的事件日志初始化 <see cref="T:System.Diagnostics.EventLogTraceListener" /> 类的新实例。</summary>
      <param name="eventLog">一个 <see cref="T:System.Diagnostics.EventLog" />，它指定要写入的事件日志。</param>
    </member>
    <member name="M:System.Diagnostics.EventLogTraceListener.#ctor(System.String)">
      <summary>使用指定的源初始化 <see cref="T:System.Diagnostics.EventLogTraceListener" /> 类的新实例。</summary>
      <param name="source">现有的事件日志源的名称。</param>
    </member>
    <member name="M:System.Diagnostics.EventLogTraceListener.Close">
      <summary>关闭事件日志，以使其不再接收跟踪或调试输出。</summary>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.EventLogTraceListener.EventLog">
      <summary>获取或设置要写入的事件日志。</summary>
      <returns>一个 <see cref="T:System.Diagnostics.EventLog" />，它指定要写入的事件日志。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventLogTraceListener.Name">
      <summary>获取或设置此 <see cref="T:System.Diagnostics.EventLogTraceListener" /> 的名称。</summary>
      <returns>此跟踪侦听器的名称。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
      <summary>将跟踪信息、数据对象和事件信息写入事件日志中。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" /> 对象。</param>
      <param name="source">标识输出时使用的名称，通常为生成跟踪事件的应用程序的名称。</param>
      <param name="severity">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一，指定引发跟踪的事件类型。</param>
      <param name="id">事件的数值标识符。<paramref name="source" /> 和 <paramref name="id" /> 的组合可以唯一地标识一个事件。</param>
      <param name="data">要向输出文件或流中写入的数据对象。</param>
    </member>
    <member name="M:System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
      <summary>将跟踪信息、数据对象的数组和事件信息写入事件日志中。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" /> 对象。</param>
      <param name="source">标识输出时使用的名称，通常为生成跟踪事件的应用程序的名称。</param>
      <param name="severity">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一，指定引发跟踪的事件类型。</param>
      <param name="id">事件的数值标识符。<paramref name="source" /> 和 <paramref name="id" /> 的组合可以唯一地标识一个事件。</param>
      <param name="data">数据对象的数组。</param>
    </member>
    <member name="M:System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
      <summary>将跟踪信息、消息和事件信息写入事件日志中。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" /> 对象。</param>
      <param name="source">标识输出时使用的名称，通常为生成跟踪事件的应用程序的名称。</param>
      <param name="severity">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一，指定引发跟踪的事件类型。</param>
      <param name="id">事件的数值标识符。<paramref name="source" /> 和 <paramref name="id" /> 的组合可以唯一地标识一个事件。</param>
      <param name="message">跟踪消息。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
      <summary>将跟踪信息、格式化对象数组和事件信息写入事件日志中。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" /> 对象。</param>
      <param name="source">标识输出时使用的名称，通常为生成跟踪事件的应用程序的名称。</param>
      <param name="severity">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一，指定引发跟踪的事件类型。</param>
      <param name="id">事件的数值标识符。<paramref name="source" /> 和 <paramref name="id" /> 的组合可以唯一地标识一个事件。</param>
      <param name="format">包含零个或多个格式项的格式字符串，这些项与 <paramref name="args" /> 数组中的对象相对应。</param>
      <param name="args">包含零个或多个要格式化的对象的 object 数组。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.EventLogTraceListener.Write(System.String)">
      <summary>将消息写入此实例的事件日志。</summary>
      <param name="message">要写入的消息。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.EventLogTraceListener.WriteLine(System.String)">
      <summary>将消息写入此实例的事件日志。</summary>
      <param name="message">要写入的消息。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="T:System.Diagnostics.EventSourceCreationData">
      <summary>表示用于在本地或远程计算机上创建事件日志源的配置设置。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSourceCreationData.#ctor(System.String,System.String)">
      <summary>使用指定的事件源和事件日志名称对 <see cref="T:System.Diagnostics.EventSourceCreationData" /> 类的新实例进行初始化。</summary>
      <param name="source">要在事件日志中注册为项源的名称。 </param>
      <param name="logName">要将来自源的项写入其中的日志的名称。 </param>
    </member>
    <member name="P:System.Diagnostics.EventSourceCreationData.CategoryCount">
      <summary>获取或设置类别资源文件中类别的数目。</summary>
      <returns>类别资源文件中的类别的数目。默认值为零。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性设置为负值或大于 <see cref="F:System.UInt16.MaxValue" /> 的值。 </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile">
      <summary>获取或设置包含源的类别字符串的资源文件的路径。</summary>
      <returns>类别资源文件的路径。默认值为空字符串 ("")。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventSourceCreationData.LogName">
      <summary>获取或设置事件日志的名称，事件源要向该日志写入项。</summary>
      <returns>事件日志的名称。这可以是 Application、System 或一个自定义的日志名称。默认值为“Application”。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventSourceCreationData.MachineName">
      <summary>获取或设置在其上注册事件源的计算机的名称。</summary>
      <returns>在其上注册事件源的系统的名称。默认为本地计算机 (".")。</returns>
      <exception cref="T:System.ArgumentException">计算机名称无效。 </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventSourceCreationData.MessageResourceFile">
      <summary>获取或设置消息资源文件的路径，该文件包含源的消息格式字符串。</summary>
      <returns>消息资源文件的路径。默认值为空字符串 ("")。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventSourceCreationData.ParameterResourceFile">
      <summary>获取或设置资源文件的路径，该文件包含源的消息参数字符串。</summary>
      <returns>参数资源文件的路径。默认值为空字符串 ("")。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventSourceCreationData.Source">
      <summary>获取或设置要在事件日志中注册为事件源的名称。</summary>
      <returns>要在事件日志中注册为项源的名称。默认值为空字符串 ("")。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.EventTypeFilter">
      <summary>指示侦听器是否应该基于事件类型进行跟踪。</summary>
    </member>
    <member name="M:System.Diagnostics.EventTypeFilter.#ctor(System.Diagnostics.SourceLevels)">
      <summary>初始化 <see cref="T:System.Diagnostics.EventTypeFilter" /> 类的新实例。</summary>
      <param name="level">
        <see cref="T:System.Diagnostics.SourceLevels" /> 值的一个按位组合，指定要跟踪的消息的事件类型。</param>
    </member>
    <member name="P:System.Diagnostics.EventTypeFilter.EventType">
      <summary>获取或设置要跟踪的消息的事件类型。</summary>
      <returns>
        <see cref="T:System.Diagnostics.SourceLevels" /> 值的按位组合。</returns>
    </member>
    <member name="M:System.Diagnostics.EventTypeFilter.ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])">
      <summary>确定跟踪侦听器是否应跟踪该事件。</summary>
      <returns>
            如果应产生跟踪，则为 true；否则为 false。</returns>
      <param name="cache">表示跟踪事件的信息缓存的 <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
      <param name="source">源的名称。</param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一。</param>
      <param name="id">跟踪标识符编号。</param>
      <param name="formatOrMessage">用于编写参数数组的格式，或者要编写的消息。</param>
      <param name="args">参数对象的数组。</param>
      <param name="data1">跟踪数据对象。</param>
      <param name="data">跟踪数据对象的数组。</param>
    </member>
    <member name="T:System.Diagnostics.FileVersionInfo">
      <summary>为磁盘上的物理文件提供版本信息。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.Comments">
      <summary>获取与文件关联的注释。</summary>
      <returns>与文件关联的注释，当文件不包含版本信息时则为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.CompanyName">
      <summary>获取生成此文件的公司的名称。</summary>
      <returns>生成文件的公司的名称，当文件不包含版本信息时则为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.FileBuildPart">
      <summary>获取文件的内部版本号。</summary>
      <returns>表示文件内部版本号的值，当文件不包含版本信息时则为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.FileDescription">
      <summary>获取文件说明。</summary>
      <returns>文件说明，当文件不包含版本信息时则为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.FileMajorPart">
      <summary>获取版本号的主要版本号部分。</summary>
      <returns>表示版本号主要部分的值，当文件不包含版本信息时则为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.FileMinorPart">
      <summary>获取文件版本号的次要部分。</summary>
      <returns>表示版本号次要部分的值，当文件不包含版本信息时则为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.FileName">
      <summary>获取 <see cref="T:System.Diagnostics.FileVersionInfo" /> 的此实例所描述的文件的名称。</summary>
      <returns>
        <see cref="T:System.Diagnostics.FileVersionInfo" /> 的此实例所描述的文件的名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.FilePrivatePart">
      <summary>获取文件专用部件号。</summary>
      <returns>表示文件专用部件号的值，当文件不包含版本信息时则为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.FileVersion">
      <summary>获取文件版本号。</summary>
      <returns>文件的版本号，当文件不包含版本信息时则为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)">
      <summary>返回表示与指定文件关联的版本信息的 <see cref="T:System.Diagnostics.FileVersionInfo" />。</summary>
      <returns>包含文件信息的 <see cref="T:System.Diagnostics.FileVersionInfo" />。如果文件不包含版本信息，则 <see cref="T:System.Diagnostics.FileVersionInfo" /> 仅包含所请求文件的名称。</returns>
      <param name="fileName">要检索其版本信息的文件的完全限定路径和名称。 </param>
      <exception cref="T:System.IO.FileNotFoundException">无法找到指定的文件。 </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.InternalName">
      <summary>获取文件的内部名称（如果存在）。</summary>
      <returns>文件的内部名称。如果不存在内部名称，则该属性将包含文件的原始名称（不带扩展名）。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.IsDebug">
      <summary>获取一个值，该值指定文件是否包含调试信息或在调试功能启用的情况下进行编译。</summary>
      <returns>
如果文件包含调试信息或在调试功能启用的情况下进行编译，值为 true；反之，值为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.IsPatched">
      <summary>获取一个值，该值指定该文件是否已修改，且不同于相同版本号的原始发行文件。</summary>
      <returns>
如果该文件修补过，值为 true；反之，值为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.IsPreRelease">
      <summary>获取一个值，该值指定该文件是否为开发版本，而不是用于商业目的的发行版。</summary>
      <returns>
如果该文件是预发行版本，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.IsPrivateBuild">
      <summary>获取一个值，该值指定文件是否采用标准的发行过程生成。</summary>
      <returns>
如果文件为专用版本，值为 true；如果文件是采用标准发行过程生成的或如果文件不包含版本信息，则值为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.IsSpecialBuild">
      <summary>获取一个值，该值指定该文件是否为特殊内部版本。</summary>
      <returns>
如果该文件为特殊内部版本，值为 true；反之，值为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.Language">
      <summary>获取版本信息区的默认语言字符串。</summary>
      <returns>版本资源中 Microsoft 语言标识符的描述字符串，当文件不包含版本信息时则为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.LegalCopyright">
      <summary>获取所有适用于指定文件的版权声明。</summary>
      <returns>适用于指定文件的版权声明。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.LegalTrademarks">
      <summary>获取应用到文件的商标和注册商标。</summary>
      <returns>应用到文件的商标和注册商标，当文件不包含版本信息时则为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.OriginalFilename">
      <summary>获取创建文件时所使用的名称。</summary>
      <returns>创建文件时使用的名称，当文件不包含版本信息时则为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.PrivateBuild">
      <summary>获取文件私有版本的信息。</summary>
      <returns>文件私有版本的信息，当文件不包含版本信息时则为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.ProductBuildPart">
      <summary>获取该文件关联产品的内部版本号。</summary>
      <returns>表示与此文件关联的产品的内部版本号的值，当文件不包含版本信息时则为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.ProductMajorPart">
      <summary>获取与此文件关联的产品版本号的主要部分。</summary>
      <returns>表示产品版本号主要部分的值，当文件不包含版本信息时则为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.ProductMinorPart">
      <summary>获取文件关联产品版本号的次要部分。</summary>
      <returns>表示产品版本号次要部分的值，当文件不包含版本信息时则为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.ProductName">
      <summary>获取与此文件一起发行的产品的名称。</summary>
      <returns>与此文件一起发行的产品的名称，当文件不包含版本信息则为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.ProductPrivatePart">
      <summary>获取此文件关联产品的专用部件号。</summary>
      <returns>表示生成文件时关联的专用部件号的值，或者如果文件不包含版本信息，则为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.ProductVersion">
      <summary>获取与此文件一起发行的产品的版本。</summary>
      <returns>与此文件一起发行的产品的版本，当文件不包含版本信息时则为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.SpecialBuild">
      <summary>获取文件的特殊内部版本信息。</summary>
      <returns>文件的特殊内部版本信息，当文件不包含版本信息时则为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.FileVersionInfo.ToString">
      <summary>返回 <see cref="T:System.Diagnostics.FileVersionInfo" /> 中属性及相应值的部分列表。</summary>
      <returns>该类中下列属性及相应值的列表： <see cref="P:System.Diagnostics.FileVersionInfo.FileName" />, <see cref="P:System.Diagnostics.FileVersionInfo.InternalName" />, <see cref="P:System.Diagnostics.FileVersionInfo.OriginalFilename" />, <see cref="P:System.Diagnostics.FileVersionInfo.FileVersion" />, <see cref="P:System.Diagnostics.FileVersionInfo.FileDescription" />, <see cref="P:System.Diagnostics.FileVersionInfo.ProductName" />, <see cref="P:System.Diagnostics.FileVersionInfo.ProductVersion" />, <see cref="P:System.Diagnostics.FileVersionInfo.IsDebug" />, <see cref="P:System.Diagnostics.FileVersionInfo.IsPatched" />, <see cref="P:System.Diagnostics.FileVersionInfo.IsPreRelease" />, <see cref="P:System.Diagnostics.FileVersionInfo.IsPrivateBuild" />, <see cref="P:System.Diagnostics.FileVersionInfo.IsSpecialBuild" />,<see cref="P:System.Diagnostics.FileVersionInfo.Language" />.如果文件不包含版本信息，则此列表将只包含所请求文件的名称。布尔值将为 false，其他所有项将为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.ICollectData">
      <summary>为系统使用性能计数器时加载的性能 DLL 准备性能数据。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.ICollectData.CloseData">
      <summary>由性能 DLL 的封闭性能数据函数调用。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.ICollectData.CollectData(System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr@)">
      <summary>为性能 DLL 收集性能数据。</summary>
      <param name="id">调用索引。</param>
      <param name="valueName">指向具有请求的对象标识符的 Unicode 字符串列表的指针。</param>
      <param name="data">指向数据缓冲区的指针。</param>
      <param name="totalBytes">指向若干个字节的指针。</param>
      <param name="res">此方法返回时，包含指向数据后第一个字节的 <see cref="T:System.IntPtr" />，-1 表示错误，-2 表示需要更大的缓冲区。该参数未经初始化即被传递。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.InstanceData">
      <summary>保存与性能计数器样本关联的实例数据。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.InstanceData.#ctor(System.String,System.Diagnostics.CounterSample)">
      <summary>使用指定的样本和性能计数器实例来初始化 InstanceData 类的新实例。</summary>
      <param name="instanceName">与性能计数器关联的实例的名称。 </param>
      <param name="sample">从 <paramref name="instanceName" /> 参数指定的实例中采集的 <see cref="T:System.Diagnostics.CounterSample" />。 </param>
    </member>
    <member name="P:System.Diagnostics.InstanceData.InstanceName">
      <summary>获取与此实例数据关联的实例名称。</summary>
      <returns>与性能计数器关联的实例的名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.InstanceData.RawValue">
      <summary>获取与性能计数器样本关联的原始数据值。</summary>
      <returns>由与 <see cref="P:System.Diagnostics.InstanceData.Sample" /> 属性关联的性能计数器样本读取的原始值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.InstanceData.Sample">
      <summary>获取生成此数据的性能计数器样本。</summary>
      <returns>从 <see cref="P:System.Diagnostics.InstanceData.InstanceName" /> 属性指定的实例采集的 <see cref="T:System.Diagnostics.CounterSample" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.InstanceDataCollection">
      <summary>提供 <see cref="T:System.Diagnostics.InstanceData" /> 对象的强类型集合。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.InstanceDataCollection.#ctor(System.String)">
      <summary>使用指定的性能计数器（定义性能实例）初始化 <see cref="T:System.Diagnostics.InstanceDataCollection" /> 类的新实例。</summary>
      <param name="counterName">计数器的名称，通常描述计数的数量。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="counterName" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.InstanceDataCollection.Contains(System.String)">
      <summary>确定集合中是否存在带有指定名称的性能实例（由一个索引 <see cref="T:System.Diagnostics.InstanceData" /> 对象来标识）。</summary>
      <returns>
            如果集合中存在该实例，则为 true；否则为 false。</returns>
      <param name="instanceName">要在该集合中查找的实例的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instanceName" /> 参数为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.InstanceDataCollection.CopyTo(System.Diagnostics.InstanceData[],System.Int32)">
      <summary>将集合中的项复制到指定一维数组中的指定索引处。</summary>
      <param name="instances">一维 <see cref="T:System.Array" />，为从集合所复制的值的目标位置。</param>
      <param name="index">添加新实例的从零开始的索引值。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.InstanceDataCollection.CounterName">
      <summary>获取要获取其实例数据的性能计数器的名称。</summary>
      <returns>性能计数器名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.InstanceDataCollection.Item(System.String)">
      <summary>获取与该计数器关联的实例数据。这通常是一组原始计数器值。</summary>
      <returns>一个 <see cref="T:System.Diagnostics.InstanceData" /> 项，将根据它对 <see cref="T:System.Diagnostics.InstanceDataCollection" /> 对象进行索引。</returns>
      <param name="instanceName">性能计数器类别实例的名称，或者为空字符串 ("")（如果该类别包含单个实例）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instanceName" /> 参数为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.InstanceDataCollection.Keys">
      <summary>获取对象和与该实例数据关联的对象的计数器注册表项。</summary>
      <returns>表示一组对象特定的注册表项的 <see cref="T:System.Collections.ICollection" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.InstanceDataCollection.Values">
      <summary>获取组成计数器实例数据的原始计数器值。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，它表示计数器的原始数据值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.InstanceDataCollectionCollection">
      <summary>提供 <see cref="T:System.Diagnostics.InstanceDataCollection" /> 对象的强类型集合。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.InstanceDataCollectionCollection.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.InstanceDataCollectionCollection" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.InstanceDataCollectionCollection.Contains(System.String)">
      <summary>确定集合中是否存在指定计数器的实例数据集合（由索引 <see cref="T:System.Diagnostics.InstanceDataCollection" /> 对象之一来标识）。</summary>
      <returns>
            如果集合中存在包含指定计数器的实例数据集合，则为 true；否则为 false。</returns>
      <param name="counterName">性能计数器的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="counterName" /> 参数为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.InstanceDataCollectionCollection.CopyTo(System.Diagnostics.InstanceDataCollection[],System.Int32)">
      <summary>将 <see cref="T:System.Diagnostics.InstanceDataCollection" /> 实例的数组复制到集合的指定索引处。</summary>
      <param name="counters">要添加到集合中的 <see cref="T:System.Diagnostics.InstanceDataCollection" /> 实例的数组（由它们包含的计数器来标识）。</param>
      <param name="index">要添加新实例的位置。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.InstanceDataCollectionCollection.Item(System.String)">
      <summary>获取指定计数器的实例数据。</summary>
      <returns>一个 <see cref="T:System.Diagnostics.InstanceDataCollection" /> 项，将根据它对 <see cref="T:System.Diagnostics.InstanceDataCollectionCollection" /> 对象进行索引。</returns>
      <param name="counterName">性能计数器的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="counterName" /> 参数为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.InstanceDataCollectionCollection.Keys">
      <summary>获取对象和与该实例数据集合关联的对象的计数器注册表项。</summary>
      <returns>表示一组对象特定的注册表项的 <see cref="T:System.Collections.ICollection" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.InstanceDataCollectionCollection.Values">
      <summary>获取组成计数器实例集合的实例数据值。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，它表示计数器的实例和它们的关联数据值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.MonitoringDescriptionAttribute">
      <summary>指定属性或事件的说明。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.MonitoringDescriptionAttribute.#ctor(System.String)">
      <summary>使用指定的说明初始化 <see cref="T:System.Diagnostics.MonitoringDescriptionAttribute" /> 类的新实例。</summary>
      <param name="description">应用程序定义的说明文字。 </param>
    </member>
    <member name="P:System.Diagnostics.MonitoringDescriptionAttribute.Description">
      <summary>获取与监视的项关联的说明文字。</summary>
      <returns>应用程序定义的说明。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.OverflowAction">
      <summary>指定如何处理已达到最大文件大小的事件日志中的项。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.OverflowAction.DoNotOverwrite">
      <summary>指示当事件日志已满时保留现有日志项，而放弃新日志项。</summary>
    </member>
    <member name="F:System.Diagnostics.OverflowAction.OverwriteAsNeeded">
      <summary>指示当事件日志已满时用每个新日志项覆盖最旧的日志项。</summary>
    </member>
    <member name="F:System.Diagnostics.OverflowAction.OverwriteOlder">
      <summary>指示当事件日志已满时用新事件覆盖保留时间已超过 <see cref="P:System.Diagnostics.EventLog.MinimumRetentionDays" /> 属性值指定的时间的事件。如果事件日志已满并且没有任何事件的保留时间已超过 <see cref="P:System.Diagnostics.EventLog.MinimumRetentionDays" /> 属性值指定的时间，则放弃新事件。</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounter">
      <summary>表示 Windows NT 性能计数器组件。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.PerformanceCounter" /> 类的新的只读实例，但不将该实例与任何系统性能计数器或自定义性能计数器关联。</summary>
      <exception cref="T:System.PlatformNotSupportedException">平台为 Windows 98 或 Windows Millennium Edition (Me)，这些平台不支持性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.PerformanceCounter" /> 类的新的只读实例，并将其与本地计算机上指定的系统性能计数器或自定义性能计数器关联。此构造函数要求该类别包含单个实例。</summary>
      <param name="categoryName">此性能计数器关联的性能计数器类别（性能对象）的名称。</param>
      <param name="counterName">性能计数器的名称。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="categoryName" /> 为空字符串 ("")。- 或 - <paramref name="counterName" /> 为空字符串 ("")。- 或 - 指定的类别不存在。- 或 -指定的类别被标记为多实例类别，需要使用实例名来创建性能计数器。- 或 -<paramref name="categoryName" /> 和 <paramref name="counterName" /> 已本地化为不同的语言。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" />或 <paramref name="counterName" /> 为 null。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">访问系统 API 时出错。</exception>
      <exception cref="T:System.PlatformNotSupportedException">平台为 Windows 98 或 Windows Millennium Edition (Me)，这些平台不支持性能计数器。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.Boolean)">
      <summary>初始化 <see cref="T:System.Diagnostics.PerformanceCounter" /> 类的新的只读或读/写实例，并将其与本地计算机上指定的系统性能计数器或自定义性能计数器关联。此构造函数要求该类别包含单个实例。</summary>
      <param name="categoryName">此性能计数器关联的性能计数器类别（性能对象）的名称。</param>
      <param name="counterName">性能计数器的名称。</param>
      <param name="readOnly">
                若要以只读模式访问计数器（但计数器本身可能是可读/写的），则为 true；若要以读/写模式访问计数器，则为 false。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="categoryName" /> 是空字符串 ("")。- 或 - <paramref name="counterName" /> 是空字符串 ("")。- 或 - 指定的类别不存在。（如果 <paramref name="readOnly" /> 为 true）。- 或 - 指定的类别不是 .NET Framework 自定义类别（如果 <paramref name="readOnly" /> 为 false）。- 或 -指定的类别被标记为多实例类别，需要使用实例名来创建性能计数器。- 或 -<paramref name="categoryName" /> 和 <paramref name="counterName" /> 已本地化为不同的语言。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" />或 <paramref name="counterName" /> 为 null。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">访问系统 API 时出错。</exception>
      <exception cref="T:System.PlatformNotSupportedException">平台为 Windows 98 或 Windows Millennium Edition (Me)，这些平台不支持性能计数器。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.PerformanceCounter" /> 类的新的只读实例，并将其与本地计算机上指定的系统性能计数器或自定义性能计数器及类别实例关联。</summary>
      <param name="categoryName">此性能计数器关联的性能计数器类别（性能对象）的名称。</param>
      <param name="counterName">性能计数器的名称。</param>
      <param name="instanceName">性能计数器类别实例的名称，或者为空字符串 ("")（如果该类别包含单个实例）。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="categoryName" /> 为空字符串 ("")。- 或 - <paramref name="counterName" /> 为空字符串 ("")。- 或 - 指定的类别无效。- 或 -指定的类别被标记为多实例类别，需要使用实例名来创建性能计数器。- 或 -<paramref name="instanceName" /> 的长度超过 127 个字符。- 或 -<paramref name="categoryName" /> 和 <paramref name="counterName" /> 已本地化为不同的语言。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" />或 <paramref name="counterName" /> 为 null。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">访问系统 API 时出错。</exception>
      <exception cref="T:System.PlatformNotSupportedException">平台为 Windows 98 或 Windows Millennium Edition (Me)，这些平台不支持性能计数器。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String,System.Boolean)">
      <summary>初始化 <see cref="T:System.Diagnostics.PerformanceCounter" /> 类的新的只读实例或读/写实例，并将其与本地计算机上指定的系统性能计数器或自定义性能计数器及类别实例关联。</summary>
      <param name="categoryName">此性能计数器关联的性能计数器类别（性能对象）的名称。</param>
      <param name="counterName">性能计数器的名称。</param>
      <param name="instanceName">性能计数器类别实例的名称，或者为空字符串 ("")（如果该类别包含单个实例）。</param>
      <param name="readOnly">
                若要以只读模式访问计数器，则为 true；若要以读/写模式访问计数器，则为 false。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="categoryName" /> 为空字符串 ("")。- 或 - <paramref name="counterName" /> 为空字符串 ("")。- 或 - 所请求的读/写权限设置对此计数器无效。- 或 - 指定的类别不存在（如果 <paramref name="readOnly" /> 为 true）。- 或 - 指定的类别不是 .NET Framework 自定义类别（如果 <paramref name="readOnly" /> 为 false）。- 或 -指定的类别被标记为多实例类别，需要使用实例名来创建性能计数器。- 或 -<paramref name="instanceName" /> 的长度超过 127 个字符。- 或 -<paramref name="categoryName" /> 和 <paramref name="counterName" /> 已本地化为不同的语言。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" />或 <paramref name="counterName" /> 为 null。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">访问系统 API 时出错。</exception>
      <exception cref="T:System.PlatformNotSupportedException">平台为 Windows 98 或 Windows Millennium Edition (Me)，这些平台不支持性能计数器。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String,System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.PerformanceCounter" /> 类的新的只读实例，并将其与指定计算机上指定的系统性能计数器或自定义性能计数器及类别实例关联。</summary>
      <param name="categoryName">此性能计数器关联的性能计数器类别（性能对象）的名称。</param>
      <param name="counterName">性能计数器的名称。</param>
      <param name="instanceName">性能计数器类别实例的名称，或者为空字符串 ("")（如果该类别包含单个实例）。</param>
      <param name="machineName">性能计数器及其关联的类别所在的计算机。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="categoryName" /> 为空字符串 ("")。- 或 - <paramref name="counterName" /> 为空字符串 ("")。- 或 - 所请求的读/写权限设置对此计数器无效。- 或 - 指定的计算机上不存在该计数器。- 或 -指定的类别被标记为多实例类别，需要使用实例名来创建性能计数器。- 或 -<paramref name="instanceName" /> 的长度超过 127 个字符。- 或 -<paramref name="categoryName" /> 和 <paramref name="counterName" /> 已本地化为不同的语言。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="machineName" /> 参数无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" />或 <paramref name="counterName" /> 为 null。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">访问系统 API 时出错。</exception>
      <exception cref="T:System.PlatformNotSupportedException">平台为 Windows 98 或 Windows Millennium Edition (Me)，这些平台不支持性能计数器。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.BeginInit">
      <summary>开始初始化在窗体上使用或由另一个组件使用的 <see cref="T:System.Diagnostics.PerformanceCounter" /> 实例。此初始化在运行时发生。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.CategoryName">
      <summary>获取或设置此性能计数器的性能计数器类别的名称。</summary>
      <returns>此性能计数器关联的性能计数器类别（性能对象）的名称。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Diagnostics.PerformanceCounter.CategoryName" /> 为 null。</exception>
      <exception cref="T:System.PlatformNotSupportedException">平台为 Windows 98 或 Windows Millennium Edition (Me)，这些平台不支持性能计数器。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.Close">
      <summary>关闭性能计数器并释放由此性能计数器实例分配的所有资源。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.CloseSharedResources">
      <summary>释放由计数器分配的性能计数器库共享状态。</summary>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1">
          <Machine name=".">
            <Category name="*" access="Browse" />
          </Machine>
        </IPermission>
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.CounterHelp">
      <summary>获取此性能计数器的说明。</summary>
      <returns>此性能计数器测量的项或数量的说明。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Diagnostics.PerformanceCounter" /> 实例未与性能计数器关联。- 或 -使用全局共享内存时，<see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> 属性设置为 <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process" />。</exception>
      <exception cref="T:System.PlatformNotSupportedException">平台为 Windows 98 或 Windows Millennium Edition (Me)，这些平台不支持性能计数器。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.CounterName">
      <summary>获取或设置与此 <see cref="T:System.Diagnostics.PerformanceCounter" /> 实例关联的性能计数器的名称。</summary>
      <returns>计数器的名称，它一般描述计数的数量。此名称显示在性能计数器管理器 MMC 管理单元的“添加计数器”对话框的计数器列表中。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Diagnostics.PerformanceCounter.CounterName" /> 为 null。</exception>
      <exception cref="T:System.PlatformNotSupportedException">平台为 Windows 98 或 Windows Millennium Edition (Me)，这些平台不支持性能计数器。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.CounterType">
      <summary>获取关联的性能计数器的计数器类型。</summary>
      <returns>
        <see cref="T:System.Diagnostics.PerformanceCounterType" />，它既描述计数器如何与监视应用程序交互，又描述计数器包含的值的特性（例如计算所得和非计算所得）。</returns>
      <exception cref="T:System.InvalidOperationException">此实例未与性能计数器正确关联。- 或 -使用全局共享内存时，<see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> 属性设置为 <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process" />。</exception>
      <exception cref="T:System.PlatformNotSupportedException">平台为 Windows 98 或 Windows Millennium Edition (Me)，这些平台不支持性能计数器。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.Decrement">
      <summary>通过有效的原子操作使关联的性能计数器减一。</summary>
      <returns>减少后的计数器值。</returns>
      <exception cref="T:System.InvalidOperationException">该计数器是只读的，因而应用程序无法使之减少。- 或 - 此实例未与性能计数器正确关联。- 或 -使用全局共享内存时，<see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> 属性设置为 <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process" />。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">访问系统 API 时出错。</exception>
      <exception cref="T:System.PlatformNotSupportedException">平台为 Windows 98 或 Windows Millennium Edition (Me)，这些平台不支持性能计数器。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounter.DefaultFileMappingSize">
      <summary>指定由性能计数器共享的全局内存的大小（以字节为单位）。默认大小为 524,288 个字节。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.EndInit">
      <summary>结束在窗体上使用或由另一组件使用的 <see cref="T:System.Diagnostics.PerformanceCounter" /> 实例的初始化。此初始化在运行时发生。</summary>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.Increment">
      <summary>通过有效的原子操作使关联的性能计数器增加一。</summary>
      <returns>增加后的计数器值。</returns>
      <exception cref="T:System.InvalidOperationException">该计数器是只读的，因此应用程序无法递增它的值。- 或 - 此实例未与性能计数器正确关联。- 或 -使用全局共享内存时，<see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> 属性设置为 <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process" />。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">访问系统 API 时出错。</exception>
      <exception cref="T:System.PlatformNotSupportedException">平台为 Windows 98 或 Windows Millennium Edition (Me)，这些平台不支持性能计数器。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.IncrementBy(System.Int64)">
      <summary>通过有效的原子操作，使关联的性能计数器的值增加或减少指定的量。</summary>
      <returns>新的计数器值。</returns>
      <param name="value">要增加的值。（负值使计数器减少。） </param>
      <exception cref="T:System.InvalidOperationException">该计数器是只读的，因此应用程序无法递增它的值。- 或 - 此实例未与性能计数器正确关联。- 或 -使用全局共享内存时，<see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> 属性设置为 <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process" />。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">访问系统 API 时出错。</exception>
      <exception cref="T:System.PlatformNotSupportedException">平台为 Windows 98 或 Windows Millennium Edition (Me)，这些平台不支持性能计数器。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.InstanceLifetime">
      <summary>获取或设置进程的生存期。</summary>
      <returns>
        <see cref="T:System.Diagnostics.PerformanceCounterInstanceLifetime" /> 值之一。默认值为 <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Global" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">设置的值不是 <see cref="T:System.Diagnostics.PerformanceCounterInstanceLifetime" /> 枚举的成员。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> 是在初始化 <see cref="T:System.Diagnostics.PerformanceCounter" /> 后设置的。</exception>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.InstanceName">
      <summary>获取或设置此性能计数器的实例名称。</summary>
      <returns>性能计数器类别实例的名称，或者为空字符串 ("")（如果该计数器是单实例计数器）。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.MachineName">
      <summary>获取或设置此性能计数器的计算机名。</summary>
      <returns>性能计数器及其关联的类别所在的服务器。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Diagnostics.PerformanceCounter.MachineName" /> 格式无效。</exception>
      <exception cref="T:System.PlatformNotSupportedException">平台为 Windows 98 或 Windows Millennium Edition (Me)，这些平台不支持性能计数器。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.NextSample">
      <summary>获取计数器样本，并为其返回原始值（即未经过计算的值）。</summary>
      <returns>一个 <see cref="T:System.Diagnostics.CounterSample" />，它代表系统为此计数器获取的下一原始值。</returns>
      <exception cref="T:System.InvalidOperationException">此实例未与性能计数器正确关联。- 或 -使用全局共享内存时，<see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> 属性设置为 <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process" />。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">访问系统 API 时出错。</exception>
      <exception cref="T:System.PlatformNotSupportedException">平台为 Windows 98 或 Windows Millennium Edition (Me)，这些平台不支持性能计数器。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.NextValue">
      <summary>获取计数器样本并为其返回计算所得值。</summary>
      <returns>系统为此计数器获取的下一计算所得值。</returns>
      <exception cref="T:System.InvalidOperationException">此实例未与性能计数器正确关联。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">访问系统 API 时出错。</exception>
      <exception cref="T:System.PlatformNotSupportedException">平台为 Windows 98 或 Windows Millennium Edition (Me)，这些平台不支持性能计数器。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.RawValue">
      <summary>获取或设置此计数器的原始值（即未经过计算的值）。</summary>
      <returns>计数器的原始值。</returns>
      <exception cref="T:System.InvalidOperationException">您试图设置计数器的原始值，但该计数器是只读的。- 或 - 此实例未与性能计数器正确关联。- 或 -使用全局共享内存时，<see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> 属性设置为 <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process" />。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">访问系统 API 时出错。</exception>
      <exception cref="T:System.PlatformNotSupportedException">平台为 Windows 98 或 Windows Millennium Edition (Me)，这些平台不支持性能计数器。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.ReadOnly">
      <summary>获取或设置一个值，该值指示此 <see cref="T:System.Diagnostics.PerformanceCounter" /> 实例是否处于只读模式。</summary>
      <returns>
            如果 <see cref="T:System.Diagnostics.PerformanceCounter" /> 实例为只读模式（即使计数器本身为自定义 .NET Framework 计数器），则为 true；如果它为读/写模式，则为 false。默认值为构造函数设置的值。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.RemoveInstance">
      <summary>删除由 <see cref="T:System.Diagnostics.PerformanceCounter" /> 对象的 <see cref="P:System.Diagnostics.PerformanceCounter.InstanceName" /> 属性指定的类别实例。</summary>
      <exception cref="T:System.InvalidOperationException">此计数器为只读，因而不能移除与该类别关联的任何实例。- 或 - 此实例未与性能计数器正确关联。- 或 -使用全局共享内存时，<see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> 属性设置为 <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process" />。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">访问系统 API 时出错。</exception>
      <exception cref="T:System.PlatformNotSupportedException">平台为 Windows 98 或 Windows Millennium Edition (Me)，这些平台不支持性能计数器。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterCategory">
      <summary>表示性能对象，它定义性能计数器的类别。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 类的新实例，让 <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 属性保持为空，并将 <see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" /> 属性设置为本地计算机。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 类的新实例，将 <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 属性设置为指定的值，并将 <see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" /> 属性设置为本地计算机。</summary>
      <param name="categoryName">性能计数器类别的名称或性能对象，此 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 实例将与之关联。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="categoryName" /> 是空字符串 ("")。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 类的新实例，并将 <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 和 <see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" /> 属性设置为指定的值。</summary>
      <param name="categoryName">性能计数器类别的名称或性能对象，此 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 实例将与之关联。</param>
      <param name="machineName">性能计数器类别及其关联的计数器所在的计算机。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="categoryName" /> 是空字符串 ("")。- 或 - <paramref name="machineName" /> 语法无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 为 null。</exception>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterCategory.CategoryHelp">
      <summary>获取类别的帮助文字。</summary>
      <returns>对此类别测量的性能对象所作的说明。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 属性为 null。必须在获取类别帮助前设置类别名称。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterCategory.CategoryName">
      <summary>获取或设置定义此类别的性能对象的名称。</summary>
      <returns>性能计数器类别的名称或性能对象，此 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 实例将与之关联。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 是空字符串 ("")。</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterCategory.CategoryType">
      <summary>获取性能计数器类别类型。</summary>
      <returns>
        <see cref="T:System.Diagnostics.PerformanceCounterCategoryType" /> 值之一。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.CounterExists(System.String)">
      <summary>确定是否向此类别注册了指定的计数器，这由 <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 和 <see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" /> 属性指示。</summary>
      <returns>
            如果向 <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 和 <see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" /> 属性指定的类别注册了该计数器，则为 true；否则为 false。</returns>
      <param name="counterName">要查找的性能计数器的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="counterName" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">尚未设置 <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 属性。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.CounterExists(System.String,System.String)">
      <summary>确定是否向本地计算机上的指定类别注册了指定的计数器。</summary>
      <returns>
            如果向本地计算机上的指定类别注册了该计数器，则为 true；否则为 false。</returns>
      <param name="counterName">要查找的性能计数器的名称。</param>
      <param name="categoryName">性能计数器类别的名称或性能对象，指定的性能计数器与之关联。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 为 null。- 或 - <paramref name="counterName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="categoryName" /> 是空字符串 ("")。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.CounterExists(System.String,System.String,System.String)">
      <summary>确定是否向远程计算机上的指定类别注册了指定的计数器。</summary>
      <returns>
            如果向指定计算机上的指定类别注册了该计数器，则为 true；否则为 false。</returns>
      <param name="counterName">要查找的性能计数器的名称。</param>
      <param name="categoryName">性能计数器类别的名称或性能对象，指定的性能计数器与之关联。</param>
      <param name="machineName">性能计数器类别及其关联计数器所在的计算机的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 为 null。- 或 - <paramref name="counterName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="categoryName" /> 是空字符串 ("")。- 或 - <paramref name="machineName" /> 无效。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.Create(System.String,System.String,System.Diagnostics.CounterCreationDataCollection)">
      <summary>在本地计算机上注册包含指定计数器的自定义性能计数器类别。</summary>
      <returns>与新的自定义类别或性能对象关联的 <see cref="T:System.Diagnostics.PerformanceCounterCategory" />。</returns>
      <param name="categoryName">要创建并注册到系统的自定义性能计数器类别的名称。</param>
      <param name="categoryHelp">自定义类别的说明。</param>
      <param name="counterData">一个 <see cref="T:System.Diagnostics.CounterCreationDataCollection" />，它指定要作为新类别的一部分创建的计数器。</param>
      <exception cref="T:System.ArgumentException">在 <paramref name="counterData" /> 集合内指定的某计数器名称为 null 或空字符串 ("")。- 或 - 在 <paramref name="counterData" /> 集合内指定的某计数器已经存在。- 或 - <paramref name="counterName" /> 参数的语法无效。它可能包含反斜杠字符 ("\") 或者长度大于 80 个字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 参数为 null。</exception>
      <exception cref="T:System.InvalidOperationException">该类别已存在于本地计算机上。- 或 - <paramref name="counterData" /> 集合的布局对于基本计数器不正确。AverageCount64、AverageTimer32、CounterMultiTimer、CounterMultiTimerInverse、CounterMultiTimer100Ns、CounterMultiTimer100NsInverse、RawFraction、SampleFraction 或 SampleCounter 类型的计数器的后面必须紧跟基本计数器类型之一：AverageBase、MultiBase、RawBase 或 SampleBase。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.Create(System.String,System.String,System.Diagnostics.PerformanceCounterCategoryType,System.Diagnostics.CounterCreationDataCollection)">
      <summary>在本地计算机上注册包含指定计数器的自定义性能计数器类别。</summary>
      <returns>与新的自定义类别或性能对象关联的 <see cref="T:System.Diagnostics.PerformanceCounterCategory" />。</returns>
      <param name="categoryName">要创建并注册到系统的自定义性能计数器类别的名称。</param>
      <param name="categoryHelp">自定义类别的说明。</param>
      <param name="categoryType">
        <see cref="T:System.Diagnostics.PerformanceCounterCategoryType" /> 值之一。</param>
      <param name="counterData">一个 <see cref="T:System.Diagnostics.CounterCreationDataCollection" />，它指定要作为新类别的一部分创建的计数器。</param>
      <exception cref="T:System.ArgumentException">在 <paramref name="counterData" /> 集合内指定的某计数器名称为 null 或空字符串 ("")。- 或 - 在 <paramref name="counterData" /> 集合内指定的某计数器已经存在。- 或 - <paramref name="counterName" /> 含有无效语法。它可能包含反斜杠字符 ("\") 或者长度大于 80 个字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 为 null。- 或 -<paramref name="counterData" /> 为null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="categoryType" /> 值不在以下值范围内：MultiInstance、SingleInstance 或 Unknown。</exception>
      <exception cref="T:System.InvalidOperationException">该类别已存在于本地计算机上。- 或 - <paramref name="counterData" /> 集合的布局对于基本计数器不正确。AverageCount64、AverageTimer32、CounterMultiTimer、CounterMultiTimerInverse、CounterMultiTimer100Ns、CounterMultiTimer100NsInverse、RawFraction、SampleFraction 或 SampleCounter 类型的计数器的后面必须紧跟基本计数器类型之一（AverageBase、MultiBase、RawBase 或 SampleBase）。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.Create(System.String,System.String,System.Diagnostics.PerformanceCounterCategoryType,System.String,System.String)">
      <summary>在本地计算机上注册包含 <see cref="F:System.Diagnostics.PerformanceCounterType.NumberOfItems32" /> 类型的单个计数器的自定义性能计数器类别。</summary>
      <returns>与新的系统类别或性能对象关联的 <see cref="T:System.Diagnostics.PerformanceCounterCategory" />。</returns>
      <param name="categoryName">要创建并注册到系统的自定义性能计数器类别的名称。</param>
      <param name="categoryHelp">自定义类别的说明。</param>
      <param name="categoryType">
        <see cref="T:System.Diagnostics.PerformanceCounterCategoryType" /> 值之一，指定类别为 <see cref="F:System.Diagnostics.PerformanceCounterCategoryType.MultiInstance" />、<see cref="F:System.Diagnostics.PerformanceCounterCategoryType.SingleInstance" /> 还是 <see cref="F:System.Diagnostics.PerformanceCounterCategoryType.Unknown" />。</param>
      <param name="counterName">要创建为新类别的一部分的新计数器的名称。</param>
      <param name="counterHelp">对与新的自定义类别关联的计数器所作的说明。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="counterName" /> 为 null 或是一个空字符串 ("")。- 或 - 由 <paramref name="counterName" /> 指定的计数器已经存在。- 或 - <paramref name="counterName" /> 含有无效语法。它可能包含反斜杠字符 ("\") 或者长度大于 80 个字符。</exception>
      <exception cref="T:System.InvalidOperationException">该类别已存在于本地计算机上。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 为 null。- 或 -<paramref name="counterHelp" /> 为 null。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.Create(System.String,System.String,System.String,System.String)">
      <summary>在本地计算机上注册包含 NumberOfItems32 类型的单个计数器的自定义性能计数器类别。</summary>
      <returns>与新的系统类别或性能对象关联的 <see cref="T:System.Diagnostics.PerformanceCounterCategory" />。</returns>
      <param name="categoryName">要创建并注册到系统的自定义性能计数器类别的名称。</param>
      <param name="categoryHelp">自定义类别的说明。</param>
      <param name="counterName">要作为新类别的一部分创建的、NumberOfItems32 类型的新计数器的名称。</param>
      <param name="counterHelp">对与新的自定义类别关联的计数器所作的说明。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="counterName" /> 为 null 或是一个空字符串 ("")。- 或 - 由 <paramref name="counterName" /> 指定的计数器已经存在。- 或 - <paramref name="counterName" /> 含有无效语法。它可能包含反斜杠字符 ("\") 或者长度大于 80 个字符。</exception>
      <exception cref="T:System.InvalidOperationException">该类别已存在于本地计算机上。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 为 null。- 或 -<paramref name="counterHelp" /> 为 null。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.Delete(System.String)">
      <summary>从本地计算机移除类别及其关联的计数器。</summary>
      <param name="categoryName">要删除的自定义性能计数器类别的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="categoryName" /> 参数的语法无效。它可能包含反斜杠字符 ("\") 或者长度大于 80 个字符。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.InvalidOperationException">不能删除该类别，因为它不是自定义类别。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.Exists(System.String)">
      <summary>确定是否在本地计算机上注册了该类别。</summary>
      <returns>
            如果已注册该类别，则为 true；否则为 false。</returns>
      <param name="categoryName">要查找的性能计数器类别的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="categoryName" /> 参数是空字符串 ("")。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.Exists(System.String,System.String)">
      <summary>确定是否在指定的计算机上注册了该类别。</summary>
      <returns>
            如果已注册该类别，则为 true；否则为 false。</returns>
      <param name="categoryName">要查找的性能计数器类别的名称。</param>
      <param name="machineName">要为该类别检查的计算机的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="categoryName" /> 参数是空字符串 ("")。- 或 - <paramref name="machineName" /> 参数无效。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.IO.IOException">无法找到网络路径。</exception>
      <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.GetCategories">
      <summary>检索本地计算机上注册的性能计数器类别的列表。</summary>
      <returns>
        <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 对象的数组，这些对象指示本地计算机上注册的类别。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.GetCategories(System.String)">
      <summary>检索指定计算机上注册的性能计数器类别的列表。</summary>
      <returns>
        <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 对象的数组，这些对象指示指定计算机上注册的类别。</returns>
      <param name="machineName">要查看的计算机。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="machineName" /> 参数无效。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.GetCounters">
      <summary>检索正好包含一个实例的某性能计数器类别中的计数器列表。</summary>
      <returns>
        <see cref="T:System.Diagnostics.PerformanceCounter" /> 对象的数组，这些对象指示与此单实例性能计数器类别关联的计数器。</returns>
      <exception cref="T:System.ArgumentException">该类别不是单个实例。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.InvalidOperationException">没有与该类别关联的实例。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.GetCounters(System.String)">
      <summary>检索包含一个或多个实例的某性能计数器类别中的计数器列表。</summary>
      <returns>
        <see cref="T:System.Diagnostics.PerformanceCounter" /> 对象的数组，这些对象指示与此性能计数器类别的指定对象实例关联的计数器。</returns>
      <param name="instanceName">要为其检索关联计数器列表的性能对象实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instanceName" /> 参数为 null。</exception>
      <exception cref="T:System.InvalidOperationException">尚未设置此 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 实例的 <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 属性。- 或 - 该类别不包含由 <paramref name="instanceName" /> 参数指定的实例。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.GetInstanceNames">
      <summary>检索与此类别关联的性能对象实例列表。</summary>
      <returns>字符串的数组，这些字符串表示与此类别关联的性能对象实例名称；或者，如果该类别仅包含一个性能对象实例，则为包含空字符串 ("") 的单项数组。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 属性为 null。可能尚未设置该属性。- 或 -没有与该类别关联的实例。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.InstanceExists(System.String)">
      <summary>确定由此 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 对象的 <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 属性标识的类别中是否存在指定的性能对象实例。</summary>
      <returns>
            如果该类别包含指定的性能对象实例，则为 true；否则，为 false。</returns>
      <param name="instanceName">要搜索的此性能计数器类别中的性能对象实例。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 属性 (Property) 为 null。可能尚未设置该属性。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instanceName" /> 参数为 null。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.InstanceExists(System.String,System.String)">
      <summary>确定本地计算机上指定的类别是否包含指定的性能对象实例。</summary>
      <returns>
            如果该类别包含指定的性能对象实例，则为 true；否则，为 false。</returns>
      <param name="instanceName">要搜索的性能对象实例。</param>
      <param name="categoryName">要搜索的性能计数器类别。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instanceName" /> 参数为 null。- 或 - <paramref name="categoryName" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="categoryName" /> 参数是空字符串 ("")。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.InstanceExists(System.String,System.String,System.String)">
      <summary>确定指定计算机上的指定类别是否包含指定的性能对象实例。</summary>
      <returns>
            如果该类别包含指定的性能对象实例，则为 true；否则，为 false。</returns>
      <param name="instanceName">要搜索的性能对象实例。</param>
      <param name="categoryName">要搜索的性能计数器类别。</param>
      <param name="machineName">要在其上查找该类别实例对的计算机的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instanceName" /> 参数为 null。- 或 - <paramref name="categoryName" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="categoryName" /> 参数是空字符串 ("")。- 或 - <paramref name="machineName" /> 参数无效。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterCategory.MachineName">
      <summary>获取或设置此类别所在的计算机的名称。</summary>
      <returns>性能计数器类别及其关联计数器所在的计算机的名称。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" /> 语法无效。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.ReadCategory">
      <summary>读取与此性能计数器类别关联的所有计数器和性能对象实例数据。</summary>
      <returns>一个 <see cref="T:System.Diagnostics.InstanceDataCollectionCollection" />，它包含类别的计数器和性能对象实例数据。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 属性 (Property) 为 null。可能尚未设置该属性。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterCategoryType">
      <summary>指示性能计数器类别是否可以有多个实例。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterCategoryType.Unknown">
      <summary>性能计数器类别的实例功能未知。 </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterCategoryType.SingleInstance">
      <summary>性能计数器类别只能有一个实例。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterCategoryType.MultiInstance">
      <summary>性能计数器类别可以有多个实例。</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterInstanceLifetime">
      <summary>指定性能计数器实例的生存期。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Global">
      <summary>在没有计数器使用进程类别时，移除该性能计数器实例。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process">
      <summary>关闭进程时移除该性能计数器实例。</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterManager">
      <summary>为系统使用性能计数器时加载的 performance.dll 准备性能数据。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterManager.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.PerformanceCounterManager" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterManager.System#Diagnostics#ICollectData#CloseData">
      <summary>由 perf dll 的关闭性能数据调用</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterManager.System#Diagnostics#ICollectData#CollectData(System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr@)">
      <summary>性能数据收集例程。由 PerfCount perf dll 调用。</summary>
      <param name="callIdx">调用索引。</param>
      <param name="valueNamePtr">指向具有请求的对象标识符的 Unicode 字符串列表的指针。</param>
      <param name="dataPtr">指向数据缓冲区的指针。</param>
      <param name="totalBytes">指向若干个字节的指针。</param>
      <param name="res">此方法返回时，包含值为 -1 的 <see cref="T:System.IntPtr" />。</param>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterPermission">
      <summary>允许控制 <see cref="T:System.Diagnostics.PerformanceCounter" /> 的代码访问权限。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermission.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.PerformanceCounterPermission" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermission.#ctor(System.Diagnostics.PerformanceCounterPermissionAccess,System.String,System.String)">
      <summary>使用指定的访问级别、要使用的计算机的名称以及与性能计数器关联的类别来初始化 <see cref="T:System.Diagnostics.PerformanceCounterPermission" /> 类的新实例。</summary>
      <param name="permissionAccess">
        <see cref="T:System.Diagnostics.PerformanceCounterPermissionAccess" /> 值之一。 </param>
      <param name="machineName">性能计数器及其关联类别所驻留的服务器。 </param>
      <param name="categoryName">此性能计数器关联的性能计数器类别（性能对象）的名称。 </param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermission.#ctor(System.Diagnostics.PerformanceCounterPermissionEntry[])">
      <summary>使用指定的权限访问级别项初始化 <see cref="T:System.Diagnostics.PerformanceCounterPermission" /> 类的新实例。</summary>
      <param name="permissionAccessEntries">
        <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> 对象的数组。<see cref="P:System.Diagnostics.PerformanceCounterPermission.PermissionEntries" /> 属性被设置为该值。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="permissionAccessEntries" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>使用指定的权限状态初始化 <see cref="T:System.Diagnostics.PerformanceCounterPermission" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。 </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 参数不是有效的 <see cref="T:System.Security.Permissions.PermissionState" /> 值。 </exception>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermission.PermissionEntries">
      <summary>获取此权限请求的权限项集合。</summary>
      <returns>一个 <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntryCollection" />，它包含此权限请求的权限项。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterPermissionAccess">
      <summary>定义 <see cref="T:System.Diagnostics.PerformanceCounter" /> 权限类使用的访问级别。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterPermissionAccess.Browse">
      <summary>
        <see cref="T:System.Diagnostics.PerformanceCounter" /> 可以读取类别。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterPermissionAccess.Instrument">
      <summary>
        <see cref="T:System.Diagnostics.PerformanceCounter" /> 可以读取和写入类别。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterPermissionAccess.None">
      <summary>
        <see cref="T:System.Diagnostics.PerformanceCounter" /> 没有权限。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterPermissionAccess.Read">
      <summary>
        <see cref="T:System.Diagnostics.PerformanceCounter" /> 可以读取类别。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterPermissionAccess.Write">
      <summary>
        <see cref="T:System.Diagnostics.PerformanceCounter" /> 可以写入类别。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterPermissionAccess.Administer">
      <summary>
        <see cref="T:System.Diagnostics.PerformanceCounter" /> 可以读取、写入和创建类别。</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterPermissionAttribute">
      <summary>允许进行声明性能计数器权限检查。 </summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>初始化 <see cref="T:System.Diagnostics.PerformanceCounterPermissionAttribute" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。 </param>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionAttribute.CategoryName">
      <summary>获取或设置性能计数器类别的名称。</summary>
      <returns>性能计数器类别（性能对象）的名称。</returns>
      <exception cref="T:System.ArgumentNullException">该值为 null。 </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionAttribute.CreatePermission">
      <summary>根据请求的访问级别创建权限，这些访问级别是通过属性 (Attribute) 上的 <see cref="P:System.Diagnostics.PerformanceCounterPermissionAttribute.PermissionAccess" /> 属性 (Property) 设置的。</summary>
      <returns>一个 <see cref="T:System.Security.IPermission" />，它表示创建的权限。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionAttribute.MachineName">
      <summary>获取或设置性能计数器的计算机名称。</summary>
      <returns>性能计数器类别驻留的服务器。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Diagnostics.PerformanceCounterPermissionAttribute.MachineName" /> 格式无效。 </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionAttribute.PermissionAccess">
      <summary>获取或设置权限请求中使用的访问级别。</summary>
      <returns>
        <see cref="T:System.Diagnostics.PerformanceCounterPermissionAccess" /> 值的按位组合。默认值为 <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterPermissionEntry">
      <summary>定义为 <see cref="T:System.Diagnostics.PerformanceCounter" /> 设置的代码访问安全权限的最小单位。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntry.#ctor(System.Diagnostics.PerformanceCounterPermissionAccess,System.String,System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> 类的新实例。</summary>
      <param name="permissionAccess">
        <see cref="T:System.Diagnostics.PerformanceCounterPermissionAccess" /> 值的按位组合。<see cref="P:System.Diagnostics.PerformanceCounterPermissionEntry.PermissionAccess" /> 属性被设置为该值。 </param>
      <param name="machineName">性能计数器类别驻留的服务器。 </param>
      <param name="categoryName">此性能计数器关联的性能计数器类别（性能对象）的名称。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 为 null。- 或 -<paramref name="machineName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="permissionAccess" /> 不是有效的 <see cref="T:System.Diagnostics.PerformanceCounterPermissionAccess" /> 值。- 或 -<paramref name="machineName" /> 不是有效的计算机名称。</exception>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionEntry.CategoryName">
      <summary>获取性能计数器类别（性能对象）的名称。</summary>
      <returns>性能计数器类别（性能对象）的名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionEntry.MachineName">
      <summary>获取性能计数器的类别所驻留的服务器的名称。</summary>
      <returns>类别所驻留的服务器的名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionEntry.PermissionAccess">
      <summary>获取该项的权限访问级别。</summary>
      <returns>
        <see cref="T:System.Diagnostics.PerformanceCounterPermissionAccess" /> 值的按位组合。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterPermissionEntryCollection">
      <summary>包含 <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> 对象的强类型集合。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.Add(System.Diagnostics.PerformanceCounterPermissionEntry)">
      <summary>向此集合添加指定的 <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" />。</summary>
      <returns>所添加的 <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> 对象的从零开始的索引。</returns>
      <param name="value">要添加的 <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> 对象。 </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.AddRange(System.Diagnostics.PerformanceCounterPermissionEntry[])">
      <summary>向此集合中追加一组指定的权限项。</summary>
      <param name="value">
        <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> 类型对象的数组，它包含要添加的权限项。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.AddRange(System.Diagnostics.PerformanceCounterPermissionEntryCollection)">
      <summary>向此集合中追加一组指定的权限项。</summary>
      <param name="value">一个 <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntryCollection" />，它包含要添加的权限项。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.Contains(System.Diagnostics.PerformanceCounterPermissionEntry)">
      <summary>确定此集合是否包含指定的 <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> 对象。</summary>
      <returns>
如果指定的 <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> 对象属于此集合，则为 true；否则为 false。</returns>
      <param name="value">要查找的 <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> 对象。 </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.CopyTo(System.Diagnostics.PerformanceCounterPermissionEntry[],System.Int32)">
      <summary>将权限项从此集合复制到数组中（从数组中特定的索引开始复制）。</summary>
      <param name="array">接收该集合权限项的 <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> 类型的数组。 </param>
      <param name="index">从零开始的索引，将从此索引位置开始复制权限项。 </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.IndexOf(System.Diagnostics.PerformanceCounterPermissionEntry)">
      <summary>确定指定权限项在此集合中的索引。</summary>
      <returns>指定权限项的从零开始的索引；或者，如果集合中未找到该权限项，则为 -1。</returns>
      <param name="value">要搜索的权限项。 </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.Insert(System.Int32,System.Diagnostics.PerformanceCounterPermissionEntry)">
      <summary>将权限项插入此集合中指定的索引位置。</summary>
      <param name="index">集合的从零开始的索引，将在此索引位置插入权限项。 </param>
      <param name="value">将插入此集合中的权限项。 </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionEntryCollection.Item(System.Int32)">
      <summary>获取或设置指定索引位置的对象。</summary>
      <returns>位于指定索引位置的 <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> 对象。</returns>
      <param name="index">集合中从零开始的索引。 </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.OnClear">
      <summary>在清除此集合内容之后执行其他自定义进程。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.OnInsert(System.Int32,System.Object)">
      <summary>在将一个新的权限项插入此集合之前执行其他自定义进程。</summary>
      <param name="index">从零开始的索引，在该处插入 <paramref name="value" />。 </param>
      <param name="value">在 <paramref name="index" /> 处的权限项的新值。 </param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.OnRemove(System.Int32,System.Object)">
      <summary>当从此集合中移除一个新的权限项时执行其他自定义进程。</summary>
      <param name="index">从零开始的索引，可在该位置找到 <paramref name="value" />。 </param>
      <param name="value">要从 <paramref name="index" /> 处移除的权限项。 </param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>当在此集合中设置值之前执行其他自定义进程。</summary>
      <param name="index">从零开始的索引，可在该位置找到 <paramref name="oldValue" />。 </param>
      <param name="oldValue">要用 <paramref name="newValue" /> 替换的值。 </param>
      <param name="newValue">在 <paramref name="index" /> 处的权限项的新值。 </param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.Remove(System.Diagnostics.PerformanceCounterPermissionEntry)">
      <summary>从此集合中移除指定的权限项。</summary>
      <param name="value">要移除的权限项。 </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterType">
      <summary>为 <see cref="T:System.Diagnostics.PerformanceCounter" /> 实例指定用于计算 <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> 方法的公式。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.NumberOfItems32">
      <summary>即时计数器，它显示最近观测到的值。例如，用于维护项或操作的简单计数。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.NumberOfItems64">
      <summary>即时计数器，它显示最近观测到的值。例如，用于维护大量的项或操作的简单计数。它与 NumberOfItems32 相同，但它使用更大的字段来容纳较大的值。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX32">
      <summary>即时计数器，它以十六进制形式显示最近观测到的值。例如，用于维护项或操作的简单计数。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX64">
      <summary>即时计数器，它显示最近观测到的值。例如，用于维护大量的项或操作的简单计数。它与 NumberOfItemsHEX32 相同，但它使用更大的字段来容纳较大的值。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond32">
      <summary>差异计数器，它显示在取样间隔的每一秒内完成的操作的平均数目。这种类型的计数器用系统时钟的滴答 (Tick) 来测量时间。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond64">
      <summary>差异计数器，它显示在取样间隔的每一秒内完成的操作的平均数目。这种类型的计数器用系统时钟的滴答 (Tick) 来测量时间。此计数器类型与 RateOfCountsPerSecond32 类型相同，但它使用更大的字段来容纳较大的值，以跟踪每秒内的大量项数或操作数（如字节传输速率）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CountPerTimeInterval32">
      <summary>平均计数器，旨在监视一段时间内资源队列的平均长度。它显示在最近两个取样时间间隔内观测到的队列长度分别除以间隔时间后的差值。此类型的计数器通常用于跟踪排队或等候的项数。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CountPerTimeInterval64">
      <summary>平均值计数器，它监视一段时间内资源队列的平均长度。这种类型的计数器显示在最近两个取样间隔内观测到的队列长度分别除以间隔时间后的差值。此计数器类型与 CountPerTimeInterval32 相同，但它使用更大的字段来容纳较大的值。此类型的计数器通常用于跟踪排队或等候的大量项。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.RawFraction">
      <summary>即时百分比计数器，它以百分比的形式显示子集与其父集的比率。例如，它将磁盘上使用的字节数与该磁盘上的总字节数进行比较。这种类型的计数器只显示当前百分比，而不显示一段时间的平均值。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.RawBase">
      <summary>基本计数器，它存储表示常规算术分数的计数器的分母。检查以确保此值大于零，然后将它用作 RawFraction 值计算中的分母。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.AverageTimer32">
      <summary>平均计数器，它测量完成某个进程或操作平均所花费的时间。这种类型的计数器显示取样时间间隔的总运行时间与该时间内完成的进程或操作数的比率。此计数器类型用系统时钟的滴答来测量时间。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.AverageBase">
      <summary>在时间或计数的平均值计算中使用的基本计数器（如 AverageTimer32 和 AverageCount64）。存储用于计算表示“每个操作的时间”或“每个操作的计数”的计数器的分母。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.AverageCount64">
      <summary>平均计数器，它显示一次操作中平均处理的项数。这种类型的计数器显示已处理的项与已完成的操作数的比率。计算该比率的方法是将上一个时间间隔内处理的项数与上一个时间间隔内完成的操作数进行比较。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.SampleFraction">
      <summary>百分比计数器，它显示最近两个取样时间间隔内的命中与所有操作的平均比率。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.SampleCounter">
      <summary>平均计数器，它显示一秒内完成的平均操作数。当这种类型的计数器对数据进行取样时，每个取样中断返回一或零。该计数器数据是取样的个数。它以系统性能计时器的滴答为单位来测量时间。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.SampleBase">
      <summary>基本计数器，它存储获取的取样中断数，并在样本分数中用作分母。样本分数是取样中断的值为 1（或 true）的样本数。检查以确保此值大于零，然后再将它用作 SampleFraction 计算中的分母。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterTimer">
      <summary>百分比计数器，它以总取样时间的百分比形式显示组件处于活动状态的平均时间。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterTimerInverse">
      <summary>百分比计数器，它显示在取样时间间隔内观测到的活动时间的平均百分比。计算这些计数器值的方法是监视服务处于非活动状态的时间百分比，然后从 100% 中减去该值。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.Timer100Ns">
      <summary>百分比计数器，它以取样时间间隔的总运行时间的百分比形式显示组件的活动时间。它以 100 毫微秒 (ns) 为单位来测量时间。这种类型的计数器旨在一次测量一个组件的活动。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.Timer100NsInverse">
      <summary>百分比计数器，它显示取样时间间隔内观测到的活动时间的平均百分比。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.ElapsedTime">
      <summary>差异计时器，它显示组件或进程的开始时间与该值的计算时间之间的总时间。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterMultiTimer">
      <summary>百分比计数器，它以取样间隔总时间百分比的形式显示一个或多个组件的活动时间。由于分子记录的是同时操作的组件的活动时间，因此最终的百分比可以超过 100%。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterMultiTimerInverse">
      <summary>百分比计数器，它以取样间隔总时间百分比的形式显示一个或多个组件的活动时间。它推导活动时间的方法是测量组件处于非活动状态的时间，然后从受监视的对象乘以 100% 中减去该结果。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterMultiTimer100Ns">
      <summary>百分比计数器，它以取样间隔总时间百分比的形式显示一个或多个组件的活动时间。它以 100 毫微秒 (ns) 为单位来测量时间。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterMultiTimer100NsInverse">
      <summary>百分比计数器，它以取样间隔总时间百分比的形式显示一个或多个组件的活动时间。这种类型的计数器以 100 毫微秒 (ns) 为单位来测量时间。它们推导活动时间的方法是测量组件处于非活动状态的时间，然后从受监视的对象数乘以 100% 中减去该结果。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterMultiBase">
      <summary>基本计数器，它指示已取样的项数。它在计算中用作分母，以在获取多个相似项的计时时间时获取已取样项的平均数。与 CounterMultiTimer、CounterMultiTimerInverse、CounterMultiTimer100Ns 和 CounterMultiTimer100NsInverse 一起使用。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterDelta32">
      <summary>差异计数器，它显示在最近的两个取样间隔内已测量属性的更改。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterDelta64">
      <summary>差异计数器，它显示在最近的两个取样间隔内已测量属性的更改。它与 CounterDelta32 计数器类型相同，但它使用更大的字段来容纳较大的值。</summary>
    </member>
    <member name="T:System.Diagnostics.Process">
      <summary>提供对本地和远程进程的访问并使您能够启动和停止本地系统进程。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Process.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.Process" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Diagnostics.Process.BasePriority">
      <summary>获取关联进程的基本优先级。</summary>
      <returns>基本优先级，它从关联进程的 <see cref="P:System.Diagnostics.Process.PriorityClass" /> 计算。</returns>
      <exception cref="T:System.PlatformNotSupportedException">该平台为 Windows 98 或 Windows Millennium Edition (Windows Me)；如果将 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 属性设置为 false，则可以在 Windows 98 和 Windows Me 上访问此属性。</exception>
      <exception cref="T:System.InvalidOperationException">该进程已经退出。- 或 -该进程尚未启动，所以没有进程 ID。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Process.BeginErrorReadLine">
      <summary>在应用程序的重定向 <see cref="P:System.Diagnostics.Process.StandardError" /> 流上开始进行异步读取操作。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> 属性为 false。- 或 -异步读取操作正在 <see cref="P:System.Diagnostics.Process.StandardError" /> 流上进行。- 或 -<see cref="P:System.Diagnostics.Process.StandardError" /> 流已由同步读取操作使用。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Process.BeginOutputReadLine">
      <summary>在应用程序的重定向 <see cref="P:System.Diagnostics.Process.StandardOutput" /> 流上开始异步读取操作。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" /> 属性为 false。- 或 -异步读取操作正在 <see cref="P:System.Diagnostics.Process.StandardOutput" /> 流上进行。- 或 -<see cref="P:System.Diagnostics.Process.StandardOutput" /> 流已由同步读操取作使用。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Process.CancelErrorRead">
      <summary>取消在应用程序的重定向 <see cref="P:System.Diagnostics.Process.StandardError" /> 流上执行的异步读取操作。</summary>
      <exception cref="T:System.InvalidOperationException">没有为异步读取操作启用 <see cref="P:System.Diagnostics.Process.StandardError" /> 流。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Process.CancelOutputRead">
      <summary>取消在应用程序的重定向 <see cref="P:System.Diagnostics.Process.StandardOutput" /> 流上的异步读取操作。</summary>
      <exception cref="T:System.InvalidOperationException">没有为异步读取操作启用 <see cref="P:System.Diagnostics.Process.StandardOutput" /> 流。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Process.Close">
      <summary>释放与此组件关联的所有资源。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Process.CloseMainWindow">
      <summary>通过向进程的主窗口发送关闭消息来关闭拥有用户界面的进程。</summary>
      <returns>
            如果成功发送了关闭消息，则为 true；如果关联进程没有主窗口或禁用了主窗口（例如，如果当前显示模式对话框），则为 false。</returns>
      <exception cref="T:System.PlatformNotSupportedException">该平台为 Windows 98 或 Windows Millennium Edition (Windows Me)；如果将 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 属性设置为 false，则可以在 Windows 98 和 Windows Me 上访问此属性。</exception>
      <exception cref="T:System.InvalidOperationException">该进程已经退出。- 或 -没有与此 <see cref="T:System.Diagnostics.Process" /> 对象关联的进程。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Process.Dispose(System.Boolean)">
      <summary>释放此进程使用的所有资源。</summary>
      <param name="disposing">
                如果为 true，则释放托管资源和非托管资源；如果为 false，则仅释放非托管资源。</param>
    </member>
    <member name="P:System.Diagnostics.Process.EnableRaisingEvents">
      <summary>获取或设置在进程终止时是否应激发 <see cref="E:System.Diagnostics.Process.Exited" /> 事件。</summary>
      <returns>
            如果关联的进程终止（通过退出或者调用 <see cref="M:System.Diagnostics.Process.Kill" />）时应引发 <see cref="E:System.Diagnostics.Process.Exited" /> 事件，则为 true；否则为 false。默认值为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Process.EnterDebugMode">
      <summary>通过启用当前线程的本机属性 SeDebugPrivilege，将 <see cref="T:System.Diagnostics.Process" /> 组件置于与以特殊模式运行的操作系统进程交互的状态。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Diagnostics.Process.ErrorDataReceived">
      <summary>当应用程序写入其重定向 <see cref="P:System.Diagnostics.Process.StandardError" /> 流中时发生。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.ExitCode">
      <summary>获取关联进程终止时指定的值。</summary>
      <returns>关联进程在终止时指定的代码。</returns>
      <exception cref="T:System.InvalidOperationException">该进程尚未退出。- 或 -进程 <see cref="P:System.Diagnostics.Process.Handle" /> 无效。</exception>
      <exception cref="T:System.NotSupportedException">您试图访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.ExitCode" /> 属性。该属性仅对本地计算机上运行的进程可用。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="E:System.Diagnostics.Process.Exited">
      <summary>在进程退出时发生。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.ExitTime">
      <summary>获取关联进程退出的时间。</summary>
      <returns>
        <see cref="T:System.DateTime" />，它指示关联进程终止的时间。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此平台为 Windows 98 或 Windows Millennium Edition (Windows Me)，它不支持此属性。</exception>
      <exception cref="T:System.NotSupportedException">您试图访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.ExitTime" /> 属性。该属性仅对本地计算机上运行的进程可用。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Process.GetCurrentProcess">
      <summary>获取新的 <see cref="T:System.Diagnostics.Process" /> 组件并将其与当前活动的进程关联。</summary>
      <returns>与运行调用应用程序的进程资源关联的新的 <see cref="T:System.Diagnostics.Process" /> 组件。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Process.GetProcessById(System.Int32)">
      <summary>返回新的 <see cref="T:System.Diagnostics.Process" /> 组件（给定本地计算机上某个进程的标识符）。</summary>
      <returns>一个 <see cref="T:System.Diagnostics.Process" /> 组件，它与 <paramref name="processId" /> 参数标识的本地进程资源关联。</returns>
      <param name="processId">进程资源的系统唯一标识符。</param>
      <exception cref="T:System.ArgumentException">当前未运行 <paramref name="processId" /> 参数所指定的进程。该标识符可能已过期。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)">
      <summary>返回新的 <see cref="T:System.Diagnostics.Process" /> 组件（给定进程标识符和网络中计算机的名称）。</summary>
      <returns>一个 <see cref="T:System.Diagnostics.Process" /> 组件，它与 <paramref name="processId" /> 参数标识的远程进程资源关联。</returns>
      <param name="processId">进程资源的系统唯一标识符。</param>
      <param name="machineName">网络上计算机的名称。</param>
      <exception cref="T:System.ArgumentException">当前未运行 <paramref name="processId" /> 参数所指定的进程。该标识符可能已过期。- 或 -<paramref name="machineName" /> 参数语法无效。该名称的长度可能为零 (0)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="machineName" /> 参数为 null。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Process.GetProcesses">
      <summary>为本地计算机上的每个进程资源创建一个新的 <see cref="T:System.Diagnostics.Process" /> 组件。</summary>
      <returns>
        <see cref="T:System.Diagnostics.Process" /> 类型的数组，它表示本地计算机上运行的所有进程资源。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Process.GetProcesses(System.String)">
      <summary>为指定计算机上的每个进程资源创建一个新的 <see cref="T:System.Diagnostics.Process" /> 组件。</summary>
      <returns>
        <see cref="T:System.Diagnostics.Process" /> 类型的数组，它表示指定计算机上运行的所有进程资源。</returns>
      <param name="machineName">从其读取进程列表的计算机。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="machineName" /> 参数语法无效。它的长度可能为零 (0)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="machineName" /> 参数为 null。</exception>
      <exception cref="T:System.PlatformNotSupportedException">操作系统平台不支持在远程计算机上执行此操作。</exception>
      <exception cref="T:System.InvalidOperationException">当访问用于获取进程信息的性能计数器 API 时有问题。此异常特定于 Windows NT、Windows 2000 和 Windows XP。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">访问基础系统 API 时发生了问题。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Process.GetProcessesByName(System.String)">
      <summary>创建新的 <see cref="T:System.Diagnostics.Process" /> 组件的数组，并将它们与本地计算机上共享指定的进程名称的所有进程资源关联。</summary>
      <returns>
        <see cref="T:System.Diagnostics.Process" /> 类型的数组，它表示运行指定应用程序或文件的进程资源。</returns>
      <param name="processName">该进程的友好名称。</param>
      <exception cref="T:System.InvalidOperationException">当访问用于获取进程信息的性能计数器 API 时有问题。此异常特定于 Windows NT、Windows 2000 和 Windows XP。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)">
      <summary>创建新的 <see cref="T:System.Diagnostics.Process" /> 组件的数组，并将它们与远程计算机上共享指定进程名称的所有进程资源关联。</summary>
      <returns>
        <see cref="T:System.Diagnostics.Process" /> 类型的数组，它表示运行指定应用程序或文件的进程资源。</returns>
      <param name="processName">该进程的友好名称。</param>
      <param name="machineName">网络上计算机的名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="machineName" /> 参数语法无效。它的长度可能为零 (0)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="machineName" /> 参数为 null。</exception>
      <exception cref="T:System.PlatformNotSupportedException">操作系统平台不支持在远程计算机上执行此操作。</exception>
      <exception cref="T:System.InvalidOperationException">当访问用于获取进程信息的性能计数器 API 时有问题。此异常特定于 Windows NT、Windows 2000 和 Windows XP。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">访问基础系统 API 时发生了问题。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.Handle">
      <summary>获取关联进程的本机句柄。</summary>
      <returns>进程启动时操作系统向关联进程分配的句柄。系统使用此句柄来跟踪进程属性。</returns>
      <exception cref="T:System.InvalidOperationException">该进程尚未启动。不能读取 <see cref="P:System.Diagnostics.Process.Handle" /> 属性，因为没有与此 <see cref="T:System.Diagnostics.Process" /> 实例关联的进程。- 或 -<see cref="T:System.Diagnostics.Process" /> 实例已附加到正在运行的进程，但您没有获取具有完全访问权限的句柄所需的权限。</exception>
      <exception cref="T:System.NotSupportedException">您试图访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.Handle" /> 属性。该属性仅对本地计算机上运行的进程可用。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.HandleCount">
      <summary>获取由进程打开的句柄数。</summary>
      <returns>进程打开的操作系统句柄数。</returns>
      <exception cref="T:System.PlatformNotSupportedException">该平台为 Windows 98 或 Windows Millennium Edition (Windows Me)；如果将 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 属性设置为 false，则可以在 Windows 98 和 Windows Me 上访问此属性。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.HasExited">
      <summary>获取指示关联进程是否已终止的值。</summary>
      <returns>
            如果 <see cref="T:System.Diagnostics.Process" /> 组件引用的操作系统进程已终止，则为 true；否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">没有与该对象关联的进程。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">未能检索进程的退出代码。</exception>
      <exception cref="T:System.NotSupportedException">您试图访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.HasExited" /> 属性。该属性仅对本地计算机上运行的进程可用。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.Id">
      <summary>获取关联进程的唯一标识符。</summary>
      <returns>此 <see cref="T:System.Diagnostics.Process" /> 实例引用的、由系统生成的进程的唯一标识符。</returns>
      <exception cref="T:System.InvalidOperationException">尚未设置进程的 <see cref="P:System.Diagnostics.Process.Id" /> 属性。- 或 -没有与此 <see cref="T:System.Diagnostics.Process" /> 对象关联的进程。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台为 Windows 98 或 Windows Millennium Edition (Windows Me)；如果将 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 属性设置为 false，则可以在 Windows 98 和 Windows Me 上访问此属性。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Process.Kill">
      <summary>立即停止关联的进程。</summary>
      <exception cref="T:System.ComponentModel.Win32Exception">未能终止关联的进程。- 或 -正在终止该进程。- 或 -关联的进程是一个 Win16 可执行文件。</exception>
      <exception cref="T:System.NotSupportedException">您正试图为远程计算机上运行的进程调用 <see cref="M:System.Diagnostics.Process.Kill" />。该方法仅对在本地计算机上运行的进程可用。</exception>
      <exception cref="T:System.InvalidOperationException">该进程已经退出。- 或 -没有与此 <see cref="T:System.Diagnostics.Process" /> 对象关联的进程。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Process.LeaveDebugMode">
      <summary>使 <see cref="T:System.Diagnostics.Process" /> 组件离开允许它与以特殊模式运行的操作系统进程交互的状态。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.MachineName">
      <summary>获取关联进程正在其上运行的计算机的名称。</summary>
      <returns>关联进程正在其上运行的计算机的名称。</returns>
      <exception cref="T:System.InvalidOperationException">没有与此 <see cref="T:System.Diagnostics.Process" /> 对象关联的进程。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.MainModule">
      <summary>获取关联进程的主模块。</summary>
      <returns>用于启动进程的 <see cref="T:System.Diagnostics.ProcessModule" />。</returns>
      <exception cref="T:System.NotSupportedException">您试图访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.MainModule" /> 属性。该属性仅对本地计算机上运行的进程可用。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台为 Windows 98 或 Windows Millennium Edition (Windows Me)；如果将 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 设置为 false，则可以在 Windows 98 和 Windows Me 上访问此属性。</exception>
      <exception cref="T:System.InvalidOperationException">进程 <see cref="P:System.Diagnostics.Process.Id" /> 不可用。- 或 -该进程已经退出。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.MainWindowHandle">
      <summary>获取关联进程主窗口的窗口句柄。</summary>
      <returns>系统生成的、关联进程主窗口的窗口句柄。</returns>
      <exception cref="T:System.InvalidOperationException">未定义 <see cref="P:System.Diagnostics.Process.MainWindowHandle" />，因为进程已退出。</exception>
      <exception cref="T:System.NotSupportedException">您试图访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.MainWindowHandle" /> 属性。该属性仅对本地计算机上运行的进程可用。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台为 Windows 98 或 Windows Millennium Edition (Windows Me)；如果将 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 设置为 false，则可以在 Windows 98 和 Windows Me 上访问此属性。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.MainWindowTitle">
      <summary>获取进程的主窗口标题。</summary>
      <returns>进程的主窗口标题。</returns>
      <exception cref="T:System.PlatformNotSupportedException">该平台为 Windows 98 或 Windows Millennium Edition (Windows Me)；如果将 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 设置为 false，则可以在 Windows 98 和 Windows Me 上访问此属性。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.MaxWorkingSet">
      <summary>获取或设置关联进程的允许的最大工作集大小。</summary>
      <returns>内存中允许的进程的最大工作集大小（以字节为单位）。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">无法从关联的进程资源检索到工作集信息。- 或 -由于该进程没有启动，因此进程标识符或进程句柄为零。</exception>
      <exception cref="T:System.NotSupportedException">您试图访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.MaxWorkingSet" /> 属性。该属性仅对本地计算机上运行的进程可用。</exception>
      <exception cref="T:System.InvalidOperationException">进程 <see cref="P:System.Diagnostics.Process.Id" /> 不可用。- 或 -该进程已经退出。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此平台为 Windows 98 或 Windows Millennium Edition (Windows Me)，它不支持此属性。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.MinWorkingSet">
      <summary>获取或设置关联进程的允许的最小工作集大小。</summary>
      <returns>内存中进程所需的最小工作集大小（以字节为单位）。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">无法从关联的进程资源检索到工作集信息。- 或 -由于该进程没有启动，因此进程标识符或进程句柄为零。</exception>
      <exception cref="T:System.NotSupportedException">您试图访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.MinWorkingSet" /> 属性。该属性仅对本地计算机上运行的进程可用。</exception>
      <exception cref="T:System.InvalidOperationException">进程 <see cref="P:System.Diagnostics.Process.Id" /> 不可用。- 或 -该进程已经退出。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此平台为 Windows 98 或 Windows Millennium Edition (Windows Me)，它不支持此属性。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.Modules">
      <summary>获取已由关联进程加载的模块。</summary>
      <returns>
        <see cref="T:System.Diagnostics.ProcessModule" /> 类型的数组，它表示已由关联进程加载的模块。</returns>
      <exception cref="T:System.NotSupportedException">您正在试图访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.Modules" /> 属性。该属性仅对本地计算机上运行的进程可用。</exception>
      <exception cref="T:System.InvalidOperationException">进程 <see cref="P:System.Diagnostics.Process.Id" /> 不可用。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台为 Windows 98 或 Windows Millennium Edition (Windows Me)；如果将 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 设置为 false，则可以在 Windows 98 和 Windows Me 上访问此属性。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">您试图访问系统进程或 Idle 进程的 <see cref="P:System.Diagnostics.Process.Modules" /> 属性。这些进程没有模块。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.NonpagedSystemMemorySize">
      <summary>获取分配给此进程的未分页的系统内存大小。</summary>
      <returns>系统为关联进程分配的、不能写入虚拟内存页面文件的内存量。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此平台为 Windows 98 或 Windows Millennium Edition (Windows Me)，它不支持此属性。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.NonpagedSystemMemorySize64">
      <summary>获取为关联的进程分配的非分页系统内存量。</summary>
      <returns>为关联的进程分配的、不能写入虚拟内存分页文件中的系统内存量（以字节为单位）。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此平台为 Windows 98 或 Windows Millennium Edition (Windows Me)，它不支持此属性。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Process.OnExited">
      <summary>引发 <see cref="E:System.Diagnostics.Process.Exited" /> 事件。</summary>
    </member>
    <member name="E:System.Diagnostics.Process.OutputDataReceived">
      <summary>当应用程序写入其重定向 <see cref="P:System.Diagnostics.Process.StandardOutput" /> 流中时发生。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.PagedMemorySize">
      <summary>获取分页的内存大小。</summary>
      <returns>关联进程分配的、可以写入虚拟内存页面文件的内存量。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此平台为 Windows 98 或 Windows Millennium Edition (Windows Me)，它不支持此属性。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.PagedMemorySize64">
      <summary>获取为关联的进程分配的分页内存量。</summary>
      <returns>为关联的进程在虚拟内存分页文件中分配的内存量（以字节为单位）。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此平台为 Windows 98 或 Windows Millennium Edition (Windows Me)，它不支持此属性。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.PagedSystemMemorySize">
      <summary>获取分页的系统内存大小。</summary>
      <returns>系统为关联进程分配的、可以写入虚拟内存页面文件的内存量。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此平台为 Windows 98 或 Windows Millennium Edition (Windows Me)，它不支持此属性。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.PagedSystemMemorySize64">
      <summary>获取为关联的进程分配的可分页系统内存量。</summary>
      <returns>为关联的进程分配的可写入虚拟内存分页文件中的系统内存量（以字节为单位）。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此平台为 Windows 98 或 Windows Millennium Edition (Windows Me)，它不支持此属性。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.PeakPagedMemorySize">
      <summary>获取峰值分页内存大小。</summary>
      <returns>关联进程分配的、可以写入虚拟内存页面文件的最大内存量。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此平台为 Windows 98 或 Windows Millennium Edition (Windows Me)，它不支持此属性。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.PeakPagedMemorySize64">
      <summary>获取关联的进程使用的虚拟内存分页文件中的最大内存量。</summary>
      <returns>自启动关联的进程以来为关联进程分配的虚拟内存分页文件中的最大内存量（以字节为单位）。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此平台为 Windows 98 或 Windows Millennium Edition (Windows Me)，它不支持此属性。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.PeakVirtualMemorySize">
      <summary>获取峰值虚拟内存大小。</summary>
      <returns>关联进程请求的最大虚拟内存量。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此平台为 Windows 98 或 Windows Millennium Edition (Windows Me)，它不支持此属性。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.PeakVirtualMemorySize64">
      <summary>获取关联的进程使用的最大虚拟内存量。</summary>
      <returns>自关联的进程启动以来为关联的进程分配的最大虚拟内存量（以字节为单位）。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此平台为 Windows 98 或 Windows Millennium Edition (Windows Me)，它不支持此属性。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.PeakWorkingSet">
      <summary>获取关联进程的峰值工作集大小。</summary>
      <returns>关联进程一次所需的最大物理内存量（以字节为单位）。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此平台为 Windows 98 或 Windows Millennium Edition (Windows Me)，它不支持此属性。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.PeakWorkingSet64">
      <summary>获取关联的进程使用的最大物理内存量。</summary>
      <returns>自启动关联的进程以来为关联的进程分配的最大物理内存量（以字节为单位）。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此平台为 Windows 98 或 Windows Millennium Edition (Windows Me)，它不支持此属性。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.PriorityBoostEnabled">
      <summary>获取或设置一个值，该值指示主窗口拥有焦点时是否由操作系统暂时提升关联进程的优先级。</summary>
      <returns>
            如果进程离开等待状态时应动态提升进程优先级，则为 true；否则为 false。默认值为 false。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">未能从关联的进程资源检索到优先级提升信息。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此平台为 Windows 98 或 Windows Millennium Edition (Windows Me)，它不支持此属性。- 或 -进程标识符或进程句柄为零。（该进程尚未启动。）</exception>
      <exception cref="T:System.NotSupportedException">您正在试图访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.PriorityBoostEnabled" /> 属性。该属性仅对本地计算机上运行的进程可用。</exception>
      <exception cref="T:System.InvalidOperationException">进程 <see cref="P:System.Diagnostics.Process.Id" /> 不可用。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.PriorityClass">
      <summary>获取或设置关联进程的总体优先级类别。</summary>
      <returns>关联进程的优先级类别，可从该类别计算进程的 <see cref="P:System.Diagnostics.Process.BasePriority" />。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">不能从关联的进程资源设置或检索进程优先级信息。- 或 -进程标识符或进程句柄为零。（该进程尚未启动。）</exception>
      <exception cref="T:System.NotSupportedException">您正在试图访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.PriorityClass" /> 属性。该属性仅对本地计算机上运行的进程可用。</exception>
      <exception cref="T:System.InvalidOperationException">进程 <see cref="P:System.Diagnostics.Process.Id" /> 不可用。</exception>
      <exception cref="T:System.PlatformNotSupportedException">使用 Windows 98 或 Windows Millennium Edition (Windows Me) 时，已将 <see cref="P:System.Diagnostics.Process.PriorityClass" /> 设置为 AboveNormal 或 BelowNormal。这些平台不支持优先级类的那些值。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">无法设置优先级类，因为使用的不是 <see cref="T:System.Diagnostics.ProcessPriorityClass" /> 枚举中定义的有效值。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.PrivateMemorySize">
      <summary>获取专用内存大小。</summary>
      <returns>由关联的进程分配的、不能与其他进程共享的字节数。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此平台为 Windows 98 或 Windows Millennium Edition (Windows Me)，它不支持此属性。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.PrivateMemorySize64">
      <summary>获取为关联的进程分配的专用内存量。</summary>
      <returns>为关联的进程分配的不能与其他进程共享的内存量（以字节为单位）。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此平台为 Windows 98 或 Windows Millennium Edition (Windows Me)，它不支持此属性。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.PrivilegedProcessorTime">
      <summary>获取此进程的特权处理器时间。</summary>
      <returns>
        <see cref="T:System.TimeSpan" />，它指示进程在操作系统内核中运行代码所用的时间。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此平台为 Windows 98 或 Windows Millennium Edition (Windows Me)，它不支持此属性。</exception>
      <exception cref="T:System.NotSupportedException">您正在试图访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.PrivilegedProcessorTime" /> 属性。该属性仅对本地计算机上运行的进程可用。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.ProcessName">
      <summary>获取该进程的名称。</summary>
      <returns>系统用以向用户标识该进程的名称。</returns>
      <exception cref="T:System.SystemException">该进程没有标识符，或者没有与 <see cref="T:System.Diagnostics.Process" /> 实例关联的进程。- 或 -关联进程已经退出。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台为 Windows 98 或 Windows Millennium Edition (Windows Me)；如果将 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 设置为 false，则可以在 Windows 98 和 Windows Me 上访问此属性。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.ProcessorAffinity">
      <summary>获取或设置一些处理器，此进程中的线程可以按计划在这些处理器上运行。</summary>
      <returns>位掩码，表示关联进程内的线程可以在其上运行的处理器。默认值取决于计算机上的处理器数。默认值为 2 n -1，其中 n 是处理器数。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">
                未能从关联的进程资源设置或检索 <see cref="P:System.Diagnostics.Process.ProcessorAffinity" /> 信息。- 或 -进程标识符或进程句柄为零。（该进程尚未启动。）</exception>
      <exception cref="T:System.NotSupportedException">您正在试图访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.ProcessorAffinity" /> 属性。该属性仅对本地计算机上运行的进程可用。</exception>
      <exception cref="T:System.InvalidOperationException">进程 <see cref="P:System.Diagnostics.Process.Id" /> 不可用。- 或 -该进程已经退出。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Process.Refresh">
      <summary>放弃有关关联进程的、已缓存到该进程组件内的任何信息。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.Responding">
      <summary>获取指示进程的用户界面当前是否响应的值。</summary>
      <returns>
            如果关联进程的用户界面当前响应系统，则为 true；否则为 false。</returns>
      <exception cref="T:System.PlatformNotSupportedException">该平台为 Windows 98 或 Windows Millennium Edition (Windows Me)；如果将 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 设置为 false，则可以在 Windows 98 和 Windows Me 上访问此属性。</exception>
      <exception cref="T:System.InvalidOperationException">没有与此 <see cref="T:System.Diagnostics.Process" /> 对象关联的进程。</exception>
      <exception cref="T:System.NotSupportedException">您正在试图访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.Responding" /> 属性。该属性仅对本地计算机上运行的进程可用。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.SessionId">
      <summary>获取关联的进程的终端服务会话标识符。</summary>
      <returns>关联的进程的终端服务会话标识符。</returns>
      <exception cref="T:System.InvalidOperationException">没有与此会话标识符关联的进程。- 或 -关联的进程不在此计算机上。</exception>
      <exception cref="T:System.PlatformNotSupportedException">Windows 98 上不支持 <see cref="P:System.Diagnostics.Process.SessionId" /> 属性。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.StandardError">
      <summary>获取用于读取应用程序错误输出的流。</summary>
      <returns>一个 <see cref="T:System.IO.StreamReader" />，可用于读取应用程序的标准错误流。</returns>
      <exception cref="T:System.InvalidOperationException">尚未定义 <see cref="P:System.Diagnostics.Process.StandardError" /> 流以进行重定向；请确保将 <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> 设置为 true，将 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 设置为 false。- 或 -已打开 <see cref="P:System.Diagnostics.Process.StandardError" /> 流，以便通过 <see cref="M:System.Diagnostics.Process.BeginErrorReadLine" /> 进行异步读取操作。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.StandardInput">
      <summary>获取用于写入应用程序输入的流。</summary>
      <returns>
        <see cref="T:System.IO.StreamWriter" />，可用于写入应用程序的标准输入流。</returns>
      <exception cref="T:System.InvalidOperationException">由于 <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" /> 设置为 false，因此尚未定义 <see cref="P:System.Diagnostics.Process.StandardInput" /> 流。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.StandardOutput">
      <summary>获取用于读取应用程序输出的流。</summary>
      <returns>
        <see cref="T:System.IO.StreamReader" />，可用于读取应用程序的标准输出流。</returns>
      <exception cref="T:System.InvalidOperationException">尚未定义 <see cref="P:System.Diagnostics.Process.StandardOutput" /> 流以进行重定向；请确保将 <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" /> 设置为 true，并将 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 设置为 false。- 或 -已打开 <see cref="P:System.Diagnostics.Process.StandardOutput" /> 流，以便通过 <see cref="M:System.Diagnostics.Process.BeginOutputReadLine" /> 进行异步读取操作。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Process.Start">
      <summary>启动（或重用）此 <see cref="T:System.Diagnostics.Process" /> 组件的 <see cref="P:System.Diagnostics.Process.StartInfo" /> 属性指定的进程资源，并将其与该组件关联。</summary>
      <returns>
            如果启动了进程资源，则为 true；如果没有启动新的进程资源（例如，如果重用了现有进程），则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">在 <see cref="T:System.Diagnostics.Process" /> 组件的 <see cref="P:System.Diagnostics.Process.StartInfo" /> 中未指定文件名。- 或 -<see cref="P:System.Diagnostics.Process.StartInfo" /> 属性的 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 成员为 true，而 <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" />、<see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" /> 或 <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> 为 true。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">打开关联的文件时发生了错误。</exception>
      <exception cref="T:System.ObjectDisposedException">该进程对象已被释放。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
      <summary>启动由包含进程启动信息（例如，要启动的进程的文件名）的参数指定的进程资源，并将该资源与新的 <see cref="T:System.Diagnostics.Process" /> 组件关联。</summary>
      <returns>与进程资源关联的新的 <see cref="T:System.Diagnostics.Process" /> 组件，或者如果没有启动进程资源（例如，如果重用了现有进程），则为 null。</returns>
      <param name="startInfo">
        <see cref="T:System.Diagnostics.ProcessStartInfo" />，包含用于启动进程的信息（包括文件名和任何命令行参数）。</param>
      <exception cref="T:System.InvalidOperationException">在 <paramref name="startInfo" /> 参数的 <see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /> 属性中未指定任何文件名。- 或 -<paramref name="startInfo" /> 参数的 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 属性为 true，而 <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" />、<see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" /> 或 <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> 属性也为 true。- 或 -<paramref name="startInfo" /> 参数的 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 属性为 true，而 <see cref="P:System.Diagnostics.ProcessStartInfo.UserName" /> 属性不为 null 或空，或者 <see cref="P:System.Diagnostics.ProcessStartInfo.Password" /> 属性不为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="startInfo" /> 参数为 null。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">打开关联的文件时发生了错误。</exception>
      <exception cref="T:System.ObjectDisposedException">该进程对象已被释放。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Process.Start(System.String)">
      <summary>通过指定文档或应用程序文件的名称来启动进程资源，并将资源与新的 <see cref="T:System.Diagnostics.Process" /> 组件关联。</summary>
      <returns>与进程资源关联的新的 <see cref="T:System.Diagnostics.Process" /> 组件，或者如果没有启动进程资源（例如，如果重用了现有进程），则为 null。</returns>
      <param name="fileName">要在进程中运行的文档或应用程序文件的名称。</param>
      <exception cref="T:System.ComponentModel.Win32Exception">打开关联的文件时发生了错误。</exception>
      <exception cref="T:System.ObjectDisposedException">该进程对象已被释放。</exception>
      <exception cref="T:System.IO.FileNotFoundException">PATH 环境变量有包含引号的字符串。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Process.Start(System.String,System.String)">
      <summary>通过指定应用程序的名称和一组命令行参数来启动一个进程资源，并将该资源与新的 <see cref="T:System.Diagnostics.Process" /> 组件相关联。</summary>
      <returns>与该进程关联的新的 <see cref="T:System.Diagnostics.Process" /> 组件，或者如果没有启动进程资源（例如，如果重用了现有进程），则为 null。</returns>
      <param name="fileName">要在该进程中运行的应用程序文件的名称。</param>
      <param name="arguments">启动该进程时传递的命令行实参。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="fileName" /> 或 <paramref name="arguments" /> 参数为 null。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">打开关联的文件时发生了错误。</exception>
      <exception cref="T:System.ObjectDisposedException">该进程对象已被释放。</exception>
      <exception cref="T:System.IO.FileNotFoundException">PATH 环境变量有包含引号的字符串。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)">
      <summary>通过指定应用程序的名称、用户名、密码和域来启动一个进程资源，并将该资源与新的 <see cref="T:System.Diagnostics.Process" /> 组件关联起来。</summary>
      <returns>与进程资源关联的新的 <see cref="T:System.Diagnostics.Process" /> 组件，或者如果没有启动进程资源（例如，如果重用了现有进程），则为 null。</returns>
      <param name="fileName">要在该进程中运行的应用程序文件的名称。</param>
      <param name="userName">启动进程时使用的用户名。</param>
      <param name="password">一个 <see cref="T:System.Security.SecureString" />，它包含启动进程时要使用的密码。</param>
      <param name="domain">启动进程时要使用的域。</param>
      <exception cref="T:System.InvalidOperationException">未指定文件名。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">
        <paramref name="fileName" /> 不是可执行 (.exe) 文件。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">打开关联的文件时发生了错误。</exception>
      <exception cref="T:System.ObjectDisposedException">该进程对象已被释放。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)">
      <summary>通过指定应用程序的名称、一组命令行参数、用户名、密码和域来启动一个进程资源，并将该资源与新的 <see cref="T:System.Diagnostics.Process" /> 组件关联起来。</summary>
      <returns>与进程资源关联的新的 <see cref="T:System.Diagnostics.Process" /> 组件，或者如果没有启动进程资源（例如，如果重用了现有进程），则为 null。</returns>
      <param name="fileName">要在该进程中运行的应用程序文件的名称。</param>
      <param name="arguments">启动该进程时传递的命令行实参。</param>
      <param name="userName">启动进程时使用的用户名。</param>
      <param name="password">一个 <see cref="T:System.Security.SecureString" />，它包含启动进程时要使用的密码。</param>
      <param name="domain">启动进程时要使用的域。</param>
      <exception cref="T:System.InvalidOperationException">未指定文件名。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">
        <paramref name="fileName" /> 不是可执行 (.exe) 文件。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">打开关联的文件时发生了错误。</exception>
      <exception cref="T:System.ObjectDisposedException">该进程对象已被释放。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.StartInfo">
      <summary>获取或设置要传递给 <see cref="T:System.Diagnostics.Process" /> 的 <see cref="M:System.Diagnostics.Process.Start" /> 方法的属性。</summary>
      <returns>
        <see cref="T:System.Diagnostics.ProcessStartInfo" />，它表示启动该进程时要使用的数据。这些参数包括用于启动该进程的可执行文件或文档的名称。</returns>
      <exception cref="T:System.ArgumentNullException">指定 <see cref="P:System.Diagnostics.Process.StartInfo" /> 的值为 null。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.StartTime">
      <summary>获取关联进程启动的时间。</summary>
      <returns>
        <see cref="T:System.DateTime" />，它指示进程启动的时间。这只对已启动的进程有意义。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此平台为 Windows 98 或 Windows Millennium Edition (Windows Me)，它不支持此属性。</exception>
      <exception cref="T:System.NotSupportedException">您正在试图访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.StartTime" /> 属性。该属性仅对本地计算机上运行的进程可用。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.SynchronizingObject">
      <summary>获取或设置用于封送由于进程退出事件而发出的事件处理程序调用的对象。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ISynchronizeInvoke" />，它用于封送由于进程上的 <see cref="E:System.Diagnostics.Process.Exited" /> 事件而发出的事件处理程序调用。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.Threads">
      <summary>获取在关联进程中运行的一组线程。</summary>
      <returns>
        <see cref="T:System.Diagnostics.ProcessThread" /> 类型的数组，它表示当前在关联进程中运行的操作系统线程。</returns>
      <exception cref="T:System.SystemException">该进程没有 <see cref="P:System.Diagnostics.Process.Id" />，或者没有与 <see cref="T:System.Diagnostics.Process" /> 实例关联的进程。- 或 -关联进程已经退出。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台为 Windows 98 或 Windows Millennium Edition (Windows Me)；如果将 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 设置为 false，则可以在 Windows 98 和 Windows Me 上访问此属性。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Process.ToString">
      <summary>如果适用，则将进程的名称格式化为字符串，并与父组件的类型组合。</summary>
      <returns>
        <see cref="P:System.Diagnostics.Process.ProcessName" />，与基组件的 <see cref="M:System.Object.ToString" /> 返回值组合。</returns>
      <exception cref="T:System.PlatformNotSupportedException">
                Windows 98 不支持 <see cref="M:System.Diagnostics.Process.ToString" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.TotalProcessorTime">
      <summary>获取此进程的总的处理器时间。</summary>
      <returns>
        <see cref="T:System.TimeSpan" />，它指示关联进程使用 CPU 的时间。此值是 <see cref="P:System.Diagnostics.Process.UserProcessorTime" /> 和 <see cref="P:System.Diagnostics.Process.PrivilegedProcessorTime" /> 的和。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此平台为 Windows 98 或 Windows Millennium Edition (Windows Me)，它不支持此属性。</exception>
      <exception cref="T:System.NotSupportedException">您正在试图访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.TotalProcessorTime" /> 属性。该属性仅对本地计算机上运行的进程可用。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.UserProcessorTime">
      <summary>获取此进程的用户处理器时间。</summary>
      <returns>
        <see cref="T:System.TimeSpan" />，它指示关联进程在该进程的应用程序部分内（而不是在操作系统内核中）运行代码所用的时间。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此平台为 Windows 98 或 Windows Millennium Edition (Windows Me)，它不支持此属性。</exception>
      <exception cref="T:System.NotSupportedException">您正在试图访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.UserProcessorTime" /> 属性。该属性仅对本地计算机上运行的进程可用。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.VirtualMemorySize">
      <summary>获取进程的虚拟内存大小。</summary>
      <returns>关联进程已请求的虚拟内存量。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此平台为 Windows 98 或 Windows Millennium Edition (Windows Me)，它不支持此属性。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.VirtualMemorySize64">
      <summary>获取为关联的进程分配的虚拟内存量。</summary>
      <returns>为关联的进程分配的虚拟内存量（以字节为单位）。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此平台为 Windows 98 或 Windows Millennium Edition (Windows Me)，它不支持此属性。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Process.WaitForExit">
      <summary>指示 <see cref="T:System.Diagnostics.Process" /> 组件无限期地等待关联进程退出。</summary>
      <exception cref="T:System.ComponentModel.Win32Exception">未能访问该等待设置。</exception>
      <exception cref="T:System.SystemException">尚未设置进程 <see cref="P:System.Diagnostics.Process.Id" />，而且不存在可从其确定 <see cref="P:System.Diagnostics.Process.Id" /> 属性的 <see cref="P:System.Diagnostics.Process.Handle" />。- 或 -没有与此 <see cref="T:System.Diagnostics.Process" /> 对象关联的进程。- 或 -您正试图为远程计算机上运行的进程调用 <see cref="M:System.Diagnostics.Process.WaitForExit" />。此方法仅对本地计算机上运行的进程可用。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Process.WaitForExit(System.Int32)">
      <summary>指示 <see cref="T:System.Diagnostics.Process" /> 组件在指定的毫秒数内等待关联进程退出。</summary>
      <returns>
            如果关联进程已退出，则为 true；否则为 false。</returns>
      <param name="milliseconds">等待关联进程退出的时间（以毫秒为单位）。最大值为 32 位整数的最大可能值，这对于操作系统而言表示无限大。</param>
      <exception cref="T:System.ComponentModel.Win32Exception">未能访问该等待设置。</exception>
      <exception cref="T:System.SystemException">尚未设置进程 <see cref="P:System.Diagnostics.Process.Id" />，而且不存在可从其确定 <see cref="P:System.Diagnostics.Process.Id" /> 属性的 <see cref="P:System.Diagnostics.Process.Handle" />。- 或 -没有与此 <see cref="T:System.Diagnostics.Process" /> 对象关联的进程。- 或 -您正试图为远程计算机上运行的进程调用 <see cref="M:System.Diagnostics.Process.WaitForExit(System.Int32)" />。此方法仅对本地计算机上运行的进程可用。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Process.WaitForInputIdle">
      <summary>使 <see cref="T:System.Diagnostics.Process" /> 组件无限期地等待关联进程进入空闲状态。此重载仅适用于具有用户界面并因此具有消息循环的进程。</summary>
      <returns>
            如果关联进程已经达到空闲状态，则为 true；否则，为 false。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Process.WaitForInputIdle(System.Int32)">
      <summary>使 <see cref="T:System.Diagnostics.Process" /> 组件在指定的毫秒数内等待关联进程进入空闲状态。此重载仅适用于具有用户界面并因此具有消息循环的进程。</summary>
      <returns>
            如果关联进程已经达到空闲状态，则为 true；否则，为 false。</returns>
      <param name="milliseconds">1 到 <see cref="F:System.Int32.MaxValue" /> 的值以毫秒为单位指定了等待关联进程变为空闲状态的时间量。0 值指定立即返回，而 -1 值则指定无限期等待。</param>
      <exception cref="T:System.InvalidOperationException">发生未知错误。此进程无法进入空闲状态。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.WorkingSet">
      <summary>获取关联进程的物理内存使用情况。</summary>
      <returns>关联进程当前使用的物理内存总量（以字节为单位）。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此平台为 Windows 98 或 Windows Millennium Edition (Windows Me)，它不支持此属性。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Process.WorkingSet64">
      <summary>获取为关联的进程分配的物理内存量。</summary>
      <returns>为关联的进程分配的物理内存量（以字节为单位）。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此平台为 Windows 98 或 Windows Millennium Edition (Windows Me)，它不支持此属性。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.ProcessModule">
      <summary>表示加载到特定进程中的 .dll 或 .exe 文件。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.ProcessModule.BaseAddress">
      <summary>获取加载模块的内存地址。</summary>
      <returns>模块的加载地址。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.ProcessModule.EntryPointAddress">
      <summary>获取在系统加载和运行模块时运行的函数的内存地址。</summary>
      <returns>模块的入口点。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.ProcessModule.FileName">
      <summary>获取模块的完整路径。</summary>
      <returns>定义模块位置的完全限定路径。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.ProcessModule.FileVersionInfo">
      <summary>获取模块的版本信息。</summary>
      <returns>包含模块版本信息的 <see cref="T:System.Diagnostics.FileVersionInfo" />。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.ProcessModule.ModuleMemorySize">
      <summary>获取加载模块所需内存量。</summary>
      <returns>模块占用的内存大小（以字节为单位）。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.ProcessModule.ModuleName">
      <summary>获取进程模块的名称。</summary>
      <returns>模块的名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.ProcessModule.ToString">
      <summary>将模块的名称转换为字符串。</summary>
      <returns>
        <see cref="P:System.Diagnostics.ProcessModule.ModuleName" /> 属性的值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.ProcessModuleCollection">
      <summary>提供 <see cref="T:System.Diagnostics.ProcessModule" /> 对象的强类型集合。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.#ctor">
      <summary>在没有关联的 <see cref="T:System.Diagnostics.ProcessModule" /> 实例的情况下，初始化 <see cref="T:System.Diagnostics.ProcessModuleCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.#ctor(System.Diagnostics.ProcessModule[])">
      <summary>使用指定的 <see cref="T:System.Diagnostics.ProcessModule" /> 实例数组来初始化 <see cref="T:System.Diagnostics.ProcessModuleCollection" /> 类的新实例。</summary>
      <param name="processModules">用来初始化该 <see cref="T:System.Diagnostics.ProcessModuleCollection" /> 实例的 <see cref="T:System.Diagnostics.ProcessModule" /> 实例的数组。</param>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.Contains(System.Diagnostics.ProcessModule)">
      <summary>确定集合中是否存在指定的进程模块。</summary>
      <returns>
            如果集合中存在该模块，则为 true；否则为 false。</returns>
      <param name="module">一个 <see cref="T:System.Diagnostics.ProcessModule" /> 实例，它指示要该集合中查找的模块。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.CopyTo(System.Diagnostics.ProcessModule[],System.Int32)">
      <summary>将 <see cref="T:System.Diagnostics.ProcessModule" /> 实例的数组复制到集合的指定索引处。</summary>
      <param name="array">要添加到集合的 <see cref="T:System.Diagnostics.ProcessModule" /> 实例的数组。</param>
      <param name="index">要添加新实例的位置。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.IndexOf(System.Diagnostics.ProcessModule)">
      <summary>提供指定模块在集合中的位置。</summary>
      <returns>从零开始的索引，它定义模块在 <see cref="T:System.Diagnostics.ProcessModuleCollection" /> 中的位置。</returns>
      <param name="module">检索其索引的 <see cref="T:System.Diagnostics.ProcessModule" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.ProcessModuleCollection.Item(System.Int32)">
      <summary>获取用于循环访问进程模块集的索引。</summary>
      <returns>一个 <see cref="T:System.Diagnostics.ProcessModule" />，它对集合中的模块进行索引</returns>
      <param name="index">集合中该模块的从零开始的索引值。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.ProcessPriorityClass">
      <summary>指示系统将与进程关联的优先级。此值与进程的每个线程的优先级值一起来确定每个线程的基本优先级别。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.ProcessPriorityClass.Normal">
      <summary>指定进程没有特殊的安排需求。</summary>
    </member>
    <member name="F:System.Diagnostics.ProcessPriorityClass.Idle">
      <summary>指定此进程的线程只能在系统空闲时运行，如屏幕保护程序。更高优先级类中运行的任何进程的线程都优先于此进程的线程。</summary>
    </member>
    <member name="F:System.Diagnostics.ProcessPriorityClass.High">
      <summary>指定进程执行必须立即执行的时间关键任务，如 Task List 对话框，不管操作系统的负荷如何，用户调用该对话框后均必须迅速响应。该进程的线程优先于普通或空闲优先级类进程的线程。</summary>
    </member>
    <member name="F:System.Diagnostics.ProcessPriorityClass.RealTime">
      <summary>指定进程拥有可能的最高优先级。</summary>
    </member>
    <member name="F:System.Diagnostics.ProcessPriorityClass.BelowNormal">
      <summary>指定进程的优先级在 <see cref="F:System.Diagnostics.ProcessPriorityClass.Idle" /> 之上，但在 <see cref="F:System.Diagnostics.ProcessPriorityClass.Normal" /> 之下。</summary>
    </member>
    <member name="F:System.Diagnostics.ProcessPriorityClass.AboveNormal">
      <summary>指定进程的优先级在 <see cref="F:System.Diagnostics.ProcessPriorityClass.Normal" /> 之上，但在 <see cref="F:System.Diagnostics.ProcessPriorityClass.High" /> 之下。</summary>
    </member>
    <member name="T:System.Diagnostics.ProcessStartInfo">
      <summary>指定启动进程时使用的一组值。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.ProcessStartInfo.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.ProcessStartInfo" /> 类的新实例，而不指定启动进程时使用的文件名。</summary>
    </member>
    <member name="M:System.Diagnostics.ProcessStartInfo.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.ProcessStartInfo" /> 类的新实例，并指定启动进程时使用的诸如应用程序或文档的文件名。</summary>
      <param name="fileName">启动进程时使用的应用程序或文档。</param>
    </member>
    <member name="M:System.Diagnostics.ProcessStartInfo.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.ProcessStartInfo" /> 类的新实例，指定启动该进程时使用的应用程序文件名以及要传递给该应用程序的一组命令行参数。</summary>
      <param name="fileName">启动进程时使用的应用程序。</param>
      <param name="arguments">进程启动时要传递给应用程序的命令行参数。</param>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.Arguments">
      <summary>获取或设置启动应用程序时要使用的一组命令行参数。</summary>
      <returns>特定文件类型的参数，系统可将它们与 <see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /> 属性中指定的应用程序相关联。默认值为空字符串 ("")。.NET Framework 应用程序和 .NET Compact Framework 应用程序中的最大字符串长度分别为 2,003 字符和 488 字符。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.CreateNoWindow">
      <summary>获取或设置指示是否在新窗口中启动该进程的值。</summary>
      <returns>
            若要启动该进程而不创建包含它的新窗口，则为 true；否则为 false。默认为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.Domain">
      <summary>获取或设置一个值，该值标识要在启动进程时使用的域。</summary>
      <returns>要在启动进程时使用的 Active Directory 域。域属性主要与使用 Active Directory 的企业级环境内的用户相关。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.EnvironmentVariables">
      <summary>获取文件的搜索路径、临时文件的目录、应用程序特定的选项和其他类似信息。</summary>
      <returns>
        <see cref="T:System.Collections.Specialized.StringDictionary" />，提供应用于此进程和子进程的环境变量。默认为 null。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.ErrorDialog">
      <summary>获取或设置一个值，该值指示不能启动进程时是否向用户显示错误对话框。</summary>
      <returns>
            若要在不能启动进程时在屏幕上显示错误对话框，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.ErrorDialogParentHandle">
      <summary>获取或设置在为不能启动的进程显示错误对话框时要使用的窗口句柄。</summary>
      <returns>
        <see cref="T:System.IntPtr" />，标识因进程启动失败而产生的错误对话框的句柄。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.FileName">
      <summary>获取或设置要启动的应用程序或文档。</summary>
      <returns>要启动的应用程序的名称或某文件类型的文档的名称，该文件类型与应用程序关联并且拥有可用的默认打开操作。默认值为空字符串 ("")。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.LoadUserProfile">
      <summary>获取或设置一个值，该值指示是否要从注册表加载 Windows 用户配置文件。</summary>
      <returns>
            如果要加载 Windows 用户配置文件，则为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.Password">
      <summary>获取或设置一个安全字符串，其中包含要在启动进程时使用的用户密码。</summary>
      <returns>一个 <see cref="T:System.Security.SecureString" />，其中包含启动进程时要使用的用户密码。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError">
      <summary>获取或设置一个值，该值指示是否将应用程序的错误输出写入 <see cref="P:System.Diagnostics.Process.StandardError" /> 流中。</summary>
      <returns>
            若要将错误输出写入 <see cref="P:System.Diagnostics.Process.StandardError" /> 中，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput">
      <summary>获取或设置一个值，该值指示应用程序的输入是否从 <see cref="P:System.Diagnostics.Process.StandardInput" /> 流中读取。</summary>
      <returns>
            若要从 <see cref="P:System.Diagnostics.Process.StandardInput" /> 中读取输入，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput">
      <summary>获取或设置一个值，该值指示是否将应用程序的输出写入 <see cref="P:System.Diagnostics.Process.StandardOutput" /> 流中。</summary>
      <returns>
            若要将输出写入 <see cref="P:System.Diagnostics.Process.StandardOutput" /> 中，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.StandardErrorEncoding">
      <summary>获取或设置错误输出的首选编码。</summary>
      <returns>一个 <see cref="T:System.Text.Encoding" /> 对象，表示错误输出的首选编码。默认为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.StandardOutputEncoding">
      <summary>获取或设置标准输出的首选编码。</summary>
      <returns>一个 <see cref="T:System.Text.Encoding" />对象，表示标准输出的首选编码。默认为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.UserName">
      <summary>获取或设置在启动进程时要使用的用户名。</summary>
      <returns>启动进程时要使用的用户名。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.UseShellExecute">
      <summary>获取或设置一个值，该值指示是否使用操作系统外壳程序启动进程。</summary>
      <returns>
            若要在启动进程时使用外壳程序，则为 true；否则，直接从可执行文件创建进程。默认为 true。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.Verb">
      <summary>获取或设置打开 <see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /> 属性指定的应用程序或文档时要使用的谓词。</summary>
      <returns>要对进程打开的文件执行的操作。默认值为空字符串 ("")。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.Verbs">
      <summary>获取与 <see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /> 属性指定的文件类型关联的一组谓词。</summary>
      <returns>系统可应用于 <see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /> 属性所指示文件的操作。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.WindowStyle">
      <summary>获取或设置启动进程时使用的窗口状态。</summary>
      <returns>
        <see cref="T:System.Diagnostics.ProcessWindowStyle" />，它指示是在最大化窗口、最小化窗口、正常（即非最大化也非最小化）窗口还是在不可见的窗口中启动进程。默认为 normal。</returns>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">窗口样式不是 <see cref="T:System.Diagnostics.ProcessWindowStyle" /> 枚举成员之一。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.WorkingDirectory">
      <summary>获取或设置要启动的进程的初始目录。</summary>
      <returns>包含要启动进程的目录的完全限定名。默认值为空字符串 ("")。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Diagnostics.ProcessThread">
      <summary>表示操作系统进程线程。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.BasePriority">
      <summary>获取线程的基本优先级。</summary>
      <returns>线程的基本优先级，它由操作系统通过将进程优先级类与关联线程的优先级别相结合进行计算。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.CurrentPriority">
      <summary>获取线程的当前优先级。</summary>
      <returns>线程的当前优先级，可根据操作系统如何安排该线程而偏离基本优先级。可为活动线程暂时提升优先级。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.Id">
      <summary>获取线程的唯一标识符。</summary>
      <returns>与指定线程关联的唯一标识符。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.IdealProcessor">
      <summary>设置让此线程在其上运行的首选处理器。</summary>
      <returns>线程的首选处理器，用来在系统安排线程时确定在哪个处理器上运行线程。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">系统未能设置线程在指定的处理器上启动。</exception>
      <exception cref="T:System.PlatformNotSupportedException">平台为 Windows 98 或 Windows Millennium Edition。</exception>
      <exception cref="T:System.NotSupportedException">进程在远程计算机上。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.PriorityBoostEnabled">
      <summary>获取或设置一个值，该值指示每当关联线程的进程主窗口接收焦点时，操作系统是否暂时提升该线程的优先级。</summary>
      <returns>
            若要在用户与进程的界面交互时提升线程的优先级，则为 true；否则为 false。默认值为 false。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">未能检索到优先级提升信息。- 或 -无法设置优先级提升信息。</exception>
      <exception cref="T:System.PlatformNotSupportedException">平台为 Windows 98 或 Windows Millennium Edition。</exception>
      <exception cref="T:System.NotSupportedException">进程在远程计算机上。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.PriorityLevel">
      <summary>获取或设置线程的优先级别。</summary>
      <returns>
        <see cref="T:System.Diagnostics.ThreadPriorityLevel" /> 值之一，它指定限制线程优先级的范围。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">未能检索到线程优先级别信息。- 或 -未能设置线程优先级别。</exception>
      <exception cref="T:System.PlatformNotSupportedException">平台为 Windows 98 或 Windows Millennium Edition。</exception>
      <exception cref="T:System.NotSupportedException">进程在远程计算机上。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.PrivilegedProcessorTime">
      <summary>获取线程在操作系统内核中运行代码所用的时间。</summary>
      <returns>
        <see cref="T:System.TimeSpan" />，它指示线程在操作系统内核中运行代码所用的时间。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">未能检索到线程时间。</exception>
      <exception cref="T:System.PlatformNotSupportedException">平台为 Windows 98 或 Windows Millennium Edition。</exception>
      <exception cref="T:System.NotSupportedException">进程在远程计算机上。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.ProcessorAffinity">
      <summary>设置关联线程可以在其上运行的处理器。</summary>
      <returns>指向一组位的 <see cref="T:System.IntPtr" />，每个位表示该线程可在其上运行的一个处理器。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">未能设置处理器关联。</exception>
      <exception cref="T:System.PlatformNotSupportedException">平台为 Windows 98 或 Windows Millennium Edition。</exception>
      <exception cref="T:System.NotSupportedException">进程在远程计算机上。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.ProcessThread.ResetIdealProcessor">
      <summary>重置此线程的理想处理器，以指示没有单个的理想处理器。换言之，任何处理器都是理想处理器。</summary>
      <exception cref="T:System.ComponentModel.Win32Exception">未能重置理想处理器。</exception>
      <exception cref="T:System.PlatformNotSupportedException">平台为 Windows 98 或 Windows Millennium Edition。</exception>
      <exception cref="T:System.NotSupportedException">进程在远程计算机上。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.StartAddress">
      <summary>获取操作系统调用的、启动此线程的函数的内存地址。</summary>
      <returns>线程的起始地址，它指向线程执行的应用程序定义的函数。</returns>
      <exception cref="T:System.PlatformNotSupportedException">平台为 Windows 98 或 Windows Millennium Edition。</exception>
      <exception cref="T:System.NotSupportedException">进程在远程计算机上。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.StartTime">
      <summary>获取操作系统启动该线程的时间。</summary>
      <returns>
        <see cref="T:System.DateTime" />，它表示操作系统启动该线程时系统上的时间。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">未能检索到线程时间。</exception>
      <exception cref="T:System.PlatformNotSupportedException">平台为 Windows 98 或 Windows Millennium Edition。</exception>
      <exception cref="T:System.NotSupportedException">进程在远程计算机上。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.ThreadState">
      <summary>获取此线程的当前状态。</summary>
      <returns>指示线程执行情况的 <see cref="T:System.Diagnostics.ThreadState" />（例如运行、等待或终止）。</returns>
      <exception cref="T:System.PlatformNotSupportedException">平台为 Windows 98 或 Windows Millennium Edition。</exception>
      <exception cref="T:System.NotSupportedException">进程在远程计算机上。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.TotalProcessorTime">
      <summary>获取此线程使用处理器的时间总量。</summary>
      <returns>
        <see cref="T:System.TimeSpan" />，它指示线程控制处理器的时间。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">未能检索到线程时间。</exception>
      <exception cref="T:System.PlatformNotSupportedException">平台为 Windows 98 或 Windows Millennium Edition。</exception>
      <exception cref="T:System.NotSupportedException">进程在远程计算机上。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.UserProcessorTime">
      <summary>获取关联的线程在应用程序内运行代码所用的时间。</summary>
      <returns>
        <see cref="T:System.TimeSpan" />，它指示线程在应用程序内（相对于在操作系统内核中）运行代码所用的时间。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">未能检索到线程时间。</exception>
      <exception cref="T:System.PlatformNotSupportedException">平台为 Windows 98 或 Windows Millennium Edition。</exception>
      <exception cref="T:System.NotSupportedException">进程在远程计算机上。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.WaitReason">
      <summary>获取线程等待的原因。</summary>
      <returns>一个 <see cref="T:System.Diagnostics.ThreadWaitReason" />，表示线程处于等待状态的原因。</returns>
      <exception cref="T:System.InvalidOperationException">线程不在等待状态。</exception>
      <exception cref="T:System.PlatformNotSupportedException">平台为 Windows 98 或 Windows Millennium Edition。</exception>
      <exception cref="T:System.NotSupportedException">进程在远程计算机上。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.Diagnostics.ProcessThreadCollection">
      <summary>提供 <see cref="T:System.Diagnostics.ProcessThread" /> 对象的强类型集合。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.#ctor">
      <summary>在没有关联的 <see cref="T:System.Diagnostics.ProcessThread" /> 实例的情况下，初始化 <see cref="T:System.Diagnostics.ProcessThreadCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.#ctor(System.Diagnostics.ProcessThread[])">
      <summary>使用指定的 <see cref="T:System.Diagnostics.ProcessThread" /> 实例数组来初始化 <see cref="T:System.Diagnostics.ProcessThreadCollection" /> 类的新实例。</summary>
      <param name="processThreads">用来初始化该 <see cref="T:System.Diagnostics.ProcessThreadCollection" /> 实例的 <see cref="T:System.Diagnostics.ProcessThread" /> 实例的数组。</param>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.Add(System.Diagnostics.ProcessThread)">
      <summary>将进程线程附加到集合。</summary>
      <returns>集合中线程的从零开始的索引。</returns>
      <param name="thread">要添加到集合中的线程。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.Contains(System.Diagnostics.ProcessThread)">
      <summary>确定集合中是否存在指定的进程线程。</summary>
      <returns>
            如果集合中存在该线程，则为 true；否则为 false。</returns>
      <param name="thread">一个 <see cref="T:System.Diagnostics.ProcessThread" /> 实例，它指示要在该集合中查找的线程。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.CopyTo(System.Diagnostics.ProcessThread[],System.Int32)">
      <summary>将 <see cref="T:System.Diagnostics.ProcessThread" /> 实例的数组复制到集合的指定索引处。</summary>
      <param name="array">要添加到集合的 <see cref="T:System.Diagnostics.ProcessThread" /> 实例的数组。</param>
      <param name="index">要添加新实例的位置。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.IndexOf(System.Diagnostics.ProcessThread)">
      <summary>提供指定线程在集合中的位置。</summary>
      <returns>从零开始的索引，它定义线程在 <see cref="T:System.Diagnostics.ProcessThreadCollection" /> 中的位置。</returns>
      <param name="thread">检索其索引的 <see cref="T:System.Diagnostics.ProcessThread" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.Insert(System.Int32,System.Diagnostics.ProcessThread)">
      <summary>在集合中的指定位置插入进程线程。</summary>
      <param name="index">从零开始的索引，指示插入线程的位置。</param>
      <param name="thread">要插入到集合中的线程。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.ProcessThreadCollection.Item(System.Int32)">
      <summary>获取用于循环访问进程线程集的索引。</summary>
      <returns>一个 <see cref="T:System.Diagnostics.ProcessThread" />，它对集合中的线程进行索引。</returns>
      <param name="index">集合中该值的从零开始的索引。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.Remove(System.Diagnostics.ProcessThread)">
      <summary>从集合中删除进程线程。</summary>
      <param name="thread">要从该集合中移除的线程。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.ProcessWindowStyle">
      <summary>指定在系统启动进程时新窗口应如何显示。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.ProcessWindowStyle.Normal">
      <summary>正常的可见窗口样式。系统会在屏幕上的默认位置显示具有 Normal 样式的窗口。如果窗口可见，用户就可以在该窗口中提供输入并查看窗口的输出。通常，应用程序可能会在自定义窗口外观时将新窗口初始化为 Hidden 样式，然后再使窗口样式成为 Normal。</summary>
    </member>
    <member name="F:System.Diagnostics.ProcessWindowStyle.Hidden">
      <summary>隐藏窗口样式。窗口可以采用可见或隐藏样式。系统会通过不绘制窗口来显示隐藏的窗口。当隐藏窗口时，实际上是将其禁用。隐藏的窗口可以从系统或其他窗口中处理消息，但它不能处理用户的输入，也不能显示输出。通常，应用程序可能会在自定义窗口外观时使新窗口保持隐藏，然后再使窗口样式成为 Normal。</summary>
    </member>
    <member name="F:System.Diagnostics.ProcessWindowStyle.Minimized">
      <summary>最小化窗口样式。默认情况下，系统会将最小化窗口缩小到任务栏按钮的大小并将最小化窗口移至任务栏上。</summary>
    </member>
    <member name="F:System.Diagnostics.ProcessWindowStyle.Maximized">
      <summary>最大化窗口样式。默认情况下，系统会放大最大化窗口，使其填充整个屏幕（或者在子窗口的情况下使其填充父窗口的整个工作区）。如果窗口具有标题栏，系统会自动将其移至屏幕的顶端或父窗口工作区的顶端。此外，系统会禁用窗口的可调整边框和标题栏的窗口定位功能，使用户无法通过拖动标题栏来移动窗口。</summary>
    </member>
    <member name="T:System.Diagnostics.SourceFilter">
      <summary>
                    指示侦听器是否应基于跟踪源跟踪消息。
                </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.SourceFilter.#ctor(System.String)">
      <summary>
                    初始化 <see cref="T:System.Diagnostics.SourceFilter" /> 类的新实例，并且指定跟踪源的名称。
                </summary>
      <param name="source">
跟踪源的名称。
                </param>
    </member>
    <member name="M:System.Diagnostics.SourceFilter.ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])">
      <summary>
                    确定跟踪侦听器是否应跟踪该事件。
                </summary>
      <returns>
                    如果应当产生跟踪，则为 true；否则为 false。
                </returns>
      <param name="cache">
                    一个对象，表示跟踪事件的信息缓存。
                </param>
      <param name="source">
                    源的名称。
                </param>
      <param name="eventType">
                    标识事件类型的枚举值之一。
                </param>
      <param name="id">
                    跟踪标识符编号。
                </param>
      <param name="formatOrMessage">
                    写入参数数组时要使用的格式，或要写入的消息。
                </param>
      <param name="args">
                    参数对象的数组。
                </param>
      <param name="data1">
                    跟踪数据对象。
                </param>
      <param name="data">
                    跟踪数据对象的数组。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。
                </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.SourceFilter.Source">
      <summary>
                    获取或设置跟踪源的名称。
                </summary>
      <returns>
跟踪源的名称。
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    该值为 null。
                </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.SourceLevels">
      <summary>指定由源开关和事件类型筛选器筛选的跟踪消息的级别。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.SourceLevels.Off">
      <summary>不允许任何事件通过。</summary>
    </member>
    <member name="F:System.Diagnostics.SourceLevels.Critical">
      <summary>只允许 <see cref="F:System.Diagnostics.TraceEventType.Critical" /> 事件通过。</summary>
    </member>
    <member name="F:System.Diagnostics.SourceLevels.Error">
      <summary>允许 <see cref="F:System.Diagnostics.TraceEventType.Critical" /> 和 <see cref="F:System.Diagnostics.TraceEventType.Error" /> 事件通过。</summary>
    </member>
    <member name="F:System.Diagnostics.SourceLevels.Warning">
      <summary>允许 <see cref="F:System.Diagnostics.TraceEventType.Critical" />、<see cref="F:System.Diagnostics.TraceEventType.Error" /> 和 <see cref="F:System.Diagnostics.TraceEventType.Warning" /> 事件通过。</summary>
    </member>
    <member name="F:System.Diagnostics.SourceLevels.Information">
      <summary>允许 <see cref="F:System.Diagnostics.TraceEventType.Critical" />、<see cref="F:System.Diagnostics.TraceEventType.Error" />、<see cref="F:System.Diagnostics.TraceEventType.Warning" /> 和 <see cref="F:System.Diagnostics.TraceEventType.Information" /> 事件通过。</summary>
    </member>
    <member name="F:System.Diagnostics.SourceLevels.Verbose">
      <summary>允许 <see cref="F:System.Diagnostics.TraceEventType.Critical" />、<see cref="F:System.Diagnostics.TraceEventType.Error" />、<see cref="F:System.Diagnostics.TraceEventType.Warning" />、<see cref="F:System.Diagnostics.TraceEventType.Information" /> 和 <see cref="F:System.Diagnostics.TraceEventType.Verbose" /> 事件通过。</summary>
    </member>
    <member name="F:System.Diagnostics.SourceLevels.ActivityTracing">
      <summary>允许 <see cref="F:System.Diagnostics.TraceEventType.Stop" />、<see cref="F:System.Diagnostics.TraceEventType.Start" />、<see cref="F:System.Diagnostics.TraceEventType.Suspend" />、<see cref="F:System.Diagnostics.TraceEventType.Transfer" /> 和 <see cref="F:System.Diagnostics.TraceEventType.Resume" /> 事件通过。</summary>
    </member>
    <member name="F:System.Diagnostics.SourceLevels.All">
      <summary>允许所有事件通过。</summary>
    </member>
    <member name="T:System.Diagnostics.SourceSwitch">
      <summary>提供多级开关控制跟踪和调试输出而不必重新编译代码。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.SourceSwitch.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.SourceSwitch" /> 类的新实例，并且指定源的名称。</summary>
      <param name="name">源的名称。</param>
    </member>
    <member name="M:System.Diagnostics.SourceSwitch.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.SourceSwitch" /> 类的新实例，并且指定源开关的显示名称和默认值。</summary>
      <param name="displayName">源开关的名称。 </param>
      <param name="defaultSwitchValue">开关的默认值。 </param>
    </member>
    <member name="P:System.Diagnostics.SourceSwitch.Level">
      <summary>获取或设置开关级别。</summary>
      <returns>
        <see cref="T:System.Diagnostics.SourceLevels" /> 值之一，表示开关的事件级别。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.SourceSwitch.OnValueChanged">
      <summary>当 <see cref="P:System.Diagnostics.Switch.Value" /> 属性的值发生更改时调用。</summary>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Diagnostics.Switch.Value" /> 的新值不是 <see cref="T:System.Diagnostics.SourceLevels" /> 值之一。</exception>
    </member>
    <member name="M:System.Diagnostics.SourceSwitch.ShouldTrace(System.Diagnostics.TraceEventType)">
      <summary>确定是否应该根据跟踪事件的类型调用跟踪侦听器。</summary>
      <returns>
如果应该调用跟踪侦听器，则为 True；否则为 false。</returns>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.Diagnostics.Stopwatch">
      <summary>提供一组方法和属性，可用于准确地测量运行时间。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.Stopwatch" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.Elapsed">
      <summary>获取当前实例测量得出的总运行时间。</summary>
      <returns>一个只读的 <see cref="T:System.TimeSpan" />，用于表示当前实例测量得出的总运行时间。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds">
      <summary>获取当前实例测量得出的总运行时间（以毫秒为单位）。</summary>
      <returns>一个只读长整型，表示当前实例测量得出的总毫秒数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.ElapsedTicks">
      <summary>获取当前实例测量得出的总运行时间（用计时器计时周期表示）。</summary>
      <returns>一个只读长整型，表示当前实例测量得出的计时器计时周期的总数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Stopwatch.Frequency">
      <summary>获取以每秒计时周期数表示的计时器频率。此字段为只读。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.GetTimestamp">
      <summary>获取计时器机制中的当前最小时间单位数。</summary>
      <returns>一个长整型，表示基础计时器机制中的计时周期计数器值。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Stopwatch.IsHighResolution">
      <summary>指示计时器是否基于高分辨率性能计数器。此字段为只读。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.IsRunning">
      <summary>获取一个指示 <see cref="T:System.Diagnostics.Stopwatch" /> 计时器是否在运行的值。</summary>
      <returns>
            如果 <see cref="T:System.Diagnostics.Stopwatch" /> 实例当前正在运行，并且在对某个时间间隔的运行时间进行测量，则该值为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Reset">
      <summary>停止时间间隔测量，并将运行时间重置为零。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Start">
      <summary>开始或继续测量某个时间间隔的运行时间。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.StartNew">
      <summary>对新的 <see cref="T:System.Diagnostics.Stopwatch" /> 实例进行初始化，将运行时间属性设置为零，然后开始测量运行时间。</summary>
      <returns>刚刚开始测量运行时间的 <see cref="T:System.Diagnostics.Stopwatch" />。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Stop">
      <summary>停止测量某个时间间隔的运行时间。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Switch">
      <summary>提供一个用于创建新的调试和跟踪开关的抽象基类。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Switch.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.Switch" /> 类的一个新实例。</summary>
      <param name="displayName">开关名。</param>
      <param name="description">开关说明。</param>
    </member>
    <member name="M:System.Diagnostics.Switch.#ctor(System.String,System.String,System.String)">
      <summary>通过指定开关的显示名称、说明和默认值来初始化 <see cref="T:System.Diagnostics.Switch" /> 类的新实例。</summary>
      <param name="displayName">开关名。</param>
      <param name="description">开关说明。</param>
      <param name="defaultSwitchValue">开关的默认值。</param>
    </member>
    <member name="P:System.Diagnostics.Switch.Attributes">
      <summary>获取在应用程序配置文件中定义的自定义开关属性。</summary>
      <returns>一个 <see cref="T:System.Collections.Specialized.StringDictionary" />，包含跟踪开关的自定义属性（不区分大小写）。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Switch.Description">
      <summary>获取开关说明。</summary>
      <returns>开关说明。默认值为空字符串 ("")。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Switch.DisplayName">
      <summary>获取用于标识该开关的名称。</summary>
      <returns>用于标识该开关的名称。默认值为空字符串 ("")。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Switch.GetSupportedAttributes">
      <summary>获取开关支持的自定义属性。</summary>
      <returns>一个字符串数组，包含开关所支持的自定义属性的名称；如果该开关不支持任何自定义属性，则为 null。</returns>
    </member>
    <member name="M:System.Diagnostics.Switch.OnSwitchSettingChanged">
      <summary>当 <see cref="P:System.Diagnostics.Switch.SwitchSetting" /> 属性更改时调用。</summary>
    </member>
    <member name="M:System.Diagnostics.Switch.OnValueChanged">
      <summary>当 <see cref="P:System.Diagnostics.Switch.Value" /> 属性更改时调用。</summary>
    </member>
    <member name="P:System.Diagnostics.Switch.SwitchSetting">
      <summary>获取或设置此开关的当前设置。</summary>
      <returns>此开关的当前设置。默认值为零。</returns>
    </member>
    <member name="P:System.Diagnostics.Switch.Value">
      <summary>获取或设置开关的值。</summary>
      <returns>一个表示开关的值的字符串。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">该值为 null。- 或 -该值不是仅由一个可选负号后跟一系列从 0 到 9 的数字组成的。- 或 -该值表示小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" /> 的数字。</exception>
    </member>
    <member name="T:System.Diagnostics.SwitchAttribute">
      <summary>标识程序集、类或成员中使用的开关。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.SwitchAttribute.#ctor(System.String,System.Type)">
      <summary>通过指定开关的名称和类型来初始化 <see cref="T:System.Diagnostics.SwitchAttribute" /> 类的新实例。 </summary>
      <param name="switchName">开关的显示名称。</param>
      <param name="switchType">开关的类型。</param>
    </member>
    <member name="M:System.Diagnostics.SwitchAttribute.GetAll(System.Reflection.Assembly)">
      <summary>为指定的程序集返回所有开关属性。</summary>
      <returns>
        <see cref="T:System.Diagnostics.SwitchAttribute" /> 类型的数组，包含程序集的所有开关属性。</returns>
      <param name="assembly">要检查其开关属性的 <see cref="T:System.Reflection.Assembly" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> 为 null。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.SwitchAttribute.SwitchDescription">
      <summary>获取或设置开关说明。</summary>
      <returns>开关说明。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.SwitchAttribute.SwitchName">
      <summary>获取或设置开关的显示名称。</summary>
      <returns>开关的显示名称。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Diagnostics.SwitchAttribute.SwitchName" /> 被设置为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Diagnostics.SwitchAttribute.SwitchName" /> 被设置为空字符串。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.SwitchAttribute.SwitchType">
      <summary>获取或设置开关的类型。</summary>
      <returns>一个表示开关类型的 <see cref="T:System.Type" /> 对象。</returns>
      <exception cref="T:System.ArgumentNullException">P:System.Diagnostics.SwitchAttribute.SwitchType 被设置为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.SwitchLevelAttribute">
      <summary>标识开关的级别类型。 </summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.SwitchLevelAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Diagnostics.SwitchLevelAttribute" /> 类的新实例，并且指定用来确定是否应该写入跟踪的类型。</summary>
      <param name="switchLevelType">用于确定是否应该写入跟踪的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Diagnostics.SwitchLevelAttribute.SwitchLevelType">
      <summary>获取或设置用于确定是否应该写入跟踪的类型。</summary>
      <returns>用于确定是否应该写入跟踪的 <see cref="T:System.Type" />。</returns>
      <exception cref="T:System.ArgumentNullException">设置操作失败，原因是值为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.TextWriterTraceListener">
      <summary>将跟踪或调试输出定向到 <see cref="T:System.IO.TextWriter" /> 或 <see cref="T:System.IO.Stream" />，如 <see cref="T:System.IO.FileStream" />。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.#ctor">
      <summary>用 <see cref="T:System.IO.TextWriter" /> 作为输出接收者来初始化 <see cref="T:System.Diagnostics.TextWriterTraceListener" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.Stream)">
      <summary>用流作为调试和跟踪输出的接收者来初始化 <see cref="T:System.Diagnostics.TextWriterTraceListener" /> 类的新实例。</summary>
      <param name="stream">表示 <see cref="T:System.Diagnostics.TextWriterTraceListener" /> 写入的流的 <see cref="T:System.IO.Stream" />。</param>
      <exception cref="T:System.ArgumentNullException">此流为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.Stream,System.String)">
      <summary>用流作为调试和跟踪输出的接收者来初始化具有指定名称的 <see cref="T:System.Diagnostics.TextWriterTraceListener" /> 类的新实例。</summary>
      <param name="stream">表示 <see cref="T:System.Diagnostics.TextWriterTraceListener" /> 写入的流的 <see cref="T:System.IO.Stream" />。</param>
      <param name="name">新实例的名称。</param>
      <exception cref="T:System.ArgumentNullException">此流为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.TextWriter)">
      <summary>用指定的编写器作为跟踪或调试输出的接收者来初始化 <see cref="T:System.Diagnostics.TextWriterTraceListener" /> 类的新实例。</summary>
      <param name="writer">接收来自 <see cref="T:System.Diagnostics.TextWriterTraceListener" /> 的输出的 <see cref="T:System.IO.TextWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">编写器为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.TextWriter,System.String)">
      <summary>用指定的编写器作为跟踪或调试输出的接收者来初始化具有指定名称的 <see cref="T:System.Diagnostics.TextWriterTraceListener" /> 类的新实例。</summary>
      <param name="writer">接收来自 <see cref="T:System.Diagnostics.TextWriterTraceListener" /> 的输出的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="name">新实例的名称。</param>
      <exception cref="T:System.ArgumentNullException">编写器为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.String)">
      <summary>用文件作为调试和跟踪输出的接收者来初始化 <see cref="T:System.Diagnostics.TextWriterTraceListener" /> 类的新实例。</summary>
      <param name="fileName">
        <see cref="T:System.Diagnostics.TextWriterTraceListener" /> 写入的文件名。</param>
      <exception cref="T:System.ArgumentNullException">该文件为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.String,System.String)">
      <summary>用文件作为调试和跟踪输出的接收者来初始化具有指定名称的 <see cref="T:System.Diagnostics.TextWriterTraceListener" /> 类的新实例。</summary>
      <param name="fileName">
        <see cref="T:System.Diagnostics.TextWriterTraceListener" /> 写入的文件名。</param>
      <param name="name">新实例的名称。</param>
      <exception cref="T:System.ArgumentNullException">此流为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.Close">
      <summary>关闭 <see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" />，以使其不再接收跟踪或调试输出。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.Dispose(System.Boolean)">
      <summary>处置此 <see cref="T:System.Diagnostics.TextWriterTraceListener" /> 对象。</summary>
      <param name="disposing">
                为 true，则释放托管资源；为 false，则 <see cref="M:System.Diagnostics.TextWriterTraceListener.Dispose(System.Boolean)" /> 无效。</param>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.Flush">
      <summary>刷新 <see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" /> 的输出缓冲区。</summary>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.Write(System.String)">
      <summary>将一条消息写入此实例的 <see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" />。</summary>
      <param name="message">要写入的消息。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.WriteLine(System.String)">
      <summary>将一条消息写入该实例的 <see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" />，后跟行结束符。默认行结束符是回车符后接一个换行符 (\r\n)。</summary>
      <param name="message">要写入的消息。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.TextWriterTraceListener.Writer">
      <summary>获取或设置接收跟踪或调试输出的文本编写器。</summary>
      <returns>表示接收跟踪或调试输出的编写器的 <see cref="T:System.IO.TextWriter" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.ThreadPriorityLevel">
      <summary>指定线程的优先级别。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.ThreadPriorityLevel.Idle">
      <summary>指定空闲优先级。它是所有线程的可能的最低优先级值，与关联的 <see cref="T:System.Diagnostics.ProcessPriorityClass" /> 的值无关。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadPriorityLevel.Lowest">
      <summary>指定最低优先级。这比关联的 <see cref="T:System.Diagnostics.ProcessPriorityClass" /> 的普通优先级低两级。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadPriorityLevel.BelowNormal">
      <summary>指定的优先级比关联的 <see cref="T:System.Diagnostics.ProcessPriorityClass" /> 的普通优先级低一级。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadPriorityLevel.Normal">
      <summary>指定关联的 <see cref="T:System.Diagnostics.ProcessPriorityClass" /> 的普通优先级。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadPriorityLevel.AboveNormal">
      <summary>指定的优先级比关联的 <see cref="T:System.Diagnostics.ProcessPriorityClass" /> 的普通优先级高一级。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadPriorityLevel.Highest">
      <summary>指定最高优先级。这比关联的 <see cref="T:System.Diagnostics.ProcessPriorityClass" /> 的普通优先级高两级。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadPriorityLevel.TimeCritical">
      <summary>指定时间关键优先级。这是所有线程中的最高优先级，与关联的 <see cref="T:System.Diagnostics.ProcessPriorityClass" /> 的值无关。</summary>
    </member>
    <member name="T:System.Diagnostics.ThreadState">
      <summary>指定线程的当前执行状态。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Diagnostics.ThreadState.Initialized">
      <summary>此状态指示线程已初始化但尚未启动。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadState.Ready">
      <summary>此状态指示线程因无可用的处理器而等待使用处理器。线程准备在下一个可用的处理器上运行。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadState.Running">
      <summary>此状态指示线程当前正在使用处理器。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadState.Standby">
      <summary>此状态指示线程将要使用处理器。一次只能有一个线程处于此状态。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadState.Terminated">
      <summary>此状态指示线程已完成执行并已退出。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadState.Wait">
      <summary>此状态指示线程尚未准备好使用处理器，因为它正在等待外围操作完成或等待资源释放。当线程就绪后，将对其进行重排。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadState.Transition">
      <summary>此状态指示线程在可以执行前等待处理器之外的资源。例如，它可能正在等待其执行堆栈从磁盘中分页。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadState.Unknown">
      <summary>线程的状态未知。</summary>
    </member>
    <member name="T:System.Diagnostics.ThreadWaitReason">
      <summary>指定线程等待的原因。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.Executive">
      <summary>线程正在等待计划程序。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.FreePage">
      <summary>线程正在等待可用的虚拟内存页。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.PageIn">
      <summary>线程正在等待虚拟内存页到达内存。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.SystemAllocation">
      <summary>线程正在等待系统分配。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.ExecutionDelay">
      <summary>线程执行延迟。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.Suspended">
      <summary>线程执行暂停。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.UserRequest">
      <summary>线程正在等待用户请求。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.EventPairHigh">
      <summary>线程正在等待事件对高。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.EventPairLow">
      <summary>线程正在等待事件对低。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.LpcReceive">
      <summary>线程正在等待本地过程调用到达。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.LpcReply">
      <summary>线程正在等待对本地过程调用的回复到达。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.VirtualMemory">
      <summary>线程正在等待系统分配虚拟内存。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.PageOut">
      <summary>线程正在等待虚拟内存页写入磁盘。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.Unknown">
      <summary>线程正在因未知原因而等待。</summary>
    </member>
    <member name="T:System.Diagnostics.Trace">
      <summary>提供一组帮助您跟踪代码执行情况的方法和属性。无法继承此类。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Trace.Assert(System.Boolean)">
      <summary>检查条件，如果条件为 false，则输出调用堆栈。</summary>
      <param name="condition">
                若要禁止显示消息，则为 true；否则为 false。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Trace.Assert(System.Boolean,System.String)">
      <summary>检查条件，如果条件为 false，则显示消息。</summary>
      <param name="condition">
                若要禁止显示消息，则为 true；否则为 false。</param>
      <param name="message">要显示的消息。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Trace.Assert(System.Boolean,System.String,System.String)">
      <summary>检查条件，如果条件为 false，则同时显示两条消息。</summary>
      <param name="condition">
                若要禁止显示消息，则为 true；否则为 false。</param>
      <param name="message">要显示的消息。</param>
      <param name="detailMessage">要显示的详细消息。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.Trace.AutoFlush">
      <summary>获取或设置是否在每次写入后都在 <see cref="P:System.Diagnostics.Trace.Listeners" /> 上调用 <see cref="M:System.Diagnostics.Trace.Flush" />。</summary>
      <returns>
            如果每次写入后都在 <see cref="P:System.Diagnostics.Trace.Listeners" /> 上调用 <see cref="M:System.Diagnostics.Trace.Flush" />，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Trace.Close">
      <summary>刷新输出缓冲区，然后关闭 <see cref="P:System.Diagnostics.Trace.Listeners" />。</summary>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.Trace.CorrelationManager">
      <summary>获取此跟踪线程的相关管理器。</summary>
      <returns>与此跟踪线程关联的 <see cref="T:System.Diagnostics.CorrelationManager" /> 对象。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Trace.Fail(System.String)">
      <summary>发出指定的错误信息。</summary>
      <param name="message">要发出的消息。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Trace.Fail(System.String,System.String)">
      <summary>发出错误信息和详细错误信息。</summary>
      <param name="message">要发出的消息。</param>
      <param name="detailMessage">要发出的详细消息。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Trace.Flush">
      <summary>刷新输出缓冲区，并使放入缓冲区中的数据写入 <see cref="P:System.Diagnostics.Trace.Listeners" />。</summary>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Trace.Indent">
      <summary>将当前的 <see cref="P:System.Diagnostics.Trace.IndentLevel" /> 增加 1。</summary>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.Trace.IndentLevel">
      <summary>获取或设置缩进级别。</summary>
      <returns>缩进级别。默认值为零。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.Trace.IndentSize">
      <summary>获取或设置缩进的空格数。</summary>
      <returns>缩进的空格数。默认值为四。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.Trace.Listeners">
      <summary>获取监视跟踪输出的侦听器集合。</summary>
      <returns>
        <see cref="T:System.Diagnostics.TraceListenerCollection" />，它表示监视跟踪输出的 <see cref="T:System.Diagnostics.TraceListener" /> 类型的集合。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Trace.Refresh">
      <summary>刷新跟踪配置数据。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Trace.TraceError(System.String)">
      <summary>使用指定的消息向 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器中写入错误信息。</summary>
      <param name="message">要写入的信息性消息。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Trace.TraceError(System.String,System.Object[])">
      <summary>使用指定的对象数组和格式设置信息向 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器中写入错误信息。</summary>
      <param name="format">包含零个或多个格式项的格式字符串，这些项与 <paramref name="args" /> 数组中的对象相对应。</param>
      <param name="args">包含零个或多个要格式化的对象的 object 数组。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Trace.TraceInformation(System.String)">
      <summary>使用指定的消息向 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器中写入信息性消息。</summary>
      <param name="message">要写入的信息性消息。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Trace.TraceInformation(System.String,System.Object[])">
      <summary>使用指定的对象数组和格式设置信息向 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器中写入信息性消息。</summary>
      <param name="format">包含零个或多个格式项的格式字符串，这些项与 <paramref name="args" /> 数组中的对象相对应。</param>
      <param name="args">包含零个或多个要格式化的对象的 object 数组。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Trace.TraceWarning(System.String)">
      <summary>使用指定的消息向 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器中写入警告消息。</summary>
      <param name="message">要写入的信息性消息。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Trace.TraceWarning(System.String,System.Object[])">
      <summary>使用指定的对象数组和格式设置信息向 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器中写入警告信息。</summary>
      <param name="format">包含零个或多个格式项的格式字符串，这些项与 <paramref name="args" /> 数组中的对象相对应。</param>
      <param name="args">包含零个或多个要格式化的对象的 object 数组。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Trace.Unindent">
      <summary>将当前的 <see cref="P:System.Diagnostics.Trace.IndentLevel" /> 减少 1。</summary>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.Trace.UseGlobalLock">
      <summary>获取或设置一个值，该值指示是否应当使用全局锁。 </summary>
      <returns>
            如果要使用全局锁，则为 true；否则为 false。默认为 true。</returns>
    </member>
    <member name="M:System.Diagnostics.Trace.Write(System.Object)">
      <summary>将对象的 <see cref="M:System.Object.ToString" /> 方法的值写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器中。</summary>
      <param name="value">一个 <see cref="T:System.Object" />，其名称被发送到 <see cref="P:System.Diagnostics.Trace.Listeners" />。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Trace.Write(System.Object,System.String)">
      <summary>将类别名称和对象的 <see cref="M:System.Object.ToString" /> 方法值写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="value">一个 <see cref="T:System.Object" /> 名被发送到 <see cref="P:System.Diagnostics.Trace.Listeners" />。</param>
      <param name="category">用于组织输出的类别名称。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Trace.Write(System.String)">
      <summary>将消息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="message">要写入的消息。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Trace.Write(System.String,System.String)">
      <summary>将类别名称和消息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="message">要写入的消息。</param>
      <param name="category">用于组织输出的类别名称。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object)">
      <summary>如果条件为 true，则将对象的 <see cref="M:System.Object.ToString" /> 方法值写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="condition">
                若要使消息被写入，则为 true；否则为 false。</param>
      <param name="value">一个 <see cref="T:System.Object" />，其名称被发送到 <see cref="P:System.Diagnostics.Trace.Listeners" />。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object,System.String)">
      <summary>如果条件为 true，则将类别名称和对象的 <see cref="M:System.Object.ToString" /> 方法值写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="condition">
                若要使消息被写入，则为 true；否则为 false。</param>
      <param name="value">一个 <see cref="T:System.Object" />，其名称被发送到 <see cref="P:System.Diagnostics.Trace.Listeners" />。</param>
      <param name="category">用于组织输出的类别名称。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)">
      <summary>如果条件为 true，则将消息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="condition">
                若要使消息被写入，则为 true；否则为 false。</param>
      <param name="message">要写入的消息。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String,System.String)">
      <summary>如果条件为 true，则将类别名称和消息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="condition">
                若要使消息被写入，则为 true；否则为 false。</param>
      <param name="message">要写入的消息。</param>
      <param name="category">用于组织输出的类别名称。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteLine(System.Object)">
      <summary>将对象的 <see cref="M:System.Object.ToString" /> 方法的值写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器中。</summary>
      <param name="value">一个 <see cref="T:System.Object" />，其名称被发送到 <see cref="P:System.Diagnostics.Trace.Listeners" />。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteLine(System.Object,System.String)">
      <summary>将类别名称和对象的 <see cref="M:System.Object.ToString" /> 方法值写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="value">一个 <see cref="T:System.Object" />，其名称被发送到 <see cref="P:System.Diagnostics.Trace.Listeners" />。</param>
      <param name="category">用于组织输出的类别名称。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteLine(System.String)">
      <summary>将消息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="message">要写入的消息。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteLine(System.String,System.String)">
      <summary>将类别名称和消息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="message">要写入的消息。</param>
      <param name="category">用于组织输出的类别名称。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object)">
      <summary>如果条件为 true，则将对象的 <see cref="M:System.Object.ToString" /> 方法值写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="condition">
                若要使消息被写入，则为 true；否则为 false。</param>
      <param name="value">一个 <see cref="T:System.Object" />，其名称被发送到 <see cref="P:System.Diagnostics.Trace.Listeners" />。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object,System.String)">
      <summary>如果条件为 true，则将类别名称和对象的 <see cref="M:System.Object.ToString" /> 方法值写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="condition">
                若要使消息被写入，则为 true；否则为 false。</param>
      <param name="value">一个 <see cref="T:System.Object" />，其名称被发送到 <see cref="P:System.Diagnostics.Trace.Listeners" />。</param>
      <param name="category">用于组织输出的类别名称。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)">
      <summary>如果条件为 true，则将消息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="condition">
                若要使消息被写入，则为 true；否则为 false。</param>
      <param name="message">要写入的消息。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String,System.String)">
      <summary>如果条件为 true，则将类别名称和消息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="condition">
                若要使消息被写入，则为 true；否则为 false。</param>
      <param name="message">要写入的消息。</param>
      <param name="category">用于组织输出的类别名称。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.Diagnostics.TraceEventCache">
      <summary>提供特定于线程和进程的跟踪事件数据。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.TraceEventCache.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.TraceEventCache" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Diagnostics.TraceEventCache.Callstack">
      <summary>获取当前线程的调用堆栈。</summary>
      <returns>包含堆栈跟踪信息的字符串。此值可以是空字符串 ("")。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.TraceEventCache.DateTime">
      <summary>获取事件跟踪发生的日期和时间。</summary>
      <returns>
        <see cref="T:System.DateTime" /> 结构，其值是以协调通用时间 (UTC) 格式表示的日期和时间。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.TraceEventCache.LogicalOperationStack">
      <summary>获取堆栈中包含的关联数据。</summary>
      <returns>包含相关数据的 <see cref="T:System.Collections.Stack" />。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.TraceEventCache.ProcessId">
      <summary>获取当前进程的唯一标识符。</summary>
      <returns>系统生成的当前进程的唯一标识符。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.TraceEventCache.ThreadId">
      <summary>获取当前托管线程的唯一标识符。 </summary>
      <returns>表示此托管线程的唯一整数标识符的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.TraceEventCache.Timestamp">
      <summary>获取计时器机制中的当前最小时间单位数。</summary>
      <returns>基础计时器机制的最小时间单位计数值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.TraceEventType">
      <summary>标识引起跟踪的事件的类型。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.TraceEventType.Critical">
      <summary>错误或应用程序崩溃。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceEventType.Error">
      <summary>可恢复的错误。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceEventType.Warning">
      <summary>非关键性问题。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceEventType.Information">
      <summary>信息性消息。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceEventType.Verbose">
      <summary>调试跟踪。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceEventType.Start">
      <summary>逻辑操作的开始。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceEventType.Stop">
      <summary>逻辑操作的停止。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceEventType.Suspend">
      <summary>逻辑操作的挂起。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceEventType.Resume">
      <summary>逻辑操作的恢复。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceEventType.Transfer">
      <summary>相关标识的更改。</summary>
    </member>
    <member name="T:System.Diagnostics.TraceFilter">
      <summary>为跟踪筛选器实现提供基类。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.TraceFilter.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.TraceFilter" /> 类的新实例。 </summary>
    </member>
    <member name="M:System.Diagnostics.TraceFilter.ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])">
      <summary>在派生的类中进行重写时，确定跟踪侦听器是否应跟踪事件。</summary>
      <returns>
若要跟踪指定的事件，则为 true；否则为 false。 </returns>
      <param name="cache">包含跟踪事件的信息的 <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
      <param name="source">源的名称。</param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一，指定引发跟踪的事件类型。</param>
      <param name="id">跟踪标识符编号。</param>
      <param name="formatOrMessage">写入由 <paramref name="args" /> 参数指定的变量数组时使用的格式，或者要写入的消息。</param>
      <param name="args">参数对象的数组。</param>
      <param name="data1">跟踪数据对象。</param>
      <param name="data">跟踪数据对象的数组。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.TraceLevel">
      <summary>指定为 <see cref="T:System.Diagnostics.Debug" />、<see cref="T:System.Diagnostics.Trace" /> 和 <see cref="T:System.Diagnostics.TraceSwitch" /> 类输出的消息。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.TraceLevel.Off">
      <summary>不输出跟踪和调试消息。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceLevel.Error">
      <summary>输出错误处理消息。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceLevel.Warning">
      <summary>输出警告和错误处理消息。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceLevel.Info">
      <summary>输出信息性消息、警告和错误处理消息。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceLevel.Verbose">
      <summary>输出所有调试和跟踪消息。</summary>
    </member>
    <member name="T:System.Diagnostics.TraceListener">
      <summary>
                    为监视跟踪和调试输出的侦听器提供 abstract 基类。
                </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.TraceListener.#ctor">
      <summary>
                    初始化 <see cref="T:System.Diagnostics.TraceListener" /> 类的新实例。
                </summary>
    </member>
    <member name="M:System.Diagnostics.TraceListener.#ctor(System.String)">
      <summary>
                    用指定的名称作为侦听器来初始化 <see cref="T:System.Diagnostics.TraceListener" /> 类的新实例。
                </summary>
      <param name="name">
        <see cref="T:System.Diagnostics.TraceListener" /> 的名称。
                </param>
    </member>
    <member name="P:System.Diagnostics.TraceListener.Attributes">
      <summary>
                    获取应用程序配置文件中定义的自定义跟踪侦听器属性。
                </summary>
      <returns>
                    包含自定义跟踪侦听器属性的 <see cref="T:System.Collections.Specialized.StringDictionary" />。
                </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.TraceListener.Close">
      <summary>
                    在派生类中被重写时，关闭输出流以使它不再接收跟踪或调试输出。
                </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.TraceListener.Dispose">
      <summary>
                    释放由 <see cref="T:System.Diagnostics.TraceListener" /> 使用的所有资源。
                </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.TraceListener.Dispose(System.Boolean)">
      <summary>
                    释放由 <see cref="T:System.Diagnostics.TraceListener" /> 占用的非托管资源，还可以另外再释放托管资源。
                </summary>
      <param name="disposing">
                    为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。
                </param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.Fail(System.String)">
      <summary>
                    实现 <see cref="T:System.Diagnostics.TraceListener" /> 类时，向所创建的侦听器发出错误信息。
                </summary>
      <param name="message">
要发出的消息。
                </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.TraceListener.Fail(System.String,System.String)">
      <summary>
                    实现 <see cref="T:System.Diagnostics.TraceListener" /> 类时，向所创建的侦听器发出错误信息和详细错误信息。
                </summary>
      <param name="message">
要发出的消息。
                </param>
      <param name="detailMessage">
                    要发出的详细消息。
                </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.TraceListener.Filter">
      <summary>
                    获取并设置跟踪侦听器的跟踪筛选器。
                </summary>
      <returns>
                    一个派生自 <see cref="T:System.Diagnostics.TraceFilter" /> 基类的对象。
                </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.TraceListener.Flush">
      <summary>
                    在派生类中被重写时，刷新输出缓冲区。
                </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.TraceListener.GetSupportedAttributes">
      <summary>
                    获取跟踪侦听器支持的自定义属性。
                </summary>
      <returns>
                    为跟踪侦听器支持的自定义属性命名的字符串数组；或者如果没有自定义属性，则为 null。
                </returns>
    </member>
    <member name="P:System.Diagnostics.TraceListener.IndentLevel">
      <summary>
                    获取或设置缩进级别。
                </summary>
      <returns>
                    缩进级别。默认值为零。
                </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.TraceListener.IndentSize">
      <summary>
                    获取或设置缩进的空格数。
                </summary>
      <returns>
                    缩进的空格数。默认值为四个空格。
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    Set 操作失败，因为值小于零。
                </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.TraceListener.IsThreadSafe">
      <summary>
                    获取一个值，该值指示跟踪侦听器是否是线程安全的。
                </summary>
      <returns>
                    如果跟踪侦听器是线程安全的，则为 true；否则为 false。默认值为 false。
                </returns>
    </member>
    <member name="P:System.Diagnostics.TraceListener.Name">
      <summary>
                    获取或设置此 <see cref="T:System.Diagnostics.TraceListener" /> 的名称。
                </summary>
      <returns>
                    此 <see cref="T:System.Diagnostics.TraceListener" /> 的名称。默认值为空字符串 ("")。
                </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.TraceListener.NeedIndent">
      <summary>
                    获取或设置一个值，该值指示是否缩进输出。
                </summary>
      <returns>
                    如果应缩进输出，则为 true；否则为 false。
                </returns>
    </member>
    <member name="M:System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
      <summary>
                    向特定于侦听器的输出中写入跟踪信息、数据对象和事件信息。
                </summary>
      <param name="eventCache">
                    包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" /> 对象。
                </param>
      <param name="source">
标识输出时使用的名称，通常为生成跟踪事件的应用程序的名称。
                </param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一，指定引发跟踪的事件类型。
                </param>
      <param name="id">
事件的数值标识符。
                </param>
      <param name="data">
                    要发出的跟踪数据。
                </param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
      <summary>
                    向特定于侦听器的输出中写入跟踪信息、数据对象的数组和事件信息。
                </summary>
      <param name="eventCache">
                    包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" /> 对象。
                </param>
      <param name="source">
标识输出时使用的名称，通常为生成跟踪事件的应用程序的名称。
                </param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一，指定引发跟踪的事件类型。
                </param>
      <param name="id">
事件的数值标识符。
                </param>
      <param name="data">
                    要作为数据发出的对象数组。
                </param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)">
      <summary>
向特定于侦听器的输出写入跟踪和事件信息。
                </summary>
      <param name="eventCache">
                    包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" /> 对象。
                </param>
      <param name="source">
标识输出时使用的名称，通常为生成跟踪事件的应用程序的名称。
                </param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一，指定引发跟踪的事件类型。
                </param>
      <param name="id">
事件的数值标识符。
                </param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
      <summary>
                    向特定于侦听器的输出中写入跟踪信息、消息和事件信息。
                </summary>
      <param name="eventCache">
                    包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" /> 对象。
                </param>
      <param name="source">
标识输出时使用的名称，通常为生成跟踪事件的应用程序的名称。
                </param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一，指定引发跟踪的事件类型。
                </param>
      <param name="id">
事件的数值标识符。
                </param>
      <param name="message">
要写入的消息。
                </param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
      <summary>
                    向特定于侦听器的输出中写入跟踪信息、格式化对象数组和事件信息。
                </summary>
      <param name="eventCache">
                    包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" /> 对象。
                </param>
      <param name="source">
标识输出时使用的名称，通常为生成跟踪事件的应用程序的名称。
                </param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一，指定引发跟踪的事件类型。
                </param>
      <param name="id">
事件的数值标识符。
                </param>
      <param name="format">
                    包含零个或多个格式项的格式字符串，这些项与 <paramref name="args" /> 数组中的对象相对应。
                </param>
      <param name="args">
                    包含零个或多个要格式化的对象的 object 数组。
                </param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.TraceListener.TraceOutputOptions">
      <summary>
                    获取或设置跟踪输出选项。
                </summary>
      <returns>
枚举值的按位组合。默认值为 <see cref="F:System.Diagnostics.TraceOptions.None" />。
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    Set 操作失败，因为值无效。
                </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)">
      <summary>
                    向侦听器特定的输出中写入跟踪信息、消息、相关活动标识和事件信息。
                </summary>
      <param name="eventCache">
                    包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" /> 对象。
                </param>
      <param name="source">
标识输出时使用的名称，通常为生成跟踪事件的应用程序的名称。
                </param>
      <param name="id">
事件的数值标识符。
                </param>
      <param name="message">
要写入的消息。
                </param>
      <param name="relatedActivityId">
                     标识相关活动的 <see cref="T:System.Guid" /> 对象。
                </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.TraceListener.Write(System.Object)">
      <summary>
                    实现 <see cref="T:System.Diagnostics.TraceListener" /> 类时，向所创建的侦听器写入对象的 <see cref="M:System.Object.ToString" /> 方法值。
                </summary>
      <param name="o">
                    要为其编写完全限定类名的 <see cref="T:System.Object" />。
                </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.TraceListener.Write(System.Object,System.String)">
      <summary>
                    实现 <see cref="T:System.Diagnostics.TraceListener" /> 类时，向所创建的侦听器写入类别名称和对象的 <see cref="M:System.Object.ToString" /> 方法值。
                </summary>
      <param name="o">
                    要为其编写完全限定类名的 <see cref="T:System.Object" />。
                </param>
      <param name="category">
用于组织输出的类别名称。
                </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.TraceListener.Write(System.String)">
      <summary>
                    在派生类中被重写时，向在该派生类中所创建的侦听器写入指定消息。
                </summary>
      <param name="message">
要写入的消息。
                </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.TraceListener.Write(System.String,System.String)">
      <summary>
                    实现 <see cref="T:System.Diagnostics.TraceListener" /> 类时，向所创建的侦听器写入类别名称和消息。
                </summary>
      <param name="message">
要写入的消息。
                </param>
      <param name="category">
用于组织输出的类别名称。
                </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.TraceListener.WriteIndent">
      <summary>
                    实现此类时，向所创建的侦听器写入缩进，并将 <see cref="P:System.Diagnostics.TraceListener.NeedIndent" /> 属性重置为 false。
                </summary>
    </member>
    <member name="M:System.Diagnostics.TraceListener.WriteLine(System.Object)">
      <summary>
                    实现 <see cref="T:System.Diagnostics.TraceListener" /> 类时，向所创建的侦听器写入对象的 <see cref="M:System.Object.ToString" /> 方法值，后跟行结束符。
                </summary>
      <param name="o">
                    要为其编写完全限定类名的 <see cref="T:System.Object" />。
                </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)">
      <summary>
                    实现 <see cref="T:System.Diagnostics.TraceListener" /> 类时，向所创建的侦听器写入类别名称和对象的 <see cref="M:System.Object.ToString" /> 方法值，后跟行结束符。
                </summary>
      <param name="o">
                    要为其编写完全限定类名的 <see cref="T:System.Object" />。
                </param>
      <param name="category">
用于组织输出的类别名称。
                </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.TraceListener.WriteLine(System.String)">
      <summary>
                    在派生类中被重写时，向在该派生类中所创建的侦听器写入消息，后跟行结束符。
                </summary>
      <param name="message">
要写入的消息。
                </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.TraceListener.WriteLine(System.String,System.String)">
      <summary>
                    实现 <see cref="T:System.Diagnostics.TraceListener" /> 类时，向所创建的侦听器写入类别名称和消息，后跟行结束符。
                </summary>
      <param name="message">
要写入的消息。
                </param>
      <param name="category">
用于组织输出的类别名称。
                </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.TraceListenerCollection">
      <summary>提供 <see cref="T:System.Diagnostics.TraceListener" /> 对象的线程安全列表。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.Add(System.Diagnostics.TraceListener)">
      <summary>将 <see cref="T:System.Diagnostics.TraceListener" /> 添加到列表。</summary>
      <returns>插入新侦听器的位置。</returns>
      <param name="listener">要添加到列表的 <see cref="T:System.Diagnostics.TraceListener" />。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.AddRange(System.Diagnostics.TraceListener[])">
      <summary>将 <see cref="T:System.Diagnostics.TraceListener" /> 对象的数组添加到列表。</summary>
      <param name="value">要添加到列表的 <see cref="T:System.Diagnostics.TraceListener" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.AddRange(System.Diagnostics.TraceListenerCollection)">
      <summary>将另一个 <see cref="T:System.Diagnostics.TraceListenerCollection" /> 的内容添加到列表。</summary>
      <param name="value">内容被添加到列表的另一个 <see cref="T:System.Diagnostics.TraceListenerCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.Clear">
      <summary>从列表中清除所有侦听器。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.Contains(System.Diagnostics.TraceListener)">
      <summary>检查列表是否包含指定的侦听器。</summary>
      <returns>
            如果列表包含该侦听器，则为 true；否则为 false。</returns>
      <param name="listener">要在列表中查找的 <see cref="T:System.Diagnostics.TraceListener" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.CopyTo(System.Diagnostics.TraceListener[],System.Int32)">
      <summary>将当前 <see cref="T:System.Diagnostics.TraceListenerCollection" /> 列表的一部分复制到指定索引处的指定数组。</summary>
      <param name="listeners">将元素复制到其中的 <see cref="T:System.Array" /> 类型的数组。</param>
      <param name="index">当前列表中要进行复制的起始索引号。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.TraceListenerCollection.Count">
      <summary>获取列表中的侦听器数。</summary>
      <returns>该列表中的侦听器数。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.GetEnumerator">
      <summary>获取此列表的枚举数。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 类型的枚举数。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.IndexOf(System.Diagnostics.TraceListener)">
      <summary>获取指定侦听器的索引。</summary>
      <returns>侦听器的索引（如果可在列表中找到）；否则为 -1。</returns>
      <param name="listener">要在列表中查找的 <see cref="T:System.Diagnostics.TraceListener" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.Insert(System.Int32,System.Diagnostics.TraceListener)">
      <summary>将侦听器插入指定的索引位置。</summary>
      <param name="index">列表中要插入新 <see cref="T:System.Diagnostics.TraceListener" /> 的位置。</param>
      <param name="listener">要插入列表的 <see cref="T:System.Diagnostics.TraceListener" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是列表中的有效索引。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="listener" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.TraceListenerCollection.Item(System.Int32)">
      <summary>获取或设置指定索引处的 <see cref="T:System.Diagnostics.TraceListener" />。</summary>
      <returns>具有指定索引的 <see cref="T:System.Diagnostics.TraceListener" />。</returns>
      <param name="i">从列表获取的 <see cref="T:System.Diagnostics.TraceListener" /> 的从零开始的索引。</param>
      <exception cref="T:System.ArgumentNullException">该值为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.TraceListenerCollection.Item(System.String)">
      <summary>获取列表中具有指定名称的第一个 <see cref="T:System.Diagnostics.TraceListener" />。</summary>
      <returns>列表中具有给定 <see cref="P:System.Diagnostics.TraceListener.Name" /> 的第一个 <see cref="T:System.Diagnostics.TraceListener" />。如果找不到任何具有给定名称的 <see cref="T:System.Diagnostics.TraceListener" />，则此项返回 null。</returns>
      <param name="name">要从列表中获取的 <see cref="T:System.Diagnostics.TraceListener" /> 的名称。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.Remove(System.Diagnostics.TraceListener)">
      <summary>从集合中移除指定的 <see cref="T:System.Diagnostics.TraceListener" />。</summary>
      <param name="listener">要从列表中移除的 <see cref="T:System.Diagnostics.TraceListener" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.Remove(System.String)">
      <summary>从集合中移除具有指定名称的第一个 <see cref="T:System.Diagnostics.TraceListener" />。</summary>
      <param name="name">要从列表中移除的 <see cref="T:System.Diagnostics.TraceListener" /> 的名称。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.RemoveAt(System.Int32)">
      <summary>从集合中移除指定索引处的 <see cref="T:System.Diagnostics.TraceListener" />。</summary>
      <param name="index">要从列表中移除的 <see cref="T:System.Diagnostics.TraceListener" /> 的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是列表中的有效索引。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>将当前 <see cref="T:System.Diagnostics.TraceListenerCollection" /> 的一部分复制到指定的 <see cref="T:System.Diagnostics.TraceListener" /> 对象数组中。</summary>
      <param name="array">
        <see cref="T:System.Diagnostics.TraceListener" /> 对象的一维数组，是从 <see cref="T:System.Diagnostics.TraceListenerCollection" /> 复制的元素的目标数组。该数组必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="P:System.Diagnostics.TraceListenerCollection.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Diagnostics.TraceListenerCollection" /> 的访问（线程安全）。</summary>
      <returns>总是为 true。</returns>
    </member>
    <member name="P:System.Diagnostics.TraceListenerCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步 <see cref="T:System.Diagnostics.TraceListenerCollection" /> 访问的对象。</summary>
      <returns>当前的 <see cref="T:System.Diagnostics.TraceListenerCollection" /> 对象。</returns>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.System#Collections#IList#Add(System.Object)">
      <summary>向 <see cref="T:System.Diagnostics.TraceListenerCollection" /> 中添加一个跟踪侦听器。</summary>
      <returns>新跟踪侦听器的插入位置。</returns>
      <param name="value">要添加到 <see cref="T:System.Diagnostics.TraceListenerCollection" /> 的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 为 null。- 或 -<paramref name="value" /> 不是 <see cref="T:System.Diagnostics.TraceListener" />。</exception>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.System#Collections#IList#Contains(System.Object)">
      <summary>确定 <see cref="T:System.Diagnostics.TraceListenerCollection" /> 是否包含特定对象。</summary>
      <returns>
            如果在 <see cref="T:System.Diagnostics.TraceListenerCollection" /> 中找到 <see cref="T:System.Object" />，则为 true；否则为 false。</returns>
      <param name="value">要在 <see cref="T:System.Diagnostics.TraceListenerCollection" /> 中定位的对象。</param>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>确定 <see cref="T:System.Diagnostics.TraceListenerCollection" /> 中特定对象的索引。</summary>
      <returns>如果在 <see cref="T:System.Diagnostics.TraceListenerCollection" /> 中找到，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
      <param name="value">要在 <see cref="T:System.Diagnostics.TraceListenerCollection" /> 中定位的对象。</param>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>在 <see cref="T:System.Diagnostics.TraceListenerCollection" /> 中的指定位置插入一个 <see cref="T:System.Diagnostics.TraceListener" /> 对象。</summary>
      <param name="index">从零开始的索引，应在该位置插入 <paramref name="value" />。</param>
      <param name="value">要插入到 <see cref="T:System.Diagnostics.TraceListenerCollection" /> 中的 <see cref="T:System.Diagnostics.TraceListener" /> 对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Diagnostics.TraceListener" /> 对象。</exception>
    </member>
    <member name="P:System.Diagnostics.TraceListenerCollection.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Diagnostics.TraceListenerCollection" /> 是否具有固定大小。</summary>
      <returns>总是为 false。</returns>
    </member>
    <member name="P:System.Diagnostics.TraceListenerCollection.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Diagnostics.TraceListenerCollection" /> 是否为只读</summary>
      <returns>总是为 false。</returns>
    </member>
    <member name="P:System.Diagnostics.TraceListenerCollection.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置 <see cref="T:System.Diagnostics.TraceListenerCollection" /> 的指定索引处的 <see cref="T:System.Diagnostics.TraceListener" />。</summary>
      <returns>指定索引处的 <see cref="T:System.Diagnostics.TraceListener" />。</returns>
      <param name="index">要获取的 <paramref name="value" /> 的从零开始的索引。</param>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.System#Collections#IList#Remove(System.Object)">
      <summary>从 <see cref="T:System.Diagnostics.TraceListenerCollection" /> 中移除一个对象。</summary>
      <param name="value">要从 <see cref="T:System.Diagnostics.TraceListenerCollection" /> 中移除的对象。</param>
    </member>
    <member name="T:System.Diagnostics.TraceOptions">
      <summary>
                    指定要写入跟踪输出中的跟踪数据选项。
                </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.TraceOptions.None">
      <summary>
                    不写入任何元素。
                </summary>
    </member>
    <member name="F:System.Diagnostics.TraceOptions.LogicalOperationStack">
      <summary>
                    写入逻辑操作堆栈，该堆栈由 <see cref="P:System.Diagnostics.CorrelationManager.LogicalOperationStack" /> 属性的返回值表示。
                </summary>
    </member>
    <member name="F:System.Diagnostics.TraceOptions.DateTime">
      <summary>
                    写入日期和时间。
                </summary>
    </member>
    <member name="F:System.Diagnostics.TraceOptions.Timestamp">
      <summary>
                    写入时间戳，该时间戳由 <see cref="M:System.Diagnostics.Stopwatch.GetTimestamp" /> 方法的返回值表示。
                </summary>
    </member>
    <member name="F:System.Diagnostics.TraceOptions.ProcessId">
      <summary>
                    写入进程标识，该标识由 <see cref="P:System.Diagnostics.Process.Id" /> 属性的返回值表示。
                </summary>
    </member>
    <member name="F:System.Diagnostics.TraceOptions.ThreadId">
      <summary>
                    写入线程标识，该标识由当前线程的 <see cref="P:System.Threading.Thread.ManagedThreadId" /> 属性的返回值表示。
                </summary>
    </member>
    <member name="F:System.Diagnostics.TraceOptions.Callstack">
      <summary>
                    写入调用堆栈，该堆栈由 <see cref="P:System.Environment.StackTrace" /> 属性的返回值表示。
                </summary>
    </member>
    <member name="T:System.Diagnostics.TraceSource">
      <summary>提供一组方法和属性，利用这些方法和属性，应用程序可以跟踪代码的执行并将跟踪消息和它们的源关联起来。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.TraceSource.#ctor(System.String)">
      <summary>使用指定的源名称初始化 <see cref="T:System.Diagnostics.TraceSource" /> 类的新实例。</summary>
      <param name="name">源的名称，通常为应用程序的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 为空字符串 ("")。</exception>
    </member>
    <member name="M:System.Diagnostics.TraceSource.#ctor(System.String,System.Diagnostics.SourceLevels)">
      <summary>使用源的指定名称和执行跟踪的默认源级别初始化 <see cref="T:System.Diagnostics.TraceSource" /> 类的新实例。 </summary>
      <param name="name">源的名称，通常为应用程序的名称。</param>
      <param name="defaultLevel">
        <see cref="T:System.Diagnostics.SourceLevels" /> 值的按位组合，指定要跟踪的默认源级别。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 为空字符串 ("")。</exception>
    </member>
    <member name="P:System.Diagnostics.TraceSource.Attributes">
      <summary>获取在应用程序配置文件中定义的自定义开关属性。</summary>
      <returns>包含跟踪开关的自定义属性的 <see cref="T:System.Collections.Specialized.StringDictionary" />。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.TraceSource.Close">
      <summary>关闭跟踪侦听器集合中的所有跟踪侦听器。</summary>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.TraceSource.Flush">
      <summary>刷新跟踪侦听器集合中的所有跟踪侦听器。</summary>
      <exception cref="T:System.ObjectDisposedException">终止期间尝试跟踪事件。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.TraceSource.GetSupportedAttributes">
      <summary>获取跟踪源所支持的自定义属性。</summary>
      <returns>对跟踪源支持的自定义属性进行命名的字符串数组；如果不存在自定义属性，则为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.TraceSource.Listeners">
      <summary>获取跟踪源的跟踪侦听器集合。</summary>
      <returns>包含与源关联的活动跟踪侦听器的 <see cref="T:System.Diagnostics.TraceListenerCollection" />。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.TraceSource.Name">
      <summary>获取跟踪源的名称。</summary>
      <returns>跟踪源的名称。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Diagnostics.TraceSource.Switch">
      <summary>获取或设置源开关的值。</summary>
      <returns>表示源开关值的 <see cref="T:System.Diagnostics.SourceSwitch" /> 对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Diagnostics.TraceSource.Switch" /> 被设置为 null。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.TraceSource.TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Object)">
      <summary>使用指定的事件类型、事件标识符和跟踪数据，将跟踪数据写入 <see cref="P:System.Diagnostics.TraceSource.Listeners" /> 集合中的跟踪侦听器中。</summary>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一，指定跟踪数据的事件类型。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="data">跟踪数据。</param>
      <exception cref="T:System.ObjectDisposedException">终止期间尝试跟踪事件。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.TraceSource.TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
      <summary>使用指定的事件类型、事件标识符和跟踪数据数组，将跟踪数据写入 <see cref="P:System.Diagnostics.TraceSource.Listeners" /> 集合中的跟踪侦听器中。</summary>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一，指定跟踪数据的事件类型。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="data">包含跟踪数据的对象数组。</param>
      <exception cref="T:System.ObjectDisposedException">终止期间尝试跟踪事件。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32)">
      <summary>使用指定的事件类型和事件标识符，将跟踪事件消息写入 <see cref="P:System.Diagnostics.TraceSource.Listeners" /> 集合中的跟踪侦听器中。</summary>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一，指定跟踪数据的事件类型。</param>
      <param name="id">事件的数值标识符。</param>
      <exception cref="T:System.ObjectDisposedException">终止期间尝试跟踪事件。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String)">
      <summary>使用指定的事件类型、事件标识符和消息，将跟踪事件消息写入 <see cref="P:System.Diagnostics.TraceSource.Listeners" /> 集合中的跟踪侦听器中。</summary>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一，指定跟踪数据的事件类型。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="message">要写入的跟踪消息。</param>
      <exception cref="T:System.ObjectDisposedException">终止期间尝试跟踪事件。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
      <summary>使用指定的事件类型、事件标识符以及参数数组和格式，将跟踪事件写入 <see cref="P:System.Diagnostics.TraceSource.Listeners" /> 集合中的跟踪侦听器中。</summary>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一，指定跟踪数据的事件类型。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="format">一个包含与零个或多个格式项混合的文本的复合格式字符串，它与 <paramref name="args" /> 数组中的对象相对应。</param>
      <param name="args">包含零个或多个要格式化的对象的 object 数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。- 或 - 表示要设置格式的参数的数字小于零，或者大于等于要设置格式的指定对象的数目。</exception>
      <exception cref="T:System.ObjectDisposedException">终止期间尝试跟踪事件。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.TraceSource.TraceInformation(System.String)">
      <summary>使用指定消息，将信息性消息写入 <see cref="P:System.Diagnostics.TraceSource.Listeners" /> 集合中的跟踪侦听器中。</summary>
      <param name="message">要写入的信息性消息。</param>
      <exception cref="T:System.ObjectDisposedException">终止期间尝试跟踪事件。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.TraceSource.TraceInformation(System.String,System.Object[])">
      <summary>使用指定的对象数组和格式化信息，将信息性消息写入 <see cref="P:System.Diagnostics.TraceSource.Listeners" /> 集合中的跟踪侦听器中。</summary>
      <param name="format">一个包含与零个或多个格式项混合的文本的复合格式字符串，它与 <paramref name="args" /> 数组中的对象相对应。</param>
      <param name="args">包含零个或多个要格式化的对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。- 或 - 表示要设置格式的参数的数字小于零，或者大于等于要设置格式的指定对象的数目。</exception>
      <exception cref="T:System.ObjectDisposedException">终止期间尝试跟踪事件。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.TraceSource.TraceTransfer(System.Int32,System.String,System.Guid)">
      <summary>使用指定的数字标识符、消息和相关活动标识符，将跟踪传输消息写入 <see cref="P:System.Diagnostics.TraceSource.Listeners" /> 集合的跟踪侦听器中。</summary>
      <param name="id">事件的数值标识符。</param>
      <param name="message">要写入的跟踪消息。</param>
      <param name="relatedActivityId">标识相关活动的 <see cref="T:System.Guid" /> 结构。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Diagnostics.TraceSwitch">
      <summary>提供多级开关控制跟踪和调试输出而不必重新编译代码。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.TraceSwitch.#ctor(System.String,System.String)">
      <summary>使用指定的显示名称和说明初始化 <see cref="T:System.Diagnostics.TraceSwitch" /> 类的新实例。</summary>
      <param name="displayName">要显示在用户界面上的名称。</param>
      <param name="description">开关说明。</param>
    </member>
    <member name="M:System.Diagnostics.TraceSwitch.#ctor(System.String,System.String,System.String)">
      <summary>使用开关的指定显示名称、说明和默认值来初始化 <see cref="T:System.Diagnostics.TraceSwitch" /> 类的新实例。</summary>
      <param name="displayName">要显示在用户界面上的名称。</param>
      <param name="description">开关说明。</param>
      <param name="defaultSwitchValue">开关的默认值。</param>
    </member>
    <member name="P:System.Diagnostics.TraceSwitch.Level">
      <summary>获取或设置跟踪级别，它将确定开关所允许的消息。</summary>
      <returns>
        <see cref="T:System.Diagnostics.TraceLevel" /> 值之一，它指定开关所允许的消息的级别。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Diagnostics.TraceSwitch.Level" /> 设置为非 <see cref="T:System.Diagnostics.TraceLevel" /> 值。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.TraceSwitch.OnSwitchSettingChanged">
      <summary>更新并更正此开关的级别。</summary>
    </member>
    <member name="M:System.Diagnostics.TraceSwitch.OnValueChanged">
      <summary>将 <see cref="P:System.Diagnostics.Switch.SwitchSetting" /> 属性设置为 <see cref="P:System.Diagnostics.Switch.Value" /> 属性的整数等效值。</summary>
    </member>
    <member name="P:System.Diagnostics.TraceSwitch.TraceError">
      <summary>获取一个值，它指示开关是否允许错误处理消息。</summary>
      <returns>
            如果 <see cref="P:System.Diagnostics.TraceSwitch.Level" /> 设置为 <see cref="F:System.Diagnostics.TraceLevel.Error" />、<see cref="F:System.Diagnostics.TraceLevel.Warning" />、<see cref="F:System.Diagnostics.TraceLevel.Info" /> 或 <see cref="F:System.Diagnostics.TraceLevel.Verbose" />，则为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.TraceSwitch.TraceInfo">
      <summary>获取一个值，它指示开关是否允许信息性消息。</summary>
      <returns>
            如果 <see cref="P:System.Diagnostics.TraceSwitch.Level" /> 属性设置为 <see cref="F:System.Diagnostics.TraceLevel.Info" /> 或 <see cref="F:System.Diagnostics.TraceLevel.Verbose" />，则为 true；否则为 false。 </returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.TraceSwitch.TraceVerbose">
      <summary>获取一个值，它指示开关是否允许所有消息。</summary>
      <returns>
            如果 <see cref="P:System.Diagnostics.TraceSwitch.Level" /> 属性设置为 <see cref="F:System.Diagnostics.TraceLevel.Verbose" />，则为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Diagnostics.TraceSwitch.TraceWarning">
      <summary>获取一个值，它指示开关是否允许警告消息。</summary>
      <returns>
            如果 <see cref="P:System.Diagnostics.TraceSwitch.Level" /> 属性设置为 <see cref="F:System.Diagnostics.TraceLevel.Warning" />、<see cref="F:System.Diagnostics.TraceLevel.Info" /> 或 <see cref="F:System.Diagnostics.TraceLevel.Verbose" />，则为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.Diagnostics.XmlWriterTraceListener">
      <summary>将跟踪或调试输出作为 XML 编码的数据定向到 <see cref="T:System.IO.TextWriter" /> 或 <see cref="T:System.IO.Stream" />（如 <see cref="T:System.IO.FileStream" />）。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.Stream)">
      <summary>通过将指定的流用作调试和跟踪输出的接收者来初始化 <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> 类的新实例。</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" />，它表示跟踪侦听器写入的流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.Stream,System.String)">
      <summary>通过将指定的流用作调试和跟踪输出的接收者来初始化具有指定名称的 <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> 类的新实例。</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" />，它表示跟踪侦听器写入的流。</param>
      <param name="name">新实例的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.TextWriter)">
      <summary>通过将指定的编写器用作调试和跟踪输出的接收者来初始化 <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> 类的新实例。</summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" />，它接收来自跟踪侦听器的输出。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为null。</exception>
    </member>
    <member name="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.TextWriter,System.String)">
      <summary>通过将指定的编写器用作调试和跟踪输出的接收者来初始化具有指定名称的 <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> 类的新实例。</summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" />，它接收来自跟踪侦听器的输出。</param>
      <param name="name">新实例的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.String)">
      <summary>通过将指定的文件用作调试和跟踪输出的接收者来初始化 <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> 类的新实例。</summary>
      <param name="filename">要写入的文件的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filename" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.String,System.String)">
      <summary>通过将指定的文件用作调试和跟踪输出的接收者来初始化具有指定名称的 <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> 类的新实例。 </summary>
      <param name="filename">要写入的文件的名称。</param>
      <param name="name">新实例的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.XmlWriterTraceListener.Close">
      <summary>关闭该侦听器的 <see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" />，以使其不再接收跟踪或调试输出。</summary>
    </member>
    <member name="M:System.Diagnostics.XmlWriterTraceListener.Fail(System.String,System.String)">
      <summary>将包含错误信息和详细错误信息的跟踪信息写入文件或流中。</summary>
      <param name="message">要写入的错误信息。</param>
      <param name="detailMessage">要追加到错误信息的详细错误信息。</param>
    </member>
    <member name="M:System.Diagnostics.XmlWriterTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
      <summary>将跟踪信息、数据对象和事件信息写入文件或流中。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
      <param name="source">源名称。</param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="data">要发出的数据对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.XmlWriterTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
      <summary>将跟踪信息、数据对象和事件信息写入文件或流中。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
      <param name="source">源名称。</param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="data">要发出的数据对象的数组。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.XmlWriterTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
      <summary>将跟踪信息、消息和事件信息写入文件或流中。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
      <param name="source">源名称。</param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="message">要写入的消息。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.XmlWriterTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
      <summary>将跟踪信息、格式化消息和事件信息写入文件或流中。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
      <param name="source">源名称。</param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="format">包含零个或多个格式项的格式字符串，这些项与 <paramref name="args" /> 数组中的对象相对应。</param>
      <param name="args">包含零个或多个要格式化的对象的对象数组。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.XmlWriterTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)">
      <summary>将跟踪信息（包括相关活动的标识）、消息和事件信息写入文件或流中。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
      <param name="source">源名称。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="message">要写入的跟踪消息。</param>
      <param name="relatedActivityId">标识相关活动的 <see cref="T:System.Guid" /> 结构。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.XmlWriterTraceListener.Write(System.String)">
      <summary>将不包含任何其他上下文信息的原义消息写入文件或流中。</summary>
      <param name="message">要写入的消息。</param>
    </member>
    <member name="M:System.Diagnostics.XmlWriterTraceListener.WriteLine(System.String)">
      <summary>将不包含任何其他上下文信息且后跟当前行结束符的原义消息写入文件或流中。</summary>
      <param name="message">要写入的消息。</param>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.OnInsert(System.Int32,System.Object)">
      <summary>在将一个新的数据项插入此集合之前执行其他自定义进程。</summary>
      <param name="index">从零开始的索引，在该处插入 <paramref name="value" />。</param>
      <param name="value">在 <paramref name="index" /> 处的项的新值。</param>
    </member>
    <member name="T:System.IO.ErrorEventArgs">
      <summary>为 <see cref="E:System.IO.FileSystemWatcher.Error" /> 事件提供数据。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.ErrorEventArgs.#ctor(System.Exception)">
      <summary>初始化 <see cref="T:System.IO.ErrorEventArgs" /> 类的新实例。</summary>
      <param name="exception">表示已发生的错误的 <see cref="T:System.Exception" />。 </param>
    </member>
    <member name="M:System.IO.ErrorEventArgs.GetException">
      <summary>获取表示已发生的错误的 <see cref="T:System.Exception" />。</summary>
      <returns>表示已发生的错误的 <see cref="T:System.Exception" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IO.ErrorEventHandler">
      <summary>表示将处理 <see cref="T:System.IO.FileSystemWatcher" /> 对象的 <see cref="E:System.IO.FileSystemWatcher.Error" /> 事件的方法。</summary>
      <param name="sender">事件源。 </param>
      <param name="e">包含事件数据的 <see cref="T:System.IO.ErrorEventArgs" /> 对象。 </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IO.FileSystemEventArgs">
      <summary>提供目录事件的数据：<see cref="E:System.IO.FileSystemWatcher.Changed" />、<see cref="E:System.IO.FileSystemWatcher.Created" />、<see cref="E:System.IO.FileSystemWatcher.Deleted" />。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.FileSystemEventArgs.#ctor(System.IO.WatcherChangeTypes,System.String,System.String)">
      <summary>初始化 <see cref="T:System.IO.FileSystemEventArgs" /> 类的新实例。</summary>
      <param name="changeType">
        <see cref="T:System.IO.WatcherChangeTypes" /> 值之一，它表示在文件系统中检测到的更改种类。 </param>
      <param name="directory">受影响的文件或目录的根目录。 </param>
      <param name="name">受影响的文件或目录名。 </param>
    </member>
    <member name="P:System.IO.FileSystemEventArgs.ChangeType">
      <summary>获取所发生的目录事件的类型。</summary>
      <returns>
        <see cref="T:System.IO.WatcherChangeTypes" /> 值之一，表示在文件系统中检测到的更改种类。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.FileSystemEventArgs.FullPath">
      <summary>获取受影响的文件或目录的完全限定的路径。</summary>
      <returns>受影响的文件或目录的路径。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.FileSystemEventArgs.Name">
      <summary>获取受影响的文件或目录的名称。</summary>
      <returns>受影响的文件或目录名。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IO.FileSystemEventHandler">
      <summary>表示将处理 <see cref="T:System.IO.FileSystemWatcher" /> 类的 <see cref="E:System.IO.FileSystemWatcher.Changed" />、<see cref="E:System.IO.FileSystemWatcher.Created" /> 或 <see cref="E:System.IO.FileSystemWatcher.Deleted" /> 事件的方法。</summary>
      <param name="sender">事件源。 </param>
      <param name="e">包含事件数据的 <see cref="T:System.IO.FileSystemEventArgs" />。 </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IO.FileSystemWatcher">
      <summary>侦听文件系统更改通知，并在目录或目录中的文件发生更改时引发事件。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.FileSystemWatcher.#ctor">
      <summary>初始化 <see cref="T:System.IO.FileSystemWatcher" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IO.FileSystemWatcher.#ctor(System.String)">
      <summary>给定要监视的指定目录，初始化 <see cref="T:System.IO.FileSystemWatcher" /> 类的新实例。</summary>
      <param name="path">以标准表示法或统一命名约定 (UNC) 表示法表示的要监视的目录。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 参数是空字符串 ("")。- 或 - 通过 <paramref name="path" /> 参数指定的路径不存在。</exception>
    </member>
    <member name="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
      <summary>给定要监视的指定目录和文件类型，初始化 <see cref="T:System.IO.FileSystemWatcher" /> 类的新实例。</summary>
      <param name="path">以标准表示法或统一命名约定 (UNC) 表示法表示的要监视的目录。</param>
      <param name="filter">要监视的文件的类型。例如，“*.txt”监视所有文本文件的更改。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 参数为 null。- 或 - <paramref name="filter" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 参数是空字符串 ("")。- 或 - 通过 <paramref name="path" /> 参数指定的路径不存在。</exception>
    </member>
    <member name="M:System.IO.FileSystemWatcher.BeginInit">
      <summary>开始初始化在窗体上使用或由另一个组件使用的 <see cref="T:System.IO.FileSystemWatcher" />。初始化发生在运行时。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.IO.FileSystemWatcher.Changed">
      <summary>当更改指定 <see cref="P:System.IO.FileSystemWatcher.Path" /> 中的文件和目录时发生。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.IO.FileSystemWatcher.Created">
      <summary>当在指定 <see cref="P:System.IO.FileSystemWatcher.Path" /> 中创建文件和目录时发生。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.IO.FileSystemWatcher.Deleted">
      <summary>删除指定 <see cref="P:System.IO.FileSystemWatcher.Path" /> 中的文件或目录时发生。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.IO.FileSystemWatcher" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">
                为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。</param>
    </member>
    <member name="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
      <summary>获取或设置一个值，该值指示是否启用此组件。</summary>
      <returns>
            如果启用此组件，则为 true；否则为 false。默认为 false。如果在 Visual Studio 2005 的设计器上使用该组件，则默认值为 true。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放 <see cref="T:System.IO.FileSystemWatcher" /> 对象。</exception>
      <exception cref="T:System.PlatformNotSupportedException">当前操作系统不是 Microsoft Windows NT 或更高版本。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <see cref="P:System.IO.FileSystemWatcher.Path" /> 中指定的目录。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.IO.FileSystemWatcher.Path" /> 尚未设置或无效。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.FileSystemWatcher.EndInit">
      <summary>结束在窗体上使用或由另一个组件使用的 <see cref="T:System.IO.FileSystemWatcher" /> 的初始化。初始化发生在运行时。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.IO.FileSystemWatcher.Error">
      <summary>当内部缓冲区溢出时发生。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.FileSystemWatcher.Filter">
      <summary>获取或设置筛选字符串，用于确定在目录中监视哪些文件。</summary>
      <returns>筛选器字符串。默认值为“*.*”（监视所有文件）。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.FileSystemWatcher.IncludeSubdirectories">
      <summary>获取或设置一个值，该值指示是否监视指定路径中的子目录。</summary>
      <returns>
            如果要监视子目录，则为 true；否则为 false。默认为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.FileSystemWatcher.InternalBufferSize">
      <summary>获取或设置内部缓冲区的大小。</summary>
      <returns>内部缓冲区的大小。默认值为 8192 (8K)。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.FileSystemWatcher.NotifyFilter">
      <summary>获取或设置要监视的更改类型。</summary>
      <returns>
        <see cref="T:System.IO.NotifyFilters" /> 值之一。默认值为 LastWrite、FileName 和 DirectoryName 的按位“或”组合。</returns>
      <exception cref="T:System.ArgumentException">该值不是 <see cref="T:System.IO.NotifyFilters" /> 值的有效按位“或”组合。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">正在设置的值无效。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)">
      <summary>引发 <see cref="E:System.IO.FileSystemWatcher.Changed" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.IO.FileSystemEventArgs" />。</param>
    </member>
    <member name="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
      <summary>引发 <see cref="E:System.IO.FileSystemWatcher.Created" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.IO.FileSystemEventArgs" />。</param>
    </member>
    <member name="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
      <summary>引发 <see cref="E:System.IO.FileSystemWatcher.Deleted" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.IO.FileSystemEventArgs" />。</param>
    </member>
    <member name="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)">
      <summary>引发 <see cref="E:System.IO.FileSystemWatcher.Error" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.IO.ErrorEventArgs" />。</param>
    </member>
    <member name="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)">
      <summary>引发 <see cref="E:System.IO.FileSystemWatcher.Renamed" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.IO.RenamedEventArgs" />。</param>
    </member>
    <member name="P:System.IO.FileSystemWatcher.Path">
      <summary>获取或设置要监视的目录的路径。</summary>
      <returns>要监视的路径。默认值为空字符串 ("")。</returns>
      <exception cref="T:System.ArgumentException">指定的路径不存在或找不到。- 或 - 指定的路径包含通配符字符。- 或 - 指定的路径包含无效路径字符。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.IO.FileSystemWatcher.Renamed">
      <summary>重命名指定 <see cref="P:System.IO.FileSystemWatcher.Path" /> 中的文件或目录时发生。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.FileSystemWatcher.Site">
      <summary>获取或设置 <see cref="T:System.IO.FileSystemWatcher" /> 的 <see cref="T:System.ComponentModel.ISite" />。</summary>
      <returns>用于 <see cref="T:System.IO.FileSystemWatcher" /> 的 <see cref="T:System.ComponentModel.ISite" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.FileSystemWatcher.SynchronizingObject">
      <summary>获取或设置一个对象，该对象用于封送因目录更改而发出的事件处理程序调用。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ISynchronizeInvoke" />，表示一个对象，该对象用于封送因目录更改而发出的事件处理程序调用。默认为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)">
      <summary>一种给定了要监视的更改类型的同步方法，该方法返回包含有关所发生更改的特定信息的结构。</summary>
      <returns>
        <see cref="T:System.IO.WaitForChangedResult" />，包含关于已发生的更改的特定信息。</returns>
      <param name="changeType">要监视的 <see cref="T:System.IO.WatcherChangeTypes" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
      <summary>一种给定了要监视的更改类型和超时前等待的时间（以毫秒表示）的同步方法，该方法返回包含有关所发生更改的特定信息的结构。</summary>
      <returns>
        <see cref="T:System.IO.WaitForChangedResult" />，包含关于已发生的更改的特定信息。</returns>
      <param name="changeType">要监视的 <see cref="T:System.IO.WatcherChangeTypes" />。</param>
      <param name="timeout">超时前等待的时间（以毫秒表示）。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IO.InternalBufferOverflowException">
      <summary>内部缓冲区溢出时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.InternalBufferOverflowException.#ctor">
      <summary>初始化 <see cref="T:System.IO.InternalBufferOverflowException" /> 类的一个新默认实例。</summary>
    </member>
    <member name="M:System.IO.InternalBufferOverflowException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化 <see cref="T:System.IO.InternalBufferOverflowException" /> 类的新的空实例，该实例可序列化且使用指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</summary>
      <param name="info">序列化 <see cref="T:System.IO.InternalBufferOverflowException" /> 对象所需的信息。</param>
      <param name="context">与 <see cref="T:System.IO.InternalBufferOverflowException" /> 对象关联的序列化流的源和目标。</param>
    </member>
    <member name="M:System.IO.InternalBufferOverflowException.#ctor(System.String)">
      <summary>通过指定要显示的错误信息来初始化 <see cref="T:System.IO.InternalBufferOverflowException" /> 类的新实例。</summary>
      <param name="message">要为异常提供的消息。</param>
    </member>
    <member name="M:System.IO.InternalBufferOverflowException.#ctor(System.String,System.Exception)">
      <summary>通过指定要显示的消息和生成的内部异常来初始化 <see cref="T:System.IO.InternalBufferOverflowException" /> 类的新实例。</summary>
      <param name="message">要为异常提供的消息。</param>
      <param name="inner">内部异常。</param>
    </member>
    <member name="T:System.IO.InvalidDataException">
      <summary>在数据流的格式无效时引发的异常。</summary>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor">
      <summary>初始化 <see cref="T:System.IO.InvalidDataException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor(System.String)">
      <summary>用指定的错误信息初始化 <see cref="T:System.IO.InvalidDataException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor(System.String,System.Exception)">
      <summary>用对作为此异常原因的内部异常的引用初始化 <see cref="T:System.IO.InvalidDataException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。如果 <paramref name="innerException" /> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.IO.IODescriptionAttribute">
      <summary>设置可视化设计器在引用事件、扩展程序或属性时可显示的说明。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.IODescriptionAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.IO.IODescriptionAttribute" /> 类的新实例。</summary>
      <param name="description">要使用的说明。 </param>
    </member>
    <member name="P:System.IO.IODescriptionAttribute.Description">
      <summary>获取说明。</summary>
      <returns>事件、扩展程序或属性的说明。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IO.NotifyFilters">
      <summary>指定要在文件或文件夹中监视的更改。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IO.NotifyFilters.FileName">
      <summary>文件名。</summary>
    </member>
    <member name="F:System.IO.NotifyFilters.DirectoryName">
      <summary>目录名。</summary>
    </member>
    <member name="F:System.IO.NotifyFilters.Attributes">
      <summary>文件或文件夹的属性。</summary>
    </member>
    <member name="F:System.IO.NotifyFilters.Size">
      <summary>文件或文件夹的大小。</summary>
    </member>
    <member name="F:System.IO.NotifyFilters.LastWrite">
      <summary>上一次向文件或文件夹写入内容的日期。</summary>
    </member>
    <member name="F:System.IO.NotifyFilters.LastAccess">
      <summary>文件或文件夹上一次打开的日期。</summary>
    </member>
    <member name="F:System.IO.NotifyFilters.CreationTime">
      <summary>文件或文件夹的创建时间。</summary>
    </member>
    <member name="F:System.IO.NotifyFilters.Security">
      <summary>文件或文件夹的安全设置。</summary>
    </member>
    <member name="T:System.IO.RenamedEventArgs">
      <summary>为 <see cref="E:System.IO.FileSystemWatcher.Renamed" /> 事件提供数据。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.RenamedEventArgs.#ctor(System.IO.WatcherChangeTypes,System.String,System.String,System.String)">
      <summary>初始化 <see cref="T:System.IO.RenamedEventArgs" /> 类的新实例。</summary>
      <param name="changeType">
        <see cref="T:System.IO.WatcherChangeTypes" /> 值之一。 </param>
      <param name="directory">受影响的文件或目录名。 </param>
      <param name="name">受影响的文件或目录名。 </param>
      <param name="oldName">受影响的文件或目录的旧名称。 </param>
    </member>
    <member name="P:System.IO.RenamedEventArgs.OldFullPath">
      <summary>获取受影响的文件或目录的前一个完全限定的路径。</summary>
      <returns>受影响的文件或目录的前一个完全限定的路径。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.IO.RenamedEventArgs.OldName">
      <summary>获取受影响的文件或目录的旧名称。</summary>
      <returns>受影响的文件或目录的前一个名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IO.RenamedEventHandler">
      <summary>表示将处理 <see cref="T:System.IO.FileSystemWatcher" /> 类的 <see cref="E:System.IO.FileSystemWatcher.Renamed" /> 事件的方法。</summary>
      <param name="sender">事件源。 </param>
      <param name="e">包含事件数据的 <see cref="T:System.IO.RenamedEventArgs" />。 </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IO.WaitForChangedResult">
      <summary>包含关于所发生更改的信息。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.WaitForChangedResult.ChangeType">
      <summary>获取或设置所发生更改的类型。</summary>
      <returns>
        <see cref="T:System.IO.WatcherChangeTypes" /> 值之一。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.WaitForChangedResult.Name">
      <summary>获取或设置已更改的文件或目录的名称。</summary>
      <returns>已更改的文件或目录的名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.WaitForChangedResult.OldName">
      <summary>获取或设置已重命名的文件或目录的原始名称。</summary>
      <returns>已重命名的文件或目录的原始名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.WaitForChangedResult.TimedOut">
      <summary>获取或设置一个值，该值指示等待操作是否已超时。</summary>
      <returns>
如果 <see cref="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)" /> 方法超时，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IO.WatcherChangeTypes">
      <summary>可能会发生的文件或目录更改。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IO.WatcherChangeTypes.Created">
      <summary>文件或文件夹的创建。</summary>
    </member>
    <member name="F:System.IO.WatcherChangeTypes.Deleted">
      <summary>文件或文件夹的删除。</summary>
    </member>
    <member name="F:System.IO.WatcherChangeTypes.Changed">
      <summary>文件或文件夹的更改。更改的类型包括大小、属性、安全设置、最近写入时间和最近访问时间方面的更改。</summary>
    </member>
    <member name="F:System.IO.WatcherChangeTypes.Renamed">
      <summary>文件或文件夹的重命名。</summary>
    </member>
    <member name="F:System.IO.WatcherChangeTypes.All">
      <summary>文件或文件夹的创建、删除、更改或重命名。</summary>
    </member>
    <member name="T:System.IO.Compression.CompressionMode">
      <summary> 指定是否压缩或解压缩基础流。</summary>
    </member>
    <member name="F:System.IO.Compression.CompressionMode.Decompress">
      <summary>解压缩基础流。</summary>
    </member>
    <member name="F:System.IO.Compression.CompressionMode.Compress">
      <summary>压缩基础流。</summary>
    </member>
    <member name="T:System.IO.Compression.DeflateStream">
      <summary>提供用于使用 Deflate 算法压缩和解压缩流的方法和属性。</summary>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionMode)">
      <summary>使用指定的流和 <see cref="T:System.IO.Compression.CompressionMode" /> 值初始化 <see cref="T:System.IO.Compression.DeflateStream" /> 类的新实例。</summary>
      <param name="stream">要压缩或解压缩的流。</param>
      <param name="mode">
        <see cref="T:System.IO.Compression.CompressionMode" /> 值之一，表示要采取的操作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="stream" /> 访问权限为 ReadOnly，<paramref name="mode" /> 值为 Compress。 </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> 不是有效的 <see cref="T:System.IO.Compression.CompressionMode" /> 值。- 或 -<see cref="T:System.IO.Compression.CompressionMode" /> 为 <see cref="F:System.IO.Compression.CompressionMode.Compress" /> 且 <see cref="P:System.IO.Stream.CanWrite" /> 为 false。- 或 -<see cref="T:System.IO.Compression.CompressionMode" /> 为 <see cref="F:System.IO.Compression.CompressionMode.Decompress" /> 且 <see cref="P:System.IO.Stream.CanRead" /> 为 false。</exception>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionMode,System.Boolean)">
      <summary>使用指定的流和 <see cref="T:System.IO.Compression.CompressionMode" /> 值以及一个指定是否将流保留为打开状态的值，来初始化 <see cref="T:System.IO.Compression.DeflateStream" /> 类的新实例。</summary>
      <param name="stream">要压缩或解压缩的流。</param>
      <param name="mode">
        <see cref="T:System.IO.Compression.CompressionMode" /> 值之一，表示要采取的操作。</param>
      <param name="leaveOpen">true 将流保留为打开状态，否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="stream" /> 访问权限为 ReadOnly，<paramref name="mode" /> 值为 Compress。 </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> 不是有效的 <see cref="T:System.IO.Compression.CompressionMode" /> 值。- 或 -<see cref="T:System.IO.Compression.CompressionMode" /> 为 <see cref="F:System.IO.Compression.CompressionMode.Compress" /> 且 <see cref="P:System.IO.Stream.CanWrite" /> 为 false。- 或 -<see cref="T:System.IO.Compression.CompressionMode" /> 为 <see cref="F:System.IO.Compression.CompressionMode.Decompress" /> 且 <see cref="P:System.IO.Stream.CanRead" /> 为 false。</exception>
    </member>
    <member name="P:System.IO.Compression.DeflateStream.BaseStream">
      <summary>获取对基础流的引用。</summary>
      <returns>表示基础流的流对象。</returns>
      <exception cref="T:System.ObjectDisposedException">基础流已关闭。</exception>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始异步读操作。</summary>
      <returns>表示异步读取（可能仍处于挂起状态）的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
      <param name="array">将数据读入的字节数组。</param>
      <param name="offset">
        <paramref name="array" /> 中的字节偏移量，从该偏移量开始写入从流中读取的数据。</param>
      <param name="count">最多读取的字节数。</param>
      <param name="asyncCallback">可选的异步回调，在完成读取时调用。</param>
      <param name="asyncState">一个用户提供的对象，它将该特定的异步读取请求与其他请求区别开来。</param>
      <exception cref="T:System.IO.IOException">尝试的异步读取超过了流的末尾，或者发生了磁盘错误。</exception>
      <exception cref="T:System.ArgumentException">一个或多个参数无效。</exception>
      <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
      <exception cref="T:System.NotSupportedException">当前 <see cref="T:System.IO.Compression.DeflateStream" /> 实现不支持读取操作。</exception>
      <exception cref="T:System.InvalidOperationException">无法完成此调用。 </exception>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始异步写操作。</summary>
      <returns>表示异步写入（可能仍处于挂起状态）的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
      <param name="array">从中写入数据的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的字节偏移量，从此处开始写入。</param>
      <param name="count">最多写入的字节数。</param>
      <param name="asyncCallback">可选的异步回调，在完成写入时调用。</param>
      <param name="asyncState">一个用户提供的对象，它将该特定的异步写入请求与其他请求区别开来。</param>
      <exception cref="T:System.IO.IOException">尝试的异步写入超过了流的末尾，或者发生了磁盘错误。</exception>
      <exception cref="T:System.ArgumentException">一个或多个参数无效。</exception>
      <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
      <exception cref="T:System.NotSupportedException">当前 <see cref="T:System.IO.Compression.DeflateStream" /> 实现不支持写入操作。</exception>
      <exception cref="T:System.InvalidOperationException">由于流已关闭，因此无法执行写入操作。</exception>
    </member>
    <member name="P:System.IO.Compression.DeflateStream.CanRead">
      <summary>获取一个值，该值指示流是否支持在解压缩文件的过程中读取文件。</summary>
      <returns>
如果 <see cref="T:System.IO.Compression.CompressionMode" /> 值为 Decompress 而且基础流已打开并支持读取，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.IO.Compression.DeflateStream.CanSeek">
      <summary>获取一个值，该值指示流是否支持查找。</summary>
      <returns>
在所有情况下均为 false。</returns>
    </member>
    <member name="P:System.IO.Compression.DeflateStream.CanWrite">
      <summary>获取一个值，该值指示流是否支持写入。</summary>
      <returns>
如果 <see cref="T:System.IO.Compression.CompressionMode" /> 值为 Compress 而且基础流未关闭并支持写入，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.IO.Compression.DeflateStream" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">
为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。</param>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.EndRead(System.IAsyncResult)">
      <summary>等待挂起的异步读取完成。</summary>
      <returns>从流中读取的字节数，介于零 (0) 和您请求的字节数之间。只有在流的末尾时，<see cref="T:System.IO.Compression.DeflateStream" /> 才返回零 (0)；否则它将阻塞，直到至少有一个字节可用。</returns>
      <param name="asyncResult">对要完成的挂起异步请求的引用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 并非源自当前流上的 <see cref="M:System.IO.Compression.DeflateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 方法。</exception>
      <exception cref="T:System.SystemException">在调用 <see cref="M:System.Threading.WaitHandle.WaitOne" /> 期间引发了异常。</exception>
      <exception cref="T:System.InvalidOperationException">结束调用无效，原因是该流的异步读取操作尚未完成。</exception>
      <exception cref="T:System.InvalidOperationException">此流为 null。</exception>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.EndWrite(System.IAsyncResult)">
      <summary>结束异步写操作。</summary>
      <param name="asyncResult">对未完成的异步 I/O 请求的引用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 并非源自当前流上的 <see cref="M:System.IO.Compression.DeflateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 方法。</exception>
      <exception cref="T:System.Exception">在调用 <see cref="M:System.Threading.WaitHandle.WaitOne" /> 期间引发了异常。</exception>
      <exception cref="T:System.InvalidOperationException">此流为 null。</exception>
      <exception cref="T:System.InvalidOperationException">结束写入调用无效。</exception>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.Flush">
      <summary>将当前流对象的内部缓冲区的内容刷新到基础流。</summary>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.IO.Compression.DeflateStream.Length">
      <summary>此属性不受支持，并且总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>一个 long 值。</returns>
      <exception cref="T:System.NotSupportedException">此流中不支持此属性。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.IO.Compression.DeflateStream.Position">
      <summary>此属性不受支持，并且总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>一个 long 值。</returns>
      <exception cref="T:System.NotSupportedException">此流中不支持此属性。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>将若干解压缩的字节读入指定的字节数组。</summary>
      <returns>解压缩到字节数组中的字节数。</returns>
      <param name="array">用于存储解压缩的字节的数组。</param>
      <param name="offset">数组中开始读取的位置。</param>
      <param name="count">读取的解压缩字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">创建对象时 <see cref="T:System.IO.Compression.CompressionMode" /> 值是 Compress。- 或 - 基础流不支持读取。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 小于零。- 或 -<paramref name="array" /> 长度减去索引起始点小于 <paramref name="count" />。</exception>
      <exception cref="T:System.IO.InvalidDataException">数据的格式无效。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>此操作不受支持，它总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>一个 long 值。</returns>
      <param name="offset">流中的位置。</param>
      <param name="origin">
        <see cref="T:System.IO.SeekOrigin" /> 值之一。</param>
      <exception cref="T:System.NotSupportedException">此流中不支持此属性。</exception>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.SetLength(System.Int64)">
      <summary>此操作不受支持，它总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">流的长度。</param>
      <exception cref="T:System.NotSupportedException">此流中不支持此属性。</exception>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>从指定的字节数组中将压缩的字节写入基础流。</summary>
      <param name="array">用于存储压缩字节的数组。</param>
      <param name="offset">数组中开始读取的位置。</param>
      <param name="count">要压缩的字节数。</param>
    </member>
    <member name="T:System.IO.Compression.GZipStream">
      <summary>提供用于压缩和解压缩流的方法和属性。</summary>
    </member>
    <member name="M:System.IO.Compression.GZipStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionMode)">
      <summary>使用指定的流和 <see cref="T:System.IO.Compression.CompressionMode" /> 值初始化 <see cref="T:System.IO.Compression.GZipStream" /> 类的新实例。</summary>
      <param name="stream">要压缩或解压缩的流。</param>
      <param name="mode">
        <see cref="T:System.IO.Compression.CompressionMode" /> 值之一，表示要采取的操作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="stream" /> 访问权限为 ReadOnly，<paramref name="mode" /> 值为 Compress。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> 不是有效的 <see cref="T:System.IO.Compression.CompressionMode" /> 枚举值。- 或 -<see cref="T:System.IO.Compression.CompressionMode" /> 为 <see cref="F:System.IO.Compression.CompressionMode.Compress" /> 且 <see cref="P:System.IO.Stream.CanWrite" /> 为 false。- 或 -<see cref="T:System.IO.Compression.CompressionMode" /> 为 <see cref="F:System.IO.Compression.CompressionMode.Decompress" /> 且 <see cref="P:System.IO.Stream.CanRead" /> 为 false。</exception>
    </member>
    <member name="M:System.IO.Compression.GZipStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionMode,System.Boolean)">
      <summary>使用指定的流和 <see cref="T:System.IO.Compression.CompressionMode" /> 值以及一个指定是否将流保留为打开状态的值来初始化 <see cref="T:System.IO.Compression.GZipStream" /> 类的新实例。</summary>
      <param name="stream">要压缩或解压缩的流。</param>
      <param name="mode">
        <see cref="T:System.IO.Compression.CompressionMode" /> 值之一，表示要采取的操作。</param>
      <param name="leaveOpen">true 将流保留为打开状态，否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="stream" /> 访问权限为 ReadOnly，<paramref name="mode" /> 值为 Compress。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> 不是有效的 <see cref="T:System.IO.Compression.CompressionMode" /> 值。- 或 -<see cref="T:System.IO.Compression.CompressionMode" /> 为 <see cref="F:System.IO.Compression.CompressionMode.Compress" /> 且 <see cref="P:System.IO.Stream.CanWrite" /> 为 false。- 或 -<see cref="T:System.IO.Compression.CompressionMode" /> 为 <see cref="F:System.IO.Compression.CompressionMode.Decompress" /> 且 <see cref="P:System.IO.Stream.CanRead" /> 为 false。</exception>
    </member>
    <member name="P:System.IO.Compression.GZipStream.BaseStream">
      <summary>获取对基础流的引用。</summary>
      <returns>表示基础流的流对象。</returns>
      <exception cref="T:System.ObjectDisposedException">基础流已关闭。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Compression.GZipStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始异步读操作。</summary>
      <returns>表示异步读取（可能仍处于挂起状态）的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
      <param name="array">将数据读入的字节数组。</param>
      <param name="offset">
        <paramref name="array" /> 中的字节偏移量，从该偏移量开始写入从流中读取的数据。</param>
      <param name="count">最多读取的字节数。</param>
      <param name="asyncCallback">可选的异步回调，在完成读取时调用。</param>
      <param name="asyncState">一个用户提供的对象，它将该特定的异步读取请求与其他请求区别开来。</param>
      <exception cref="T:System.IO.IOException">尝试的异步读取超过了流的末尾，或者发生了磁盘错误。</exception>
      <exception cref="T:System.ArgumentException">一个或多个参数无效。</exception>
      <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
      <exception cref="T:System.NotSupportedException">当前 <see cref="T:System.IO.Compression.GZipStream" /> 实现不支持读取操作。</exception>
      <exception cref="T:System.InvalidOperationException">由于流已关闭，因此无法执行读取操作。</exception>
    </member>
    <member name="M:System.IO.Compression.GZipStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始异步写操作。</summary>
      <returns>表示异步写入（可能仍处于挂起状态）的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
      <param name="array">包含要写入当前流的数据的缓冲区。</param>
      <param name="offset">
        <paramref name="array" /> 中的字节偏移量，从此处开始写入。</param>
      <param name="count">最多写入的字节数。</param>
      <param name="asyncCallback">可选的异步回调，在完成写入时调用。</param>
      <param name="asyncState">一个用户提供的对象，它将该特定的异步写入请求与其他请求区别开来。</param>
      <exception cref="T:System.InvalidOperationException">此基础流为 null。- 或 -基础流已关闭。</exception>
    </member>
    <member name="P:System.IO.Compression.GZipStream.CanRead">
      <summary>获取一个值，该值指示流是否支持在解压缩文件的过程中读取文件。</summary>
      <returns>
            如果 <see cref="T:System.IO.Compression.CompressionMode" /> 值为 Decompress, 而且基础流未关闭并支持读取，则为 true；否则为 false。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.IO.Compression.GZipStream.CanSeek">
      <summary>获取一个值，该值指示流是否支持查找。</summary>
      <returns>
            在所有情况下均为 false。</returns>
    </member>
    <member name="P:System.IO.Compression.GZipStream.CanWrite">
      <summary>获取一个值，该值指示流是否支持写入。</summary>
      <returns>
            如果 <see cref="T:System.IO.Compression.CompressionMode" /> 值为 Compress 而且基础流未关闭并支持写入，则为 true；否则为 false。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Compression.GZipStream.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.IO.Compression.GZipStream" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">
                为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。</param>
    </member>
    <member name="M:System.IO.Compression.GZipStream.EndRead(System.IAsyncResult)">
      <summary>等待挂起的异步读取完成。</summary>
      <returns>从流中读取的字节数，介于零 (0) 和您请求的字节数之间。只有在流的末尾时，<see cref="T:System.IO.Compression.GZipStream" /> 才返回零 (0)；否则它将阻塞，直到至少有一个字节可用。</returns>
      <param name="asyncResult">对要完成的挂起异步请求的引用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 并非源自当前流上的 <see cref="M:System.IO.Compression.DeflateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 方法。</exception>
      <exception cref="T:System.InvalidOperationException">由于流已关闭，因此无法执行结束操作。</exception>
    </member>
    <member name="M:System.IO.Compression.GZipStream.EndWrite(System.IAsyncResult)">
      <summary>处理异步写入的结束。</summary>
      <param name="asyncResult">表示异步调用的 <see cref="T:System.IAsyncResult" /> 对象。</param>
      <exception cref="T:System.InvalidOperationException">此基础流为 null。- 或 -基础流已关闭。</exception>
    </member>
    <member name="M:System.IO.Compression.GZipStream.Flush">
      <summary>将当前 <see cref="T:System.IO.Compression.GZipStream" /> 对象的内部缓冲区的内容刷新到基础流。</summary>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.IO.Compression.GZipStream.Length">
      <summary>此属性不受支持，并且总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>一个 long 值。</returns>
      <exception cref="T:System.NotSupportedException">此流中不支持此属性。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.IO.Compression.GZipStream.Position">
      <summary>此属性不受支持，并且总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>一个 long 值。</returns>
      <exception cref="T:System.NotSupportedException">此流中不支持此属性。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Compression.GZipStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>将若干解压缩的字节读入指定的字节数组。</summary>
      <returns>解压缩到字节数组中的字节数。如果已到达流的末尾，则返回 0 或已读取的字节数。</returns>
      <param name="array">用于存储解压缩的字节的数组。</param>
      <param name="offset">数组中开始读取的位置。</param>
      <param name="count">解压缩的字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">创建对象时 <see cref="T:System.IO.Compression.CompressionMode" /> 值是 Compress。- 或 -基础流不支持读取。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 小于零。- 或 -<paramref name="array" /> 长度减去索引起始点小于 <paramref name="count" />。</exception>
      <exception cref="T:System.IO.InvalidDataException">数据的格式无效。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
    </member>
    <member name="M:System.IO.Compression.GZipStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>此属性不受支持，并且总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>一个 long 值。</returns>
      <param name="offset">流中的位置。</param>
      <param name="origin">
        <see cref="T:System.IO.SeekOrigin" /> 值之一。</param>
      <exception cref="T:System.NotSupportedException">此流中不支持此属性。</exception>
    </member>
    <member name="M:System.IO.Compression.GZipStream.SetLength(System.Int64)">
      <summary>此属性不受支持，并且总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">流的长度。</param>
      <exception cref="T:System.NotSupportedException">此流中不支持此属性。</exception>
    </member>
    <member name="M:System.IO.Compression.GZipStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>从指定的字节数组中将压缩的字节写入基础流。</summary>
      <param name="array">用于存储压缩字节的数组。</param>
      <param name="offset">数组中开始读取的位置。</param>
      <param name="count">压缩的字节数。</param>
      <exception cref="T:System.ObjectDisposedException">由于流已关闭，因此无法执行写入操作。</exception>
    </member>
    <member name="T:System.IO.Ports.Handshake">
      <summary>指定为 <see cref="T:System.IO.Ports.SerialPort" /> 对象建立串行端口通信时使用的控制协议。</summary>
    </member>
    <member name="F:System.IO.Ports.Handshake.None">
      <summary>没有用于握手的控件。</summary>
    </member>
    <member name="F:System.IO.Ports.Handshake.XOnXOff">
      <summary>使用 XON/XOFF 软件控制协议。发送 XOFF 控制以停止数据传输。发送 XON 控制以继续传输。使用这些软件控制，而不是使用请求发送 (RTS) 和清除发送 (CTS) 硬件控制。</summary>
    </member>
    <member name="F:System.IO.Ports.Handshake.RequestToSend">
      <summary>使用请求发送 (RTS) 硬件流控制。RTS 发出信号，指出数据可用于传输。如果输入缓冲区已满，RTS 行将被设置为 false。当输入缓冲区中有更多可用空间时，RTS 行将被设置为 true。</summary>
    </member>
    <member name="F:System.IO.Ports.Handshake.RequestToSendXOnXOff">
      <summary>同时使用请求发送 (RTS) 硬件控制和 XON/XOFF 软件控制。</summary>
    </member>
    <member name="T:System.IO.Ports.Parity">
      <summary>为 <see cref="T:System.IO.Ports.SerialPort" /> 对象指定奇偶校验位。</summary>
    </member>
    <member name="F:System.IO.Ports.Parity.None">
      <summary>不发生奇偶校验检查。</summary>
    </member>
    <member name="F:System.IO.Ports.Parity.Odd">
      <summary>设置奇偶校验位，使位数等于奇数。</summary>
    </member>
    <member name="F:System.IO.Ports.Parity.Even">
      <summary>设置奇偶校验位，使位数等于偶数。</summary>
    </member>
    <member name="F:System.IO.Ports.Parity.Mark">
      <summary>将奇偶校验位保留为 1。</summary>
    </member>
    <member name="F:System.IO.Ports.Parity.Space">
      <summary>将奇偶校验位保留为 0。</summary>
    </member>
    <member name="T:System.IO.Ports.SerialData">
      <summary>指定在 <see cref="T:System.IO.Ports.SerialPort" /> 对象的串行端口上接收到的字符的类型。</summary>
    </member>
    <member name="F:System.IO.Ports.SerialData.Chars">
      <summary>接收到了一个字符并将其放入了输入缓冲区。</summary>
    </member>
    <member name="F:System.IO.Ports.SerialData.Eof">
      <summary>接收到了文件结束字符并将其放入了输入缓冲区。</summary>
    </member>
    <member name="T:System.IO.Ports.SerialDataReceivedEventArgs">
      <summary>为 <see cref="E:System.IO.Ports.SerialPort.DataReceived" /> 事件提供数据。</summary>
    </member>
    <member name="P:System.IO.Ports.SerialDataReceivedEventArgs.EventType">
      <summary>获取或设置事件类型。</summary>
      <returns>
        <see cref="T:System.IO.Ports.SerialData" /> 值之一。</returns>
    </member>
    <member name="T:System.IO.Ports.SerialDataReceivedEventHandler">
      <summary>表示将处理 <see cref="T:System.IO.Ports.SerialPort" /> 对象的 <see cref="E:System.IO.Ports.SerialPort.DataReceived" /> 事件的方法。</summary>
      <param name="sender">事件的发送者，它是 <see cref="T:System.IO.Ports.SerialPort" /> 对象。 </param>
      <param name="e">包含事件数据的 <see cref="T:System.IO.Ports.SerialDataReceivedEventArgs" /> 对象。 </param>
    </member>
    <member name="T:System.IO.Ports.SerialError">
      <summary>指定 <see cref="T:System.IO.Ports.SerialPort" /> 对象上发生的错误</summary>
    </member>
    <member name="F:System.IO.Ports.SerialError.TXFull">
      <summary>应用程序尝试传输一个字符，但是输出缓冲区已满。</summary>
    </member>
    <member name="F:System.IO.Ports.SerialError.RXOver">
      <summary>发生输入缓冲区溢出。输入缓冲区空间不足，或在文件尾 (EOF) 字符之后接收到字符。</summary>
    </member>
    <member name="F:System.IO.Ports.SerialError.Overrun">
      <summary>发生字符缓冲区溢出。下一个字符将丢失。</summary>
    </member>
    <member name="F:System.IO.Ports.SerialError.RXParity">
      <summary>硬件检测到奇偶校验错误。</summary>
    </member>
    <member name="F:System.IO.Ports.SerialError.Frame">
      <summary>硬件检测到一个组帧错误。</summary>
    </member>
    <member name="T:System.IO.Ports.SerialErrorReceivedEventArgs">
      <summary>为 <see cref="E:System.IO.Ports.SerialPort.ErrorReceived" /> 事件准备数据。</summary>
    </member>
    <member name="P:System.IO.Ports.SerialErrorReceivedEventArgs.EventType">
      <summary>获取或设置事件类型。</summary>
      <returns>
        <see cref="T:System.IO.Ports.SerialError" /> 值之一。</returns>
    </member>
    <member name="T:System.IO.Ports.SerialErrorReceivedEventHandler">
      <summary>表示将处理 <see cref="T:System.IO.Ports.SerialPort" /> 对象的 <see cref="E:System.IO.Ports.SerialPort.ErrorReceived" /> 事件的方法。 </summary>
      <param name="sender">事件的发送者，它是 <see cref="T:System.IO.Ports.SerialPort" /> 对象。 </param>
      <param name="e">包含事件数据的 <see cref="T:System.IO.Ports.SerialErrorReceivedEventArgs" /> 对象。 </param>
    </member>
    <member name="T:System.IO.Ports.SerialPinChange">
      <summary>指定发生在 <see cref="T:System.IO.Ports.SerialPort" /> 对象上的更改类型。</summary>
    </member>
    <member name="F:System.IO.Ports.SerialPinChange.CtsChanged">
      <summary>Clear to Send (CTS) 信号改变了状态。此信号用于指示是否能通过串行端口发送数据。</summary>
    </member>
    <member name="F:System.IO.Ports.SerialPinChange.DsrChanged">
      <summary>Data Set Ready (DSR) 信号改变了状态。此信号用于指示串行端口上的设备是否已准备运行。</summary>
    </member>
    <member name="F:System.IO.Ports.SerialPinChange.CDChanged">
      <summary>Carrier Detect (CD) 信号改变了状态。此信号用于指示是否调制解调器已连接到正常工作的电话线并检测到数据载波信号。</summary>
    </member>
    <member name="F:System.IO.Ports.SerialPinChange.Ring">
      <summary>检测到振铃指示。</summary>
    </member>
    <member name="F:System.IO.Ports.SerialPinChange.Break">
      <summary>在输入上检测到一个中断。</summary>
    </member>
    <member name="T:System.IO.Ports.SerialPinChangedEventArgs">
      <summary>为 <see cref="E:System.IO.Ports.SerialPort.PinChanged" /> 事件提供数据。</summary>
    </member>
    <member name="P:System.IO.Ports.SerialPinChangedEventArgs.EventType">
      <summary>获取或设置事件类型。</summary>
      <returns>
        <see cref="T:System.IO.Ports.SerialPinChange" /> 值之一。</returns>
    </member>
    <member name="T:System.IO.Ports.SerialPinChangedEventHandler">
      <summary>表示将处理 <see cref="T:System.IO.Ports.SerialPort" /> 对象的 <see cref="E:System.IO.Ports.SerialPort.PinChanged" /> 事件的方法。</summary>
      <param name="sender">事件的源，即 <see cref="T:System.IO.Ports.SerialPort" /> 对象。 </param>
      <param name="e">包含事件数据的 <see cref="T:System.IO.Ports.SerialPinChangedEventArgs" /> 对象。 </param>
    </member>
    <member name="T:System.IO.Ports.SerialPort">
      <summary>表示串行端口资源。</summary>
    </member>
    <member name="M:System.IO.Ports.SerialPort.#ctor">
      <summary>初始化 <see cref="T:System.IO.Ports.SerialPort" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IO.Ports.SerialPort.#ctor(System.ComponentModel.IContainer)">
      <summary>使用指定的 <see cref="T:System.ComponentModel.IContainer" /> 对象初始化 <see cref="T:System.IO.Ports.SerialPort" /> 类的新实例。</summary>
      <param name="container">容器的接口。</param>
      <exception cref="T:System.IO.IOException">未能找到或打开指定的端口。</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.#ctor(System.String)">
      <summary>使用指定的端口名称初始化 <see cref="T:System.IO.Ports.SerialPort" /> 类的新实例。</summary>
      <param name="portName">要使用的端口（例如 COM1）。</param>
      <exception cref="T:System.IO.IOException">未能找到或打开指定的端口。</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.#ctor(System.String,System.Int32)">
      <summary>使用指定的端口名称和波特率初始化 <see cref="T:System.IO.Ports.SerialPort" /> 类的新实例。</summary>
      <param name="portName">要使用的端口（例如 COM1）。</param>
      <param name="baudRate">波特率。</param>
      <exception cref="T:System.IO.IOException">未能找到或打开指定的端口。</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.#ctor(System.String,System.Int32,System.IO.Ports.Parity)">
      <summary>使用指定的端口名称、波特率和奇偶校验位初始化 <see cref="T:System.IO.Ports.SerialPort" /> 类的新实例。</summary>
      <param name="portName">要使用的端口（例如 COM1）。</param>
      <param name="baudRate">波特率。</param>
      <param name="parity">
        <see cref="P:System.IO.Ports.SerialPort.Parity" /> 值之一。</param>
      <exception cref="T:System.IO.IOException">未能找到或打开指定的端口。</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32)">
      <summary>使用指定的端口名称、波特率、校验位和数据位初始化 <see cref="T:System.IO.Ports.SerialPort" /> 类的新实例。</summary>
      <param name="portName">要使用的端口（例如 COM1）。</param>
      <param name="baudRate">波特率。</param>
      <param name="parity">
        <see cref="P:System.IO.Ports.SerialPort.Parity" /> 值之一。</param>
      <param name="dataBits">数据位值。</param>
      <exception cref="T:System.IO.IOException">未能找到或打开指定的端口。</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32,System.IO.Ports.StopBits)">
      <summary>使用指定的端口名称、波特率、奇偶校验位、数据位和停止位初始化 <see cref="T:System.IO.Ports.SerialPort" /> 类的新实例。</summary>
      <param name="portName">要使用的端口（例如 COM1）。</param>
      <param name="baudRate">波特率。</param>
      <param name="parity">
        <see cref="P:System.IO.Ports.SerialPort.Parity" /> 值之一。</param>
      <param name="dataBits">数据位值。</param>
      <param name="stopBits">
        <see cref="P:System.IO.Ports.SerialPort.StopBits" /> 值之一。</param>
      <exception cref="T:System.IO.IOException">未能找到或打开指定的端口。</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.BaseStream">
      <summary>获取 <see cref="T:System.IO.Ports.SerialPort" /> 对象的基础 <see cref="T:System.IO.Stream" /> 对象。</summary>
      <returns>一个 <see cref="T:System.IO.Stream" /> 对象。</returns>
      <exception cref="T:System.InvalidOperationException">流已关闭。这可能会因为尚未调用 <see cref="M:System.IO.Ports.SerialPort.Open" /> 方法或已调用了 <see cref="M:System.IO.Ports.SerialPort.Close" /> 方法而发生。</exception>
      <exception cref="T:System.NotSupportedException">该流位于 .NET Compact Framework 应用程序中，并调用了以下方法之一：<see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /><see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /><see cref="M:System.IO.Stream.EndRead(System.IAsyncResult)" /><see cref="M:System.IO.Stream.EndWrite(System.IAsyncResult)" />.NET Compact Framework 不支持带有基流的异步模型。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.IO.Ports.SerialPort.BaudRate">
      <summary>获取或设置串行波特率。</summary>
      <returns>波特率。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的波特率小于或等于零，或者大于设备所允许的最大波特率。</exception>
      <exception cref="T:System.IO.IOException">此端口处于无效状态。- 或 - 尝试设置基础端口状态失败。例如，从此 <see cref="T:System.IO.Ports.SerialPort" /> 对象传递的参数无效。</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.BreakState">
      <summary>获取或设置中断信号状态。</summary>
      <returns>
            如果端口处于中断状态，则为 true；否则为 false。</returns>
      <exception cref="T:System.IO.IOException">此端口处于无效状态。 - 或 -尝试设置基础端口状态失败。例如，从此 <see cref="T:System.IO.Ports.SerialPort" /> 对象传递的参数无效。</exception>
      <exception cref="T:System.InvalidOperationException">流已关闭。这可能会因为尚未调用 <see cref="M:System.IO.Ports.SerialPort.Open" /> 方法或已调用了 <see cref="M:System.IO.Ports.SerialPort.Close" /> 方法而发生。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.IO.Ports.SerialPort.BytesToRead">
      <summary>获取接收缓冲区中数据的字节数。</summary>
      <returns>接收缓冲区中数据的字节数。</returns>
      <exception cref="T:System.IO.IOException">此端口处于无效状态。</exception>
      <exception cref="T:System.InvalidOperationException">流已关闭。这可能会因为尚未调用 <see cref="M:System.IO.Ports.SerialPort.Open" /> 方法或已调用了 <see cref="M:System.IO.Ports.SerialPort.Close" /> 方法而发生。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.IO.Ports.SerialPort.BytesToWrite">
      <summary>获取发送缓冲区中数据的字节数。</summary>
      <returns>发送缓冲区中数据的字节数。</returns>
      <exception cref="T:System.IO.IOException">此端口处于无效状态。</exception>
      <exception cref="T:System.InvalidOperationException">流已关闭。这可能会因为尚未调用 <see cref="M:System.IO.Ports.SerialPort.Open" /> 方法或已调用了 <see cref="M:System.IO.Ports.SerialPort.Close" /> 方法而发生。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.IO.Ports.SerialPort.CDHolding">
      <summary>获取端口的载波检测行的状态。</summary>
      <returns>
            如果检测到载波，则为 true；否则为 false。</returns>
      <exception cref="T:System.IO.IOException">此端口处于无效状态。 - 或 - 尝试设置基础端口状态失败。例如，从此 <see cref="T:System.IO.Ports.SerialPort" /> 对象传递的参数无效。</exception>
      <exception cref="T:System.InvalidOperationException">流已关闭。这可能会因为尚未调用 <see cref="M:System.IO.Ports.SerialPort.Open" /> 方法或已调用了 <see cref="M:System.IO.Ports.SerialPort.Close" /> 方法而发生。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Ports.SerialPort.Close">
      <summary>关闭端口连接，将 <see cref="P:System.IO.Ports.SerialPort.IsOpen" /> 属性设置为 false，并释放内部 <see cref="T:System.IO.Stream" /> 对象。</summary>
      <exception cref="T:System.InvalidOperationException">指定的端口未打开。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.IO.Ports.SerialPort.CtsHolding">
      <summary>获取“可以发送”行的状态。</summary>
      <returns>
            如果检测到“可以发送”行，则为 true；否则为 false。</returns>
      <exception cref="T:System.IO.IOException">此端口处于无效状态。 - 或 - 尝试设置基础端口状态失败。例如，从此 <see cref="T:System.IO.Ports.SerialPort" /> 对象传递的参数无效。</exception>
      <exception cref="T:System.InvalidOperationException">流已关闭。这可能会因为尚未调用 <see cref="M:System.IO.Ports.SerialPort.Open" /> 方法或已调用了 <see cref="M:System.IO.Ports.SerialPort.Close" /> 方法而发生。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.IO.Ports.SerialPort.DataBits">
      <summary>获取或设置每个字节的标准数据位长度。</summary>
      <returns>数据位长度。</returns>
      <exception cref="T:System.IO.IOException">此端口处于无效状态。 - 或 -尝试设置基础端口状态失败。例如，从此 <see cref="T:System.IO.Ports.SerialPort" /> 对象传递的参数无效。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">数据位的值小于 5 或大于 8。</exception>
    </member>
    <member name="E:System.IO.Ports.SerialPort.DataReceived">
      <summary>表示将处理 <see cref="T:System.IO.Ports.SerialPort" /> 对象的数据接收事件的方法。</summary>
    </member>
    <member name="M:System.IO.Ports.SerialPort.DiscardInBuffer">
      <summary>丢弃来自串行驱动程序的接收缓冲区的数据。</summary>
      <exception cref="T:System.IO.IOException">此端口处于无效状态。 - 或 -尝试设置基础端口状态失败。例如，从此 <see cref="T:System.IO.Ports.SerialPort" /> 对象传递的参数无效。</exception>
      <exception cref="T:System.InvalidOperationException">流已关闭。这可能会因为尚未调用 <see cref="M:System.IO.Ports.SerialPort.Open" /> 方法或已调用了 <see cref="M:System.IO.Ports.SerialPort.Close" /> 方法而发生。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.IO.Ports.SerialPort.DiscardNull">
      <summary>获取或设置一个值，该值指示 Null 字节在端口和接收缓冲区之间传输时是否被忽略。</summary>
      <returns>
            如果忽略 Null 字节，则为 true；否则为 false。默认值为 false。</returns>
      <exception cref="T:System.IO.IOException">此端口处于无效状态。 - 或 - 尝试设置基础端口状态失败。例如，从此 <see cref="T:System.IO.Ports.SerialPort" /> 对象传递的参数无效。</exception>
      <exception cref="T:System.InvalidOperationException">流已关闭。这可能会因为尚未调用 <see cref="M:System.IO.Ports.SerialPort.Open" /> 方法或已调用了 <see cref="M:System.IO.Ports.SerialPort.Close" /> 方法而发生。</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.DiscardOutBuffer">
      <summary>丢弃来自串行驱动程序的传输缓冲区的数据。</summary>
      <exception cref="T:System.IO.IOException">此端口处于无效状态。 - 或 - 尝试设置基础端口状态失败。例如，从此 <see cref="T:System.IO.Ports.SerialPort" /> 对象传递的参数无效。</exception>
      <exception cref="T:System.InvalidOperationException">流已关闭。这可能会因为尚未调用 <see cref="M:System.IO.Ports.SerialPort.Open" /> 方法或已调用了 <see cref="M:System.IO.Ports.SerialPort.Close" /> 方法而发生。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Ports.SerialPort.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.IO.Ports.SerialPort" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">
                为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。</param>
      <exception cref="T:System.IO.IOException">此端口处于无效状态。 - 或 -尝试设置基础端口状态失败。例如，从此 <see cref="T:System.IO.Ports.SerialPort" /> 对象传递的参数无效。</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.DsrHolding">
      <summary>获取数据设置就绪 (DSR) 信号的状态。</summary>
      <returns>
            如果已将数据设置就绪信号发送到该端口，则为 true；否则为 false。</returns>
      <exception cref="T:System.IO.IOException">此端口处于无效状态。 - 或 - 尝试设置基础端口状态失败。例如，从此 <see cref="T:System.IO.Ports.SerialPort" /> 对象传递的参数无效。</exception>
      <exception cref="T:System.InvalidOperationException">流已关闭。这可能会因为尚未调用 <see cref="M:System.IO.Ports.SerialPort.Open" /> 方法或已调用了 <see cref="M:System.IO.Ports.SerialPort.Close" /> 方法而发生。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.IO.Ports.SerialPort.DtrEnable">
      <summary>获取或设置一个值，该值在串行通信过程中启用数据终端就绪 (DTR) 信号。</summary>
      <returns>
            如果为 true，则启用数据终端就绪 (DTR)；否则为 false。默认值为 false。</returns>
      <exception cref="T:System.IO.IOException">此端口处于无效状态。 - 或 - 尝试设置基础端口状态失败。例如，从此 <see cref="T:System.IO.Ports.SerialPort" /> 对象传递的参数无效。</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.Encoding">
      <summary>获取或设置传输前后文本转换的字节编码。</summary>
      <returns>一个 <see cref="T:System.Text.Encoding" /> 对象。默认值为 <see cref="T:System.Text.ASCIIEncoding" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.IO.Ports.SerialPort.Encoding" /> 属性被设置为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.IO.Ports.SerialPort.Encoding" /> 属性被设置为的编码不是 <see cref="T:System.Text.ASCIIEncoding" />、<see cref="T:System.Text.UTF8Encoding" />、<see cref="T:System.Text.UTF32Encoding" />、<see cref="T:System.Text.UnicodeEncoding" />、Windows 单字节编码之一或 Windows 双字节编码之一。</exception>
    </member>
    <member name="E:System.IO.Ports.SerialPort.ErrorReceived">
      <summary>表示处理 <see cref="T:System.IO.Ports.SerialPort" /> 对象的错误事件的方法。</summary>
    </member>
    <member name="M:System.IO.Ports.SerialPort.GetPortNames">
      <summary>获取当前计算机的串行端口名称数组。</summary>
      <returns>当前计算机的串行端口名称数组。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">无法查询串行端口名称。</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.Handshake">
      <summary>获取或设置串行端口数据传输的握手协议。</summary>
      <returns>
        <see cref="T:System.IO.Ports.Handshake" /> 值之一。默认值为 None。</returns>
      <exception cref="T:System.IO.IOException">此端口处于无效状态。 - 或 - 尝试设置基础端口状态失败。例如，从此 <see cref="T:System.IO.Ports.SerialPort" /> 对象传递的参数无效。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的值不是 <see cref="T:System.IO.Ports.Handshake" /> 枚举中的有效值。</exception>
      <exception cref="T:System.InvalidOperationException">流已关闭。这可能会因为尚未调用 <see cref="M:System.IO.Ports.SerialPort.Open" /> 方法或已调用了 <see cref="M:System.IO.Ports.SerialPort.Close" /> 方法而发生。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="F:System.IO.Ports.SerialPort.InfiniteTimeout">
      <summary>指示不应该发生超时。</summary>
    </member>
    <member name="P:System.IO.Ports.SerialPort.IsOpen">
      <summary>获取一个值，该值指示 <see cref="T:System.IO.Ports.SerialPort" /> 对象的打开或关闭状态。</summary>
      <returns>
            如果串行端口已打开，则为 true；否则为 false。默认值为 false。</returns>
      <exception cref="T:System.ArgumentNullException">传递的 <see cref="P:System.IO.Ports.SerialPort.IsOpen" /> 值为 null。</exception>
      <exception cref="T:System.ArgumentException">传递的 <see cref="P:System.IO.Ports.SerialPort.IsOpen" /> 值是空字符串 ("")。</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.NewLine">
      <summary>获取或设置用于解释 <see cref="M:System.IO.Ports.SerialPort.ReadLine" /> 和 <see cref="M:System.IO.Ports.SerialPort.WriteLine(System.String)" /> 方法调用结束的值。</summary>
      <returns>表示行尾的值。默认值为换行符 (<see cref="P:System.Environment.NewLine" />)。</returns>
      <exception cref="T:System.ArgumentException">属性值为空。</exception>
      <exception cref="T:System.ArgumentNullException">属性值为 null。</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.Open">
      <summary>打开一个新的串行端口连接。</summary>
      <exception cref="T:System.InvalidOperationException">指定的端口已打开。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">此实例的一个或多个属性无效。例如，<see cref="P:System.IO.Ports.SerialPort.Parity" />、<see cref="P:System.IO.Ports.SerialPort.DataBits" /> 或 <see cref="P:System.IO.Ports.SerialPort.Handshake" /> 属性不是有效值；<see cref="P:System.IO.Ports.SerialPort.BaudRate" /> 小于或等于零；<see cref="P:System.IO.Ports.SerialPort.ReadTimeout" /> 或 <see cref="P:System.IO.Ports.SerialPort.WriteTimeout" /> 属性小于零且不是 <see cref="F:System.IO.Ports.SerialPort.InfiniteTimeout" />。</exception>
      <exception cref="T:System.ArgumentException">端口名称不是以“COM”开始的。- 或 -端口的文件类型不受支持。</exception>
      <exception cref="T:System.IO.IOException">此端口处于无效状态。 - 或 - 尝试设置基础端口状态失败。例如，从此 <see cref="T:System.IO.Ports.SerialPort" /> 对象传递的参数无效。</exception>
      <exception cref="T:System.UnauthorizedAccessException">对端口的访问被拒绝。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.IO.Ports.SerialPort.Parity">
      <summary>获取或设置奇偶校验检查协议。</summary>
      <returns>
        <see cref="T:System.IO.Ports.Parity" /> 值之一，表示奇偶校验检查协议。默认值为 None。</returns>
      <exception cref="T:System.IO.IOException">此端口处于无效状态。 - 或 - 尝试设置基础端口状态失败。例如，从此 <see cref="T:System.IO.Ports.SerialPort" /> 对象传递的参数无效。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的 <see cref="P:System.IO.Ports.SerialPort.Parity" /> 值不是 <see cref="T:System.IO.Ports.Parity" /> 枚举中的有效值。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.IO.Ports.SerialPort.ParityReplace">
      <summary>获取或设置一个字节，该字节在发生奇偶校验错误时替换数据流中的无效字节。</summary>
      <returns>替换无效字节的字节。</returns>
      <exception cref="T:System.IO.IOException">此端口处于无效状态。 - 或 - 尝试设置基础端口状态失败。例如，从此 <see cref="T:System.IO.Ports.SerialPort" /> 对象传递的参数无效。</exception>
    </member>
    <member name="E:System.IO.Ports.SerialPort.PinChanged">
      <summary>表示将处理 <see cref="T:System.IO.Ports.SerialPort" /> 对象的串行管脚更改事件的方法。</summary>
    </member>
    <member name="P:System.IO.Ports.SerialPort.PortName">
      <summary>获取或设置通信端口，包括但不限于所有可用的 COM 端口。</summary>
      <returns>通信端口。默认值为 COM1。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.IO.Ports.SerialPort.PortName" /> 属性已设置为长度为零的值。- 或 -<see cref="P:System.IO.Ports.SerialPort.PortName" /> 属性已设置为以“\\”开始的值。- 或 -端口名称无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.IO.Ports.SerialPort.PortName" /> 属性已设置为 null。</exception>
      <exception cref="T:System.InvalidOperationException">指定的端口已打开。</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>从 <see cref="T:System.IO.Ports.SerialPort" /> 输入缓冲区读取一些字节并将那些字节写入字节数组中指定的偏移量处。</summary>
      <returns>读取的字节数。</returns>
      <param name="buffer">将输入写入到其中的字节数组。</param>
      <param name="offset">缓冲区数组中开始写入的偏移量。</param>
      <param name="count">要读取的字节数。</param>
      <exception cref="T:System.ArgumentNullException">传递的 buffer 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">指定的端口未打开。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 参数超出了所传递的 <paramref name="buffer" /> 的有效区域。<paramref name="offset" /> 或 <paramref name="count" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 加上 <paramref name="count" /> 大于 <paramref name="buffer" /> 的长度。</exception>
      <exception cref="T:System.TimeoutException">没有可以读取的字节。</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.Read(System.Char[],System.Int32,System.Int32)">
      <summary>从 <see cref="T:System.IO.Ports.SerialPort" /> 输入缓冲区中读取大量字符，然后将这些字符写入到一个字符数组中指定的偏移量处。</summary>
      <returns>读取的字符数。</returns>
      <param name="buffer">将输入写入到其中的字符数组。</param>
      <param name="offset">缓冲区数组中开始写入的偏移量。</param>
      <param name="count">要读取的字符数。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 加上 <paramref name="count" /> 大于缓冲区的长度。- 或 -<paramref name="count" /> 为 1 并且缓冲区中有一个代理项字符。</exception>
      <exception cref="T:System.ArgumentNullException">传递的 <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 参数超出了所传递的 <paramref name="buffer" /> 的有效区域。<paramref name="offset" /> 或 <paramref name="count" /> 小于零。</exception>
      <exception cref="T:System.InvalidOperationException">指定的端口未打开。</exception>
      <exception cref="T:System.TimeoutException">没有可以读取的字符。</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.ReadBufferSize">
      <summary>获取或设置 <see cref="T:System.IO.Ports.SerialPort" /> 输入缓冲区的大小。</summary>
      <returns>缓冲区大小。默认值为 4096。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">设置的 <see cref="P:System.IO.Ports.SerialPort.ReadBufferSize" /> 值小于或等于零。</exception>
      <exception cref="T:System.InvalidOperationException">打开流时设置 <see cref="P:System.IO.Ports.SerialPort.ReadBufferSize" /> 属性。</exception>
      <exception cref="T:System.IO.IOException">
        <see cref="P:System.IO.Ports.SerialPort.ReadBufferSize" /> 属性已设置为一个奇整数值。</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.ReadByte">
      <summary>从 <see cref="T:System.IO.Ports.SerialPort" /> 输入缓冲区中同步读取一个字节。</summary>
      <returns>强制转换为 <see cref="T:System.Int32" /> 的字节；或者，如果已读取到流的末尾，则为 -1。</returns>
      <exception cref="T:System.InvalidOperationException">指定的端口未打开。</exception>
      <exception cref="T:System.ServiceProcess.TimeoutException">该操作未在超时时间到期之前完成。- 或 -未读取任何字节。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Ports.SerialPort.ReadChar">
      <summary>从 <see cref="T:System.IO.Ports.SerialPort" /> 输入缓冲区中同步读取一个字符。</summary>
      <returns>读取的字符。</returns>
      <exception cref="T:System.InvalidOperationException">指定的端口未打开。</exception>
      <exception cref="T:System.ServiceProcess.TimeoutException">该操作未在超时时间到期之前完成。- 或 -在分配的超时时间内没有可用的字符。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Ports.SerialPort.ReadExisting">
      <summary>在编码的基础上，读取 <see cref="T:System.IO.Ports.SerialPort" /> 对象的流和输入缓冲区中所有立即可用的字节。</summary>
      <returns>
        <see cref="T:System.IO.Ports.SerialPort" /> 对象的流和输入缓冲区的内容。</returns>
      <exception cref="T:System.InvalidOperationException">指定的端口未打开。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Ports.SerialPort.ReadLine">
      <summary>一直读取到输入缓冲区中的 <see cref="P:System.IO.Ports.SerialPort.NewLine" /> 值。</summary>
      <returns>输入缓冲区中直到首次出现 <see cref="P:System.IO.Ports.SerialPort.NewLine" /> 值的内容。</returns>
      <exception cref="T:System.InvalidOperationException">指定的端口未打开。</exception>
      <exception cref="T:System.TimeoutException">该操作未在超时时间到期之前完成。- 或 -未读取任何字节。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.IO.Ports.SerialPort.ReadTimeout">
      <summary>获取或设置读取操作未完成时发生超时之前的毫秒数。</summary>
      <returns>读取操作未完成时发生超时之前的毫秒数。</returns>
      <exception cref="T:System.IO.IOException">此端口处于无效状态。 - 或 - 尝试设置基础端口状态失败。例如，从此 <see cref="T:System.IO.Ports.SerialPort" /> 对象传递的参数无效。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">读取超时值小于零，且不等于 <see cref="F:System.IO.Ports.SerialPort.InfiniteTimeout" />。</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.ReadTo(System.String)">
      <summary>一直读取到输入缓冲区中的指定 <paramref name="value" /> 的字符串。</summary>
      <returns>输入缓冲区中直到指定 <paramref name="value" /> 的内容。</returns>
      <param name="value">指示读取操作停止位置的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 参数的长度为 0。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 null。</exception>
      <exception cref="T:System.InvalidOperationException">指定的端口未打开。</exception>
      <exception cref="T:System.TimeoutException">该操作未在超时时间到期之前完成。</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.ReceivedBytesThreshold">
      <summary>获取或设置 <see cref="E:System.IO.Ports.SerialPort.DataReceived" /> 事件发生前内部输入缓冲区中的字节数。</summary>
      <returns>
        <see cref="E:System.IO.Ports.SerialPort.DataReceived" /> 事件激发前内部输入缓冲区中的字节数。默认值为 1。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.IO.Ports.SerialPort.ReceivedBytesThreshold" /> 值小于或等于零。</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.RtsEnable">
      <summary>获取或设置一个值，该值指示在串行通信中是否启用请求发送 (RTS) 信号。</summary>
      <returns>
            如果为 true，则启用请求发送 (RTS)；否则为 false。默认值为 false。</returns>
      <exception cref="T:System.InvalidOperationException">在 <see cref="P:System.IO.Ports.SerialPort.Handshake" /> 属性设置为 <see cref="F:System.IO.Ports.Handshake.RequestToSend" /> 值或 <see cref="F:System.IO.Ports.Handshake.RequestToSendXOnXOff" /> 值时设置或检索 <see cref="P:System.IO.Ports.SerialPort.RtsEnable" /> 属性。</exception>
      <exception cref="T:System.IO.IOException">此端口处于无效状态。 - 或 - 尝试设置基础端口状态失败。例如，从此 <see cref="T:System.IO.Ports.SerialPort" /> 对象传递的参数无效。</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.StopBits">
      <summary>获取或设置每个字节的标准停止位数。</summary>
      <returns>
        <see cref="T:System.IO.Ports.StopBits" /> 值之一。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.IO.Ports.SerialPort.StopBits" /> 值不是来自 <see cref="T:System.IO.Ports.StopBits" /> 枚举的值之一。</exception>
      <exception cref="T:System.IO.IOException">此端口处于无效状态。 - 或 - 尝试设置基础端口状态失败。例如，从此 <see cref="T:System.IO.Ports.SerialPort" /> 对象传递的参数无效。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Ports.SerialPort.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>使用缓冲区的数据将指定数量的字节写入串行端口。</summary>
      <param name="buffer">包含要写入端口的数据的字节数组。</param>
      <param name="offset">
        <paramref name="buffer" /> 参数中从零开始的字节偏移量，从此处开始将字节复制到端口。</param>
      <param name="count">要写入的字节数。</param>
      <exception cref="T:System.ArgumentNullException">传递的 <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">指定的端口未打开。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 参数超出了所传递的 <paramref name="buffer" /> 的有效区域。<paramref name="offset" /> 或 <paramref name="count" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 加上 <paramref name="count" /> 大于 <paramref name="buffer" /> 的长度。</exception>
      <exception cref="T:System.ServiceProcess.TimeoutException">该操作未在超时时间到期之前完成。</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.Write(System.Char[],System.Int32,System.Int32)">
      <summary>使用缓冲区的数据将指定数量的字符写入串行端口。</summary>
      <param name="buffer">包含要写入端口的数据的字符数组。</param>
      <param name="offset">
        <paramref name="buffer" /> 参数中从零开始的字节偏移量，从此处开始将字节复制到端口。</param>
      <param name="count">要写入的字符数。</param>
      <exception cref="T:System.ArgumentNullException">传递的 <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">指定的端口未打开。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 参数超出了所传递的 <paramref name="buffer" /> 的有效区域。<paramref name="offset" /> 或 <paramref name="count" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 加上 <paramref name="count" /> 大于 <paramref name="buffer" /> 的长度。</exception>
      <exception cref="T:System.ServiceProcess.TimeoutException">该操作未在超时时间到期之前完成。</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.Write(System.String)">
      <summary>将指定的字符串写入串行端口。</summary>
      <param name="text">输出字符串。</param>
      <exception cref="T:System.InvalidOperationException">指定的端口未打开。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 为 null。</exception>
      <exception cref="T:System.ServiceProcess.TimeoutException">该操作未在超时时间到期之前完成。</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.WriteBufferSize">
      <summary>获取或设置串行端口输出缓冲区的大小。</summary>
      <returns>输出缓冲区的大小。默认值为 2048。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.IO.Ports.SerialPort.WriteBufferSize" /> 值小于或等于零。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.IO.Ports.SerialPort.WriteBufferSize" /> 属性是在流打开时设置的。</exception>
      <exception cref="T:System.IO.IOException">
        <see cref="P:System.IO.Ports.SerialPort.WriteBufferSize" /> 属性被设置为奇整数值。</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.WriteLine(System.String)">
      <summary>将指定的字符串和 <see cref="P:System.IO.Ports.SerialPort.NewLine" /> 值写入输出缓冲区。</summary>
      <param name="text">写入输出缓冲区的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 参数为 null。</exception>
      <exception cref="T:System.InvalidOperationException">指定的端口未打开。</exception>
      <exception cref="T:System.TimeoutException">
        <see cref="M:System.IO.Ports.SerialPort.WriteLine(System.String)" /> 方法无法写入流。 </exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.WriteTimeout">
      <summary>获取或设置写入操作未完成时发生超时之前的毫秒数。</summary>
      <returns>发生超时之前的毫秒数。默认值为 <see cref="F:System.IO.Ports.SerialPort.InfiniteTimeout" />。</returns>
      <exception cref="T:System.IO.IOException">此端口处于无效状态。 - 或 - 尝试设置基础端口状态失败。例如，从此 <see cref="T:System.IO.Ports.SerialPort" /> 对象传递的参数无效。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.IO.Ports.SerialPort.WriteTimeout" /> 值小于零且不等于 <see cref="F:System.IO.Ports.SerialPort.InfiniteTimeout" />。</exception>
    </member>
    <member name="T:System.IO.Ports.StopBits">
      <summary>指定在 <see cref="T:System.IO.Ports.SerialPort" /> 对象上使用的停止位数。</summary>
    </member>
    <member name="F:System.IO.Ports.StopBits.None">
      <summary>不使用停止位。不支持此值。将 <see cref="P:System.IO.Ports.SerialPort.StopBits" /> 属性设置为 <see cref="F:System.IO.Ports.StopBits.None" /> 将引发 <see cref="T:System.ArgumentOutOfRangeException" />。</summary>
    </member>
    <member name="F:System.IO.Ports.StopBits.One">
      <summary>使用一个停止位。</summary>
    </member>
    <member name="F:System.IO.Ports.StopBits.Two">
      <summary>使用两个停止位。</summary>
    </member>
    <member name="F:System.IO.Ports.StopBits.OnePointFive">
      <summary>使用 1.5 个停止位。</summary>
    </member>
    <member name="T:System.Media.SoundPlayer">
      <summary>
                    控制 .wav 文件中的声音播放。
                </summary>
    </member>
    <member name="M:System.Media.SoundPlayer.#ctor">
      <summary>
                    初始化 <see cref="T:System.Media.SoundPlayer" /> 类的新实例。
                </summary>
    </member>
    <member name="M:System.Media.SoundPlayer.#ctor(System.IO.Stream)">
      <summary>
                    初始化 <see cref="T:System.Media.SoundPlayer" /> 类的新实例，并在指定的 <see cref="T:System.IO.Stream" /> 内附加 .wav 文件。
                </summary>
      <param name="stream">
                    .wav 文件的 <see cref="T:System.IO.Stream" />。
                </param>
    </member>
    <member name="M:System.Media.SoundPlayer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                    初始化 <see cref="T:System.Media.SoundPlayer" /> 类的新实例。
                </summary>
      <param name="serializationInfo">
                    用于反序列化的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。
                </param>
      <param name="context">
                    用于反序列化的目标。
                </param>
      <exception cref="T:System.UriFormatException">
                    无法解析 <paramref name="serializationInfo" /> 中指定的 <see cref="P:System.Media.SoundPlayer.SoundLocation" />。
                </exception>
    </member>
    <member name="M:System.Media.SoundPlayer.#ctor(System.String)">
      <summary>
                    初始化 <see cref="T:System.Media.SoundPlayer" /> 类的新实例，并附加指定的 .wav 文件。
                </summary>
      <param name="soundLocation">
                    要加载的 .wav 文件的位置。
                </param>
      <exception cref="T:System.UriFormatException">
                    无法解析由 <paramref name="soundLocation" /> 指定的 URL 值。
                </exception>
    </member>
    <member name="P:System.Media.SoundPlayer.IsLoadCompleted">
      <summary>
                    获取一个值，该值指示 .wav 文件的加载是否已经成功完成。
                </summary>
      <returns>
                    如果加载了 .wav 文件，则为 true，如果还没有加载 .wav 文件，则为 false。
                </returns>
    </member>
    <member name="M:System.Media.SoundPlayer.Load">
      <summary>
                    同步加载声音。
                </summary>
      <exception cref="T:System.ServiceProcess.TimeoutException">
                    加载所用的时间超出了 <see cref="P:System.Media.SoundPlayer.LoadTimeout" /> 指定的时间（以毫秒为单位）。
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
                    无法找到由 <see cref="P:System.Media.SoundPlayer.SoundLocation" /> 指定的文件。
                </exception>
    </member>
    <member name="M:System.Media.SoundPlayer.LoadAsync">
      <summary>
                    使用新线程从流或 Web 资源中加载 .wav 文件。
                </summary>
      <exception cref="T:System.ServiceProcess.TimeoutException">
                    加载所用的时间超出了 <see cref="P:System.Media.SoundPlayer.LoadTimeout" /> 指定的时间（以毫秒为单位）。
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
                    无法找到由 <see cref="P:System.Media.SoundPlayer.SoundLocation" /> 指定的文件。
                </exception>
    </member>
    <member name="E:System.Media.SoundPlayer.LoadCompleted">
      <summary>
                    当成功或未成功加载 .wav 文件时出现。
                </summary>
    </member>
    <member name="P:System.Media.SoundPlayer.LoadTimeout">
      <summary>
                    获取或设置 .wav 文件的加载必须完成的时间（以毫秒为单位）。
                </summary>
      <returns>
                    要等待的毫秒数。默认值为 10000（10 秒）。
                </returns>
    </member>
    <member name="M:System.Media.SoundPlayer.OnLoadCompleted(System.ComponentModel.AsyncCompletedEventArgs)">
      <summary>
                    引发 <see cref="E:System.Media.SoundPlayer.LoadCompleted" /> 事件。
                </summary>
      <param name="e">
                    包含事件数据的 <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" />。
                </param>
    </member>
    <member name="M:System.Media.SoundPlayer.OnSoundLocationChanged(System.EventArgs)">
      <summary>
                    引发 <see cref="E:System.Media.SoundPlayer.SoundLocationChanged" /> 事件。
                </summary>
      <param name="e">
                    包含事件数据的 <see cref="T:System.EventArgs" />。
                </param>
    </member>
    <member name="M:System.Media.SoundPlayer.OnStreamChanged(System.EventArgs)">
      <summary>
                    引发 <see cref="E:System.Media.SoundPlayer.StreamChanged" /> 事件。
                </summary>
      <param name="e">
                    包含事件数据的 <see cref="T:System.EventArgs" />。
                </param>
    </member>
    <member name="M:System.Media.SoundPlayer.Play">
      <summary>
                    使用新线程播放 .wav 文件，如果尚未加载 .wav 文件，则先加载该文件。
                </summary>
      <exception cref="T:System.ServiceProcess.TimeoutException">
                    加载所用的时间超出了 <see cref="P:System.Media.SoundPlayer.LoadTimeout" /> 指定的时间（以毫秒为单位）。
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
                    无法找到由 <see cref="P:System.Media.SoundPlayer.SoundLocation" /> 指定的文件。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    .wav 标头已损坏；由 <see cref="P:System.Media.SoundPlayer.SoundLocation" /> 指定的文件不是 PCM .wav 文件。
                </exception>
    </member>
    <member name="M:System.Media.SoundPlayer.PlayLooping">
      <summary>
                    使用新线程循环播放 .wav 文件，如果尚未加载 .wav 文件，则先加载该文件。
                </summary>
      <exception cref="T:System.ServiceProcess.TimeoutException">
                    加载所用的时间超出了 <see cref="P:System.Media.SoundPlayer.LoadTimeout" /> 指定的时间（以毫秒为单位）。
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
                    无法找到由 <see cref="P:System.Media.SoundPlayer.SoundLocation" /> 指定的文件。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    .wav 标头已损坏；由 <see cref="P:System.Media.SoundPlayer.SoundLocation" /> 指定的文件不是 PCM .wav 文件。
                </exception>
    </member>
    <member name="M:System.Media.SoundPlayer.PlaySync">
      <summary>
                    使用用户界面 (UI) 线程播放 .wav 文件，如果尚未加载 .wav 文件，则先加载该文件。
                </summary>
      <exception cref="T:System.ServiceProcess.TimeoutException">
                    加载所用的时间超出了 <see cref="P:System.Media.SoundPlayer.LoadTimeout" /> 指定的时间（以毫秒为单位）。
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
                    无法找到由 <see cref="P:System.Media.SoundPlayer.SoundLocation" /> 指定的文件。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    .wav 标头已损坏；由 <see cref="P:System.Media.SoundPlayer.SoundLocation" /> 指定的文件不是 PCM .wav 文件。
                </exception>
    </member>
    <member name="P:System.Media.SoundPlayer.SoundLocation">
      <summary>
                    获取或设置要加载的 .wav 文件的文件路径或 URL。
                </summary>
      <returns>
                    从中加载 .wav 文件的文件路径或 URL，如果不存在文件路径，则为 <see cref="F:System.String.Empty" />。默认为 <see cref="F:System.String.Empty" />。
                </returns>
    </member>
    <member name="E:System.Media.SoundPlayer.SoundLocationChanged">
      <summary>
                    当已设置此 <see cref="T:System.Media.SoundPlayer" /> 的新音频源路径时出现。
                </summary>
    </member>
    <member name="M:System.Media.SoundPlayer.Stop">
      <summary>
                    如果播放正在进行，则停止播放声音。
                </summary>
    </member>
    <member name="P:System.Media.SoundPlayer.Stream">
      <summary>
                    获取或设置从中加载 .wav 文件的 <see cref="T:System.IO.Stream" />。
                </summary>
      <returns>
                    从中加载 .wav 文件的 <see cref="T:System.IO.Stream" />，如果没有可用的流，则为 null。默认为 null。
                </returns>
    </member>
    <member name="E:System.Media.SoundPlayer.StreamChanged">
      <summary>
                    当已设置此 <see cref="T:System.Media.SoundPlayer" /> 的新 <see cref="T:System.IO.Stream" /> 音频源时出现。
                </summary>
    </member>
    <member name="M:System.Media.SoundPlayer.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> 方法。
                </summary>
      <param name="info">
                    要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。
                </param>
      <param name="context">
                    此序列化的目标（请参见 <see cref="T:System.Runtime.Serialization.StreamingContext" />）。
                </param>
    </member>
    <member name="P:System.Media.SoundPlayer.Tag">
      <summary>
                    获取或设置包含有关 <see cref="T:System.Media.SoundPlayer" /> 的数据的 <see cref="T:System.Object" />。
                </summary>
      <returns>
                    一个 <see cref="T:System.Object" />，包含有关 <see cref="T:System.Media.SoundPlayer" /> 的数据。
                </returns>
    </member>
    <member name="T:System.Media.SystemSound">
      <summary>表示一个系统声音类型。</summary>
      <filterpriority>2</filterpriority>
      <completionlist cref="T:System.Media.SystemSounds" />
    </member>
    <member name="M:System.Media.SystemSound.Play">
      <summary>播放系统声音类型。</summary>
    </member>
    <member name="T:System.Media.SystemSounds">
      <summary>检索与一组 Windows 操作系统声音事件类型关联的声音。无法继承此类。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Media.SystemSounds.Asterisk">
      <summary>获取与当前 Windows 声音方案中的 Asterisk 程序事件关联的声音。</summary>
      <returns>
        <see cref="T:System.Media.SystemSound" />。</returns>
    </member>
    <member name="P:System.Media.SystemSounds.Beep">
      <summary>获取与当前 Windows 声音方案中的 Beep 程序事件关联的声音。</summary>
      <returns>
        <see cref="T:System.Media.SystemSound" />。</returns>
    </member>
    <member name="P:System.Media.SystemSounds.Exclamation">
      <summary>获取与当前 Windows 声音方案中的 Exclamation 程序事件关联的声音。</summary>
      <returns>
        <see cref="T:System.Media.SystemSound" />。</returns>
    </member>
    <member name="P:System.Media.SystemSounds.Hand">
      <summary>获取与当前 Windows 声音方案中的 Hand 程序事件关联的声音。</summary>
      <returns>
        <see cref="T:System.Media.SystemSound" />。</returns>
    </member>
    <member name="P:System.Media.SystemSounds.Question">
      <summary>获取与当前 Windows 声音方案中的 Question 程序事件关联的声音。</summary>
      <returns>
        <see cref="T:System.Media.SystemSound" />。</returns>
    </member>
    <member name="M:System.Media.SoundPlayer.Dispose(System.Boolean)">
      <summary>
                    释放由 <see cref="T:System.Media.SoundPlayer" /> 使用的非托管资源，还可以选择释放托管资源。
                </summary>
      <param name="disposing">
                    如果为 true，则同时释放托管资源和非托管资源；如果为 false，则仅释放非托管资源。
                </param>
    </member>
    <member name="T:System.Net.AuthenticationManager">
      <summary>管理客户端身份验证过程中调用的身份验证模块。</summary>
    </member>
    <member name="M:System.Net.AuthenticationManager.Authenticate(System.String,System.Net.WebRequest,System.Net.ICredentials)">
      <summary>调用每个已注册的身份验证模块以查找第一个可响应身份验证请求的模块。</summary>
      <returns>
        <see cref="T:System.Net.Authorization" /> 类的实例，包含授权尝试的结果。如果没有身份验证模块响应质询，则此方法返回 null。</returns>
      <param name="challenge">Internet 资源返回的质询。 </param>
      <param name="request">启动身份验证质询的 <see cref="T:System.Net.WebRequest" />。 </param>
      <param name="credentials">与此请求关联的 <see cref="T:System.Net.ICredentials" />。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="challenge" /> 为 null。- 或 - <paramref name="request" /> 为 null。- 或 - <paramref name="credentials" /> 为 null。 </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.AuthenticationManager.CredentialPolicy">
      <summary>获取或设置凭据策略，该凭据策略将用于使用 <see cref="T:System.Net.HttpWebRequest" /> 类发出的资源请求。</summary>
      <returns>一个实现 <see cref="T:System.Net.ICredentialPolicy" /> 接口的对象，该接口确定凭据是否随请求一起发送。默认值为 null。</returns>
    </member>
    <member name="P:System.Net.AuthenticationManager.CustomTargetNameDictionary">
      <summary>获取包含服务主体名称 (SPN) 的字典，这些 SPN 用于在 Kerberos 身份验证期间为使用 <see cref="T:System.Net.WebRequest" /> 及其派生类发出的请求标识主机。</summary>
      <returns>一个可写的 <see cref="T:System.Collections.Specialized.StringDictionary" />，它包含构成主机信息的键的 SPN 值。 </returns>
    </member>
    <member name="M:System.Net.AuthenticationManager.PreAuthenticate(System.Net.WebRequest,System.Net.ICredentials)">
      <summary>预身份验证请求。</summary>
      <returns>如果可以对请求进行预身份验证，则为 <see cref="T:System.Net.Authorization" /> 类的实例，否则为 null。如果 <paramref name="credentials" /> 为 null，则此方法返回 null。</returns>
      <param name="request">对 Internet 资源的 <see cref="T:System.Net.WebRequest" />。 </param>
      <param name="credentials">与该请求相关联的 <see cref="T:System.Net.ICredentials" />。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> 为 null。 </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.AuthenticationManager.Register(System.Net.IAuthenticationModule)">
      <summary>向身份验证管理器注册身份验证模块。</summary>
      <param name="authenticationModule">要注册到该身份验证管理器的 <see cref="T:System.Net.IAuthenticationModule" />。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="authenticationModule" /> 为 null。 </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.AuthenticationManager.RegisteredModules">
      <summary>获取注册到身份验证管理器中的身份验证模块的列表。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，它启用要被阅读的已注册的身份验证模块。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.AuthenticationManager.Unregister(System.Net.IAuthenticationModule)">
      <summary>将指定的身份验证模块从已注册的模块列表中移除。</summary>
      <param name="authenticationModule">要从已注册模块列表中移除的 <see cref="T:System.Net.IAuthenticationModule" />。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="authenticationModule" /> 为 null。 </exception>
      <exception cref="T:System.InvalidOperationException">指定的 <see cref="T:System.Net.IAuthenticationModule" /> 没有注册。 </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.AuthenticationManager.Unregister(System.String)">
      <summary>将具有指定身份验证方案的身份验证模块从已注册模块列表中移除。</summary>
      <param name="authenticationScheme">要移除的模块的身份验证方案。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="authenticationScheme" /> 为 null。 </exception>
      <exception cref="T:System.InvalidOperationException">此身份验证方案的模块没有注册。 </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="T:System.Net.AuthenticationSchemes">
      <summary>指定用于身份验证的协议。</summary>
    </member>
    <member name="F:System.Net.AuthenticationSchemes.None">
      <summary>不允许进行任何身份验证。设置了此标志并请求 <see cref="T:System.Net.HttpListener" /> 对象的客户端将始终会接收 403 Forbidden 状态。当资源决不应该用于客户端时，请使用此标志。</summary>
    </member>
    <member name="F:System.Net.AuthenticationSchemes.Digest">
      <summary>指定摘要式身份验证。</summary>
    </member>
    <member name="F:System.Net.AuthenticationSchemes.Negotiate">
      <summary>和客户端协商以确定身份验证方案。如果客户端和服务器均支持 Kerberos，则使用 Kerberos；否则使用 NTLM。</summary>
    </member>
    <member name="F:System.Net.AuthenticationSchemes.Ntlm">
      <summary>指定 NTLM 身份验证。</summary>
    </member>
    <member name="F:System.Net.AuthenticationSchemes.Basic">
      <summary>指定基本身份验证。 </summary>
    </member>
    <member name="F:System.Net.AuthenticationSchemes.Anonymous">
      <summary>指定匿名身份验证。</summary>
    </member>
    <member name="F:System.Net.AuthenticationSchemes.IntegratedWindowsAuthentication">
      <summary>指定 Windows 身份验证。</summary>
    </member>
    <member name="T:System.Net.AuthenticationSchemeSelector">
      <summary>为 <see cref="T:System.Net.HttpListener" /> 实例选择身份验证方案。</summary>
      <returns>
        <see cref="T:System.Net.AuthenticationSchemes" /> 值之一，指示要用于指定的客户端请求的身份验证方法。</returns>
      <param name="httpRequest">要为其选择身份验证方案的 <see cref="T:System.Net.HttpListenerRequest" /> 实例。</param>
    </member>
    <member name="T:System.Net.Authorization">
      <summary>包含 Internet 服务器的身份验证消息。</summary>
    </member>
    <member name="M:System.Net.Authorization.#ctor(System.String)">
      <summary>用指定的授权消息创建 <see cref="T:System.Net.Authorization" /> 类的新实例。</summary>
      <param name="token">服务器预期的已加密的授权消息。 </param>
    </member>
    <member name="M:System.Net.Authorization.#ctor(System.String,System.Boolean)">
      <summary>用指定的授权消息和完成状态创建 <see cref="T:System.Net.Authorization" /> 类的新实例。</summary>
      <param name="token">服务器预期的已加密的授权消息。 </param>
      <param name="finished">授权尝试的完成状态。如果授权尝试已完成，则为 true；否则为 false。 </param>
    </member>
    <member name="M:System.Net.Authorization.#ctor(System.String,System.Boolean,System.String)">
      <summary>用指定的授权消息、完成状态和连接组标识符创建 <see cref="T:System.Net.Authorization" /> 类的新实例。</summary>
      <param name="token">服务器预期的已加密的授权消息。 </param>
      <param name="finished">授权尝试的完成状态。如果授权尝试已完成，则为 true；否则为 false。 </param>
      <param name="connectionGroupId">可用来创建私有客户端/服务器连接的唯一标识符，这种连接只能绑定到此身份验证方案。 </param>
    </member>
    <member name="P:System.Net.Authorization.Complete">
      <summary>获取授权的完成状态。</summary>
      <returns>
如果身份验证过程已完成，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.Authorization.ConnectionGroupId">
      <summary>获取用户特定连接的唯一标识符。</summary>
      <returns>将连接与身份验证实体关联起来的唯一字符串。</returns>
    </member>
    <member name="P:System.Net.Authorization.Message">
      <summary>获取为响应身份验证质询而返回给服务器的消息。</summary>
      <returns>为响应身份验证质询而返回给服务器的消息。</returns>
    </member>
    <member name="P:System.Net.Authorization.MutuallyAuthenticated">
      <summary>获取或设置一个 <see cref="T:System.Boolean" /> 值，该值指示是否发生了相互身份验证。</summary>
      <returns>
如果客户端和服务器均经过验证，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.Authorization.ProtectionRealm">
      <summary>获取或设置可以用 <see cref="P:System.Net.Authorization.Message" /> 属性验证的统一资源标识符 (URI) 的前缀。</summary>
      <returns>包含 URI 前缀的字符串数组。</returns>
    </member>
    <member name="T:System.Net.BindIPEndPoint">
      <summary>表示指定 <see cref="T:System.Net.ServicePoint" /> 的本地 Internet 协议地址和端口号的方法。</summary>
      <returns>
        <see cref="T:System.Net.ServicePoint" /> 绑定到的本地 <see cref="T:System.Net.IPEndPoint" />。</returns>
      <param name="servicePoint">与要创建的连接关联的 <see cref="T:System.Net.ServicePoint" />。</param>
      <param name="remoteEndPoint">指定远程主机的远程 <see cref="T:System.Net.IPEndPoint" />。</param>
      <param name="retryCount">对于指定连接此委托被调用的次数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="retryCount" /> 等于<see cref="F:System.Int32.MaxValue" /></exception>
    </member>
    <member name="T:System.Net.Cookie">
      <summary>
                    提供一组用于管理 Cookie 的属性和方法。无法继承此类。
                </summary>
    </member>
    <member name="M:System.Net.Cookie.#ctor">
      <summary>
                    初始化 <see cref="T:System.Net.Cookie" /> 类的新实例。
                </summary>
    </member>
    <member name="M:System.Net.Cookie.#ctor(System.String,System.String)">
      <summary>
                    使用指定的 <see cref="P:System.Net.Cookie.Name" /> 和 <see cref="P:System.Net.Cookie.Value" /> 初始化 <see cref="T:System.Net.Cookie" /> 类的新实例。
                </summary>
      <param name="name">
        <see cref="T:System.Net.Cookie" /> 的名称。不能在 <paramref name="name" /> 中使用下列字符：等号、分号、逗号、换行符 (\n)、回车符 (\r)、制表符 (\t) 和空格字符。美元符号 ("$") 不能作为第一个字符。
                </param>
      <param name="value">
        <see cref="T:System.Net.Cookie" /> 的值。下列字符不得用在 <paramref name="value" /> 中：分号、逗号。
                </param>
      <exception cref="T:System.Net.CookieException">
        <paramref name="name" /> 参数为 null。
                
                    - 或 -
                <paramref name="name" /> 参数的长度为零。
                
                    - 或 -
                <paramref name="name" /> 参数包含无效字符。
                
                    - 或 -
                <paramref name="value" /> 参数为 null。
                
                    - 或 -
                <paramref name="value" /> 参数包含一个未使用引号引起来的字符串，且该字符串中包含无效字符。
                </exception>
    </member>
    <member name="M:System.Net.Cookie.#ctor(System.String,System.String,System.String)">
      <summary>
                    使用指定的 <see cref="P:System.Net.Cookie.Name" />、<see cref="P:System.Net.Cookie.Value" /> 和 <see cref="P:System.Net.Cookie.Path" /> 初始化 <see cref="T:System.Net.Cookie" /> 类的新实例。
                </summary>
      <param name="name">
        <see cref="T:System.Net.Cookie" /> 的名称。不能在 <paramref name="name" /> 中使用下列字符：等号、分号、逗号、换行符 (\n)、回车符 (\r)、制表符 (\t) 和空格字符。美元符号 ("$") 不能作为第一个字符。
                </param>
      <param name="value">
        <see cref="T:System.Net.Cookie" /> 的值。下列字符不得用在 <paramref name="value" /> 中：分号、逗号。
                </param>
      <param name="path">
此 <see cref="T:System.Net.Cookie" /> 适用于的源服务器上的 URI 的子集。默认值为“/”。
                </param>
      <exception cref="T:System.Net.CookieException">
        <paramref name="name" /> 参数为 null。
                
                    - 或 -
                <paramref name="name" /> 参数的长度为零。
                
                    - 或 -
                <paramref name="name" /> 参数包含无效字符。
                
                    - 或 -
                <paramref name="value" /> 参数为 null。
                
                    - 或 -
                <paramref name="value" /> 参数包含一个未使用引号引起来的字符串，且该字符串中包含无效字符。
                </exception>
    </member>
    <member name="M:System.Net.Cookie.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
                    使用指定的 <see cref="P:System.Net.Cookie.Name" />、<see cref="P:System.Net.Cookie.Value" />、<see cref="P:System.Net.Cookie.Path" /> 和 <see cref="P:System.Net.Cookie.Domain" /> 初始化 <see cref="T:System.Net.Cookie" /> 类的新实例。
                </summary>
      <param name="name">
        <see cref="T:System.Net.Cookie" /> 的名称。不能在 <paramref name="name" /> 中使用下列字符：等号、分号、逗号、换行符 (\n)、回车符 (\r)、制表符 (\t) 和空格字符。美元符号 ("$") 不能作为第一个字符。
                </param>
      <param name="value">
        <see cref="T:System.Net.Cookie" /> 对象的值。下列字符不得用在 <paramref name="value" /> 中：分号、逗号。
                </param>
      <param name="path">
此 <see cref="T:System.Net.Cookie" /> 适用于的源服务器上的 URI 的子集。默认值为 "/"。
                </param>
      <param name="domain">
                    此 <see cref="T:System.Net.Cookie" /> 对其有效的可选 Internet 域。默认值为已从其中接收到此 <see cref="T:System.Net.Cookie" /> 的主机。
                </param>
      <exception cref="T:System.Net.CookieException">
        <paramref name="name" /> 参数为 null。
                
                    - 或 -
                <paramref name="name" /> 参数的长度为零。
                
                    - 或 -
                <paramref name="name" /> 参数包含无效字符。
                
                    - 或 -
                <paramref name="value" /> 参数为 null。
                
                    - 或 -
                <paramref name="value" /> 参数包含一个未使用引号引起来的字符串，且该字符串中包含无效字符。
                </exception>
    </member>
    <member name="P:System.Net.Cookie.Comment">
      <summary>
                    获取或设置服务器可添加到 <see cref="T:System.Net.Cookie" /> 中的注释。
                </summary>
      <returns>
                    用于记录此 <see cref="T:System.Net.Cookie" /> 预定用途的可选注释。
                </returns>
    </member>
    <member name="P:System.Net.Cookie.CommentUri">
      <summary>
                    获取或设置服务器可通过 <see cref="T:System.Net.Cookie" /> 来提供的 URI 注释。
                </summary>
      <returns>
                    一个可选注释，它表示此 <see cref="T:System.Net.Cookie" /> 的 URI 引用的预定用途。该值必须符合 URI 格式。
                </returns>
    </member>
    <member name="P:System.Net.Cookie.Discard">
      <summary>
                    获取或设置由服务器设置的丢弃标志。
                </summary>
      <returns>
                    如果客户端将在当前会话结束时丢弃 <see cref="T:System.Net.Cookie" />，则为 true；否则为 false。默认为 false。
                </returns>
    </member>
    <member name="P:System.Net.Cookie.Domain">
      <summary>
                    获取或设置 <see cref="T:System.Net.Cookie" /> 对其有效的 URI。
                </summary>
      <returns>
        <see cref="T:System.Net.Cookie" /> 对其有效的 URI。
                </returns>
    </member>
    <member name="M:System.Net.Cookie.Equals(System.Object)">
      <summary>
                    重写 <see cref="M:System.Object.Equals(System.Object)" /> 方法。
                </summary>
      <returns>
                    如果 <see cref="T:System.Net.Cookie" /> 等于 <paramref name="comparand" />，则返回 true。两个 <see cref="T:System.Net.Cookie" /> 实例相等的条件是它们的 <see cref="P:System.Net.Cookie.Name" />、<see cref="P:System.Net.Cookie.Value" />、<see cref="P:System.Net.Cookie.Path" />、<see cref="P:System.Net.Cookie.Domain" /> 和 <see cref="P:System.Net.Cookie.Version" /> 属性相等。<see cref="P:System.Net.Cookie.Name" /> 和 <see cref="P:System.Net.Cookie.Domain" /> 字符串比较不区分大小写。
                </returns>
      <param name="comparand">
                    对 <see cref="T:System.Net.Cookie" /> 的引用。
                </param>
    </member>
    <member name="P:System.Net.Cookie.Expired">
      <summary>
                    获取或设置 <see cref="T:System.Net.Cookie" /> 的当前状态。
                </summary>
      <returns>
                    如果 <see cref="T:System.Net.Cookie" /> 已过期，则为 true；否则为 false。默认为 false。
                </returns>
    </member>
    <member name="P:System.Net.Cookie.Expires">
      <summary>
                    获取或设置作为 <see cref="T:System.DateTime" /> 的 <see cref="T:System.Net.Cookie" /> 过期日期和时间。
                </summary>
      <returns>
                    作为 <see cref="T:System.DateTime" /> 实例的 <see cref="T:System.Net.Cookie" /> 过期日期和时间。
                </returns>
    </member>
    <member name="M:System.Net.Cookie.GetHashCode">
      <summary>
                    重写 <see cref="M:System.Object.GetHashCode" /> 方法。
                </summary>
      <returns>
                    此实例的 32 位带符号整数哈希代码。
                </returns>
    </member>
    <member name="P:System.Net.Cookie.HttpOnly">
      <summary>
                    确定页脚本或其他活动内容是否可访问此 Cookie。
                </summary>
      <returns>
                    确定页脚本或其他活动内容是否可访问此 Cookie 的布尔值。
                </returns>
    </member>
    <member name="P:System.Net.Cookie.Name">
      <summary>
                    获取或设置 <see cref="T:System.Net.Cookie" /> 的名称。
                </summary>
      <returns>
        <see cref="T:System.Net.Cookie" /> 的名称。
                </returns>
      <exception cref="T:System.Net.CookieException">
                    为 Set 操作指定的值为 null 或是空字符串
                
                    - 或 -
                
                    为 Set 操作指定的值包含非法字符。不能在 <see cref="P:System.Net.Cookie.Name" /> 属性中使用下列字符：等号、分号、逗号、换行符 (\n)、回车符 (\r)、制表符 (\t) 和空格字符。美元符号 ("$") 不能作为第一个字符。
                </exception>
    </member>
    <member name="P:System.Net.Cookie.Path">
      <summary>
                    获取或设置此 <see cref="T:System.Net.Cookie" /> 适用于的 URI。
                </summary>
      <returns>
                    此 <see cref="T:System.Net.Cookie" /> 适用于的 URI。
                </returns>
    </member>
    <member name="P:System.Net.Cookie.Port">
      <summary>
                    获取或设置此 <see cref="T:System.Net.Cookie" /> 适用于的 TCP 端口的列表。
                </summary>
      <returns>
                    此 <see cref="T:System.Net.Cookie" /> 适用于的 TCP 端口的列表。
                </returns>
      <exception cref="T:System.Net.CookieException">
                    无法分析为 Set 操作指定的值或者该值没有用双引号括起来。
                </exception>
    </member>
    <member name="P:System.Net.Cookie.Secure">
      <summary>
                    获取或设置 <see cref="T:System.Net.Cookie" /> 的安全级别。
                </summary>
      <returns>
                    如果客户端仅在使用安全超文本传输协议 (HTTPS) 的后继请求中返回 Cookie，则为 true；否则为 false。默认为 false。
                </returns>
    </member>
    <member name="P:System.Net.Cookie.TimeStamp">
      <summary>
                    获取此 Cookie 作为 <see cref="T:System.DateTime" /> 发出的时间。
                </summary>
      <returns>
                    此 Cookie 作为 <see cref="T:System.DateTime" /> 发出的时间。
                </returns>
    </member>
    <member name="M:System.Net.Cookie.ToString">
      <summary>
                    重写 <see cref="M:System.Object.ToString" /> 方法。
                </summary>
      <returns>
                    返回此 <see cref="T:System.Net.Cookie" /> 对象的一个字符串表示形式，该表示形式适合包含在 HTTP Cookie: 请求标头中。
                </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.Cookie.Value">
      <summary>
                    获取或设置 <see cref="T:System.Net.Cookie" /> 的 <see cref="P:System.Net.Cookie.Value" />。
                </summary>
      <returns>
        <see cref="T:System.Net.Cookie" /> 的 <see cref="P:System.Net.Cookie.Value" />。
                </returns>
    </member>
    <member name="P:System.Net.Cookie.Version">
      <summary>
                    获取或设置此 Cookie 符合的 HTTP 状态维护版本。
                </summary>
      <returns>
                    此 Cookie 符合的 HTTP 状态维护版本。
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    不允许使用为版本指定的值。
                </exception>
    </member>
    <member name="T:System.Net.CookieCollection">
      <summary>为 <see cref="T:System.Net.Cookie" /> 类的实例提供集合容器。</summary>
    </member>
    <member name="M:System.Net.CookieCollection.#ctor">
      <summary>初始化 <see cref="T:System.Net.CookieCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.CookieCollection.Add(System.Net.Cookie)">
      <summary>将 <see cref="T:System.Net.Cookie" /> 添加到 <see cref="T:System.Net.CookieCollection" /> 中。</summary>
      <param name="cookie">要添加到 <see cref="T:System.Net.CookieCollection" /> 中的 <see cref="T:System.Net.Cookie" />。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cookie" /> 为 null。 </exception>
    </member>
    <member name="M:System.Net.CookieCollection.Add(System.Net.CookieCollection)">
      <summary>将 <see cref="T:System.Net.CookieCollection" /> 的内容添加到当前实例中。</summary>
      <param name="cookies">要添加的 <see cref="T:System.Net.CookieCollection" />。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cookies" /> 为 null。 </exception>
    </member>
    <member name="M:System.Net.CookieCollection.CopyTo(System.Array,System.Int32)">
      <summary>从特定索引开始，将 <see cref="T:System.Net.CookieCollection" /> 的元素复制到 <see cref="T:System.Array" /> 类的一个实例中。</summary>
      <param name="array">此 <see cref="T:System.Net.CookieCollection" /> 将被复制到的目标 <see cref="T:System.Array" />。 </param>
      <param name="index">目标 <see cref="T:System.Array" /> 中复制开始位置的从零开始的索引。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。 </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 - <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度。- 或 - 此 <see cref="T:System.Net.CookieCollection" /> 中的元素数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。 </exception>
      <exception cref="T:System.InvalidCastException">该 <see cref="T:System.Net.CookieCollection" /> 中的元素不能自动被强制转换为目标 <paramref name="array" /> 的类型。 </exception>
    </member>
    <member name="M:System.Net.CookieCollection.CopyTo(System.Net.Cookie[],System.Int32)">
      <summary>将该 <see cref="T:System.Net.CookieCollection" /> 的元素复制到在目标数组的指定索引处开始的 <see cref="T:System.Net.Cookie" /> 数组。</summary>
      <param name="array">该 <see cref="T:System.Net.CookieCollection" /> 将被复制到的目标 <see cref="T:System.Net.Cookie" /> 数组。</param>
      <param name="index">目标 <see cref="T:System.Array" /> 中复制开始位置的从零开始的索引。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。 </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 - <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度。- 或 - 此 <see cref="T:System.Net.CookieCollection" /> 中的元素数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。 </exception>
      <exception cref="T:System.InvalidCastException">该 <see cref="T:System.Net.CookieCollection" /> 中的元素不能自动被强制转换为目标 <paramref name="array" /> 的类型。 </exception>
    </member>
    <member name="P:System.Net.CookieCollection.Count">
      <summary>获取 <see cref="T:System.Net.CookieCollection" /> 中包含的 Cookie 的数目。</summary>
      <returns>
        <see cref="T:System.Net.CookieCollection" /> 中包含的 Cookie 的数目。</returns>
    </member>
    <member name="M:System.Net.CookieCollection.GetEnumerator">
      <summary>获取一个枚举数，该枚举数可以循环访问 <see cref="T:System.Net.CookieCollection" />。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 接口实现的实例，该接口可以循环访问 <see cref="T:System.Net.CookieCollection" />。</returns>
    </member>
    <member name="P:System.Net.CookieCollection.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Net.CookieCollection" /> 是否为只读。</summary>
      <returns>
如果该集合为只读 <see cref="T:System.Net.CookieCollection" />，则为 true；否则为 false。默认为 true。</returns>
    </member>
    <member name="P:System.Net.CookieCollection.IsSynchronized">
      <summary>获取一个值，该值指示对 <see cref="T:System.Net.CookieCollection" /> 的访问是否是线程安全的。</summary>
      <returns>
如果对 <see cref="T:System.Net.CookieCollection" /> 的访问是线程安全的，则为 true；否则为 false。默认为 false。</returns>
    </member>
    <member name="P:System.Net.CookieCollection.Item(System.Int32)">
      <summary>从 <see cref="T:System.Net.CookieCollection" /> 中获取具有特定索引的 <see cref="T:System.Net.Cookie" />。</summary>
      <returns>
        <see cref="T:System.Net.CookieCollection" /> 中具有特定索引的 <see cref="T:System.Net.Cookie" />。</returns>
      <param name="index">要查找的 <see cref="T:System.Net.Cookie" /> 的从零开始的索引。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0 或 <paramref name="index" /> 大于等于 <see cref="P:System.Net.CookieCollection.Count" />。 </exception>
    </member>
    <member name="P:System.Net.CookieCollection.Item(System.String)">
      <summary>从 <see cref="T:System.Net.CookieCollection" /> 中获取具有特定名称的 <see cref="T:System.Net.Cookie" />。</summary>
      <returns>
        <see cref="T:System.Net.CookieCollection" /> 中具有特定名称的 <see cref="T:System.Net.Cookie" />。</returns>
      <param name="name">要查找的 <see cref="T:System.Net.Cookie" /> 的名称。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。 </exception>
    </member>
    <member name="P:System.Net.CookieCollection.SyncRoot">
      <summary>获取一个对象，该对象可用于同步对 <see cref="T:System.Net.CookieCollection" /> 的访问。</summary>
      <returns>一个对象，它可用于同步对 <see cref="T:System.Net.CookieCollection" /> 的访问。</returns>
    </member>
    <member name="T:System.Net.CookieContainer">
      <summary>为 <see cref="T:System.Net.CookieCollection" /> 对象的集合提供容器。</summary>
    </member>
    <member name="M:System.Net.CookieContainer.#ctor">
      <summary>初始化 <see cref="T:System.Net.CookieContainer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.CookieContainer.#ctor(System.Int32)">
      <summary>使用指定的表示容器可以包含的 <see cref="T:System.Net.Cookie" /> 实例数的值初始化 <see cref="T:System.Net.CookieContainer" /> 类的新实例。</summary>
      <param name="capacity">
        <see cref="T:System.Net.CookieContainer" /> 可以包含的 <see cref="T:System.Net.Cookie" /> 实例数。 </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="capacity" /> 小于或等于零。 </exception>
    </member>
    <member name="M:System.Net.CookieContainer.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>使用指定属性初始化 <see cref="T:System.Net.CookieContainer" /> 类的新实例。</summary>
      <param name="capacity">
        <see cref="T:System.Net.CookieContainer" /> 可以包含的 <see cref="T:System.Net.Cookie" /> 实例数。 </param>
      <param name="perDomainCapacity">每个域的 <see cref="T:System.Net.Cookie" /> 实例数。 </param>
      <param name="maxCookieSize">
        <see cref="T:System.Net.CookieContainer" /> 中任何单个 <see cref="T:System.Net.Cookie" /> 的最大大小（以字节为单位）。 </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="perDomainCapacity" /> 不等于 <see cref="F:System.Int32.MaxValue" />。 以及 <paramref name="(perDomainCapacity" /> 小于或等于零，或者 <paramref name="perDomainCapacity" /> 大于 <paramref name="capacity)" /></exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="maxCookieSize" /> 小于或等于零。 </exception>
    </member>
    <member name="M:System.Net.CookieContainer.Add(System.Net.Cookie)">
      <summary>将 <see cref="T:System.Net.Cookie" /> 添加到 <see cref="T:System.Net.CookieContainer" /> 中。此方法使用 <see cref="T:System.Net.Cookie" /> 中的域来确定将 <see cref="T:System.Net.Cookie" /> 与哪个域集合相关联。</summary>
      <param name="cookie">要添加到 <see cref="T:System.Net.CookieContainer" /> 的 <see cref="T:System.Net.Cookie" />。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cookie" /> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="cookie" /> 的域为 null 或空字符串 ("")。 </exception>
      <exception cref="T:System.Net.CookieException">
        <paramref name="cookie" /> 大于 <paramref name="maxCookieSize" />。 - 或 - <paramref name="cookie" /> 的域不是有效的 URI。 </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.CookieContainer.Add(System.Net.CookieCollection)">
      <summary>将 <see cref="T:System.Net.CookieCollection" /> 的内容添加到 <see cref="T:System.Net.CookieContainer" /> 中。</summary>
      <param name="cookies">要添加到 <see cref="T:System.Net.CookieContainer" /> 的 <see cref="T:System.Net.CookieCollection" />。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cookies" /> 为 null。 </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.CookieContainer.Add(System.Uri,System.Net.Cookie)">
      <summary>将 <see cref="T:System.Net.Cookie" /> 添加到特定 URI 的 <see cref="T:System.Net.CookieContainer" /> 中。</summary>
      <param name="uri">要添加到 <see cref="T:System.Net.CookieContainer" /> 的 <see cref="T:System.Net.Cookie" /> 的 URI。 </param>
      <param name="cookie">要添加到 <see cref="T:System.Net.CookieContainer" /> 的 <see cref="T:System.Net.Cookie" />。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 为 null 或 <paramref name="cookie" /> 为 null。 </exception>
      <exception cref="T:System.Net.CookieException">
        <paramref name="cookie" /> 大于 <paramref name="maxCookieSize" />。 - 或 - <paramref name="cookie" /> 的域不是有效的 URI。 </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.CookieContainer.Add(System.Uri,System.Net.CookieCollection)">
      <summary>将 <see cref="T:System.Net.CookieCollection" /> 的内容添加到特定 URI 的 <see cref="T:System.Net.CookieContainer" /> 中。</summary>
      <param name="uri">要添加到 <see cref="T:System.Net.CookieContainer" /> 的 <see cref="T:System.Net.CookieCollection" /> 的 URI。 </param>
      <param name="cookies">要添加到 <see cref="T:System.Net.CookieContainer" /> 的 <see cref="T:System.Net.CookieCollection" />。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cookies" /> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="cookies" /> 中的某一个 Cookie 的域是 null。 </exception>
      <exception cref="T:System.Net.CookieException">
        <paramref name="cookies" /> 中的某一个 Cookie 包含无效的域。 </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.CookieContainer.Capacity">
      <summary>获取和设置 <see cref="T:System.Net.CookieContainer" /> 可以包含的 <see cref="T:System.Net.Cookie" /> 实例数。</summary>
      <returns>
        <see cref="T:System.Net.CookieContainer" /> 可以包含的 <see cref="T:System.Net.Cookie" /> 实例数。这是硬性限制，不能通过添加 <see cref="T:System.Net.Cookie" /> 超过此限制。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="Capacity" /> 小于或等于零，或者（值小于 <see cref="P:System.Net.CookieContainer.PerDomainCapacity" /> 且 <see cref="P:System.Net.CookieContainer.PerDomainCapacity" /> 不等于 <see cref="F:System.Int32.MaxValue" />）。 </exception>
    </member>
    <member name="P:System.Net.CookieContainer.Count">
      <summary>获取 <see cref="T:System.Net.CookieContainer" /> 当前包含的 <see cref="T:System.Net.Cookie" /> 实例数。</summary>
      <returns>
        <see cref="T:System.Net.CookieContainer" /> 当前包含的 <see cref="T:System.Net.Cookie" /> 实例数。这是所有域中 <see cref="T:System.Net.Cookie" /> 实例的总数。</returns>
    </member>
    <member name="F:System.Net.CookieContainer.DefaultCookieLengthLimit">
      <summary>表示 <see cref="T:System.Net.CookieContainer" /> 可以包含的 <see cref="T:System.Net.Cookie" /> 实例的默认最大大小（以字节为单位）。此字段为常数。</summary>
    </member>
    <member name="F:System.Net.CookieContainer.DefaultCookieLimit">
      <summary>表示 <see cref="T:System.Net.CookieContainer" /> 可以包含的 <see cref="T:System.Net.Cookie" /> 实例的默认最大数目。此字段为常数。</summary>
    </member>
    <member name="F:System.Net.CookieContainer.DefaultPerDomainCookieLimit">
      <summary>表示 <see cref="T:System.Net.CookieContainer" /> 可以在每个域引用的 <see cref="T:System.Net.Cookie" /> 实例的默认最大数目。此字段为常数。</summary>
    </member>
    <member name="M:System.Net.CookieContainer.GetCookieHeader(System.Uri)">
      <summary>获取 HTTP Cookie 标头，该标头包含表示与特定 URI 关联的 <see cref="T:System.Net.Cookie" /> 实例的 HTTP Cookie。</summary>
      <returns>一个 HTTP Cookie 标头，其中包含表示由分号分隔的 <see cref="T:System.Net.Cookie" /> 实例的字符串。</returns>
      <param name="uri">所需的 <see cref="T:System.Net.Cookie" /> 实例的 URI。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 为 null。 </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.CookieContainer.GetCookies(System.Uri)">
      <summary>获取包含与特定 URI 关联的 <see cref="T:System.Net.Cookie" /> 实例的 <see cref="T:System.Net.CookieCollection" />。</summary>
      <returns>包含与特定 URI 关联的 <see cref="T:System.Net.Cookie" /> 实例的 <see cref="T:System.Net.CookieCollection" />。</returns>
      <param name="uri">所需的 <see cref="T:System.Net.Cookie" /> 实例的 URI。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 为 null。 </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.CookieContainer.MaxCookieSize">
      <summary>表示 <see cref="T:System.Net.Cookie" /> 的最大允许长度。</summary>
      <returns>
        <see cref="T:System.Net.Cookie" /> 的最大允许长度（以字节为单位）。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="MaxCookieSize" /> 小于或等于零。 </exception>
    </member>
    <member name="P:System.Net.CookieContainer.PerDomainCapacity">
      <summary>获取和设置 <see cref="T:System.Net.CookieContainer" /> 可以在每个域包含的 <see cref="T:System.Net.Cookie" /> 实例数。</summary>
      <returns>每个域允许的 <see cref="T:System.Net.Cookie" /> 实例数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="PerDomainCapacity" /> 小于或等于零。 - 或 - 
（<paramref name="PerDomainCapacity" /> 大于允许的最大 Cookie 实例数 300 且不等于 <see cref="F:System.Int32.MaxValue" />）。 </exception>
    </member>
    <member name="M:System.Net.CookieContainer.SetCookies(System.Uri,System.String)">
      <summary>将 HTTP Cookie 标头中的一个或多个 Cookie 的 <see cref="T:System.Net.Cookie" /> 实例添加到特定 URI 的 <see cref="T:System.Net.CookieContainer" /> 中。</summary>
      <param name="uri">
        <see cref="T:System.Net.CookieCollection" /> 的 URI。 </param>
      <param name="cookieHeader">HTTP 服务器所返回的 HTTP Set-Cookie 标头的内容，其中的 <see cref="T:System.Net.Cookie" /> 实例用逗号分隔。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 为 null。 </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cookieHeader" /> 为 null。 </exception>
      <exception cref="T:System.Net.CookieException">某一个 Cookie 是无效的。 - 或 - 当将某一个 Cookie 添加到容器中时发生错误。 </exception>
    </member>
    <member name="T:System.Net.CookieException">
      <summary>
                    向 <see cref="T:System.Net.CookieContainer" /> 添加 <see cref="T:System.Net.Cookie" /> 出错时引发的异常。
                </summary>
    </member>
    <member name="M:System.Net.CookieException.#ctor">
      <summary>
                    初始化 <see cref="T:System.Net.CookieException" /> 类的新实例。
                </summary>
    </member>
    <member name="M:System.Net.CookieException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                    使用 <paramref name="serializationInfo" /> 和 <paramref name="streamingContext" /> 的特定值初始化 <see cref="T:System.Net.CookieException" /> 类的新实例。
                </summary>
      <param name="serializationInfo">
                    要使用的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。
                </param>
      <param name="streamingContext">
                    要使用的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。
                </param>
    </member>
    <member name="M:System.Net.CookieException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                    使用序列化 <see cref="T:System.Net.CookieException" /> 所需的数据来填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例。
                </summary>
      <param name="serializationInfo">
保存序列化对象数据的对象。要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。
                </param>
      <param name="streamingContext">
                    有关源或目标的上下文信息。用于指定该序列化的目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。
                </param>
    </member>
    <member name="M:System.Net.CookieException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                    用序列化 <see cref="T:System.Net.CookieException" /> 所需的数据来填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例。
                </summary>
      <param name="serializationInfo">
                    要使用的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。
                </param>
      <param name="streamingContext">
                    要使用的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。
                </param>
    </member>
    <member name="T:System.Net.CredentialCache">
      <summary>为多个凭据提供存储。</summary>
    </member>
    <member name="M:System.Net.CredentialCache.#ctor">
      <summary>创建 <see cref="T:System.Net.CredentialCache" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.CredentialCache.Add(System.String,System.Int32,System.String,System.Net.NetworkCredential)">
      <summary>向凭据缓存添加要与 SMTP 一起使用的 <see cref="T:System.Net.NetworkCredential" /> 实例，并将其与主机、端口和身份验证协议关联。使用此方法添加的凭据仅对 SMTP 有效。此方法对 HTTP 或 FTP 请求无效。</summary>
      <param name="host">标识主机的 <see cref="T:System.String" />。</param>
      <param name="port">指定要连接到 <paramref name="host" /> 的端口的 <see cref="T:System.Int32" />。</param>
      <param name="authenticationType">
        <see cref="T:System.String" />，它标识使用 <paramref name="cred" /> 连接到 <paramref name="host" /> 时使用的身份验证方案。请参见“备注”。</param>
      <param name="credential">要添加到凭据缓存中的 <see cref="T:System.Net.NetworkCredential" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="host" /> 为 null。- 或 -<paramref name="authType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="authType" /> 不是一个接受的值。请参见“备注”。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 小于零。</exception>
    </member>
    <member name="M:System.Net.CredentialCache.Add(System.Uri,System.String,System.Net.NetworkCredential)">
      <summary>向凭据缓存添加一个要与 SMTP 以外的协议一起使用的 <see cref="T:System.Net.NetworkCredential" /> 实例，并将其与统一资源标识符 (URI) 前缀和身份验证协议关联。</summary>
      <param name="uriPrefix">一个 <see cref="T:System.Uri" />，它指定资源的 URI 前缀，该资源由凭据授予访问权。</param>
      <param name="authType">在 <paramref name="uriPrefix" /> 中命名的资源所使用的身份验证方案。</param>
      <param name="cred">要添加到凭据缓存中的 <see cref="T:System.Net.NetworkCredential" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriPrefix" /> 为 null。- 或 -<paramref name="authType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">相同的凭据被添加多次。</exception>
    </member>
    <member name="P:System.Net.CredentialCache.DefaultCredentials">
      <summary>获取应用程序的系统凭据。</summary>
      <returns>表示应用程序的系统凭据的 <see cref="T:System.Net.ICredentials" />。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="USERNAME" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.CredentialCache.DefaultNetworkCredentials">
      <summary>获取当前安全上下文的网络凭据。</summary>
      <returns>表示当前用户或应用程序的网络凭据的 <see cref="T:System.Net.NetworkCredential" />。</returns>
    </member>
    <member name="M:System.Net.CredentialCache.GetCredential(System.String,System.Int32,System.String)">
      <summary>返回与指定的主机、端口和身份验证协议关联的 <see cref="T:System.Net.NetworkCredential" /> 实例。</summary>
      <returns>
        <see cref="T:System.Net.NetworkCredential" />；如果缓存中没有匹配的凭据，则为 null。</returns>
      <param name="host">标识主机的 <see cref="T:System.String" />。</param>
      <param name="port">指定要连接到 <paramref name="host" /> 的端口的 <see cref="T:System.Int32" />。</param>
      <param name="authenticationType">
        <see cref="T:System.String" />，它标识连接到 <paramref name="host" /> 时使用的身份验证方案。请参见“备注”。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="host" /> 为 null。- 或 -<paramref name="authType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="authType" /> 不是一个接受的值。请参见“备注”。- 或 -<paramref name="host" /> 是空字符串 ("")。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 小于零。</exception>
    </member>
    <member name="M:System.Net.CredentialCache.GetCredential(System.Uri,System.String)">
      <summary>返回与指定的统一资源标识符 (URI) 和身份验证类型相关联的 <see cref="T:System.Net.NetworkCredential" /> 实例。</summary>
      <returns>
        <see cref="T:System.Net.NetworkCredential" />；如果缓存中没有匹配的凭据，则为 null。</returns>
      <param name="uriPrefix">一个 <see cref="T:System.Uri" />，它指定资源的 URI 前缀，该资源由凭据授予访问权。</param>
      <param name="authType">在 <paramref name="uriPrefix" /> 中命名的资源所使用的身份验证方案。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriPrefix" /> 或 <paramref name="authType" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.CredentialCache.GetEnumerator">
      <summary>返回可循环访问 <see cref="T:System.Net.CredentialCache" /> 实例的枚举数。</summary>
      <returns>用于 <see cref="T:System.Net.CredentialCache" /> 的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Net.CredentialCache.Remove(System.String,System.Int32,System.String)">
      <summary>如果 <see cref="T:System.Net.NetworkCredential" /> 实例与指定的主机、端口和身份验证协议相关联，则将其从缓存中删除。</summary>
      <param name="host">标识主机的 <see cref="T:System.String" />。</param>
      <param name="port">指定要连接到 <paramref name="host" /> 的端口的 <see cref="T:System.Int32" />。</param>
      <param name="authenticationType">
        <see cref="T:System.String" />，它标识连接到 <paramref name="host" /> 时使用的身份验证方案。请参见“备注”。</param>
    </member>
    <member name="M:System.Net.CredentialCache.Remove(System.Uri,System.String)">
      <summary>如果 <see cref="T:System.Net.NetworkCredential" /> 实例与指定的统一资源标识符 (URI) 前缀和身份验证协议相关联，则将其从缓存中删除。</summary>
      <param name="uriPrefix">
        <see cref="T:System.Uri" />，它指定该凭据所用于的资源的 URI 前缀。</param>
      <param name="authType">
        <paramref name="uriPrefix" /> 中命名的主机所使用的身份验证方案。</param>
    </member>
    <member name="T:System.Net.DecompressionMethods">
      <summary>表示文件压缩和解压缩编码格式，该格式将用来压缩在 <see cref="T:System.Net.HttpWebRequest" /> 的响应中收到的数据。</summary>
    </member>
    <member name="F:System.Net.DecompressionMethods.None">
      <summary>不使用压缩。</summary>
    </member>
    <member name="F:System.Net.DecompressionMethods.GZip">
      <summary>使用 gZip 压缩/解压缩算法。</summary>
    </member>
    <member name="F:System.Net.DecompressionMethods.Deflate">
      <summary>使用 Deflate 压缩/解压缩算法。</summary>
    </member>
    <member name="T:System.Net.Dns">
      <summary>
                    提供简单的域名解析功能。
                </summary>
    </member>
    <member name="M:System.Net.Dns.BeginGetHostAddresses(System.String,System.AsyncCallback,System.Object)">
      <summary>
                    异步返回指定主机的 Internet 协议 (IP) 地址。
                </summary>
      <returns>
                    引用异步请求的 <see cref="T:System.IAsyncResult" /> 实例。
                </returns>
      <param name="hostNameOrAddress">
要解析的主机名或 IP 地址。
                </param>
      <param name="requestCallback">
                    一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。
                </param>
      <param name="state">
一个用户定义对象，其中包含该操作的相关信息。当操作完成时，此对象会被传递给 <paramref name="requestCallback" /> 委托。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostNameOrAddress" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="hostNameOrAddress" /> 的长度超过 126 个字符。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    解析 <paramref name="hostNameOrAddress" /> 时遇到错误。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hostNameOrAddress" /> 是无效的 IP 地址。
                </exception>
    </member>
    <member name="M:System.Net.Dns.BeginGetHostByName(System.String,System.AsyncCallback,System.Object)">
      <summary>
                    开始异步请求关于指定 DNS 主机名的 <see cref="T:System.Net.IPHostEntry" /> 信息。
                </summary>
      <returns>
                    引用异步请求的 <see cref="T:System.IAsyncResult" /> 实例。
                </returns>
      <param name="hostName">
主机的 DNS 名称。
                </param>
      <param name="requestCallback">
                    一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。
                </param>
      <param name="stateObject">
一个用户定义对象，其中包含该操作的相关信息。当操作完成时，此对象会被传递给 <paramref name="requestCallback" /> 委托。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostName" /> 为 null。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    执行 DNS 查询时遇到错误。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Net.DnsPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Dns.BeginGetHostEntry(System.Net.IPAddress,System.AsyncCallback,System.Object)">
      <summary>
                    将 IP 地址异步解析为 <see cref="T:System.Net.IPHostEntry" /> 实例。
                </summary>
      <returns>
                    引用异步请求的 <see cref="T:System.IAsyncResult" /> 实例。
                </returns>
      <param name="address">
                    要解析的 IP 地址。
                </param>
      <param name="requestCallback">
                    一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。
                </param>
      <param name="stateObject">
一个用户定义对象，其中包含该操作的相关信息。当操作完成时，此对象会被传递给 <paramref name="requestCallback" /> 委托。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    解析 <paramref name="address" /> 时遇到错误。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> 是无效的 IP 地址。
                </exception>
    </member>
    <member name="M:System.Net.Dns.BeginGetHostEntry(System.String,System.AsyncCallback,System.Object)">
      <summary>
                    将主机名或 IP 地址异步解析为 <see cref="T:System.Net.IPHostEntry" /> 实例。
                </summary>
      <returns>
                    引用异步请求的 <see cref="T:System.IAsyncResult" /> 实例。
                </returns>
      <param name="hostNameOrAddress">
要解析的主机名或 IP 地址。
                </param>
      <param name="requestCallback">
                    一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。
                </param>
      <param name="stateObject">
一个用户定义对象，其中包含该操作的相关信息。当操作完成时，此对象会被传递给 <paramref name="requestCallback" /> 委托。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostNameOrAddress" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="hostNameOrAddress" /> 的长度超过 126 个字符。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    解析 <paramref name="hostNameOrAddress" /> 时遇到错误。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hostNameOrAddress" /> 是无效的 IP 地址。
                </exception>
    </member>
    <member name="M:System.Net.Dns.BeginResolve(System.String,System.AsyncCallback,System.Object)">
      <summary>
                    开始异步请求将 DNS 主机名或 IP 地址解析为 <see cref="T:System.Net.IPAddress" /> 实例。
                </summary>
      <returns>
                    引用异步请求的 <see cref="T:System.IAsyncResult" /> 实例。
                </returns>
      <param name="hostName">
主机的 DNS 名称。
                </param>
      <param name="requestCallback">
                    一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。
                </param>
      <param name="stateObject">
一个用户定义对象，其中包含该操作的相关信息。当操作完成时，此对象会被传递给 <paramref name="requestCallback" /> 委托。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostName" /> 为 null。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    调用方没有访问 DNS 信息的权限。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Net.DnsPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Dns.EndGetHostAddresses(System.IAsyncResult)">
      <summary>
结束对 DNS 信息的异步请求。
                </summary>
      <returns>
                    一个 <see cref="T:System.Net.IPAddress" /> 类型的数组，用于保存由  <see cref="M:System.Net.Dns.BeginGetHostAddresses(System.String,System.AsyncCallback,System.Object)" /> 的 <paramref name="hostNameOrAddress" /> 参数指定的 IP 地址。 
                </returns>
      <param name="asyncResult">
                    一个 <see cref="T:System.IAsyncResult" /> 实例，该实例通过调用 <see cref="M:System.Net.Dns.BeginGetHostAddresses(System.String,System.AsyncCallback,System.Object)" /> 方法返回。
                </param>
    </member>
    <member name="M:System.Net.Dns.EndGetHostByName(System.IAsyncResult)">
      <summary>
结束对 DNS 信息的异步请求。
                </summary>
      <returns>
                    一个 <see cref="T:System.Net.IPHostEntry" /> 对象，该对象包含一个主机的 DNS 信息。
                </returns>
      <param name="asyncResult">
                    一个 <see cref="T:System.IAsyncResult" /> 实例，该实例通过调用 <see cref="M:System.Net.Dns.BeginGetHostByName(System.String,System.AsyncCallback,System.Object)" /> 方法返回。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Dns.EndGetHostEntry(System.IAsyncResult)">
      <summary>
结束对 DNS 信息的异步请求。
                </summary>
      <returns>
                    一个 <see cref="T:System.Net.IPHostEntry" /> 实例，其中包含有关主机的地址信息。
                </returns>
      <param name="asyncResult">
                    一个 <see cref="T:System.IAsyncResult" /> 实例，该实例通过调用 <see cref="Overload:System.Net.Dns.BeginGetHostEntry" /> 方法返回。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Net.Dns.EndResolve(System.IAsyncResult)">
      <summary>
结束对 DNS 信息的异步请求。
                </summary>
      <returns>
                    一个 <see cref="T:System.Net.IPHostEntry" /> 对象，该对象包含一个主机的 DNS 信息。
                </returns>
      <param name="asyncResult">
                    一个 <see cref="T:System.IAsyncResult" /> 实例，该实例通过调用 <see cref="M:System.Net.Dns.BeginResolve(System.String,System.AsyncCallback,System.Object)" /> 方法返回。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Dns.GetHostAddresses(System.String)">
      <summary>
                    返回指定主机的 Internet 协议 (IP) 地址。
                </summary>
      <returns>
                    一个 <see cref="T:System.Net.IPAddress" /> 类型的数组，该类型保存由 <paramref name="hostNameOrAddress" /> 参数指定的主机的 IP 地址。
                </returns>
      <param name="hostNameOrAddress">
要解析的主机名或 IP 地址。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostNameOrAddress" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="hostNameOrAddress" /> 的长度超过 126 个字符。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    解析 <paramref name="hostNameOrAddress" /> 时遇到错误。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hostNameOrAddress" /> 是无效的 IP 地址。
                </exception>
    </member>
    <member name="M:System.Net.Dns.GetHostByAddress(System.Net.IPAddress)">
      <summary>
                    根据指定的 <see cref="T:System.Net.IPAddress" /> 创建 <see cref="T:System.Net.IPHostEntry" /> 实例。
                </summary>
      <returns>
                    一个 <see cref="T:System.Net.IPHostEntry" />。
                </returns>
      <param name="address">
                    一个 <see cref="T:System.Net.IPAddress" />。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    解析 <paramref name="address" /> 时遇到错误。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Net.DnsPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Dns.GetHostByAddress(System.String)">
      <summary>
                    根据 IP 地址创建 <see cref="T:System.Net.IPHostEntry" /> 实例。
                </summary>
      <returns>
                    一个 <see cref="T:System.Net.IPHostEntry" /> 实例。
                </returns>
      <param name="address">
IP 地址。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    解析 <paramref name="address" /> 时遇到错误。
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="address" /> 不是有效的 IP 地址。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Net.DnsPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Dns.GetHostByName(System.String)">
      <summary>
                    获取指定 DNS 主机名的 DNS 信息。
                </summary>
      <returns>
                    一个 <see cref="T:System.Net.IPHostEntry" /> 对象，包含对应于 <paramref name="hostName" /> 中指定的地址的主机信息。
                </returns>
      <param name="hostName">
主机的 DNS 名称。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostName" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="hostName" /> 的长度超过 126 个字符。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    解析 <paramref name="hostName" /> 时遇到错误。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Net.DnsPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Dns.GetHostEntry(System.Net.IPAddress)">
      <summary>
                    将 IP 地址解析为 <see cref="T:System.Net.IPHostEntry" /> 实例。
                </summary>
      <returns>
                    一个 <see cref="T:System.Net.IPHostEntry" /> 实例，包含有关 <paramref name="address" /> 中指定的主机的地址信息。
                </returns>
      <param name="address">
IP 地址。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    解析 <paramref name="address" /> 时遇到错误。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> 是无效的 IP 地址。
                </exception>
    </member>
    <member name="M:System.Net.Dns.GetHostEntry(System.String)">
      <summary>
                    将主机名或 IP 地址解析为 <see cref="T:System.Net.IPHostEntry" /> 实例。
                </summary>
      <returns>
                    一个 <see cref="T:System.Net.IPHostEntry" /> 实例，包含有关 <paramref name="hostNameOrAddress" /> 中指定的主机的地址信息。
                </returns>
      <param name="hostNameOrAddress">
要解析的主机名或 IP 地址。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostNameOrAddress" /> 参数为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="hostNameOrAddress" /> 参数的长度大于 126 个字符。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    解析 <paramref name="hostNameOrAddress" /> 参数时遇到错误。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hostNameOrAddress" /> 参数是无效的 IP 地址。
                </exception>
    </member>
    <member name="M:System.Net.Dns.GetHostName">
      <summary>
                    获取本地计算机的主机名。
                </summary>
      <returns>
                    包含本地计算机的 DNS 主机名的字符串。
                </returns>
      <exception cref="T:System.Net.Sockets.SocketException">
                    解析本地主机名时遇到错误。
                </exception>
      <PermissionSet>
        <IPermission class="System.Net.DnsPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Dns.Resolve(System.String)">
      <summary>
                    将 DNS 主机名或 IP 地址解析为 <see cref="T:System.Net.IPHostEntry" /> 实例。
                </summary>
      <returns>
                    一个 <see cref="T:System.Net.IPHostEntry" /> 实例，包含有关 <paramref name="hostName" /> 中指定的主机的地址信息。
                </returns>
      <param name="hostName">
                    DNS 样式的主机名或 IP 地址。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostName" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="hostName" /> 的长度超过 126 个字符。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    解析 <paramref name="hostName" /> 时遇到错误。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Net.DnsPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="T:System.Net.DnsPermission">
      <summary>控制对网络上域名系统 (DNS) 服务器的访问权限。</summary>
    </member>
    <member name="M:System.Net.DnsPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>创建 <see cref="T:System.Net.DnsPermission" /> 类的新实例，该类或者允许无限制的 DNS 访问，或者不允许 DNS 访问。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。 </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 不是有效的 <see cref="T:System.Security.Permissions.PermissionState" /> 值。 </exception>
    </member>
    <member name="M:System.Net.DnsPermission.Copy">
      <summary>创建当前权限实例的相同副本。</summary>
      <returns>
        <see cref="T:System.Net.DnsPermission" /> 类的新实例，是当前实例的相同副本。</returns>
    </member>
    <member name="M:System.Net.DnsPermission.FromXml(System.Security.SecurityElement)">
      <summary>以 XML 编码重新构造 <see cref="T:System.Net.DnsPermission" /> 实例。</summary>
      <param name="securityElement">用于重新构造 <see cref="T:System.Net.DnsPermission" /> 实例的 XML 编码。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityElement" /> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="securityElement" /> 不是一个 <see cref="T:System.Net.DnsPermission" /> 元素。 </exception>
    </member>
    <member name="M:System.Net.DnsPermission.Intersect(System.Security.IPermission)">
      <summary>创建一个是当前权限实例与指定权限实例的交集的权限实例。</summary>
      <returns>一个 <see cref="T:System.Net.DnsPermission" /> 实例，表示当前 <see cref="T:System.Net.DnsPermission" /> 实例与指定 <see cref="T:System.Net.DnsPermission" /> 实例的交集；如果交集为空，则为 null。如果当前实例和 <paramref name="target" /> 都是不受限制的，则该方法将返回一个不受限制的、新的 <see cref="T:System.Net.DnsPermission" /> 实例；否则返回 null。</returns>
      <param name="target">要与当前实例求交的 <see cref="T:System.Net.DnsPermission" /> 实例。 </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 既不是 <see cref="T:System.Net.DnsPermission" />，也不是 null。 </exception>
    </member>
    <member name="M:System.Net.DnsPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前权限实例是否是指定权限实例的子集。</summary>
      <returns>
如果当前实例是不受限制的，并且 <paramref name="target" /> 或者为 null 或者是不受限制的，则为 false；否则，为 true。</returns>
      <param name="target">第二个需测试子集关系的 <see cref="T:System.Net.DnsPermission" /> 实例。 </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 既不是 <see cref="T:System.Net.DnsPermission" />，也不是 null。 </exception>
    </member>
    <member name="M:System.Net.DnsPermission.IsUnrestricted">
      <summary>检查对象的整体权限状态。</summary>
      <returns>
如果 <see cref="T:System.Net.DnsPermission" /> 实例是使用 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> 创建的，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Net.DnsPermission.ToXml">
      <summary>创建 <see cref="T:System.Net.DnsPermission" /> 实例及其当前状态的 XML 编码。</summary>
      <returns>
        <see cref="T:System.Security.SecurityElement" /> 实例，包含安全对象的 XML 编码表示形式，包括状态信息。</returns>
    </member>
    <member name="M:System.Net.DnsPermission.Union(System.Security.IPermission)">
      <summary>创建一个是当前权限实例与指定权限实例的并集的权限实例。</summary>
      <returns>一个 <see cref="T:System.Net.DnsPermission" /> 实例，表示当前 <see cref="T:System.Net.DnsPermission" /> 实例与指定 <see cref="T:System.Net.DnsPermission" /> 实例的并集。如果 <paramref name="target" /> 为 null，则该方法将返回当前实例的一个副本。如果当前实例或 <paramref name="target" /> 是不受限制的，则此方法返回不受限制的 <see cref="T:System.Net.DnsPermission" /> 实例；否则，返回受限制的 <see cref="T:System.Net.DnsPermission" /> 实例。</returns>
      <param name="target">要与当前实例组合的 <see cref="T:System.Net.DnsPermission" /> 实例。 </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 既不是 <see cref="T:System.Net.DnsPermission" />，也不是 null。 </exception>
    </member>
    <member name="T:System.Net.DnsPermissionAttribute">
      <summary>指定从域名服务器中请求信息的权限。</summary>
    </member>
    <member name="M:System.Net.DnsPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.SecurityAction" /> 值初始化 <see cref="T:System.Net.DnsPermissionAttribute" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。 </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="action" /> 参数不是有效的 <see cref="T:System.Security.Permissions.SecurityAction" />。 </exception>
    </member>
    <member name="M:System.Net.DnsPermissionAttribute.CreatePermission">
      <summary>创建并返回 <see cref="T:System.Net.DnsPermission" /> 类的新实例。</summary>
      <returns>与安全声明相对应的 <see cref="T:System.Net.DnsPermission" />。</returns>
    </member>
    <member name="T:System.Net.DownloadDataCompletedEventArgs">
      <summary>为 <see cref="E:System.Net.WebClient.DownloadDataCompleted" /> 事件提供数据。</summary>
    </member>
    <member name="P:System.Net.DownloadDataCompletedEventArgs.Result">
      <summary>获取由 <see cref="Overload:System.Net.WebClient.DownloadDataAsync" /> 方法下载的数据。</summary>
      <returns>包含已下载数据的 <see cref="T:System.Byte" /> 数组。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.Net.DownloadDataCompletedEventHandler">
      <summary>表示将要处理 <see cref="T:System.Net.WebClient" /> 的 <see cref="E:System.Net.WebClient.DownloadDataCompleted" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">一个包含事件数据的 <see cref="T:System.Net.DownloadDataCompletedEventArgs" />。</param>
    </member>
    <member name="T:System.Net.DownloadProgressChangedEventArgs">
      <summary>为 <see cref="T:System.Net.WebClient" /> 的 <see cref="E:System.Net.WebClient.DownloadProgressChanged" /> 事件提供数据。</summary>
    </member>
    <member name="P:System.Net.DownloadProgressChangedEventArgs.BytesReceived">
      <summary>获取收到的字节数。</summary>
      <returns>一个指示收到的字节数的 <see cref="T:System.Int64" /> 值。</returns>
    </member>
    <member name="P:System.Net.DownloadProgressChangedEventArgs.TotalBytesToReceive">
      <summary>获取 <see cref="T:System.Net.WebClient" /> 数据下载操作中的字节总数。</summary>
      <returns>一个指示将要接收的字节数的 <see cref="T:System.Int64" /> 值。</returns>
    </member>
    <member name="T:System.Net.DownloadProgressChangedEventHandler">
      <summary>表示将要处理 <see cref="T:System.Net.WebClient" /> 的 <see cref="E:System.Net.WebClient.DownloadProgressChanged" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Net.DownloadProgressChangedEventArgs" />。</param>
    </member>
    <member name="T:System.Net.DownloadStringCompletedEventArgs">
      <summary>为 <see cref="E:System.Net.WebClient.DownloadStringCompleted" /> 事件提供数据。</summary>
    </member>
    <member name="P:System.Net.DownloadStringCompletedEventArgs.Result">
      <summary>获取由 <see cref="Overload:System.Net.WebClient.DownloadStringAsync" /> 方法下载的数据。</summary>
      <returns>
        <see cref="T:System.String" />，包含已下载的数据。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.Net.DownloadStringCompletedEventHandler">
      <summary>表示将要处理 <see cref="T:System.Net.WebClient" /> 的 <see cref="E:System.Net.WebClient.DownloadStringCompleted" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">
        <see cref="T:System.Net.DownloadStringCompletedEventArgs" />，它包含事件数据。</param>
    </member>
    <member name="T:System.Net.EndPoint">
      <summary>
                    标识网络地址。这是一个 abstract 类。
                </summary>
    </member>
    <member name="M:System.Net.EndPoint.#ctor">
      <summary>
                    初始化 <see cref="T:System.Net.EndPoint" /> 类的新实例。
                </summary>
    </member>
    <member name="P:System.Net.EndPoint.AddressFamily">
      <summary>
                    获取终结点所属的地址族。
                </summary>
      <returns>
        <see cref="T:System.Net.Sockets.AddressFamily" /> 值之一。
                </returns>
      <exception cref="T:System.NotImplementedException">
                    当未在子类中重写该属性时，试图获取或设置该属性。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.EndPoint.Create(System.Net.SocketAddress)">
      <summary>
                    通过 <see cref="T:System.Net.SocketAddress" /> 实例创建 <see cref="T:System.Net.EndPoint" /> 实例。
                </summary>
      <returns>
                    从指定的 <see cref="T:System.Net.SocketAddress" /> 实例初始化的新 <see cref="T:System.Net.EndPoint" /> 实例。
                </returns>
      <param name="socketAddress">
                    用作连接终结点的套接字地址。
                </param>
      <exception cref="T:System.NotImplementedException">
当未在子类中重写该方法时，试图对该方法进行访问。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.EndPoint.Serialize">
      <summary>
                    将终结点信息序列化为 <see cref="T:System.Net.SocketAddress" /> 实例。
                </summary>
      <returns>
                    包含终结点信息的 <see cref="T:System.Net.SocketAddress" /> 实例。
                </returns>
      <exception cref="T:System.NotImplementedException">
当未在子类中重写该方法时，试图对该方法进行访问。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.Net.EndpointPermission">
      <summary>
                    定义由 <see cref="T:System.Net.SocketPermission" /> 实例授权的终结点。
                </summary>
    </member>
    <member name="M:System.Net.EndpointPermission.Equals(System.Object)">
      <summary>
                    确定指定的 <see cref="T:System.Object" /> 是否等同于当前的 <see cref="T:System.Net.SocketPermission" /> 实例。
                </summary>
      <returns>
                    如果指定的 <see cref="T:System.Object" /> 等于当前的 <see cref="T:System.Object" />，则为 true；否则为 false。
                </returns>
      <param name="obj">
                    指定的 <see cref="T:System.Object" /></param>
    </member>
    <member name="M:System.Net.EndpointPermission.GetHashCode">
      <summary>
                    用于特定 <see cref="T:System.Net.SocketPermission" /> 实例的一个哈希函数。
                </summary>
      <returns>
                    当前 <see cref="T:System.Object" /> 的哈希代码。
                </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.EndpointPermission.Hostname">
      <summary>
                    获取与此终结点关联的服务器的 DNS 主机名或 IP 地址。
                </summary>
      <returns>
                    包含服务器的 DNS 主机名或 IP 地址的字符串。
                </returns>
    </member>
    <member name="P:System.Net.EndpointPermission.Port">
      <summary>
                    获取与此终结点关联的网络端口号。
                </summary>
      <returns>
                    与此请求关联的网络端口号，或 <see cref="F:System.Net.SocketPermission.AllPorts" />。
                </returns>
    </member>
    <member name="M:System.Net.EndpointPermission.ToString">
      <summary>
                    返回表示当前 <see cref="T:System.Net.EndpointPermission" /> 实例的字符串。
                </summary>
      <returns>
                    表示当前 <see cref="T:System.Net.EndpointPermission" /> 实例的字符串。
                </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.EndpointPermission.Transport">
      <summary>
                    获取与此终结点关联的传输类型。
                </summary>
      <returns>
        <see cref="T:System.Net.TransportType" /> 值之一。
                </returns>
    </member>
    <member name="T:System.Net.FileWebRequest">
      <summary>提供 <see cref="T:System.Net.WebRequest" /> 类的文件系统实现。</summary>
    </member>
    <member name="M:System.Net.FileWebRequest.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的指定实例初始化 <see cref="T:System.Net.FileWebRequest" /> 类的新实例。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，它包含序列化新的 <see cref="T:System.Net.FileWebRequest" /> 对象所需的信息。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，它包含与新的 <see cref="T:System.Net.FileWebRequest" /> 对象关联的序列化流的源。</param>
    </member>
    <member name="M:System.Net.FileWebRequest.Abort">
      <summary>取消对 Internet 资源的请求。</summary>
    </member>
    <member name="M:System.Net.FileWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)">
      <summary>开始对用来写入数据的 <see cref="T:System.IO.Stream" /> 对象的异步请求。</summary>
      <returns>引用该异步请求的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个对象，它包含此请求的状态信息。</param>
      <exception cref="T:System.Net.ProtocolViolationException">
        <see cref="P:System.Net.FileWebRequest.Method" /> 属性是 GET 而且应用程序向流进行写操作。</exception>
      <exception cref="T:System.InvalidOperationException">流正由上一个 <see cref="M:System.Net.FileWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" /> 调用使用。</exception>
      <exception cref="T:System.ApplicationException">无可用的写入流。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.FileWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)">
      <summary>开始对文件系统资源的异步请求。</summary>
      <returns>引用该异步请求的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个对象，它包含此请求的状态信息。</param>
      <exception cref="T:System.InvalidOperationException">流正由上一个 <see cref="M:System.Net.FileWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> 调用使用。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.FileWebRequest.ConnectionGroupName">
      <summary>获取或设置请求的连接组的名称。保留此属性供将来使用。</summary>
      <returns>请求的连接组的名称。</returns>
    </member>
    <member name="P:System.Net.FileWebRequest.ContentLength">
      <summary>获取或设置发送的数据的内容长度。</summary>
      <returns>发送的请求数据的字节数。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Net.FileWebRequest.ContentLength" /> 小于 0。</exception>
    </member>
    <member name="P:System.Net.FileWebRequest.ContentType">
      <summary>获取或设置发送的数据的内容类型。保留此属性供将来使用。</summary>
      <returns>发送的数据的内容类型。</returns>
    </member>
    <member name="P:System.Net.FileWebRequest.Credentials">
      <summary>获取或设置与此请求关联的凭据。保留此属性供将来使用。</summary>
      <returns>包含与此请求关联的身份验证凭据的 <see cref="T:System.Net.ICredentials" />。默认为 null。</returns>
    </member>
    <member name="M:System.Net.FileWebRequest.EndGetRequestStream(System.IAsyncResult)">
      <summary>结束对 <see cref="T:System.IO.Stream" /> 实例的异步请求，应用程序使用该实例写入数据。</summary>
      <returns>应用程序用于写入数据的 <see cref="T:System.IO.Stream" /> 对象。</returns>
      <param name="asyncResult">引用对流的挂起请求的 <see cref="T:System.IAsyncResult" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.FileWebRequest.EndGetResponse(System.IAsyncResult)">
      <summary>结束对文件系统资源的异步请求。</summary>
      <returns>包含来自文件系统资源的响应的 <see cref="T:System.Net.WebResponse" />。</returns>
      <param name="asyncResult">引用对响应的挂起请求的 <see cref="T:System.IAsyncResult" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.FileWebRequest.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用将目标对象序列化所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="serializationInfo">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="streamingContext">指定该序列化的目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.Net.FileWebRequest.GetRequestStream">
      <summary>返回向文件系统资源写入数据的 <see cref="T:System.IO.Stream" /> 对象。</summary>
      <returns>向文件系统资源写入数据的 <see cref="T:System.IO.Stream" />。</returns>
      <exception cref="T:System.Net.WebException">请求超时。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.FileWebRequest.GetResponse">
      <summary>返回对文件系统请求的响应。</summary>
      <returns>包含来自文件系统资源的响应的 <see cref="T:System.Net.WebResponse" />。</returns>
      <exception cref="T:System.Net.WebException">请求超时。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.FileWebRequest.Headers">
      <summary>获取与此请求关联的名称/值对的集合。保留此属性供将来使用。</summary>
      <returns>
        <see cref="T:System.Net.WebHeaderCollection" />，包含与此请求关联的标头名称/值对。</returns>
    </member>
    <member name="P:System.Net.FileWebRequest.Method">
      <summary>获取或设置用于请求的协议方法。保留此属性供将来使用。</summary>
      <returns>在此请求中使用的协议方法。</returns>
    </member>
    <member name="P:System.Net.FileWebRequest.PreAuthenticate">
      <summary>获取或设置一个值，该值指示是否对请求进行预身份验证。保留此属性供将来使用。</summary>
      <returns>
            如果预先验证，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.Net.FileWebRequest.Proxy">
      <summary>获取或设置用于此请求的网络代理。保留此属性供将来使用。</summary>
      <returns>指示用于此请求的网络代理的 <see cref="T:System.Net.IWebProxy" />。</returns>
    </member>
    <member name="P:System.Net.FileWebRequest.RequestUri">
      <summary>获取请求的统一资源标识符 (URI)。</summary>
      <returns>包含请求的 URI 的 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="M:System.Net.FileWebRequest.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化 <see cref="T:System.Net.FileWebRequest" /> 所需的数据来填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</summary>
      <param name="serializationInfo">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它保留用于 <see cref="T:System.Net.FileWebRequest" /> 的序列化数据。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含与新的 <see cref="T:System.Net.FileWebRequest" /> 关联的序列化流的目标。</param>
    </member>
    <member name="P:System.Net.FileWebRequest.Timeout">
      <summary>获取或设置请求超时前的时间长度。</summary>
      <returns>请求超时前的时间长度（以毫秒为单位），或是值 <see cref="F:System.Threading.Timeout.Infinite" /> 以指示请求不超时。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的值小于或等于零，并且不为 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
    </member>
    <member name="P:System.Net.FileWebRequest.UseDefaultCredentials">
      <summary>总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>总是引发 <see cref="T:System.NotSupportedException" />。</returns>
      <exception cref="T:System.NotSupportedException">文件统一资源标识符 (URI) 不支持默认凭据。</exception>
    </member>
    <member name="T:System.Net.FileWebResponse">
      <summary>提供 <see cref="T:System.Net.WebResponse" /> 类的文件系统实现。</summary>
    </member>
    <member name="M:System.Net.FileWebResponse.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的指定实例初始化 <see cref="T:System.Net.FileWebResponse" /> 类的新实例。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例，包含序列化新 <see cref="T:System.Net.FileWebResponse" /> 实例所需的信息。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的实例，包含与新 <see cref="T:System.Net.FileWebResponse" /> 实例关联的序列化流的源。</param>
    </member>
    <member name="M:System.Net.FileWebResponse.Close">
      <summary>关闭响应流。</summary>
    </member>
    <member name="P:System.Net.FileWebResponse.ContentLength">
      <summary>获取文件系统资源中的内容长度。</summary>
      <returns>文件系统资源返回的字节数。</returns>
    </member>
    <member name="P:System.Net.FileWebResponse.ContentType">
      <summary>获取文件系统资源的内容类型。</summary>
      <returns>值为“二进制/八进制流”。</returns>
    </member>
    <member name="M:System.Net.FileWebResponse.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用将目标对象序列化所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="serializationInfo">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="streamingContext">用于指定该序列化的目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.Net.FileWebResponse.GetResponseStream">
      <summary>返回来自文件系统资源的数据流。</summary>
      <returns>用于从文件系统资源中读取数据的 <see cref="T:System.IO.Stream" />。</returns>
    </member>
    <member name="P:System.Net.FileWebResponse.Headers">
      <summary>获取与响应关联的标头名称/值对集合。</summary>
      <returns>
        <see cref="T:System.Net.WebHeaderCollection" />，包含与响应关联的标头名称/值对。</returns>
    </member>
    <member name="P:System.Net.FileWebResponse.ResponseUri">
      <summary>获取提供响应的文件系统资源的 URI。</summary>
      <returns>包含提供响应的文件系统资源的 URI 的 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="M:System.Net.FileWebResponse.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化 <see cref="T:System.Net.FileWebResponse" /> 所需的数据来填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例。</summary>
      <param name="serializationInfo">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，将存放 <see cref="T:System.Net.FileWebResponse" /> 的序列化数据。</param>
      <param name="streamingContext">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" />，包含与新的 <see cref="T:System.Net.FileWebResponse" /> 关联的序列化流的目标。</param>
    </member>
    <member name="T:System.Net.FtpStatusCode">
      <summary>指定为文件传输协议 (FTP) 操作返回的状态代码。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.Undefined">
      <summary>包含此值是为了完整性，服务器从不返回此值。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.RestartMarker">
      <summary>指示响应包含一个重新启动标记回复。此状态附带的说明文本包含用户数据流标记和服务器标记。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.ServiceTemporarilyNotAvailable">
      <summary>指示此服务现在不可用；请稍后再试您的请求。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.DataAlreadyOpen">
      <summary>指示数据连接已打开并且请求的传输已开始。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.OpeningData">
      <summary>指示服务器正在打开数据连接。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.CommandOK">
      <summary>指示命令成功完成。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.CommandExtraneous">
      <summary>指示服务器未执行该命令，因为无需此命令。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.DirectoryStatus">
      <summary>指示目录状态。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.FileStatus">
      <summary>指示文件状态。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.SystemType">
      <summary>指示使用 Internet Assigned Numbers Authority（Internet 号码分配机构）出版的 Assigned Numbers（号码分配）文档中发布的系统名的系统类型名称。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.SendUserCommand">
      <summary>指示服务器已能进行用户登录操作。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.ClosingControl">
      <summary>指示服务器正在关闭管理连接。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.ClosingData">
      <summary>指示服务器正在关闭数据连接，并且请求的文件操作成功。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.EnteringPassive">
      <summary>指示服务器正在进入被动模式。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.LoggedInProceed">
      <summary>指示用户已登录且可发送命令。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.ServerWantsSecureSession">
      <summary>指示服务器接受客户端指定的身份验证机制，并且安全数据交换完成。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.FileActionOK">
      <summary>指示请求的文件操作成功完成。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.PathnameCreated">
      <summary>指示请求的路径名已创建。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.SendPasswordCommand">
      <summary>指示服务器需要提供密码。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.NeedLoginAccount">
      <summary>指示服务器需要提供登录帐户。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.FileCommandPending">
      <summary>指示请求的文件操作需要其他信息。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.ServiceNotAvailable">
      <summary>指示此服务不可用。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.CantOpenData">
      <summary>指示无法打开数据连接。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.ConnectionClosed">
      <summary>指示连接已关闭。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.ActionNotTakenFileUnavailableOrBusy">
      <summary>指定无法对指定文件执行请求的操作，原因是该文件不可用或正在使用中。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.ActionAbortedLocalProcessingError">
      <summary>指示发生了阻止完成请求操作的错误。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.ActionNotTakenInsufficientSpace">
      <summary>指示不能执行请求的操作，因为服务器上没有足够的空间。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.CommandSyntaxError">
      <summary>指示命令具有语法错误或不是服务器可识别的命令。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.ArgumentSyntaxError">
      <summary>指示一个或多个命令参数具有语法错误。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.CommandNotImplemented">
      <summary>指示 FTP 服务器未执行该命令。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.BadCommandSequence">
      <summary>指示命令序列的顺序不正确。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.NotLoggedIn">
      <summary>指示登录信息必须发送到服务器。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.AccountNeeded">
      <summary>指示需要服务器上的用户帐户。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.ActionNotTakenFileUnavailable">
      <summary>指定无法对指定文件执行请求的操作，原因是该文件不可用。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.ActionAbortedUnknownPageType">
      <summary>指示不能采取请求的操作，因为指定的页类型是未知的。RFC 959 的 3.1.2.3 节中介绍了页类型</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.FileActionAborted">
      <summary>指示不能执行请求的操作。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.ActionNotTakenFilenameNotAllowed">
      <summary>指定无法对指定文件执行请求的操作。</summary>
    </member>
    <member name="T:System.Net.FtpWebRequest">
      <summary>实现文件传输协议 (FTP) 客户端。</summary>
    </member>
    <member name="M:System.Net.FtpWebRequest.Abort">
      <summary>终止异步 FTP 操作。</summary>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Net.WebPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.FtpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)">
      <summary>开始以异步方式打开请求的内容流以便写入。</summary>
      <returns>
        <see cref="T:System.IAsyncResult" /> 实例，指示操作的状态。</returns>
      <param name="callback">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</param>
      <param name="state">一个用户定义对象，其中包含该操作的相关信息。操作完成时，此对象传递给了 <paramref name="callback" /> 委托。</param>
      <exception cref="T:System.InvalidOperationException">此前对此方法或 <see cref="M:System.Net.FtpWebRequest.GetRequestStream" /> 的调用尚未完成。</exception>
      <exception cref="T:System.Net.WebException">未能建立到 FTP 服务器的连接。</exception>
      <exception cref="T:System.Net.ProtocolViolationException">
        <see cref="P:System.Net.FtpWebRequest.Method" /> 属性没有设置为 <see cref="F:System.Net.WebRequestMethods.Ftp.UploadFile" />。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.DnsPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.WebPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.FtpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)">
      <summary>开始以异步方式向 FTP 服务器发送请求并从 FTP 服务器接收响应。</summary>
      <returns>
        <see cref="T:System.IAsyncResult" /> 实例，指示操作的状态。</returns>
      <param name="callback">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</param>
      <param name="state">一个用户定义对象，其中包含该操作的相关信息。操作完成时，此对象传递给了 <paramref name="callback" /> 委托。</param>
      <exception cref="T:System.InvalidOperationException">
                已经为此实例调用了 <see cref="M:System.Net.FtpWebRequest.GetResponse" /> 或 <see cref="M:System.Net.FtpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" />。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.DnsPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.WebPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.FtpWebRequest.ClientCertificates">
      <summary>获取用于建立到 FTP 服务器的加密连接的证书。</summary>
      <returns>包含客户端证书的 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 对象。</returns>
    </member>
    <member name="P:System.Net.FtpWebRequest.ConnectionGroupName">
      <summary>获取或设置连接组的名称，该连接组包含用于发送当前请求的服务点。</summary>
      <returns>包含连接组名称的 <see cref="T:System.String" /> 值。</returns>
      <exception cref="T:System.InvalidOperationException">对于一个已在进行的请求为此属性指定了一个新值。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.ContentLength">
      <summary>获取或设置被 <see cref="T:System.Net.FtpWebRequest" /> 类忽略的值。</summary>
      <returns>应忽略的 <see cref="T:System.Int64" /> 值。</returns>
    </member>
    <member name="P:System.Net.FtpWebRequest.ContentOffset">
      <summary>获取或设置请求所下载的文件的字节偏移量。</summary>
      <returns>指定文件偏移量（以字节为单位）的 <see cref="T:System.Int64" /> 实例。默认值为零。</returns>
      <exception cref="T:System.InvalidOperationException">对于一个已在进行的请求为此属性指定了一个新值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">为该属性指定的值小于 0。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.ContentType">
      <summary>总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>总是引发 <see cref="T:System.NotSupportedException" />。</returns>
      <exception cref="T:System.NotSupportedException">FTP 不支持内容类型信息。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.Credentials">
      <summary>获取或设置用于与 FTP 服务器通信的凭据。</summary>
      <returns>
        <see cref="T:System.Net.ICredentials" /> 实例；如果还未设置该属性，则为 null。</returns>
      <exception cref="T:System.ArgumentNullException">为 Set 操作指定的值为 null。</exception>
      <exception cref="T:System.ArgumentException">为 Set 操作指定了 <see cref="T:System.Net.NetworkCredential" /> 以外的 <see cref="T:System.Net.ICredentials" /> 类型。</exception>
      <exception cref="T:System.InvalidOperationException">对于一个已在进行的请求为此属性指定了一个新值。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.FtpWebRequest.DefaultCachePolicy">
      <summary>定义所有 FTP 请求的默认缓存策略。</summary>
      <returns>
        <see cref="T:System.Net.Cache.RequestCachePolicy" />，定义 FTP 请求的缓存策略。</returns>
      <exception cref="T:System.ArgumentNullException">调用方试图将此属性设置为 null。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.EnableSsl">
      <summary>获取或设置 <see cref="T:System.Boolean" />，它指定是否使用 SSL 连接。</summary>
      <returns>
            如果控制和数据传输是加密的，则为 true；否则为 false。默认值为 false。</returns>
      <exception cref="T:System.InvalidOperationException">到 FTP 服务器的连接已经建立。</exception>
    </member>
    <member name="M:System.Net.FtpWebRequest.EndGetRequestStream(System.IAsyncResult)">
      <summary>结束由 <see cref="M:System.Net.FtpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" /> 启动的挂起的异步操作。</summary>
      <returns>与此实例关联的可写 <see cref="T:System.IO.Stream" /> 实例。</returns>
      <param name="asyncResult">在操作开始时返回的 <see cref="T:System.IAsyncResult" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
                未能通过调用 <see cref="M:System.Net.FtpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" /> 获取 <paramref name="asyncResult" />。</exception>
      <exception cref="T:System.InvalidOperationException">已经为 <paramref name="asyncResult" /> 所标识的操作调用了此方法。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Net.WebPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.FtpWebRequest.EndGetResponse(System.IAsyncResult)">
      <summary>结束由 <see cref="M:System.Net.FtpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> 启动的挂起的异步操作。</summary>
      <returns>包含一个 <see cref="T:System.Net.FtpWebResponse" /> 实例的 <see cref="T:System.Net.WebResponse" /> 引用。此对象包含 FTP 服务器对请求的响应。</returns>
      <param name="asyncResult">在操作开始时返回的 <see cref="T:System.IAsyncResult" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
                未能通过调用 <see cref="M:System.Net.FtpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> 获取 <paramref name="asyncResult" />。</exception>
      <exception cref="T:System.InvalidOperationException">已经为 <paramref name="asyncResult" /> 所标识的操作调用了此方法。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Net.WebPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.FtpWebRequest.GetRequestStream">
      <summary>检索用于向 FTP 服务器上载数据的流。</summary>
      <returns>可写 <see cref="T:System.IO.Stream" /> 实例，用于存储要由当前请求发送到服务器的数据。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.FtpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" /> 已被调用并且尚未完成。- 或 -HTTP 代理被启用，而您尝试使用 FTP 命令而非 <see cref="F:System.Net.WebRequestMethods.Ftp.DownloadFile" />、<see cref="F:System.Net.WebRequestMethods.Ftp.ListDirectory" /> 或 <see cref="F:System.Net.WebRequestMethods.Ftp.ListDirectoryDetails" />。</exception>
      <exception cref="T:System.Net.WebException">未能建立到 FTP 服务器的连接。</exception>
      <exception cref="T:System.Net.ProtocolViolationException">
        <see cref="P:System.Net.FtpWebRequest.Method" /> 属性未设置为 <see cref="F:System.Net.WebRequestMethods.Ftp.UploadFile" /> 或 <see cref="F:System.Net.WebRequestMethods.Ftp.AppendFile" />。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.DnsPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.WebPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.FtpWebRequest.GetResponse">
      <summary>返回 FTP 服务器响应。</summary>
      <returns>包含一个 <see cref="T:System.Net.FtpWebResponse" /> 实例的 <see cref="T:System.Net.WebResponse" /> 引用。此对象包含 FTP 服务器对请求的响应。</returns>
      <exception cref="T:System.InvalidOperationException">
                已经为此实例调用了 <see cref="M:System.Net.FtpWebRequest.GetResponse" /> 或 <see cref="M:System.Net.FtpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" />。- 或 -HTTP 代理被启用，而您尝试使用 FTP 命令而非 <see cref="F:System.Net.WebRequestMethods.Ftp.DownloadFile" />、<see cref="F:System.Net.WebRequestMethods.Ftp.ListDirectory" /> 或 <see cref="F:System.Net.WebRequestMethods.Ftp.ListDirectoryDetails" />。</exception>
      <exception cref="T:System.Net.WebException">
        <see cref="P:System.Net.FtpWebRequest.EnableSsl" /> 设置为 true，但服务器不支持此功能。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.DnsPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.WebPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.FtpWebRequest.Headers">
      <summary>获取空 <see cref="T:System.Net.WebHeaderCollection" /> 对象。</summary>
      <returns>一个空 <see cref="T:System.Net.WebHeaderCollection" /> 对象。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Net.WebPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.FtpWebRequest.KeepAlive">
      <summary>获取或设置一个 <see cref="T:System.Boolean" /> 值，该值指定在请求完成之后是否关闭到 FTP 服务器的控制连接。</summary>
      <returns>
            如果不应销毁到服务器的连接，则为 true；否则为 false。默认值为 true。</returns>
      <exception cref="T:System.InvalidOperationException">对于一个已在进行的请求为此属性指定了一个新值。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.Method">
      <summary>获取或设置要发送到 FTP 服务器的命令。</summary>
      <returns>
        <see cref="T:System.String" /> 值，包含要发送到服务器的 FTP 命令。默认值为 <see cref="F:System.Net.WebRequestMethods.Ftp.DownloadFile" />。</returns>
      <exception cref="T:System.InvalidOperationException">对于一个已在进行的请求为此属性指定了一个新值。</exception>
      <exception cref="T:System.ArgumentException">此方法无效。- 或 -不支持此方法。- 或 -指定了多个方法。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.PreAuthenticate">
      <summary>总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>总是引发 <see cref="T:System.NotSupportedException" />。</returns>
      <exception cref="T:System.NotSupportedException">FTP 不支持预身份验证。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.Proxy">
      <summary>获取或设置用于与 FTP 服务器通信的代理。</summary>
      <returns>负责与 FTP 服务器通信的 <see cref="T:System.Net.IWebProxy" /> 实例。</returns>
      <exception cref="T:System.ArgumentNullException">此属性不能设置为 null。</exception>
      <exception cref="T:System.InvalidOperationException">对于一个已在进行的请求为此属性指定了一个新值。</exception>
      <PermissionSet>
        <IPermission class="System.Net.WebPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.FtpWebRequest.ReadWriteTimeout">
      <summary>获取或设置写入或读取流时的超时。</summary>
      <returns>读取或写入超时之前的毫秒数。默认值为 300,000 毫秒（5 分钟）。</returns>
      <exception cref="T:System.InvalidOperationException">已发送请求。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">为 Set 操作指定的值小于或等于零，并且不等于 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.RenameTo">
      <summary>获取或设置重命名文件的新名称。</summary>
      <returns>重命名文件的新名称。</returns>
    </member>
    <member name="P:System.Net.FtpWebRequest.RequestUri">
      <summary>获取此实例所请求的 URI。</summary>
      <returns>
        <see cref="T:System.Uri" /> 实例，标识使用文件传输协议访问的资源。</returns>
    </member>
    <member name="P:System.Net.FtpWebRequest.ServicePoint">
      <summary>获取用于连接 FTP 服务器的 <see cref="T:System.Net.ServicePoint" /> 对象。</summary>
      <returns>可用于自定义连接行为的 <see cref="T:System.Net.ServicePoint" /> 对象。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.FtpWebRequest.Timeout">
      <summary>获取或设置等待请求的毫秒数。</summary>
      <returns>一个 <see cref="T:System.Int32" /> 值，包含请求超时前等待的毫秒数。默认值为 <see cref="F:System.Threading.Timeout.Infinite" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的值小于零，并且不为 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
      <exception cref="T:System.InvalidOperationException">对于一个已在进行的请求为此属性指定了一个新值。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.UseBinary">
      <summary>获取或设置一个 <see cref="T:System.Boolean" /> 值，该值指定文件传输的数据类型。</summary>
      <returns>true，指示服务器要传输的是二进制数据；false，指示数据为文本。默认值为 true。</returns>
      <exception cref="T:System.InvalidOperationException">对于一个已在进行的请求为此属性指定了一个新值。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.UseDefaultCredentials">
      <summary>总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>总是引发 <see cref="T:System.NotSupportedException" />。</returns>
      <exception cref="T:System.NotSupportedException">FTP 不支持默认凭据。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.UsePassive">
      <summary>获取或设置客户端应用程序的数据传输过程的行为。</summary>
      <returns>
            如果客户端应用程序的数据传输过程侦听数据端口上的连接，则为 false；如果客户端应在数据端口上启动连接，则为 true。默认值为 true。</returns>
      <exception cref="T:System.InvalidOperationException">对于一个已在进行的请求为此属性指定了一个新值。</exception>
    </member>
    <member name="T:System.Net.FtpWebResponse">
      <summary>封装文件传输协议 (FTP) 服务器对请求的响应。</summary>
    </member>
    <member name="P:System.Net.FtpWebResponse.BannerMessage">
      <summary>获取在登录前建立连接时 FTP 服务器发送的消息。</summary>
      <returns>
        <see cref="T:System.String" />，它包含服务器发送的标语消息；如果没有发送任何消息，则为 <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="M:System.Net.FtpWebResponse.Close">
      <summary>释放响应所持有的资源。</summary>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.FtpWebResponse.ContentLength">
      <summary>获取从 FTP 服务器上接收的数据的长度。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，它包含从 FTP 服务器上接收的数据的字节数。</returns>
    </member>
    <member name="P:System.Net.FtpWebResponse.ExitMessage">
      <summary>获取 FTP 会话结束时服务器发送的消息。</summary>
      <returns>
        <see cref="T:System.String" />，它包含服务器发送的退出消息；如果没有发送任何消息，则为 <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="M:System.Net.FtpWebResponse.GetResponseStream">
      <summary>检索包含从 FTP 服务器上发送的响应数据的流。</summary>
      <returns>可读取的 <see cref="T:System.IO.Stream" /> 实例，它包含与响应一起返回的数据；如果服务器未返回任何响应数据，则为 <see cref="F:System.IO.Stream.Null" />。</returns>
      <exception cref="T:System.InvalidOperationException">响应未返回数据流。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.FtpWebResponse.Headers">
      <summary>获取空 <see cref="T:System.Net.WebHeaderCollection" /> 对象。</summary>
      <returns>一个空 <see cref="T:System.Net.WebHeaderCollection" /> 对象。</returns>
    </member>
    <member name="P:System.Net.FtpWebResponse.LastModified">
      <summary>获取 FTP 服务器上的文件的上次修改日期和时间。</summary>
      <returns>
        <see cref="T:System.DateTime" />，它包含文件的上次修改日期和时间。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.FtpWebResponse.ResponseUri">
      <summary>获取对请求发送响应的 URI。</summary>
      <returns>
        <see cref="T:System.Uri" /> 实例，它标识与此响应关联的资源。</returns>
    </member>
    <member name="P:System.Net.FtpWebResponse.StatusCode">
      <summary>获取从 FTP 服务器上发送的最新状态代码。</summary>
      <returns>
        <see cref="T:System.Net.FtpStatusCode" /> 值，它指示与此响应一起返回的最新状态代码。</returns>
    </member>
    <member name="P:System.Net.FtpWebResponse.StatusDescription">
      <summary>获取描述从 FTP 服务器发送的状态代码的文本。</summary>
      <returns>
        <see cref="T:System.String" /> 实例，它包含状态代码以及与此响应一起返回的消息。</returns>
    </member>
    <member name="P:System.Net.FtpWebResponse.WelcomeMessage">
      <summary>获取身份验证完成时 FTP 服务器发送的消息。</summary>
      <returns>
        <see cref="T:System.String" />，它包含服务器发送的欢迎消息；如果未发送任何消息，则为 <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="T:System.Net.GlobalProxySelection">
      <summary>
                    包含所有 HTTP 请求的全局默认代理实例。
                </summary>
    </member>
    <member name="M:System.Net.GlobalProxySelection.#ctor">
      <summary>
                    初始化 <see cref="T:System.Net.GlobalProxySelection" /> 类的新实例。
                </summary>
    </member>
    <member name="M:System.Net.GlobalProxySelection.GetEmptyWebProxy">
      <summary>
                    返回空代理实例。
                </summary>
      <returns>
                    不包含信息的 <see cref="T:System.Net.IWebProxy" />。
                </returns>
    </member>
    <member name="P:System.Net.GlobalProxySelection.Select">
      <summary>
                    获取或设置全局 HTTP 代理。
                </summary>
      <returns>
                    每一个 <see cref="M:System.Net.HttpWebRequest.GetResponse" /> 调用使用的 <see cref="T:System.Net.IWebProxy" />。
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    为 Set 操作指定的值为 null。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                    调用方没有进行请求的操作的权限。
                </exception>
    </member>
    <member name="T:System.Net.HttpContinueDelegate">
      <summary>表示当客户端接收到连续响应时通知调用方的方法。</summary>
      <param name="StatusCode">服务器的 HTTP 状态的数字值。 </param>
      <param name="httpHeaders">随 100 连续响应一起从服务器返回的标头。 </param>
    </member>
    <member name="T:System.Net.HttpListener">
      <summary>
                    提供一个简单的、可通过编程方式控制的 HTTP 协议侦听器。无法继承此类。
                </summary>
    </member>
    <member name="M:System.Net.HttpListener.#ctor">
      <summary>
                    初始化 <see cref="T:System.Net.HttpListener" /> 类的新实例。
                </summary>
      <exception cref="T:System.PlatformNotSupportedException">
                    此类不能在当前操作系统上使用。使用此类的实例需要 Windows Server 2003 或 Windows XP SP2。
                </exception>
    </member>
    <member name="M:System.Net.HttpListener.Abort">
      <summary>
                    立刻关闭 <see cref="T:System.Net.HttpListener" /> 对象，这样会放弃所有当前排队的请求。
                </summary>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.HttpListener.AuthenticationSchemes">
      <summary>
                    获取或设置用于客户端身份验证的方案。
                </summary>
      <returns>
                    指示如何对客户端进行身份验证的 <see cref="T:System.Net.AuthenticationSchemes" /> 枚举值的按位组合。默认值为 <see cref="F:System.Net.AuthenticationSchemes.Anonymous" />。
                </returns>
      <exception cref="T:System.ObjectDisposedException">
此对象已关闭。
                </exception>
    </member>
    <member name="P:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate">
      <summary>
                    获取或设置一个委托，调用它来确定用于客户端身份验证的协议。
                </summary>
      <returns>
        <see cref="T:System.Net.AuthenticationSchemeSelector" /> 委托，它调用用于选择身份验证协议的方法。默认值为 null。
                </returns>
      <exception cref="T:System.ObjectDisposedException">
此对象已关闭。
                </exception>
    </member>
    <member name="M:System.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)">
      <summary>
                    开始异步检索传入的请求。
                </summary>
      <returns>
                    一个指示异步操作状态的 <see cref="T:System.IAsyncResult" /> 对象。
                </returns>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托，引用客户端请求可用时要调用的方法。
                </param>
      <param name="state">
                    一个用户定义对象，其中包含该操作的相关信息。当操作完成时，此对象会被传递给 <paramref name="callback" /> 委托。
                </param>
      <exception cref="T:System.Net.HttpListenerException">
Win32 函数调用失败。检查异常的 <see cref="P:System.Net.HttpListenerException.ErrorCode" /> 属性，以确定导致异常的原因。
                </exception>
      <exception cref="T:System.InvalidOperationException">
此对象尚未启动或当前已停止。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
此对象已关闭。
                </exception>
    </member>
    <member name="M:System.Net.HttpListener.Close">
      <summary>
                    处理完所有当前排队的请求后关闭 <see cref="T:System.Net.HttpListener" />。
                </summary>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.HttpListener.EndGetContext(System.IAsyncResult)">
      <summary>
                    完成检索传入的客户端请求的异步操作。
                </summary>
      <returns>
                    表示客户端请求的 <see cref="T:System.Net.HttpListenerContext" /> 对象。
                </returns>
      <param name="asyncResult">
                    启动异步操作时获得的 <see cref="T:System.IAsyncResult" /> 对象。
                </param>
      <exception cref="T:System.ArgumentException">
                    未通过调用 <see cref="M:System.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)" /> 方法获取 <paramref name="asyncResult" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    已为指定的 <paramref name="asyncResult" /> 对象调用 <see cref="M:System.Net.HttpListener.EndGetContext(System.IAsyncResult)" /> 方法。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
此对象已关闭。
                </exception>
    </member>
    <member name="M:System.Net.HttpListener.GetContext">
      <summary>
                    等待传入的请求，接收到请求时返回。
                </summary>
      <returns>
                    表示客户端请求的 <see cref="T:System.Net.HttpListenerContext" /> 对象。
                </returns>
      <exception cref="T:System.Net.HttpListenerException">
Win32 函数调用失败。检查异常的 <see cref="P:System.Net.HttpListenerException.ErrorCode" /> 属性，以确定导致异常的原因。
                </exception>
      <exception cref="T:System.InvalidOperationException">
此对象尚未启动或当前已停止。
                
                    - 或 -
                <see cref="T:System.Net.HttpListener" /> 没有任何要响应的统一资源标识符 (URI) 前缀。请参见“备注”。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
此对象已关闭。
                </exception>
    </member>
    <member name="P:System.Net.HttpListener.IgnoreWriteExceptions">
      <summary>
                    获取或设置 <see cref="T:System.Boolean" /> 值，该值指定应用程序是否接收 <see cref="T:System.Net.HttpListener" /> 向客户端发送响应时发生的异常。
                </summary>
      <returns>
                    如果此 <see cref="T:System.Net.HttpListener" /> 不返回向客户端发送响应时发生的异常，则返回 true；否则返回 false。默认值为 false。
                </returns>
      <exception cref="T:System.ObjectDisposedException">
此对象已关闭。
                </exception>
    </member>
    <member name="P:System.Net.HttpListener.IsListening">
      <summary>
                    获取一个值，指示 <see cref="T:System.Net.HttpListener" /> 是否已启动。
                </summary>
      <returns>
                    如果已启动 <see cref="T:System.Net.HttpListener" />，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Net.HttpListener.IsSupported">
      <summary>
                    获取一个值，指示 <see cref="T:System.Net.HttpListener" /> 是否可用于当前操作系统。
                </summary>
      <returns>
                    如果支持 <see cref="T:System.Net.HttpListener" />，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Net.HttpListener.Prefixes">
      <summary>
                    获取由此 <see cref="T:System.Net.HttpListener" /> 对象处理的统一资源标识符 (URI) 前缀。
                </summary>
      <returns>
        <see cref="T:System.Net.HttpListenerPrefixCollection" />，包含此 <see cref="T:System.Net.HttpListener" /> 对象在经配置后要处理的 URI 前缀。
                </returns>
      <exception cref="T:System.ObjectDisposedException">
此对象已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.HttpListener.Realm">
      <summary>
                    获取或设置与此 <see cref="T:System.Net.HttpListener" /> 对象关联的领域或资源分区。
                </summary>
      <returns>
        <see cref="T:System.String" /> 值，包含与 <see cref="T:System.Net.HttpListener" /> 对象关联的领域名。
                </returns>
      <exception cref="T:System.ObjectDisposedException">
此对象已关闭。
                </exception>
    </member>
    <member name="M:System.Net.HttpListener.Start">
      <summary>
                    允许此实例接收传入的请求。
                </summary>
      <exception cref="T:System.Net.HttpListenerException">
Win32 函数调用失败。检查异常的 <see cref="P:System.Net.HttpListenerException.ErrorCode" /> 属性，以确定导致异常的原因。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
此对象已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.HttpListener.Stop">
      <summary>
                    使此实例停止接收传入的请求。
                </summary>
      <exception cref="T:System.ObjectDisposedException">
此对象已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.HttpListener.System#IDisposable#Dispose">
      <summary>
                    释放此 <see cref="T:System.Net.HttpListener" /> 对象持有的资源。
                </summary>
    </member>
    <member name="P:System.Net.HttpListener.UnsafeConnectionNtlmAuthentication">
      <summary>
                    获取或设置 <see cref="T:System.Boolean" /> 值，该值控制当使用 NTLM 时是否需要对使用同一传输控制协议 (TCP) 连接的其他请求进行身份验证。
                </summary>
      <returns>
                    如果第一个请求的 <see cref="T:System.Security.Principal.IIdentity" /> 将用于同一连接上的后续请求，则返回 true；否则返回 false。默认值为 false。
                </returns>
      <exception cref="T:System.ObjectDisposedException">
此对象已关闭。
                </exception>
    </member>
    <member name="T:System.Net.HttpListenerBasicIdentity">
      <summary>包含来自基本身份验证请求的用户名和密码。</summary>
    </member>
    <member name="M:System.Net.HttpListenerBasicIdentity.#ctor(System.String,System.String)">
      <summary>用指定的用户名和密码初始化 <see cref="T:System.Net.HttpListenerBasicIdentity" /> 类的新实例。</summary>
      <param name="username">用户名。</param>
      <param name="password">密码。</param>
    </member>
    <member name="P:System.Net.HttpListenerBasicIdentity.Password">
      <summary>指示来自基本身份验证尝试的密码。</summary>
      <returns>包含密码的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Net.HttpListenerContext">
      <summary>提供对 <see cref="T:System.Net.HttpListener" /> 类使用的请求和响应对象的访问。无法继承此类。</summary>
    </member>
    <member name="P:System.Net.HttpListenerContext.Request">
      <summary>获取表示客户端对资源的请求的 <see cref="T:System.Net.HttpListenerRequest" />。</summary>
      <returns>表示客户端请求的 <see cref="T:System.Net.HttpListenerRequest" /> 对象。</returns>
    </member>
    <member name="P:System.Net.HttpListenerContext.Response">
      <summary>获取 <see cref="T:System.Net.HttpListenerResponse" /> 对象，该对象将被发送到客户端以响应客户端的请求。 </summary>
      <returns>用于将响应发送回客户端的 <see cref="T:System.Net.HttpListenerResponse" /> 对象。</returns>
    </member>
    <member name="P:System.Net.HttpListenerContext.User">
      <summary>获取用于为客户端获取标识、身份验证信息和安全角色的对象，该客户端的请求由此 <see cref="T:System.Net.HttpListenerContext" /> 对象表示。 </summary>
      <returns>描述客户端的 <see cref="T:System.Security.Principal.IPrincipal" /> 对象，或者，如果提供此 <see cref="T:System.Net.HttpListenerContext" /> 的 <see cref="T:System.Net.HttpListener" /> 不需要身份验证，则为 null。</returns>
    </member>
    <member name="T:System.Net.HttpListenerException">
      <summary>处理 HTTP 请求发生错误时引发的异常。</summary>
    </member>
    <member name="M:System.Net.HttpListenerException.#ctor">
      <summary>初始化 <see cref="T:System.Net.HttpListenerException" /> 类的新实例。 </summary>
    </member>
    <member name="M:System.Net.HttpListenerException.#ctor(System.Int32)">
      <summary>使用指定的错误代码初始化 <see cref="T:System.Net.HttpListenerException" /> 类的新实例。</summary>
      <param name="errorCode">
        <see cref="T:System.Int32" /> 值，标识发生的错误。</param>
    </member>
    <member name="M:System.Net.HttpListenerException.#ctor(System.Int32,System.String)">
      <summary>使用指定的错误代码和信息初始化 <see cref="T:System.Net.HttpListenerException" /> 类的新实例。</summary>
      <param name="errorCode">
        <see cref="T:System.Int32" /> 值，标识发生的错误。</param>
      <param name="message">描述发生的错误的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.Net.HttpListenerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的指定实例初始化 <see cref="T:System.Net.HttpListenerException" /> 类的新实例。</summary>
      <param name="serializationInfo">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，包含反序列化新的 <see cref="T:System.Net.HttpListenerException" /> 对象所需的信息。 </param>
      <param name="streamingContext">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象。 </param>
    </member>
    <member name="P:System.Net.HttpListenerException.ErrorCode">
      <summary>获取一个值，该值标识发生的错误。</summary>
      <returns>
        <see cref="T:System.Int32" /> 值。</returns>
    </member>
    <member name="T:System.Net.HttpListenerPrefixCollection">
      <summary>
                    表示用于存储 <see cref="T:System.Net.HttpListener" /> 对象的统一资源标识符 (URI) 前缀的集合。
                </summary>
    </member>
    <member name="M:System.Net.HttpListenerPrefixCollection.Add(System.String)">
      <summary>
                    将一个统一资源标识符 (URI) 前缀添加到该集合中。
                </summary>
      <param name="uriPrefix">
        <see cref="T:System.String" />，标识在传入的请求中进行比较的 URI 信息。前缀必须以正斜杠 ("/") 结束。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriPrefix" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="uriPrefix" /> 不使用 http:// 或 https:// 方案。这些是针对 <see cref="T:System.Net.HttpListener" /> 对象所支持的仅有的方案。
                
                    - 或 -
                <paramref name="uriPrefix" /> 不是正确格式的 URI 前缀。确保该字符串以“/”结束。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    与此集合关联的 <see cref="T:System.Net.HttpListener" /> 已关闭。
                </exception>
      <exception cref="T:System.Net.HttpListenerException">
                    Windows 函数调用失败。检查异常的 <see cref="P:System.Net.HttpListenerException.ErrorCode" /> 属性，以确定导致异常的原因。如果另一个 <see cref="T:System.Net.HttpListener" /> 已经添加前缀 <paramref name="uriPrefix" />，则此异常引发。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Net.WebPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.HttpListenerPrefixCollection.Clear">
      <summary>
                    从该集合中移除所有的统一资源标识符 (URI) 前缀。
                </summary>
      <exception cref="T:System.Net.HttpListenerException">
                    Windows 函数调用失败。检查异常的 <see cref="P:System.Net.HttpListenerException.ErrorCode" /> 属性，以确定导致异常的原因。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    与此集合关联的 <see cref="T:System.Net.HttpListener" /> 已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.HttpListenerPrefixCollection.Contains(System.String)">
      <summary>
                    返回一个 <see cref="T:System.Boolean" /> 值，该值指示指定的前缀是否包含在该集合中。
                </summary>
      <returns>
                    如果此集合包含由 <paramref name="uriPrefix" /> 指定的前缀，则为 true；否则为 false。
                </returns>
      <param name="uriPrefix">
                    一个 <see cref="T:System.String" />，包含要测试的统一资源标识符 (URI) 前缀。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriPrefix" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Net.HttpListenerPrefixCollection.CopyTo(System.Array,System.Int32)">
      <summary>
                    将 <see cref="T:System.Net.HttpListenerPrefixCollection" /> 的内容复制到指定的数组。
                </summary>
      <param name="array">
                    接收此集合中的统一资源标识符 (URI) 前缀字符串的一维 <see cref="T:System.Array" />。
                </param>
      <param name="offset">
        <paramref name="array" /> 中从零开始的索引，在此处开始复制。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 具有多个维数。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    此集合包含的元素比 <paramref name="array" /> 中从 <paramref name="offset" /> 开始能存储的元素更多。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    与此集合关联的 <see cref="T:System.Net.HttpListener" /> 已关闭。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="array" /> 不能存储字符串值。
                </exception>
    </member>
    <member name="M:System.Net.HttpListenerPrefixCollection.CopyTo(System.String[],System.Int32)">
      <summary>
                    将 <see cref="T:System.Net.HttpListenerPrefixCollection" /> 的内容复制到指定的字符串数组。
                </summary>
      <param name="array">
                    接收此集合中统一资源标识符 (URI) 前缀字符串的一维字符串数组。
                </param>
      <param name="offset">
        <paramref name="array" /> 中从零开始的索引，在此处开始复制。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 具有多个维数。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    此集合包含的元素比 <paramref name="array" /> 中从 <paramref name="offset" /> 开始能存储的元素更多。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    与此集合关联的 <see cref="T:System.Net.HttpListener" /> 已关闭。
                </exception>
    </member>
    <member name="P:System.Net.HttpListenerPrefixCollection.Count">
      <summary>
                    获取集合中包含的前缀数。
                </summary>
      <returns>
                    一个 <see cref="T:System.Int32" />，包含此集合中的前缀的数目。
                </returns>
    </member>
    <member name="M:System.Net.HttpListenerPrefixCollection.GetEnumerator">
      <summary>
返回一个可用于循环访问集合的对象。
                </summary>
      <returns>
                    一个对象，它实现了 <see cref="T:System.Collections.IEnumerator" /> 接口，并提供对此集合中的字符串的访问。
                </returns>
    </member>
    <member name="P:System.Net.HttpListenerPrefixCollection.IsReadOnly">
      <summary>
                    获取一个值，该值指示对该集合的访问是否是只读的。
                </summary>
      <returns>
                    始终返回 false。
                </returns>
    </member>
    <member name="P:System.Net.HttpListenerPrefixCollection.IsSynchronized">
      <summary>
                    获取一个值，该值指示对集合的访问是否同步（线程安全）。
                </summary>
      <returns>
                    该属性总是返回 false。
                </returns>
    </member>
    <member name="M:System.Net.HttpListenerPrefixCollection.Remove(System.String)">
      <summary>
                    从由 <see cref="T:System.Net.HttpListener" /> 对象处理的前缀的列表中移除指定的统一资源标识符 (URI)。
                </summary>
      <returns>
                    如果在 <see cref="T:System.Net.HttpListenerPrefixCollection" /> 中找到 <paramref name="uriPrefix" /> 并将其移除，则为 true；否则为 false。
                </returns>
      <param name="uriPrefix">
                    包含要移除的 URI 前缀的 <see cref="T:System.String" />。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriPrefix" /> 为 null。
                </exception>
      <exception cref="T:System.Net.HttpListenerException">
                    Windows 函数调用失败。若要确定异常的原因，请检查异常的错误代码。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    与此集合关联的 <see cref="T:System.Net.HttpListener" /> 已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.HttpListenerPrefixCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
返回一个可用于循环访问集合的对象。
                </summary>
      <returns>
                    一个对象，它实现了 <see cref="T:System.Collections.IEnumerator" /> 接口，并提供对此集合中的字符串的访问。
                </returns>
    </member>
    <member name="T:System.Net.HttpListenerRequest">
      <summary>
                    描述传入 <see cref="T:System.Net.HttpListener" /> 对象的 HTTP 请求。无法继承此类。
                </summary>
    </member>
    <member name="P:System.Net.HttpListenerRequest.AcceptTypes">
      <summary>
                    获取客户端接受的 MIME 类型。
                </summary>
      <returns>
                    一个 <see cref="T:System.String" /> 数组，该数组包含在请求的 Accept 标头中指定的类型名称；如果客户端请求不包括 Accept 标头，则为 null。
                </returns>
    </member>
    <member name="M:System.Net.HttpListenerRequest.BeginGetClientCertificate(System.AsyncCallback,System.Object)">
      <summary>
                    开始对客户端的 X.509 v.3 证书的异步请求。
                </summary>
      <returns>
                    指示操作的状态的 <see cref="T:System.IAsyncResult" />。
                </returns>
      <param name="requestCallback">
                    一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。
                </param>
      <param name="state">
                    一个用户定义对象，其中包含该操作的相关信息。操作完成时，此对象被传递给回调委托。
                </param>
    </member>
    <member name="P:System.Net.HttpListenerRequest.ClientCertificateError">
      <summary>
                    获取一个错误代码，该代码标识的问题涉及客户端提供的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" />。
                </summary>
      <returns>
                    包含 Windows 错误代码的 <see cref="T:System.Int32" /> 值。
                </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="Create" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.HttpListenerRequest.ContentEncoding">
      <summary>
                    获取可用于随请求发送的数据的内容编码
                </summary>
      <returns>
                    一个 <see cref="T:System.Text.Encoding" /> 对象，适于 <see cref="P:System.Net.HttpListenerRequest.InputStream" /> 属性中的数据使用。
                </returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.ContentLength64">
      <summary>
                    获取包含在请求中的正文数据的长度。
                </summary>
      <returns>
                    请求的 Content-Length 标头中的值。如果内容长度未知，则此值为 -1。
                </returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.ContentType">
      <summary>
                    获取包含在请求中的正文数据的 MIME 类型。
                </summary>
      <returns>
        <see cref="T:System.String" />，包含请求的 Content-Type 标头的文本。
                </returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.Cookies">
      <summary>
                    获取随请求发送的 Cookie。
                </summary>
      <returns>
        <see cref="T:System.Net.CookieCollection" /> 包含伴随请求的 Cookie。如果请求不包含 Cookie，则此属性返回空集合。
                </returns>
    </member>
    <member name="M:System.Net.HttpListenerRequest.EndGetClientCertificate(System.IAsyncResult)">
      <summary>
                    结束对客户端的 X.509 v.3 证书的异步请求。
                </summary>
      <returns>
                    操作启动后返回的 <see cref="T:System.IAsyncResult" /> 对象。
                </returns>
      <param name="asyncResult">
                    证书的挂起请求。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 未能通过以下调用获得，即调用<see cref="M:System.Net.HttpListenerRequest.BeginGetClientCertificate(System.AsyncCallback,System.Object)" /><paramref name="e." /></exception>
      <exception cref="T:System.InvalidOperationException">
                    已经为 <paramref name="asyncResult" /> 所标识的操作调用了此方法。
                </exception>
    </member>
    <member name="M:System.Net.HttpListenerRequest.GetClientCertificate">
      <summary>
                    检索客户端的 X.509 v.3 证书。
                </summary>
      <returns>
                    一个 <see cref="N:System.Security.Cryptography.X509Certificates" /> 对象，其中包含客户端的 X.509 v.3 证书。
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    对此方法的一个调用（以检索客户端的 X.509 v.3 证书）正在进行，因此无法进行对此方法的另一个调用。
                </exception>
    </member>
    <member name="P:System.Net.HttpListenerRequest.HasEntityBody">
      <summary>
                    获取一个 <see cref="T:System.Boolean" /> 值，该值指示请求是否有关联的正文数据。
                </summary>
      <returns>
                    如果请求有关联的正文数据，则为 true；否则为 false。
                </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.HttpListenerRequest.Headers">
      <summary>
                    获取在请求中发送的标头名称/值对的集合。
                </summary>
      <returns>
        <see cref="T:System.Net.WebHeaderCollection" /> 包含的 HTTP 标头包括在请求中。
                </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.HttpListenerRequest.HttpMethod">
      <summary>
                    获取由客户端指定的 HTTP 方法。
                </summary>
      <returns>
        <see cref="T:System.String" /> 包含的方法用于请求中。
                </returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.InputStream">
      <summary>
                    获取包含正文数据的流，这些数据由客户端发送。
                </summary>
      <returns>
                    一个可读的 <see cref="T:System.IO.Stream" /> 对象，该对象包含客户端在请求正文中发送的字节。如果没有随请求发送任何数据，则此属性返回 <see cref="F:System.IO.Stream.Null" />。
                </returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.IsAuthenticated">
      <summary>
                    获取一个 <see cref="T:System.Boolean" /> 值，该值指示发送此请求的客户端是否经过身份验证。
                </summary>
      <returns>
                    如果客户端已经过身份验证，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.IsLocal">
      <summary>
                    获取 <see cref="T:System.Boolean" /> 值，该值指示该请求是否来自本地计算机。
                </summary>
      <returns>
                    如果发出请求的计算机就是提供该请求的 <see cref="T:System.Net.HttpListener" /> 对象所在的计算机，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.IsSecureConnection">
      <summary>
                    获取一个 <see cref="T:System.Boolean" /> 值，该值指示用来发送请求的 TCP 连接是否使用安全套接字层 (SSL) 协议。
                </summary>
      <returns>
                    如果 TCP 连接使用的是 SSL，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.KeepAlive">
      <summary>
                    获取一个 <see cref="T:System.Boolean" /> 值，该值指示客户端是否请求持续型连接。
                </summary>
      <returns>
                    如果连接应保持打开状态，则为 true；否则为 false。
                </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.HttpListenerRequest.LocalEndPoint">
      <summary>
                    获取请求被定向到的服务器 IP 地址和端口号。
                </summary>
      <returns>
        <see cref="T:System.Net.IPEndPoint" /> 表示请求被发送到的 IP 地址。
                </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.HttpListenerRequest.ProtocolVersion">
      <summary>
                    获取请求客户端使用的 HTTP 版本。
                </summary>
      <returns>
        <see cref="T:System.Version" /> 用于标识 HTTP 的客户端版本。
                </returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.QueryString">
      <summary>
                    获取包含在请求中的查询字符串。
                </summary>
      <returns>
                    一个 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 对象，其中包含的查询数据包括在请求 <see cref="P:System.Net.HttpListenerRequest.Url" /> 中。
                </returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.RawUrl">
      <summary>
                    获取客户端请求的 URL 信息（不包括主机和端口）。
                </summary>
      <returns>
        <see cref="T:System.String" /> 包含此请求的原始 URL。
                </returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.RemoteEndPoint">
      <summary>
                    获取发出请求的客户端 IP 地址和端口号。
                </summary>
      <returns>
        <see cref="T:System.Net.IPEndPoint" /> 表示发出请求的 IP 地址和端口号。
                </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.HttpListenerRequest.RequestTraceIdentifier">
      <summary>
                    获取传入的 HTTP 请求的请求标识符。
                </summary>
      <returns>
        <see cref="T:System.Guid" /> 对象，其中包含 HTTP 请求的标识符。
                </returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.Url">
      <summary>
                    获取客户端请求的 <see cref="T:System.Uri" /> 对象。
                </summary>
      <returns>
                    一个 <see cref="T:System.Uri" /> 对象，用于标识客户端请求的资源。
                </returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.UrlReferrer">
      <summary>
                    获取以下资源的统一资源标识符 (URI)，该资源将使客户端与服务器相关。
                </summary>
      <returns>
        <see cref="T:System.Uri" /> 对象，包含请求的 <see cref="F:System.Net.HttpRequestHeader.Referer" /> 标头的文本；如果请求中不包含标头，则为 null。
                </returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.UserAgent">
      <summary>
                    获取客户端提供的用户代理。
                </summary>
      <returns>
                    一个 <see cref="T:System.String" /> 对象，其中包含请求的 User-Agent 标头的文本。
                </returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.UserHostAddress">
      <summary>
                    获取请求被定向到的服务器 IP 地址和端口号。
                </summary>
      <returns>
                    包含主机地址信息的 <see cref="T:System.String" />。
                </returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.UserHostName">
      <summary>
                    获取由客户端指定的 DNS 名称和端口号（如果提供了端口号）。
                </summary>
      <returns>
                    一个 <see cref="T:System.String" /> 值，其中包含请求的 Host 标头的文本。
                </returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.UserLanguages">
      <summary>
                    获取响应的首选自然语言。
                </summary>
      <returns>
        <see cref="T:System.String" /> 数组，包含请求的 <see cref="F:System.Net.HttpRequestHeader.AcceptLanguage" /> 标头中指定的语言；如果客户端请求不包含 <see cref="F:System.Net.HttpRequestHeader.AcceptLanguage" /> 标头，则为 null。
                </returns>
    </member>
    <member name="T:System.Net.HttpListenerResponse">
      <summary>
                    表示对 <see cref="T:System.Net.HttpListener" /> 对象正在处理的请求的响应。
                </summary>
    </member>
    <member name="M:System.Net.HttpListenerResponse.Abort">
      <summary>
                    关闭到客户端的连接而不发送响应。
                </summary>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.HttpListenerResponse.AddHeader(System.String,System.String)">
      <summary>
                    将指定的标头和值添加到此响应的 HTTP 标头。
                </summary>
      <param name="name">
                    要设置的 HTTP 标头的名称。
                </param>
      <param name="value">
        <paramref name="name" /> 标头的值。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null 或空字符串 ("")。
                </exception>
      <exception cref="T:System.ArgumentException">
不允许为指定的标头指定值。
                
                    - 或 -
                <paramref name="name" /> 或 <paramref name="value" /> 包含无效字符。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 的长度超过 65,535 个字符。
                </exception>
    </member>
    <member name="M:System.Net.HttpListenerResponse.AppendCookie(System.Net.Cookie)">
      <summary>
                    将指定的 <see cref="T:System.Net.Cookie" /> 添加到此响应的 Cookie 集合。
                </summary>
      <param name="cookie">
                    要添加到随此响应发送的集合中的 <see cref="T:System.Net.Cookie" /></param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cookie" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Net.HttpListenerResponse.AppendHeader(System.String,System.String)">
      <summary>
                    向随此响应发送的指定 HTTP 标头追加值。
                </summary>
      <param name="name">
                    要追加 <paramref name="value" /> 的 HTTP 标头的名称。
                </param>
      <param name="value">
                    要追加到 <paramref name="name" /> 标头的值。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 为 null 或空字符串 ("")。
                
                    - 或 -
                
不允许为指定的标头指定值。
                
                    - 或 -
                <paramref name="name" /> 或 <paramref name="value" /> 包含无效字符。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 的长度超过 65,535 个字符。
                </exception>
    </member>
    <member name="M:System.Net.HttpListenerResponse.Close">
      <summary>
                    将响应发送到客户端，并释放此 <see cref="T:System.Net.HttpListenerResponse" /> 实例占用的资源。
                </summary>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.HttpListenerResponse.Close(System.Byte[],System.Boolean)">
      <summary>
                    将指定的字节数组发送到客户端，并释放此 <see cref="T:System.Net.HttpListenerResponse" /> 实例占用的资源。
                </summary>
      <param name="responseEntity">
                    包含要发送给客户端的响应的 <see cref="T:System.Byte" /> 数组。
                </param>
      <param name="willBlock">
                    如果要在刷新到客户端的流时阻止执行，则为 true；否则为 false。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="responseEntity" /> 为 null。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
此对象已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.HttpListenerResponse.ContentEncoding">
      <summary>
                    为此响应的 <see cref="P:System.Net.HttpListenerResponse.OutputStream" /> 获取或设置 <see cref="T:System.Text.Encoding" />。
                </summary>
      <returns>
                    适合处理 <see cref="P:System.Net.HttpListenerResponse.OutputStream" /> 属性中的数据的 <see cref="T:System.Text.Encoding" /> 对象，如果没有指定编码，则为 null。
                </returns>
    </member>
    <member name="P:System.Net.HttpListenerResponse.ContentLength64">
      <summary>
                    获取或设置响应中包括的正文数据的字节数。
                </summary>
      <returns>
                    响应的 Content-Length 标头的值。
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    为 Set 操作指定的值小于 0。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    响应已发送。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
此对象已关闭。
                </exception>
    </member>
    <member name="P:System.Net.HttpListenerResponse.ContentType">
      <summary>
                    获取或设置返回内容的 MIME 类型。
                </summary>
      <returns>
        <see cref="T:System.String" /> 实例，包含响应的 Content-Type 标头文本。
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    为 Set 操作指定的值为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
为 Set 操作指定的值为空字符串 ("")。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
此对象已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.HttpListenerResponse.Cookies">
      <summary>
                    获取或设置随响应返回的 Cookie 集合。
                </summary>
      <returns>
        <see cref="T:System.Net.CookieCollection" />，包含随响应返回的 Cookie。如果没有向响应添加任何 Cookie，则该集合为空。
                </returns>
    </member>
    <member name="M:System.Net.HttpListenerResponse.CopyFrom(System.Net.HttpListenerResponse)">
      <summary>
                    将属性从指定的 <see cref="T:System.Net.HttpListenerResponse" /> 复制到此响应。
                </summary>
      <param name="templateResponse">
                    要复制的 <see cref="T:System.Net.HttpListenerResponse" /> 实例。
                </param>
    </member>
    <member name="P:System.Net.HttpListenerResponse.Headers">
      <summary>
                    获取或设置服务器返回的标头名称/值对集合。
                </summary>
      <returns>
        <see cref="T:System.Net.WebHeaderCollection" /> 实例，包含要包括在响应中的所有显式设置的 HTTP 标头。
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    为 Set 操作指定的 <see cref="T:System.Net.WebHeaderCollection" /> 实例对响应无效。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.HttpListenerResponse.KeepAlive">
      <summary>
                    获取或设置一个值，该值指示服务器是否请求持久性连接。
                </summary>
      <returns>
                    如果服务器请求持久性连接，则为 true；否则为 false。默认为 true。
                </returns>
      <exception cref="T:System.ObjectDisposedException">
此对象已关闭。
                </exception>
    </member>
    <member name="P:System.Net.HttpListenerResponse.OutputStream">
      <summary>
                    获取将响应写入其中的 <see cref="T:System.IO.Stream" /> 对象。
                </summary>
      <returns>
                    将响应写入其中的 <see cref="T:System.IO.Stream" /> 对象。
                </returns>
      <exception cref="T:System.ObjectDisposedException">
此对象已关闭。
                </exception>
    </member>
    <member name="P:System.Net.HttpListenerResponse.ProtocolVersion">
      <summary>
                    获取或设置用于响应的 HTTP 版本。
                </summary>
      <returns>
        <see cref="T:System.Version" /> 对象，指示响应客户端时使用的 HTTP 版本。请注意此属性现在已过时。
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    为 Set 操作指定的值为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                    为 Set 操作指定的值没有将其 <see cref="P:System.Version.Major" /> 属性设置为 1，或者没有将其 <see cref="P:System.Version.Minor" /> 属性设置为 0 或 1。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
此对象已关闭。
                </exception>
    </member>
    <member name="M:System.Net.HttpListenerResponse.Redirect(System.String)">
      <summary>
                    配置响应以将客户端重定向到指定的 URL。
                </summary>
      <param name="url">
                    客户端应用来定位请求的资源的 URL。
                </param>
    </member>
    <member name="P:System.Net.HttpListenerResponse.RedirectLocation">
      <summary>
                    获取或设置 HTTP Location 标头的值。
                </summary>
      <returns>
        <see cref="T:System.String" />，包含要在 Location 标头中发送给客户端的绝对 URL。
                </returns>
      <exception cref="T:System.ArgumentException">
为 Set 操作指定的值为空字符串 ("")。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
此对象已关闭。
                </exception>
    </member>
    <member name="P:System.Net.HttpListenerResponse.SendChunked">
      <summary>
                    获取或设置响应是否使用 Chunked 传输编码。
                </summary>
      <returns>
                    如果响应设置为使用 Chunked 传输编码，则为 true；否则为 false。默认为 false。
                </returns>
    </member>
    <member name="M:System.Net.HttpListenerResponse.SetCookie(System.Net.Cookie)">
      <summary>
                    添加或更新随此响应发送的 Cookie 集合中的 <see cref="T:System.Net.Cookie" />。
                </summary>
      <param name="cookie">
                    此响应的 <see cref="T:System.Net.Cookie" />。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cookie" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                    该 Cookie 已经在集合中，因此未能替换。
                </exception>
    </member>
    <member name="P:System.Net.HttpListenerResponse.StatusCode">
      <summary>
                    获取或设置返回给客户端的 HTTP 状态代码。
                </summary>
      <returns>
                    为请求的资源指定 HTTP 状态代码的 <see cref="T:System.Int32" /> 值。默认值为 <see cref="F:System.Net.HttpStatusCode.OK" />，指示服务器成功处理了客户端的请求并将请求的资源包括在响应正文中。
                </returns>
      <exception cref="T:System.ObjectDisposedException">
此对象已关闭。
                </exception>
      <exception cref="T:System.Net.ProtocolViolationException">
                    为 Set 操作指定的值无效。有效值介于 100 和 999 之间（包含 100 和 999）。
                </exception>
    </member>
    <member name="P:System.Net.HttpListenerResponse.StatusDescription">
      <summary>
                    获取或设置返回给客户端的 HTTP 状态代码的文本说明。
                </summary>
      <returns>
                    返回给客户端的 HTTP 状态代码的文本说明。默认值为 <see cref="P:System.Net.HttpListenerResponse.StatusCode" /> 属性值的 RFC 2616 说明，如果不存在 RFC 2616 说明，则为空字符串 ("")。
                </returns>
    </member>
    <member name="M:System.Net.HttpListenerResponse.System#IDisposable#Dispose">
      <summary>
                    释放由 <see cref="T:System.Net.HttpListenerResponse" /> 使用的所有资源。
                </summary>
    </member>
    <member name="T:System.Net.HttpRequestHeader">
      <summary>可以在客户端请求中指定的 HTTP 标头。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.CacheControl">
      <summary>Cache-Control 标头，指定请求/响应链上所有缓存控制机制必须服从的指令。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Connection">
      <summary>Connection 标头，指定特定连接需要的选项。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Date">
      <summary>Date 标头，指定开始创建请求的日期和时间。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.KeepAlive">
      <summary>Keep-Alive 标头，指定用以维护持久性连接的参数。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Pragma">
      <summary>Pragma 标头，指定可应用于请求/响应链上的任何代理的特定于实现的指令。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Trailer">
      <summary>Trailer 标头，指定标头字段显示在以 chunked 传输编码方式编码的消息的尾部。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.TransferEncoding">
      <summary>Transfer-Encoding 标头，指定对消息正文应用的转换的类型（如果有）。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Upgrade">
      <summary>Upgrade 标头，指定客户端支持的附加通信协议。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Via">
      <summary>Via 标头，指定网关和代理程序要使用的中间协议。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Warning">
      <summary>Warning 标头，指定关于可能未在消息中反映的消息的状态或转换的附加信息。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Allow">
      <summary>Allow 标头，指定支持的 HTTP 方法集。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.ContentLength">
      <summary>Content-Length 标头，指定伴随正文数据的长度（以字节为单位）。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.ContentType">
      <summary>Content-Type 标头，指定伴随正文数据的 MIME 类型。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.ContentEncoding">
      <summary>Content-Encoding 标头，指定已应用于伴随正文数据的编码。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.ContentLanguage">
      <summary>Content-Langauge 标头，指定伴随正文数据的自然语言。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.ContentLocation">
      <summary>Content-Location 标头，指定可从其中获得伴随正文的 URI。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.ContentMd5">
      <summary>Content-MD5 标头，指定伴随正文数据的 MD5 摘要，用于提供端到端消息完整性检查。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.ContentRange">
      <summary>Content-Range 标头，指定在完整正文中应用伴随部分正文数据的位置。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Expires">
      <summary>Expires 标头，指定日期和时间，在此之后伴随的正文数据应视为陈旧的。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.LastModified">
      <summary>Last-Modified 标头，指定上次修改伴随的正文数据的日期和时间。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Accept">
      <summary>Accept 标头，指定响应可接受的 MIME 类型。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.AcceptCharset">
      <summary>Accept-Charset 标头，指定响应可接受的字符集。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.AcceptEncoding">
      <summary>Accept-Encoding 标头，指定响应可接受的内容编码。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.AcceptLanguage">
      <summary>Accept-Langauge 标头，指定响应首选的自然语言。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Authorization">
      <summary>Authorization 标头，指定客户端为向服务器验证自身身份而出示的凭据。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Cookie">
      <summary>Cookie 标头，指定向服务器提供的 Cookie 数据。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Expect">
      <summary>Expect 标头，指定客户端要求的特定服务器行为。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.From">
      <summary>From 标头，指定控制请求用户代理的用户的 Internet 电子邮件地址。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Host">
      <summary>Host 标头，指定所请求资源的主机名和端口号。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.IfMatch">
      <summary>If-Match 标头，指定仅当客户端的指示资源的缓存副本是最新的时，才执行请求的操作。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.IfModifiedSince">
      <summary>If-Modified-Since 标头，指定仅当自指示的数据和时间之后修改了请求的资源时，才执行请求的操作。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.IfNoneMatch">
      <summary>If-None-Match 标头，指定仅当客户端的指示资源的缓存副本都不是最新的时，才执行请求的操作。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.IfRange">
      <summary>If-Range 标头，指定如果客户端的缓存副本是最新的，仅发送指定范围的请求资源。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.IfUnmodifiedSince">
      <summary>If-Unmodified-Since 标头，指定仅当自指示的日期和时间之后修改了请求的资源时，才执行请求的操作。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.MaxForwards">
      <summary>Max-Forwards 标头，指定一个整数，表示此请求还可转发的次数。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.ProxyAuthorization">
      <summary>Proxy-Authorization 标头，指定客户端为向代理验证自身身份而出示的凭据。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Referer">
      <summary>Referer 标头，指定从中获得请求 URI 的资源的 URI。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Range">
      <summary>Range 标头，指定代替整个响应返回的客户端请求的响应的子范围。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Te">
      <summary>TE 标头，指定响应可接受的传输编码方式。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Translate">
      <summary>Translate 标头，与 WebDAV 功能一起使用的 HTTP 规范的 Microsoft 扩展。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.UserAgent">
      <summary>User-Agent 标头，指定有关客户端代理的信息。</summary>
    </member>
    <member name="T:System.Net.HttpResponseHeader">
      <summary>可以在服务器响应中指定的 HTTP 标头。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.CacheControl">
      <summary>Cache-Control 标头，指定请求/响应链上所有缓存机制必须服从的缓存指令。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.Connection">
      <summary>Connection 标头，指定特定连接需要的选项。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.Date">
      <summary>Date 标头，指定响应产生的日期和时间。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.KeepAlive">
      <summary>Keep-Alive 标头，指定用于维护持久连接的参数。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.Pragma">
      <summary>Pragma 标头，指定可应用于请求/响应链上的任何代理的特定于实现的指令。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.Trailer">
      <summary>Trailer 标头，指定指示的标头字段在消息（使用分块传输编码方法进行编码）的尾部显示。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.TransferEncoding">
      <summary>Transfer-Encoding 标头，指定对消息正文应用哪种类型的转换（如果有）。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.Upgrade">
      <summary>Upgrade 标头，指定客户端支持的附加通信协议。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.Via">
      <summary>Via 标头，指定网关和代理程序要使用的中间协议。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.Warning">
      <summary>Warning 标头，指定关于可能未在消息中反映的消息的状态或转换的附加信息。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.Allow">
      <summary>Allow 标头，指定支持的 HTTP 方法集。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.ContentLength">
      <summary>Content-Length 标头，指定伴随正文数据的长度（以字节为单位）。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.ContentType">
      <summary>Content-Type 标头，指定伴随正文数据的 MIME 类型。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.ContentEncoding">
      <summary>Content-Encoding 标头，指定已应用于伴随正文数据的编码。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.ContentLanguage">
      <summary>Content-Langauge 标头，指定自然语言或伴随正文数据的语言。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.ContentLocation">
      <summary>Content-Location 标头，指定可以从中获取伴随正文的 URI。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.ContentMd5">
      <summary>Content-MD5 标头，指定伴随正文数据的 MD5 摘要，用于提供端到端消息完整性检查。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.ContentRange">
      <summary>Range 标头，指定客户端请求返回的响应的单个或多个子范围来代替整个响应。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.Expires">
      <summary>Expires 标头，指定日期和时间，在此之后伴随的正文数据应视为陈旧的。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.LastModified">
      <summary>Last-Modified 标头，指定上次修改伴随的正文数据的日期和时间。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.AcceptRanges">
      <summary>Accept-Ranges 标头，指定服务器接受的范围。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.Age">
      <summary>Age 标头，指定自起始服务器生成响应以来的时间长度（以秒为单位）。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.ETag">
      <summary>Etag 标头，指定请求的变量的当前值。 </summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.Location">
      <summary>Location 标头，指定为获取请求的资源而将客户端重定向到的 URI。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.ProxyAuthenticate">
      <summary>Proxy-Authenticate 标头，指定客户端必须对代理验证其自身。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.RetryAfter">
      <summary>Retry-After 标头，指定某个时间（以秒为单位）或日期和时间，在此时间之后客户端可以重试其请求。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.Server">
      <summary>Server 标头，指定关于起始服务器代理的信息。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.SetCookie">
      <summary>Set-Cookie 标头，指定提供给客户端的 Cookie 数据。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.Vary">
      <summary>Vary 标头，指定用于确定缓存的响应是否为新响应的请求标头。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.WwwAuthenticate">
      <summary>WWW-Authenticate 标头，指定客户端必须对服务器验证其自身。</summary>
    </member>
    <member name="T:System.Net.HttpStatusCode">
      <summary>包含为 HTTP 定义的状态代码的值。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Continue">
      <summary>等效于 HTTP 状态 100。<see cref="F:System.Net.HttpStatusCode.Continue" /> 指示客户端可能继续其请求。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.SwitchingProtocols">
      <summary>等效于 HTTP 状态 101。<see cref="F:System.Net.HttpStatusCode.SwitchingProtocols" /> 指示正在更改协议版本或协议。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.OK">
      <summary>等效于 HTTP 状态 200。<see cref="F:System.Net.HttpStatusCode.OK" /> 指示请求成功，且请求的信息包含在响应中。这是最常接收的状态代码。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Created">
      <summary>等效于 HTTP 状态 201。<see cref="F:System.Net.HttpStatusCode.Created" /> 指示请求导致在响应被发送前创建新资源。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Accepted">
      <summary>等效于 HTTP 状态 202。<see cref="F:System.Net.HttpStatusCode.Accepted" /> 指示请求已被接受做进一步处理。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.NonAuthoritativeInformation">
      <summary>等效于 HTTP 状态 203。<see cref="F:System.Net.HttpStatusCode.NonAuthoritativeInformation" /> 指示返回的元信息来自缓存副本而不是原始服务器，因此可能不正确。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.NoContent">
      <summary>等效于 HTTP 状态 204。<see cref="F:System.Net.HttpStatusCode.NoContent" /> 指示已成功处理请求并且响应已被设定为无内容。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.ResetContent">
      <summary>等效于 HTTP 状态 205。<see cref="F:System.Net.HttpStatusCode.ResetContent" /> 指示客户端应重置（或重新加载）当前资源。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.PartialContent">
      <summary>等效于 HTTP 状态 206。<see cref="F:System.Net.HttpStatusCode.PartialContent" /> 指示响应是包括字节范围的 GET 请求所请求的部分响应。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.MultipleChoices">
      <summary>等效于 HTTP 状态 300。<see cref="F:System.Net.HttpStatusCode.MultipleChoices" /> 指示请求的信息有多种表示形式。默认操作是将此状态视为重定向，并遵循与此响应关联的 Location 头的内容。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Ambiguous">
      <summary>等效于 HTTP 状态 300。<see cref="F:System.Net.HttpStatusCode.Ambiguous" /> 指示请求的信息有多种表示形式。默认操作是将此状态视为重定向，并遵循与此响应关联的 Location 头的内容。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.MovedPermanently">
      <summary>等效于 HTTP 状态 301。<see cref="F:System.Net.HttpStatusCode.MovedPermanently" /> 指示请求的信息已移到 Location 头中指定的 URI 处。接收到此状态时的默认操作为遵循与响应关联的 Location 头。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Moved">
      <summary>等效于 HTTP 状态 301。<see cref="F:System.Net.HttpStatusCode.Moved" /> 指示请求的信息已移到 Location 头中指定的 URI 处。接收到此状态时的默认操作为遵循与响应关联的 Location 头。原始请求方法为 POST 时，重定向的请求将使用 GET 方法。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Found">
      <summary>等效于 HTTP 状态 302。<see cref="F:System.Net.HttpStatusCode.Found" /> 指示请求的信息位于 Location 头中指定的 URI 处。接收到此状态时的默认操作为遵循与响应关联的 Location 头。原始请求方法为 POST 时，重定向的请求将使用 GET 方法。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Redirect">
      <summary>等效于 HTTP 状态 302。<see cref="F:System.Net.HttpStatusCode.Redirect" /> 指示请求的信息位于 Location 头中指定的 URI 处。接收到此状态时的默认操作为遵循与响应关联的 Location 头。原始请求方法为 POST 时，重定向的请求将使用 GET 方法。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.SeeOther">
      <summary>等效于 HTTP 状态 303。作为 POST 的结果，<see cref="F:System.Net.HttpStatusCode.SeeOther" /> 将客户端自动重定向到 Location 头中指定的 URI。用 GET 生成对 Location 头所指定的资源的请求。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.RedirectMethod">
      <summary>等效于 HTTP 状态 303。作为 POST 的结果，<see cref="F:System.Net.HttpStatusCode.RedirectMethod" /> 将客户端自动重定向到 Location 头中指定的 URI。用 GET 生成对 Location 头所指定的资源的请求。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.NotModified">
      <summary>等效于 HTTP 状态 304。<see cref="F:System.Net.HttpStatusCode.NotModified" /> 指示客户端的缓存副本是最新的。未传输此资源的内容。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.UseProxy">
      <summary>等效于 HTTP 状态 305。<see cref="F:System.Net.HttpStatusCode.UseProxy" /> 指示请求应使用位于 Location 头中指定的 URI 的代理服务器。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Unused">
      <summary>等效于 HTTP 状态 306。<see cref="F:System.Net.HttpStatusCode.Unused" /> 是未完全指定的 HTTP/1.1 规范的建议扩展。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.TemporaryRedirect">
      <summary>等效于 HTTP 状态 307。<see cref="F:System.Net.HttpStatusCode.TemporaryRedirect" /> 指示请求信息位于 Location 头中指定的 URI 处。接收到此状态时的默认操作为遵循与响应关联的 Location 头。原始请求方法为 POST 时，重定向的请求还将使用 POST 方法。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.RedirectKeepVerb">
      <summary>等效于 HTTP 状态 307。<see cref="F:System.Net.HttpStatusCode.RedirectKeepVerb" /> 指示请求信息位于 Location 头中指定的 URI 处。接收到此状态时的默认操作为遵循与响应关联的 Location 头。原始请求方法为 POST 时，重定向的请求还将使用 POST 方法。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.BadRequest">
      <summary>等效于 HTTP 状态 400。<see cref="F:System.Net.HttpStatusCode.BadRequest" /> 指示服务器未能识别请求。如果没有其他适用的错误，或者如果不知道准确的错误或错误没有自己的错误代码，则发送 <see cref="F:System.Net.HttpStatusCode.BadRequest" />。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Unauthorized">
      <summary>等效于 HTTP 状态 401。<see cref="F:System.Net.HttpStatusCode.Unauthorized" /> 指示请求的资源要求身份验证。WWW-Authenticate 头包含如何执行身份验证的详细信息。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.PaymentRequired">
      <summary>等效于 HTTP 状态 402。保留 <see cref="F:System.Net.HttpStatusCode.PaymentRequired" /> 以供将来使用。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Forbidden">
      <summary>等效于 HTTP 状态 403。<see cref="F:System.Net.HttpStatusCode.Forbidden" /> 指示服务器拒绝满足请求。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.NotFound">
      <summary>等效于 HTTP 状态 404。<see cref="F:System.Net.HttpStatusCode.NotFound" /> 指示请求的资源不在服务器上。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.MethodNotAllowed">
      <summary>等效于 HTTP 状态 405。<see cref="F:System.Net.HttpStatusCode.MethodNotAllowed" /> 指示请求的资源上不允许请求方法（POST 或 GET）。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.NotAcceptable">
      <summary>等效于 HTTP 状态 406。<see cref="F:System.Net.HttpStatusCode.NotAcceptable" /> 指示客户端已用 Accept 头指示将不接受资源的任何可用表示形式。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.ProxyAuthenticationRequired">
      <summary>等效于 HTTP 状态 407。<see cref="F:System.Net.HttpStatusCode.ProxyAuthenticationRequired" /> 指示请求的代理要求身份验证。Proxy-authenticate 头包含如何执行身份验证的详细信息。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.RequestTimeout">
      <summary>等效于 HTTP 状态 408。<see cref="F:System.Net.HttpStatusCode.RequestTimeout" /> 指示客户端没有在服务器期望请求的时间内发送请求。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Conflict">
      <summary>等效于 HTTP 状态 409。<see cref="F:System.Net.HttpStatusCode.Conflict" /> 指示由于服务器上的冲突而未能执行请求。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Gone">
      <summary>等效于 HTTP 状态 410。<see cref="F:System.Net.HttpStatusCode.Gone" /> 指示请求的资源不再可用。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.LengthRequired">
      <summary>等效于 HTTP 状态 411。<see cref="F:System.Net.HttpStatusCode.LengthRequired" /> 指示缺少必需的 Content-length 头。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.PreconditionFailed">
      <summary>等效于 HTTP 状态 412。<see cref="F:System.Net.HttpStatusCode.PreconditionFailed" /> 指示为此请求设置的条件失败，且无法执行此请求。条件是用条件请求标头（如 If-Match、If-None-Match 或 If-Unmodified-Since）设置的。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.RequestEntityTooLarge">
      <summary>等效于 HTTP 状态 413。<see cref="F:System.Net.HttpStatusCode.RequestEntityTooLarge" /> 指示请求太大，服务器无法处理。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.RequestUriTooLong">
      <summary>等效于 HTTP 状态 414。<see cref="F:System.Net.HttpStatusCode.RequestUriTooLong" /> 指示 URI 太长。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.UnsupportedMediaType">
      <summary>等效于 HTTP 状态 415。<see cref="F:System.Net.HttpStatusCode.UnsupportedMediaType" /> 指示请求是不支持的类型。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.RequestedRangeNotSatisfiable">
      <summary>等效于 HTTP 状态 416。<see cref="F:System.Net.HttpStatusCode.RequestedRangeNotSatisfiable" /> 指示无法返回从资源请求的数据范围，因为范围的开头在资源的开头之前，或因为范围的结尾在资源的结尾之后。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.ExpectationFailed">
      <summary>等效于 HTTP 状态 417。<see cref="F:System.Net.HttpStatusCode.ExpectationFailed" /> 指示服务器未能符合 Expect 头中给定的预期值。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.InternalServerError">
      <summary>等效于 HTTP 状态 500。<see cref="F:System.Net.HttpStatusCode.InternalServerError" /> 指示服务器上发生了一般错误。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.NotImplemented">
      <summary>等效于 HTTP 状态 501。<see cref="F:System.Net.HttpStatusCode.NotImplemented" /> 指示服务器不支持请求的函数。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.BadGateway">
      <summary>等效于 HTTP 状态 502。<see cref="F:System.Net.HttpStatusCode.BadGateway" /> 指示中间代理服务器从另一代理或原始服务器接收到错误响应。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.ServiceUnavailable">
      <summary>等效于 HTTP 状态 503。<see cref="F:System.Net.HttpStatusCode.ServiceUnavailable" /> 指示服务器暂时不可用，通常是由于过多加载或维护。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.GatewayTimeout">
      <summary>等效于 HTTP 状态 504。<see cref="F:System.Net.HttpStatusCode.GatewayTimeout" /> 指示中间代理服务器在等待来自另一个代理或原始服务器的响应时已超时。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.HttpVersionNotSupported">
      <summary>等效于 HTTP 状态 505。<see cref="F:System.Net.HttpStatusCode.HttpVersionNotSupported" /> 指示服务器不支持请求的 HTTP 版本。</summary>
    </member>
    <member name="T:System.Net.HttpVersion">
      <summary>
                    定义 <see cref="T:System.Net.HttpWebRequest" /> 和 <see cref="T:System.Net.HttpWebResponse" /> 类支持的 HTTP 版本号。
                </summary>
    </member>
    <member name="M:System.Net.HttpVersion.#ctor">
      <summary>
                    初始化 <see cref="T:System.Net.HttpVersion" /> 类的新实例。
                </summary>
    </member>
    <member name="F:System.Net.HttpVersion.Version10">
      <summary>
                    定义用于 HTTP 1.0 的 <see cref="T:System.Version" /> 实例。
                </summary>
    </member>
    <member name="F:System.Net.HttpVersion.Version11">
      <summary>
                    定义用于 HTTP 1.1 的 <see cref="T:System.Version" /> 实例。
                </summary>
    </member>
    <member name="T:System.Net.HttpWebRequest">
      <summary>
                    提供 <see cref="T:System.Net.WebRequest" /> 类的 HTTP 特定的实现。
                </summary>
    </member>
    <member name="M:System.Net.HttpWebRequest.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                    从 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的指定实例初始化 <see cref="T:System.Net.HttpWebRequest" /> 类的新实例。
                </summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，包含序列化新 <see cref="T:System.Net.HttpWebRequest" /> 对象所需的信息。
                </param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，包含与新 <see cref="T:System.Net.HttpWebRequest" /> 对象关联的序列化流的源和目标。
                </param>
    </member>
    <member name="M:System.Net.HttpWebRequest.Abort">
      <summary>
                    取消对 Internet 资源的请求。
                </summary>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.HttpWebRequest.Accept">
      <summary>
                    获取或设置 Accept HTTP 标头的值。
                </summary>
      <returns>Accept HTTP 标头的值。默认值为 null。
                </returns>
    </member>
    <member name="M:System.Net.HttpWebRequest.AddRange(System.Int32)">
      <summary>
                    向请求添加从请求数据的开始处或结束处的特定范围的字节范围标头。
                </summary>
      <param name="range">
                    范围的开始点或结束点。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="rangeSpecifier" /> 无效。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    未能添加范围标头。
                </exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.AddRange(System.Int32,System.Int32)">
      <summary>
                    向请求添加指定范围的字节范围标头。
                </summary>
      <param name="from">
                    开始发送数据的位置。
                </param>
      <param name="to">
                    停止发送数据的位置。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="rangeSpecifier" /> 无效。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="from" /> 大于<paramref name="to" />
                    - 或 -
                <paramref name="from" /> 或 <paramref name="to" /> 小于 0。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    未能添加范围标头。
                </exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.AddRange(System.String,System.Int32)">
      <summary>
                    向请求添加从请求数据的开始处或结束处的特定范围的范围标头。
                </summary>
      <param name="rangeSpecifier">
                    范围说明。
                </param>
      <param name="range">
                    范围的开始点或结束点。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rangeSpecifier" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="rangeSpecifier" /> 无效。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    未能添加范围标头。
                </exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.AddRange(System.String,System.Int32,System.Int32)">
      <summary>
                    向请求添加指定范围的范围标头。
                </summary>
      <param name="rangeSpecifier">
                    范围说明。
                </param>
      <param name="from">
                    开始发送数据的位置。
                </param>
      <param name="to">
                    停止发送数据的位置。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rangeSpecifier" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="from" /> 大于<paramref name="to" />
                    - 或 -
                <paramref name="from" /> 或 <paramref name="to" /> 小于 0。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="rangeSpecifier" /> 无效。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    未能添加范围标头。
                </exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.Address">
      <summary>
                    获取实际响应请求的 Internet 资源的统一资源标识符 (URI)。
                </summary>
      <returns>
        <see cref="T:System.Uri" />，标识实际响应请求的 Internet 资源。默认值是供 <see cref="M:System.Net.WebRequest.Create(System.String)" /> 方法用来初始化请求的 URI。
                </returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.AllowAutoRedirect">
      <summary>
                    获取或设置一个值，该值指示请求是否应跟随重定向响应。
                </summary>
      <returns>
                    如果请求应自动跟随 Internet 资源的重定向响应，则为 true，否则为 false。默认值为 true。
                </returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering">
      <summary>
                    获取或设置一个值，该值指示是否对发送到 Internet 资源的数据进行缓冲处理。
                </summary>
      <returns>true 允许对发送到 Internet 资源的数据进行缓冲处理，false 禁用缓冲处理。默认值为 true。
                </returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.AutomaticDecompression">
      <summary>
                    获取或设置所使用的解压缩类型。
                </summary>
      <returns>
                    一个 T:System.Net.DecompressionMethods 对象，该对象指示所使用的解压缩类型。
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    对象的当前状态不允许设置此属性。
                </exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)">
      <summary>
                    开始对用来写入数据的 <see cref="T:System.IO.Stream" /> 对象的异步请求。
                </summary>
      <returns>
                    引用该异步请求的 <see cref="T:System.IAsyncResult" />。
                </returns>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。
                </param>
      <param name="state">
                    此请求的状态对象。
                </param>
      <exception cref="T:System.Net.ProtocolViolationException">
        <see cref="P:System.Net.HttpWebRequest.Method" /> 属性为 GET 或 HEAD。
                
                    - 或 -
                <see cref="P:System.Net.HttpWebRequest.KeepAlive" /> 为 true，<see cref="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering" /> 为 false，<see cref="P:System.Net.HttpWebRequest.ContentLength" /> 为 -1，<see cref="P:System.Net.HttpWebRequest.SendChunked" /> 为 false，<see cref="P:System.Net.HttpWebRequest.Method" /> 为 POST 或 PUT。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    流正由上一个 <see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" /> 调用使用。
                
                    - 或 -
                <see cref="P:System.Net.HttpWebRequest.TransferEncoding" /> 被设置为一个值，并且 <see cref="P:System.Net.HttpWebRequest.SendChunked" /> 为 false。
                
                    - 或 -
                
                    线程池中的线程即将用完。
                </exception>
      <exception cref="T:System.NotSupportedException">
                    请求缓存验证程序指示对此请求的响应可从缓存中提供；但是写入数据的请求不得使用缓存。如果您正在使用错误实现的自定义缓存验证程序，则会发生此异常。
                </exception>
      <exception cref="T:System.Net.WebException">
        <see cref="M:System.Net.HttpWebRequest.Abort" /> 以前被调用过。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    在 .NET Compact Framework 应用程序中，未正确获得和关闭一个内容长度为零的请求流。有关处理内容长度为零的请求的更多信息，请参见 .NET Compact Framework 中的网络编程。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.DnsPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.WebPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)">
      <summary>
                    开始对 Internet 资源的异步请求。
                </summary>
      <returns>
                    引用对响应的异步请求的 <see cref="T:System.IAsyncResult" />。
                </returns>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托
                </param>
      <param name="state">
                    此请求的状态对象。
                </param>
      <exception cref="T:System.InvalidOperationException">
                    流正由上一个 <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> 调用使用
                
                    - 或 -
                <see cref="P:System.Net.HttpWebRequest.TransferEncoding" /> 被设置为一个值，并且 <see cref="P:System.Net.HttpWebRequest.SendChunked" /> 为 false。
                
                    - 或 -
                
                    线程池中的线程即将用完。
                </exception>
      <exception cref="T:System.Net.ProtocolViolationException">
        <see cref="P:System.Net.HttpWebRequest.Method" /> 为 GET 或 HEAD，且 <see cref="P:System.Net.HttpWebRequest.ContentLength" /> 大于零或 <see cref="P:System.Net.HttpWebRequest.SendChunked" /> 为 true。
                
                    - 或 -
                <see cref="P:System.Net.HttpWebRequest.KeepAlive" /> 为 true，<see cref="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering" /> 为 false，同时 <see cref="P:System.Net.HttpWebRequest.ContentLength" /> 为 -1，<see cref="P:System.Net.HttpWebRequest.SendChunked" /> 为 false，或者 <see cref="P:System.Net.HttpWebRequest.Method" /> 为 POST 或 PUT。
                </exception>
      <exception cref="T:System.Net.WebException">
        <see cref="M:System.Net.HttpWebRequest.Abort" /> 以前被调用过。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.DnsPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.WebPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.HttpWebRequest.ClientCertificates">
      <summary>
                    获取或设置与此请求关联的安全证书集合。
                </summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />，包含与此请求关联的安全证书。
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    为 Set 操作指定的值为 null。
                </exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.Connection">
      <summary>
                    获取或设置 Connection HTTP 标头的值。
                </summary>
      <returns>Connection HTTP 标头的值。默认值为 null。
                </returns>
      <exception cref="T:System.ArgumentException">
                    将 <see cref="P:System.Net.HttpWebRequest.Connection" /> 的值设置为 Keep-alive 或 Close。
                </exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.ConnectionGroupName">
      <summary>
                    获取或设置请求的连接组的名称。
                </summary>
      <returns>
                    该请求的连接组的名称。默认值为 null。
                </returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.ContentLength">
      <summary>
                    获取或设置 Content-lengthHTTP 标头。
                </summary>
      <returns>
                    要发送到 Internet 资源的数据的字节数。默认值为 -1，该值指示尚未设置该属性，并且没有要发送的请求数据。
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    已通过调用 <see cref="M:System.Net.HttpWebRequest.GetRequestStream" />、<see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />、<see cref="M:System.Net.HttpWebRequest.GetResponse" /> 或 <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> 方法启动了该请求。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    新的 <see cref="P:System.Net.HttpWebRequest.ContentLength" /> 值小于 0。
                </exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.ContentType">
      <summary>
                    获取或设置 Content-typeHTTP 标头的值。
                </summary>
      <returns>Content-typeHTTP 标头的值。默认值为 null。
                </returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.ContinueDelegate">
      <summary>
                    获取或设置当从 Internet 资源接收到 HTTP 100 持续响应时调用的委托方法。
                </summary>
      <returns>
                    实现回调方法的委托，该方法在从 Internet 资源返回 HTTP 持续响应时执行。默认值为 null。
                </returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.CookieContainer">
      <summary>
                    获取或设置与此请求关联的 cookie。
                </summary>
      <returns>
                    包含与此请求关联的 Cookie 的 <see cref="T:System.Net.CookieContainer" />。
                </returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.Credentials">
      <summary>
                    获取或设置请求的身份验证信息。
                </summary>
      <returns>
                    包含与该请求关联的身份验证凭据的 <see cref="T:System.Net.ICredentials" />。默认值为 null。
                </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.HttpWebRequest.DefaultCachePolicy">
      <summary>
                    获取或设置此请求的默认缓存策略。
                </summary>
      <returns>
                    一个 <see cref="T:System.Net.Cache.HttpRequestCachePolicy" />，它指定当没有其他策略适用时对此请求有效的缓存策略。
                </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
        <IPermission class="System.Net.WebPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.HttpWebRequest.DefaultMaximumErrorResponseLength">
      <summary>
                    获取或设置 HTTP 错误响应的默认最大长度。
                </summary>
      <returns>
                    一个整数，它表示 HTTP 错误响应的默认最大长度。
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    该值小于 0 并且不等于 -1。
                </exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength">
      <summary>
                    获取或设置 <see cref="P:System.Net.HttpWebRequest.MaximumResponseHeadersLength" /> 属性的默认值。
                </summary>
      <returns>
                    接收的响应标头的默认最大长度，以 KB（1024 字节）为单位。默认配置文件将此值设置为 64 KB。
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    该值不等于 -1 且小于 0。
                </exception>
      <PermissionSet>
        <IPermission class="System.Net.WebPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.HttpWebRequest.EndGetRequestStream(System.IAsyncResult)">
      <summary>
                    结束对用于写入数据的 <see cref="T:System.IO.Stream" /> 对象的异步请求。
                </summary>
      <returns>
                    用来写入请求数据的 <see cref="T:System.IO.Stream" />。
                </returns>
      <param name="asyncResult">
                    流的待定的请求。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。
                </exception>
      <exception cref="T:System.IO.IOException">
                    请求未完成，没有可用的流。
                </exception>
      <exception cref="T:System.ArgumentException">
                    当前实例没有从 <see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" /> 调用返回 <paramref name="asyncResult" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    以前使用 <paramref name="asyncResult" /> 调用过此方法。
                </exception>
      <exception cref="T:System.Net.WebException">
        <see cref="M:System.Net.HttpWebRequest.Abort" /> 以前被调用过。
                
                    - 或 -
                
                    处理请求时发生错误。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.HttpWebRequest.EndGetResponse(System.IAsyncResult)">
      <summary>
                    结束对 Internet 资源的异步请求。
                </summary>
      <returns>
                    包含来自 Internet 资源的响应的 <see cref="T:System.Net.WebResponse" />。
                </returns>
      <param name="asyncResult">
                    挂起的对响应的请求。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    以前使用 <paramref name="asyncResult" /> 调用过此方法。
                
                    - 或 -
                <see cref="P:System.Net.HttpWebRequest.ContentLength" /> 属性大于 0，但是数据尚未写入请求流。
                </exception>
      <exception cref="T:System.Net.WebException">
        <see cref="M:System.Net.HttpWebRequest.Abort" /> 以前被调用过。
                
                    - 或 -
                
                    处理请求时发生错误。
                </exception>
      <exception cref="T:System.ArgumentException">
                    当前实例没有从 <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> 调用返回 <paramref name="asyncResult" />。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.HttpWebRequest.Expect">
      <summary>
                    获取或设置 ExpectHTTP 标头的值。
                </summary>
      <returns>ExpectHTTP 标头的内容。默认值为 null。
                说明：此属性的值存储在 <see cref="T:System.Net.WebHeaderCollection" /> 中。如果设置了 WebHeaderCollection，则该属性值将丢失。</returns>
      <exception cref="T:System.ArgumentException">Expect 被设置为一个包含“100-continue”（作为子字符串）的字符串。
                </exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                    使用序列化目标对象所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。
                </summary>
      <param name="serializationInfo">
                    要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。
                </param>
      <param name="streamingContext">
                    用于指定该序列化的目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。
                </param>
    </member>
    <member name="M:System.Net.HttpWebRequest.GetRequestStream">
      <summary>
                    获取用于写入请求数据的 <see cref="T:System.IO.Stream" /> 对象。
                </summary>
      <returns>
                    用来写入请求数据的 <see cref="T:System.IO.Stream" />。
                </returns>
      <exception cref="T:System.Net.ProtocolViolationException">
        <see cref="P:System.Net.HttpWebRequest.Method" /> 属性为 GET 或 HEAD。
                
                    - 或 -
                <see cref="P:System.Net.HttpWebRequest.KeepAlive" /> 为 true，<see cref="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering" /> 为 false，<see cref="P:System.Net.HttpWebRequest.ContentLength" /> 为 -1，<see cref="P:System.Net.HttpWebRequest.SendChunked" /> 为 false，<see cref="P:System.Net.HttpWebRequest.Method" /> 为 POST 或 PUT。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.HttpWebRequest.GetRequestStream" /> 方法被调用多次。
                
                    - 或 -
                <see cref="P:System.Net.HttpWebRequest.TransferEncoding" /> 被设置为一个值，并且 <see cref="P:System.Net.HttpWebRequest.SendChunked" /> 为 false。
                </exception>
      <exception cref="T:System.NotSupportedException">
                    请求缓存验证程序指示对此请求的响应可从缓存中提供；但是写入数据的请求不得使用缓存。如果您正在使用错误实现的自定义缓存验证程序，则会发生此异常。
                </exception>
      <exception cref="T:System.Net.WebException">
        <see cref="M:System.Net.HttpWebRequest.Abort" /> 以前被调用过。
                
                    - 或 -
                
                    请求的超时期限到期。
                
                    - 或 -
                
                    处理请求时发生错误。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    在 .NET Compact Framework 应用程序中，未正确获得和关闭一个内容长度为零的请求流。有关处理内容长度为零的请求的更多信息，请参见 .NET Compact Framework 中的网络编程。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.DnsPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.WebPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.HttpWebRequest.GetResponse">
      <summary>
                    返回来自 Internet 资源的响应。
                </summary>
      <returns>
                    包含来自 Internet 资源的响应的 <see cref="T:System.Net.WebResponse" />。
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    流正由上一个 <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> 调用使用。
                
                    - 或 -
                <see cref="P:System.Net.HttpWebRequest.TransferEncoding" /> 被设置为一个值，并且 <see cref="P:System.Net.HttpWebRequest.SendChunked" /> 为 false。
                </exception>
      <exception cref="T:System.Net.ProtocolViolationException">
        <see cref="P:System.Net.HttpWebRequest.Method" /> 为 GET 或 HEAD，并且或者 <see cref="P:System.Net.HttpWebRequest.ContentLength" /> 大于或等于零，或者 <see cref="P:System.Net.HttpWebRequest.SendChunked" /> 为 true。
                
                    - 或 -
                <see cref="P:System.Net.HttpWebRequest.KeepAlive" /> 为 true，<see cref="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering" /> 为 false，<see cref="P:System.Net.HttpWebRequest.ContentLength" /> 为 -1，<see cref="P:System.Net.HttpWebRequest.SendChunked" /> 为 false，<see cref="P:System.Net.HttpWebRequest.Method" /> 为 POST 或 PUT。
                </exception>
      <exception cref="T:System.NotSupportedException">
                    请求缓存验证程序指示对此请求的响应可从缓存中提供；但是，此请求包含要发送到服务器的数据。发送数据的请求不得使用缓存。如果您正在使用错误实现的自定义缓存验证程序，则会发生此异常。
                </exception>
      <exception cref="T:System.Net.WebException">
        <see cref="M:System.Net.HttpWebRequest.Abort" /> 以前被调用过。
                
                    - 或 -
                
                    请求的超时期限到期。
                
                    - 或 -
                
                    处理请求时发生错误。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.DnsPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.WebPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.HttpWebRequest.HaveResponse">
      <summary>
                    获取一个值，该值指示是否收到了来自 Internet 资源的响应。
                </summary>
      <returns>
                    如果接收到了响应，则为 true，否则为 false。
                </returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.Headers">
      <summary>
                    指定构成 HTTP 标头的名称/值对的集合。
                </summary>
      <returns>
                    包含构成 HTTP 请求标头的名称/值对的 <see cref="T:System.Net.WebHeaderCollection" />。
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    已通过调用 <see cref="M:System.Net.HttpWebRequest.GetRequestStream" />、<see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />、<see cref="M:System.Net.HttpWebRequest.GetResponse" /> 或 <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> 方法启动了该请求。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.HttpWebRequest.IfModifiedSince">
      <summary>
                    获取或设置 If-Modified-Since HTTP 标头的值。
                </summary>
      <returns>
                    包含 If-Modified-SinceHTTP 标头内容的 <see cref="T:System.DateTime" />。默认值是当前日期和时间。
                </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.HttpWebRequest.KeepAlive">
      <summary>
                    获取或设置一个值，该值指示是否与 Internet 资源建立持久性连接。
                </summary>
      <returns>
                    如果对 Internet 资源的请求所包含的 Connection HTTP 标头带有 Keep-alive 这一值，则为 true；否则为 false。默认值为 true。
                </returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.MaximumAutomaticRedirections">
      <summary>
                    获取或设置请求将跟随的重定向的最大数目。
                </summary>
      <returns>
                    请求将跟随的重定向响应的最大数目。默认值为 50。
                </returns>
      <exception cref="T:System.ArgumentException">
                    该值被设置为 0 或更小。
                </exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.MaximumResponseHeadersLength">
      <summary>
                    获取或设置响应标题允许的最大长度。
                </summary>
      <returns>
                    响应标题的长度，以 KB（1024 字节）为单位。
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    该属性是在提交请求后设置的。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    该值小于 0 并且不等于 -1。
                </exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.MediaType">
      <summary>
                    获取或设置请求的媒体类型。
                </summary>
      <returns>
                    请求的媒体类型。默认值为 null。
                </returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.Method">
      <summary>
                    获取或设置请求的方法。
                </summary>
      <returns>
                    用于联系 Internet 资源的请求方法。默认值是 GET。
                </returns>
      <exception cref="T:System.ArgumentException">
                    未提供任何方法。
                
                    - 或 -
                
                    方法字符串包含无效字符。
                </exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.Pipelined">
      <summary>
                    获取或设置一个值，该值指示是否通过管线将请求传输到 Internet 资源。
                </summary>
      <returns>
                    如果通过管线传输请求，则为 true，否则为 false。默认值为 true。
                </returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.PreAuthenticate">
      <summary>
                    获取或设置一个值，该值指示是否随请求发送一个身份验证标头。
                </summary>
      <returns>true 表示在发生身份验证之后随请求一起发送 WWW-authenticate HTTP 标头；否则为 false。默认值为 false。
                </returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.ProtocolVersion">
      <summary>
                    获取或设置用于请求的 HTTP 版本。
                </summary>
      <returns>
                    用于请求的 HTTP 版本。默认值为 <see cref="F:System.Net.HttpVersion.Version11" />。
                </returns>
      <exception cref="T:System.ArgumentException">
                    HTTP 版本被设置为除 1.0 或 1.1 以外的值。
                </exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.Proxy">
      <summary>
                    获取或设置请求的代理信息。
                </summary>
      <returns>
                    用于代理请求的 <see cref="T:System.Net.IWebProxy" /> 对象。默认值通过调用 <see cref="P:System.Net.GlobalProxySelection.Select" /> 属性设置。
                </returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Net.HttpWebRequest.Proxy" /> 被设置为 null。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    已通过调用 <see cref="M:System.Net.HttpWebRequest.GetRequestStream" />、<see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />、<see cref="M:System.Net.HttpWebRequest.GetResponse" /> 或 <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> 启动了该请求。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                    调用方没有进行请求的操作的权限。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Net.WebPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.HttpWebRequest.ReadWriteTimeout">
      <summary>
                    获取或设置写入或读取流时的超时（以毫秒为单位）。
                </summary>
      <returns>
                    在写入超时或读取超时之前的毫秒数。默认值为 300,000 毫秒（5 分钟）。
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    已发送请求。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    为 Set 操作指定的值小于等于零，并且不等于 <see cref="F:System.Threading.Timeout.Infinite" /></exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.Referer">
      <summary>
                    获取或设置 RefererHTTP 标头的值。
                </summary>
      <returns>RefererHTTP 标头的值。默认值为 null。
                </returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.RequestUri">
      <summary>
                    获取请求的原始统一资源标识符 (URI)。
                </summary>
      <returns>
                    一个 <see cref="T:System.Uri" />，其中包含传递给 <see cref="M:System.Net.WebRequest.Create(System.String)" /> 方法的 Internet 资源的 URI。
                </returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.SendChunked">
      <summary>
                    获取或设置一个值，该值指示是否将数据分段发送到 Internet 资源。
                </summary>
      <returns>
                    如果为 true，则将数据分段发送到 Internet 资源；否则为 false。默认值为 false。
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    已通过调用 <see cref="M:System.Net.HttpWebRequest.GetRequestStream" />、<see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />、<see cref="M:System.Net.HttpWebRequest.GetResponse" /> 或 <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> 方法启动了该请求。
                </exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.ServicePoint">
      <summary>
                    获取用于请求的服务点。
                </summary>
      <returns>
                    表示与 Internet 资源的网络连接的 <see cref="T:System.Net.ServicePoint" />。
                </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.HttpWebRequest.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                    使用将目标对象序列化所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。
                </summary>
      <param name="serializationInfo">
                    要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。
                </param>
      <param name="streamingContext">
                    用于指定该序列化的目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。
                </param>
    </member>
    <member name="P:System.Net.HttpWebRequest.Timeout">
      <summary>
                    获取或设置 <see cref="M:System.Net.HttpWebRequest.GetResponse" /> 和 <see cref="M:System.Net.HttpWebRequest.GetRequestStream" /> 方法的超时值（以毫秒为单位）。
                </summary>
      <returns>
                    请求超时前等待的毫秒数。默认值为 100,000 毫秒（100 秒）。
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    指定的值小于零，并且不为 <see cref="F:System.Threading.Timeout.Infinite" />。
                </exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.TransferEncoding">
      <summary>
                    获取或设置 Transfer-encodingHTTP 标头的值。
                </summary>
      <returns>Transfer-encodingHTTP 标头的值。默认值为 null。
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    当 <see cref="P:System.Net.HttpWebRequest.SendChunked" /> 为 false 时设置 <see cref="P:System.Net.HttpWebRequest.TransferEncoding" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Net.HttpWebRequest.TransferEncoding" /> 被设置为值“Chunked”。
                </exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing">
      <summary>
                    获取或设置一个值，该值指示是否允许经过高速 NTLM 身份验证的连接共享。
                </summary>
      <returns>true 表示使经过身份验证的连接保持打开状态；否则为 false。
                </returns>
      <PermissionSet>
        <IPermission class="System.Net.WebPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.HttpWebRequest.UseDefaultCredentials">
      <summary>
                    获取或设置一个 <see cref="T:System.Boolean" /> 值，该值控制默认凭据是否随请求一起发送。
                </summary>
      <returns>
                    如果使用默认凭据，则为 true；否则为 false。默认值为 false。
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    您试图在该请求发送之后设置此属性。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="USERNAME" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.HttpWebRequest.UserAgent">
      <summary>
                    获取或设置 User-agentHTTP 标头的值。
                </summary>
      <returns>User-agentHTTP 标头的值。默认值为 null。
                说明：此属性的值存储在 <see cref="T:System.Net.WebHeaderCollection" /> 中。如果设置了 WebHeaderCollection，则该属性值将丢失。</returns>
    </member>
    <member name="T:System.Net.HttpWebResponse">
      <summary>
                    提供 <see cref="T:System.Net.WebResponse" /> 类的 HTTP 特定的实现。
                </summary>
    </member>
    <member name="M:System.Net.HttpWebResponse.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                    根据指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 实例初始化 <see cref="T:System.Net.HttpWebResponse" /> 类的新实例。
                </summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含序列化新的 <see cref="T:System.Net.HttpWebRequest" /> 所需的信息。
                </param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，包含与新的 <see cref="T:System.Net.HttpWebRequest" /> 关联的序列化流的源。
                </param>
    </member>
    <member name="P:System.Net.HttpWebResponse.CharacterSet">
      <summary>
                    获取响应的字符集。
                </summary>
      <returns>
                    一个字符串，包含响应的字符集。
                </returns>
      <exception cref="T:System.ObjectDisposedException">
已释放当前的实例。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.HttpWebResponse.Close">
      <summary>
                    关闭响应流。
                </summary>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.HttpWebResponse.ContentEncoding">
      <summary>
                    获取用于对响应体进行编码的方法。
                </summary>
      <returns>
                    一个字符串，描述用于对响应体进行编码的方法。
                </returns>
      <exception cref="T:System.ObjectDisposedException">
已释放当前的实例。
                </exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.ContentLength">
      <summary>
                    获取请求返回的内容的长度。
                </summary>
      <returns>
                    由请求所返回的字节数。内容长度不包括标头信息。
                </returns>
      <exception cref="T:System.ObjectDisposedException">
已释放当前的实例。
                </exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.ContentType">
      <summary>
                    获取响应的内容类型。
                </summary>
      <returns>
                    包含响应的内容类型的字符串。
                </returns>
      <exception cref="T:System.ObjectDisposedException">
已释放当前的实例。
                </exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.Cookies">
      <summary>
                    获取或设置与此响应关联的 Cookie。
                </summary>
      <returns>
        <see cref="T:System.Net.CookieCollection" />，包含与此响应关联的 Cookie。
                </returns>
      <exception cref="T:System.ObjectDisposedException">
已释放当前的实例。
                </exception>
    </member>
    <member name="M:System.Net.HttpWebResponse.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                    使用将目标对象序列化所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。
                </summary>
      <param name="serializationInfo">
                    要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。
                </param>
      <param name="streamingContext">
                    用于指定该序列化的目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。
                </param>
    </member>
    <member name="M:System.Net.HttpWebResponse.GetResponseHeader(System.String)">
      <summary>
                    获取与响应一起返回的标头的内容。
                </summary>
      <returns>
                    指定的标头的内容。
                </returns>
      <param name="headerName">
                    要返回的标头值。
                </param>
      <exception cref="T:System.ObjectDisposedException">
已释放当前的实例。
                </exception>
    </member>
    <member name="M:System.Net.HttpWebResponse.GetResponseStream">
      <summary>
                    获取流，该流用于读取来自服务器的响应的体。
                </summary>
      <returns>
                    一个 <see cref="T:System.IO.Stream" />，包含响应的体。
                </returns>
      <exception cref="T:System.Net.ProtocolViolationException">
                    没有响应流。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
已释放当前的实例。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.HttpWebResponse.Headers">
      <summary>
                    获取来自服务器的与此响应关联的标头。
                </summary>
      <returns>
                    一个 <see cref="T:System.Net.WebHeaderCollection" />，包含与响应一起返回的标头信息。
                </returns>
      <exception cref="T:System.ObjectDisposedException">
已释放当前的实例。
                </exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.IsMutuallyAuthenticated">
      <summary>
                    获取一个 <see cref="T:System.Boolean" /> 值，该值指示客户端和服务器是否都已经过身份验证。
                </summary>
      <returns>
                    如果发生了相互身份验证，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Net.HttpWebResponse.LastModified">
      <summary>
                    获取最后一次修改响应内容的日期和时间。
                </summary>
      <returns>
        <see cref="T:System.DateTime" />，包含修改响应内容的日期和时间。
                </returns>
      <exception cref="T:System.ObjectDisposedException">
已释放当前的实例。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.HttpWebResponse.Method">
      <summary>
                    获取用于返回响应的方法。
                </summary>
      <returns>
                    一个字符串，包含用于返回响应的 HTTP 方法。
                </returns>
      <exception cref="T:System.ObjectDisposedException">
已释放当前的实例。
                </exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.ProtocolVersion">
      <summary>
                    获取响应中使用的 HTTP 协议的版本。
                </summary>
      <returns>
                    一个 <see cref="T:System.Version" />，包含响应的 HTTP 协议版本。
                </returns>
      <exception cref="T:System.ObjectDisposedException">
已释放当前的实例。
                </exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.ResponseUri">
      <summary>
                    获取响应请求的 Internet 资源的 URI。
                </summary>
      <returns>
                    一个 <see cref="T:System.Uri" />，包含响应请求的 Internet 资源的 URI。
                </returns>
      <exception cref="T:System.ObjectDisposedException">
已释放当前的实例。
                </exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.Server">
      <summary>
                    获取发送响应的服务器的名称。
                </summary>
      <returns>
                    一个字符串，包含发送响应的服务器的名称。
                </returns>
      <exception cref="T:System.ObjectDisposedException">
已释放当前的实例。
                </exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.StatusCode">
      <summary>
                    获取响应的状态。
                </summary>
      <returns>
        <see cref="T:System.Net.HttpStatusCode" /> 值之一。
                </returns>
      <exception cref="T:System.ObjectDisposedException">
已释放当前的实例。
                </exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.StatusDescription">
      <summary>
                    获取与响应一起返回的状态说明。
                </summary>
      <returns>
                    一个字符串，描述响应的状态。
                </returns>
      <exception cref="T:System.ObjectDisposedException">
已释放当前的实例。
                </exception>
    </member>
    <member name="M:System.Net.HttpWebResponse.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                    将此实例序列化到指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象中。
                </summary>
      <param name="serializationInfo">
                    将把此 <see cref="T:System.Net.HttpWebResponse" /> 序列化到其中的对象。
                </param>
      <param name="streamingContext">
                    序列化的目标。
                </param>
    </member>
    <member name="T:System.Net.IAuthenticationModule">
      <summary>为 Web 客户端身份验证模块提供基身份验证接口。</summary>
    </member>
    <member name="M:System.Net.IAuthenticationModule.Authenticate(System.String,System.Net.WebRequest,System.Net.ICredentials)">
      <summary>返回 <see cref="T:System.Net.Authorization" /> 类的一个实例以响应来自服务器的身份验证质询。</summary>
      <returns>一个 <see cref="T:System.Net.Authorization" /> 实例，包含有关请求的授权消息；如果无法处理质询，则包含 null。</returns>
      <param name="challenge">服务器发送的身份验证质询。 </param>
      <param name="request">与质询关联的 <see cref="T:System.Net.WebRequest" /> 实例。 </param>
      <param name="credentials">与质询关联的凭据。 </param>
    </member>
    <member name="P:System.Net.IAuthenticationModule.AuthenticationType">
      <summary>获取此身份验证模块提供的身份验证类型。</summary>
      <returns>指示此身份验证模块提供的身份验证类型的字符串。</returns>
    </member>
    <member name="P:System.Net.IAuthenticationModule.CanPreAuthenticate">
      <summary>获取一个值，该值指示身份验证模块是否支持预身份验证。</summary>
      <returns>
如果授权模块支持预身份验证，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Net.IAuthenticationModule.PreAuthenticate(System.Net.WebRequest,System.Net.ICredentials)">
      <summary>返回 <see cref="T:System.Net.Authorization" /> 类的一个实例以响应对服务器的身份验证请求。</summary>
      <returns>包含有关请求的授权消息的 <see cref="T:System.Net.Authorization" /> 实例。</returns>
      <param name="request">与身份验证请求关联的 <see cref="T:System.Net.WebRequest" /> 实例。 </param>
      <param name="credentials">与身份验证请求关联的凭据。 </param>
    </member>
    <member name="T:System.Net.ICertificatePolicy">
      <summary>验证服务器证书。</summary>
    </member>
    <member name="M:System.Net.ICertificatePolicy.CheckValidationResult(System.Net.ServicePoint,System.Security.Cryptography.X509Certificates.X509Certificate,System.Net.WebRequest,System.Int32)">
      <summary>验证服务器证书。</summary>
      <returns>
如果应遵守此证书，则为 true；否则为 false。</returns>
      <param name="srvPoint">将使用此证书的 <see cref="T:System.Net.ServicePoint" />。 </param>
      <param name="certificate">要验证的证书。 </param>
      <param name="request">接收到此证书的请求。 </param>
      <param name="certificateProblem">使用此证书时遇到的问题。 </param>
    </member>
    <member name="T:System.Net.ICredentialPolicy">
      <summary>定义凭据策略，该凭据策略将用于使用 <see cref="T:System.Net.WebRequest" /> 及其派生类发出的资源请求。</summary>
    </member>
    <member name="M:System.Net.ICredentialPolicy.ShouldSendCredential(System.Uri,System.Net.WebRequest,System.Net.NetworkCredential,System.Net.IAuthenticationModule)">
      <summary>返回一个 <see cref="T:System.Boolean" />，该值指示客户端的凭据是否随使用 <see cref="T:System.Net.WebRequest" /> 类的实例发出的资源请求一起发送。</summary>
      <returns>
如果凭据随请求一起发送，则为 true；否则，为 false。</returns>
      <param name="challengeUri">将接收该请求的 <see cref="T:System.Uri" />。有关更多信息，请参见备注部分。</param>
      <param name="request">表示被请求的资源的 <see cref="T:System.Net.WebRequest" />。</param>
      <param name="credential">将随请求一起发送的 <see cref="T:System.Net.NetworkCredential" />（如果此方法返回 true）。 </param>
      <param name="authenticationModule">将执行身份验证的 <see cref="T:System.Net.IAuthenticationModule" />（如果要求身份验证）。</param>
    </member>
    <member name="T:System.Net.ICredentials">
      <summary>提供用于为 Web 客户端身份验证检索凭据的基身份验证接口。</summary>
    </member>
    <member name="M:System.Net.ICredentials.GetCredential(System.Uri,System.String)">
      <summary>返回与指定的 URI 关联的 <see cref="T:System.Net.NetworkCredential" /> 对象，以及身份验证类型。</summary>
      <returns>与指定的 URI 和身份验证类型关联的 <see cref="T:System.Net.NetworkCredential" />；如果没有可用的凭据，则为 null。</returns>
      <param name="uri">客户端为其提供身份验证的 <see cref="T:System.Uri" />。 </param>
      <param name="authType">
        <see cref="P:System.Net.IAuthenticationModule.AuthenticationType" /> 属性中定义的身份验证类型。 </param>
    </member>
    <member name="T:System.Net.ICredentialsByHost">
      <summary>提供用于检索主机、端口或身份验证类型的凭据的接口。</summary>
    </member>
    <member name="M:System.Net.ICredentialsByHost.GetCredential(System.String,System.Int32,System.String)">
      <summary>返回指定的主机、端口和身份验证协议的凭据。</summary>
      <returns>指定的主机、端口和身份验证协议的 <see cref="T:System.Net.NetworkCredential" />；如果指定的主机、端口和身份验证协议没有可用的凭据，则为 null。</returns>
      <param name="host">对客户端进行身份验证的主机。</param>
      <param name="port">客户端与之通信的 <paramref name="host " /> 上的端口。</param>
      <param name="authenticationType">身份验证协议。</param>
    </member>
    <member name="T:System.Net.IPAddress">
      <summary>提供网际协议 (IP) 地址。</summary>
    </member>
    <member name="M:System.Net.IPAddress.#ctor(System.Byte[])">
      <summary>用指定为 <see cref="T:System.Byte" /> 数组的地址初始化 <see cref="T:System.Net.IPAddress" /> 类的新实例。</summary>
      <param name="address">IP 地址的字节数组值。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。 </exception>
    </member>
    <member name="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)">
      <summary>用指定为 <see cref="T:System.Byte" /> 数组的地址和指定的范围标识符初始化 <see cref="T:System.Net.IPAddress" /> 类的一个新实例。</summary>
      <param name="address">IP 地址的字节数组值。 </param>
      <param name="scopeid">范围标识符的长值。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="scopeid" /> 小于 0 或 <paramref name="scopeid" /> 大于 0x00000000FFFFFFFF </exception>
    </member>
    <member name="M:System.Net.IPAddress.#ctor(System.Int64)">
      <summary>用指定为 <see cref="T:System.Int64" /> 的地址初始化 <see cref="T:System.Net.IPAddress" /> 类的新实例。</summary>
      <param name="newAddress">IP 地址的长值。例如，Big-Endian 格式的值 0x2414188f 可能为 IP 地址“143.24.20.36”。 </param>
    </member>
    <member name="P:System.Net.IPAddress.Address">
      <summary>网际协议 (IP) 地址。</summary>
      <returns>IP 地址的长值。</returns>
    </member>
    <member name="P:System.Net.IPAddress.AddressFamily">
      <summary>获取 IP 地址的地址族。</summary>
      <returns>对于 IPv4，返回 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" />；对于 IPv6，返回 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />。</returns>
    </member>
    <member name="F:System.Net.IPAddress.Any">
      <summary>提供一个 IP 地址，指示服务器应侦听所有网络接口上的客户端活动。此字段为只读。</summary>
    </member>
    <member name="F:System.Net.IPAddress.Broadcast">
      <summary>提供 IP 广播地址。此字段为只读。</summary>
    </member>
    <member name="M:System.Net.IPAddress.Equals(System.Object)">
      <summary>比较两个 IP 地址。</summary>
      <returns>
如果两个地址相等，则为 true；否则为 false。</returns>
      <param name="comparand">要与当前实例比较的 <see cref="T:System.Net.IPAddress" /> 实例。 </param>
    </member>
    <member name="M:System.Net.IPAddress.GetAddressBytes">
      <summary>以字节数组形式提供 <see cref="T:System.Net.IPAddress" /> 的副本。</summary>
      <returns>
        <see cref="T:System.Byte" /> 数组。</returns>
    </member>
    <member name="M:System.Net.IPAddress.GetHashCode">
      <summary>返回 IP 地址的哈希值。</summary>
      <returns>整数哈希值。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.IPAddress.HostToNetworkOrder(System.Int16)">
      <summary>将短值由主机字节顺序转换为网络字节顺序。</summary>
      <returns>以网络字节顺序表示的短值。</returns>
      <param name="host">以主机字节顺序表示的要转换的数字。 </param>
    </member>
    <member name="M:System.Net.IPAddress.HostToNetworkOrder(System.Int32)">
      <summary>将整数值由主机字节顺序转换为网络字节顺序。</summary>
      <returns>以网络字节顺序表示的整数值。</returns>
      <param name="host">以主机字节顺序表示的要转换的数字。 </param>
    </member>
    <member name="M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)">
      <summary>将长值由主机字节顺序转换为网络字节顺序。</summary>
      <returns>以网络字节顺序表示的长值。</returns>
      <param name="host">以主机字节顺序表示的要转换的数字。 </param>
    </member>
    <member name="F:System.Net.IPAddress.IPv6Any">
      <summary>
        <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> 方法使用 <see cref="F:System.Net.IPAddress.IPv6Any" /> 字段指示 <see cref="T:System.Net.Sockets.Socket" /> 必须侦听所有网络接口上的客户端活动。</summary>
    </member>
    <member name="F:System.Net.IPAddress.IPv6Loopback">
      <summary>提供 IP 环回地址。此属性为只读。</summary>
    </member>
    <member name="F:System.Net.IPAddress.IPv6None">
      <summary>提供指示不应使用任何网络接口的 IP 地址。此属性为只读。</summary>
    </member>
    <member name="P:System.Net.IPAddress.IsIPv6LinkLocal">
      <summary>获取地址是否为 IPv6 链接本地地址。</summary>
      <returns>
如果 IP 地址为 IPv6 链接本地地址，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.IPAddress.IsIPv6Multicast">
      <summary>获取地址是否为 IPv6 多路广播全局地址。</summary>
      <returns>
如果 IP 地址为 IPv6 多路广播全局地址，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.IPAddress.IsIPv6SiteLocal">
      <summary>获取地址是否为 IPv6 站点本地地址。</summary>
      <returns>
如果 IP 地址为 IPv6 站点本地地址，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Net.IPAddress.IsLoopback(System.Net.IPAddress)">
      <summary>指示指定的 IP 地址是否是环回地址。</summary>
      <returns>
如果 <paramref name="address" /> 是环回地址，则为 true；否则为 false。</returns>
      <param name="address">IP 地址。 </param>
    </member>
    <member name="F:System.Net.IPAddress.Loopback">
      <summary>提供 IP 环回地址。此字段为只读。</summary>
    </member>
    <member name="M:System.Net.IPAddress.NetworkToHostOrder(System.Int16)">
      <summary>将短值由网络字节顺序转换为主机字节顺序。</summary>
      <returns>以主机字节顺序表示的短值。</returns>
      <param name="network">以网络字节顺序表示的要转换的数字。 </param>
    </member>
    <member name="M:System.Net.IPAddress.NetworkToHostOrder(System.Int32)">
      <summary>将整数值由网络字节顺序转换为主机字节顺序。</summary>
      <returns>以主机字节顺序表示的整数值。</returns>
      <param name="network">以网络字节顺序表示的要转换的数字。 </param>
    </member>
    <member name="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)">
      <summary>将长值由网络字节顺序转换为主机字节顺序。</summary>
      <returns>以主机字节顺序表示的长值。</returns>
      <param name="network">以网络字节顺序表示的要转换的数字。 </param>
    </member>
    <member name="F:System.Net.IPAddress.None">
      <summary>提供指示不应使用任何网络接口的 IP 地址。此字段为只读。</summary>
    </member>
    <member name="M:System.Net.IPAddress.Parse(System.String)">
      <summary>将 IP 地址字符串转换为 <see cref="T:System.Net.IPAddress" /> 实例。</summary>
      <returns>一个 <see cref="T:System.Net.IPAddress" /> 实例。</returns>
      <param name="ipString">包含 IP 地址（IPv4 使用以点分隔的四部分表示法，IPv6 使用冒号十六进制表示法）的字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ipString" /> 为 null。 </exception>
      <exception cref="T:System.FormatException">
        <paramref name="ipString" /> 不是有效的 IP 地址。 </exception>
    </member>
    <member name="P:System.Net.IPAddress.ScopeId">
      <summary>获取或设置 IPv6 地址范围标识符。</summary>
      <returns>指定地址范围的长整数。</returns>
      <exception cref="T:System.Net.Sockets.SocketException">AddressFamily = InterNetwork. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="scopeId" /> &lt; 0- 或 -<paramref name="scopeId" /> 大于 0x00000000FFFFFFFF  </exception>
    </member>
    <member name="M:System.Net.IPAddress.ToString">
      <summary>将 Internet 地址转换为标准表示法。</summary>
      <returns>包含该 IP 地址（IPv4 使用的以点分隔的四部分表示法，IPv6 使用的冒号十六进制表示法）的字符串。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)">
      <summary>确定字符串是否为有效的 IP 地址。</summary>
      <returns>
如果 <paramref name="ipString" /> 是有效 IP 地址，则为 true；否则为 false。</returns>
      <param name="ipString">要验证的字符串。</param>
      <param name="address">字符串的 <see cref="T:System.Net.IPAddress" /> 版本。</param>
    </member>
    <member name="T:System.Net.IPEndPoint">
      <summary>
                    将网络端点表示为 IP 地址和端口号。
                </summary>
    </member>
    <member name="M:System.Net.IPEndPoint.#ctor(System.Int64,System.Int32)">
      <summary>
                    用指定的地址和端口号初始化 <see cref="T:System.Net.IPEndPoint" /> 类的新实例。
                </summary>
      <param name="address">
                    Internet 主机的 IP 地址。
                </param>
      <param name="port">
                    与 <paramref name="address" /> 关联的端口号，或为 0 以指定任何可用的端口。<paramref name="port" /> 以主机顺序排号。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 小于 <see cref="F:System.Net.IPEndPoint.MinPort" />。
                
                    - 或 -
                <paramref name="port" /> 大于 <see cref="F:System.Net.IPEndPoint.MaxPort" />。
                
                    - 或 -
                <paramref name="address" /> 小于 0 或大于 0x00000000FFFFFFFF。
                </exception>
    </member>
    <member name="M:System.Net.IPEndPoint.#ctor(System.Net.IPAddress,System.Int32)">
      <summary>
                    用指定的地址和端口号初始化 <see cref="T:System.Net.IPEndPoint" /> 类的新实例。
                </summary>
      <param name="address">
                    一个 <see cref="T:System.Net.IPAddress" />。
                </param>
      <param name="port">
                    与 <paramref name="address" /> 关联的端口号，或为 0 以指定任何可用的端口。<paramref name="port" /> 以主机顺序排号。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 小于 <see cref="F:System.Net.IPEndPoint.MinPort" />。
                
                    - 或 -
                <paramref name="port" /> 大于 <see cref="F:System.Net.IPEndPoint.MaxPort" />。
                
                    - 或 -
                <paramref name="address" /> 小于 0 或大于 0x00000000FFFFFFFF。
                </exception>
    </member>
    <member name="P:System.Net.IPEndPoint.Address">
      <summary>
                    获取或设置终结点的 IP 地址。
                </summary>
      <returns>
                    包含终结点的 IP 地址的 <see cref="T:System.Net.IPAddress" /> 实例。
                </returns>
    </member>
    <member name="P:System.Net.IPEndPoint.AddressFamily">
      <summary>
                    获取网际协议 (IP) 地址族。
                </summary>
      <returns>
                    返回 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" />。
                </returns>
    </member>
    <member name="M:System.Net.IPEndPoint.Create(System.Net.SocketAddress)">
      <summary>
                    从套接字地址创建终结点。
                </summary>
      <returns>
                    使用指定套接字地址的 <see cref="T:System.Net.EndPoint" /> 实例。
                </returns>
      <param name="socketAddress">
                    用于终结点的 <see cref="T:System.Net.SocketAddress" />。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="socketAddress" /> 的 AddressFamily 与当前实例的 AddressFamily 不相等。
                
                    - 或 -
                <paramref name="socketAddress" />.Size 小于 8。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.IPEndPoint.Equals(System.Object)">
      <summary>
                    确定指定的 <see cref="T:System.Object" /> 是否等同于当前的 <see cref="T:System.Net.IPEndPoint" /> 实例。
                </summary>
      <returns>
                    如果指定的 <see cref="T:System.Object" /> 等于当前的 <see cref="T:System.Object" />，则为 true；否则为 false。
                </returns>
      <param name="comparand"></param>
    </member>
    <member name="M:System.Net.IPEndPoint.GetHashCode">
      <summary>
                    返回 <see cref="T:System.Net.IPEndPoint" /> 实例的哈希值。
                </summary>
      <returns>
整数哈希值。
                </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="F:System.Net.IPEndPoint.MaxPort">
      <summary>
                    指定可以分配给 <see cref="P:System.Net.IPEndPoint.Port" /> 属性的最大值。MaxPort 值设置为 0x0000FFFF。此字段为只读。
                </summary>
    </member>
    <member name="F:System.Net.IPEndPoint.MinPort">
      <summary>
                    指定可以分配给 <see cref="P:System.Net.IPEndPoint.Port" /> 属性的最小值。此字段为只读。
                </summary>
    </member>
    <member name="P:System.Net.IPEndPoint.Port">
      <summary>
                    获取或设置终结点的端口号。
                </summary>
      <returns>
                    介于 <see cref="F:System.Net.IPEndPoint.MinPort" /> 到 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 之间的整数值，指示终结点的端口号。
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    为设置操作指定的值小于 <see cref="F:System.Net.IPEndPoint.MinPort" /> 或大于 <see cref="F:System.Net.IPEndPoint.MaxPort" />。
                </exception>
    </member>
    <member name="M:System.Net.IPEndPoint.Serialize">
      <summary>
                    将终结点信息序列化为 <see cref="T:System.Net.SocketAddress" /> 实例。
                </summary>
      <returns>
                    一个 <see cref="T:System.Net.SocketAddress" /> 实例，包含终结点的套接字地址。
                </returns>
    </member>
    <member name="M:System.Net.IPEndPoint.ToString">
      <summary>
                    返回指定终结点的 IP 地址和端口号。
                </summary>
      <returns>
                    包含指定终结点（例如，192.168.1.2:80）的 IP 地址和端口号的字符串。
                </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="T:System.Net.IPHostEntry">
      <summary>
                    为 Internet 主机地址信息提供容器类。
                </summary>
    </member>
    <member name="M:System.Net.IPHostEntry.#ctor">
      <summary>
                    初始化 <see cref="T:System.Net.IPHostEntry" /> 类的新实例。
                </summary>
    </member>
    <member name="P:System.Net.IPHostEntry.AddressList">
      <summary>
                    获取或设置与主机关联的 IP 地址列表。
                </summary>
      <returns>
                    一个 <see cref="T:System.Net.IPAddress" /> 类型的数组，包含解析为 <see cref="P:System.Net.IPHostEntry.Aliases" /> 属性中包含的主机名的 IP 地址。
                </returns>
    </member>
    <member name="P:System.Net.IPHostEntry.Aliases">
      <summary>
                    获取或设置与主机关联的别名列表。
                </summary>
      <returns>
                    一组字符串，包含解析为 <see cref="P:System.Net.IPHostEntry.AddressList" /> 属性中的 IP 地址的 DNS 名称。
                </returns>
    </member>
    <member name="P:System.Net.IPHostEntry.HostName">
      <summary>
                    获取或设置主机的 DNS 名称。
                </summary>
      <returns>
                    包含服务器的主要主机名的字符串。
                </returns>
    </member>
    <member name="T:System.Net.IWebProxy">
      <summary>提供基接口以实现对 <see cref="T:System.Net.WebRequest" /> 类的代理访问。</summary>
    </member>
    <member name="P:System.Net.IWebProxy.Credentials">
      <summary>要提交给代理服务器进行身份验证的凭据。</summary>
      <returns>
        <see cref="T:System.Net.ICredentials" /> 实例，它包含对代理服务器请求进行身份验证所需的凭据。</returns>
    </member>
    <member name="M:System.Net.IWebProxy.GetProxy(System.Uri)">
      <summary>返回代理的 URI。</summary>
      <returns>
        <see cref="T:System.Uri" /> 实例，它包含用于与 <paramref name="destination" /> 联系的代理的 URI。</returns>
      <param name="destination">
        <see cref="T:System.Uri" />，指定请求的 Internet 资源。 </param>
    </member>
    <member name="M:System.Net.IWebProxy.IsBypassed(System.Uri)">
      <summary>指示代理不应用于指定的主机。</summary>
      <returns>
如果代理服务器不应用于 <paramref name="host" />，则为 true；否则，为 false。</returns>
      <param name="host">要检查代理使用情况的主机的 <see cref="T:System.Uri" />。 </param>
    </member>
    <member name="T:System.Net.IWebProxyScript">
      <summary>提供要加载的基接口并执行脚本以进行自动代理检测。</summary>
    </member>
    <member name="M:System.Net.IWebProxyScript.Close">
      <summary>关闭脚本。</summary>
    </member>
    <member name="M:System.Net.IWebProxyScript.Load(System.Uri,System.String,System.Type)">
      <summary>加载脚本。</summary>
      <returns>一个 <see cref="T:System.Boolean" />，它表明是否成功加载脚本。</returns>
      <param name="scriptLocation">仅限内部。</param>
      <param name="script">仅限内部。</param>
      <param name="helperType">仅限内部。</param>
    </member>
    <member name="M:System.Net.IWebProxyScript.Run(System.String,System.String)">
      <summary>运行脚本。</summary>
      <returns>
        <see cref="T:System.String" />。</returns>
      <param name="url">仅限内部。</param>
      <param name="host">仅限内部。</param>
    </member>
    <member name="T:System.Net.IWebRequestCreate">
      <summary>提供用于创建 <see cref="T:System.Net.WebRequest" /> 实例的基接口。</summary>
    </member>
    <member name="M:System.Net.IWebRequestCreate.Create(System.Uri)">
      <summary>创建一个 <see cref="T:System.Net.WebRequest" /> 实例。</summary>
      <returns>一个 <see cref="T:System.Net.WebRequest" /> 实例。</returns>
      <param name="uri">Web 资源的统一资源标识符 (URI)。 </param>
    </member>
    <member name="T:System.Net.NetworkAccess">
      <summary>指定网络访问权限。</summary>
    </member>
    <member name="F:System.Net.NetworkAccess.Accept">
      <summary>指示允许应用程序在本地资源上接受来自 Internet 的连接。请注意，这是对本地主机的保护，这种保护使用 Accept 为本地资源（地址/端口）授予访问权限。当套接字试图绑定到此本地资源时，将执行权限检查以确定资源上是否存在 Accept。</summary>
    </member>
    <member name="F:System.Net.NetworkAccess.Connect">
      <summary>指示允许应用程序连接到特定的 Internet 资源。请注意，对于远程主机资源，不执行任何确定 Connect 权限是否存在的检查。这是因为连接远程主机的端口是未知的，而且无法预先生成合适的权限。应用程序负责检查试图连接到侦听套接字的远程主机的权限。</summary>
    </member>
    <member name="T:System.Net.NetworkCredential">
      <summary>为基于密码的身份验证方案（如基本、简要、NTLM 和 Kerberos 身份验证）提供凭据。</summary>
    </member>
    <member name="M:System.Net.NetworkCredential.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkCredential" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.NetworkCredential.#ctor(System.String,System.String)">
      <summary>用指定的用户名和密码初始化 <see cref="T:System.Net.NetworkCredential" /> 类的新实例。</summary>
      <param name="userName">与凭据关联的用户名。 </param>
      <param name="password">与凭据关联的用户名的密码。 </param>
    </member>
    <member name="M:System.Net.NetworkCredential.#ctor(System.String,System.String,System.String)">
      <summary>用指定的用户名、密码和域初始化 <see cref="T:System.Net.NetworkCredential" /> 类的新实例。</summary>
      <param name="userName">与凭据关联的用户名。 </param>
      <param name="password">与凭据关联的用户名的密码。 </param>
      <param name="domain">与这些凭据关联的域。 </param>
    </member>
    <member name="P:System.Net.NetworkCredential.Domain">
      <summary>获取或设置验证凭据的域名或计算机名。</summary>
      <returns>与凭据关联的域名。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.NetworkCredential.GetCredential(System.String,System.Int32,System.String)">
      <summary>针对指定的主机、端口和身份验证类型返回 <see cref="T:System.Net.NetworkCredential" /> 类的实例。</summary>
      <returns>指定的主机、端口和身份验证协议的 <see cref="T:System.Net.NetworkCredential" />；如果指定的主机、端口和身份验证协议没有可用的凭据，则为 null。</returns>
      <param name="host">对该客户端进行身份验证的主机。</param>
      <param name="port">与客户端通信的 <paramref name="host" /> 上的端口。</param>
      <param name="authenticationType">
        <see cref="P:System.Net.IAuthenticationModule.AuthenticationType" /> 属性中定义的所请求的身份验证类型。 </param>
    </member>
    <member name="M:System.Net.NetworkCredential.GetCredential(System.Uri,System.String)">
      <summary>针对指定的统一资源标识符 (URI) 和身份验证类型返回 <see cref="T:System.Net.NetworkCredential" /> 类的实例。</summary>
      <returns>一个 <see cref="T:System.Net.NetworkCredential" /> 对象。</returns>
      <param name="uri">客户端为其提供身份验证的 URI。 </param>
      <param name="authType">
        <see cref="P:System.Net.IAuthenticationModule.AuthenticationType" /> 属性中定义的所请求的身份验证类型。 </param>
    </member>
    <member name="P:System.Net.NetworkCredential.Password">
      <summary>获取或设置与凭据关联的用户名的密码。</summary>
      <returns>与该凭据关联的密码。如果此 <see cref="T:System.Net.NetworkCredential" /> 实例是使用空密码构造的，则 <see cref="P:System.Net.NetworkCredential.Password" /> 属性将返回空字符串。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.NetworkCredential.UserName">
      <summary>获取或设置与凭据关联的用户名。</summary>
      <returns>与凭据关联的用户名。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="T:System.Net.OpenReadCompletedEventArgs">
      <summary>为 <see cref="E:System.Net.WebClient.OpenReadCompleted" /> 事件提供数据。</summary>
    </member>
    <member name="P:System.Net.OpenReadCompletedEventArgs.Result">
      <summary>获取可读流，该可读流包含由 <see cref="Overload:System.Net.WebClient.DownloadDataAsync" /> 方法下载的数据。</summary>
      <returns>包含下载数据的 <see cref="T:System.IO.Stream" />。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.Net.OpenReadCompletedEventHandler">
      <summary>表示将要处理 <see cref="T:System.Net.WebClient" /> 的 <see cref="E:System.Net.WebClient.OpenReadCompleted" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Net.OpenReadCompletedEventArgs" />。</param>
    </member>
    <member name="T:System.Net.OpenWriteCompletedEventArgs">
      <summary>为 <see cref="E:System.Net.WebClient.OpenWriteCompleted" /> 事件提供数据。</summary>
    </member>
    <member name="P:System.Net.OpenWriteCompletedEventArgs.Result">
      <summary>获取用于向服务器发送数据的可写流。</summary>
      <returns>可在其中写入要上载的数据的 <see cref="T:System.IO.Stream" />。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.Net.OpenWriteCompletedEventHandler">
      <summary>表示将要处理 <see cref="T:System.Net.WebClient" /> 的 <see cref="E:System.Net.WebClient.OpenWriteCompleted" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Net.OpenWriteCompletedEventArgs" />。</param>
    </member>
    <member name="T:System.Net.ProtocolViolationException">
      <summary>使用网络协议期间出错时引发的异常。</summary>
    </member>
    <member name="M:System.Net.ProtocolViolationException.#ctor">
      <summary>初始化 <see cref="T:System.Net.ProtocolViolationException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.ProtocolViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>根据指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 实例初始化 <see cref="T:System.Net.ProtocolViolationException" /> 类的新实例。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含反序列化 <see cref="T:System.Net.ProtocolViolationException" /> 所需的信息。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，包含与新的 <see cref="T:System.Net.ProtocolViolationException" /> 关联的序列化流的源。</param>
    </member>
    <member name="M:System.Net.ProtocolViolationException.#ctor(System.String)">
      <summary>用指定的消息初始化 <see cref="T:System.Net.ProtocolViolationException" /> 类的新实例。</summary>
      <param name="message">错误信息字符串。</param>
    </member>
    <member name="M:System.Net.ProtocolViolationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化目标对象所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="serializationInfo">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="streamingContext">用于指定该序列化的目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.Net.ProtocolViolationException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>将此实例序列化到指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象中。</summary>
      <param name="serializationInfo">此 <see cref="T:System.Net.ProtocolViolationException" /> 要序列化到的对象。</param>
      <param name="streamingContext">序列化的目标。</param>
    </member>
    <member name="T:System.Net.SecurityProtocolType">
      <summary>指定 Schannel 安全包支持的安全协议。</summary>
    </member>
    <member name="F:System.Net.SecurityProtocolType.Ssl3">
      <summary>指定安全套接字层 (SSL) 3.0 安全协议。</summary>
    </member>
    <member name="F:System.Net.SecurityProtocolType.Tls">
      <summary>指定传输层安全 (TLS) 1.0 安全协议。</summary>
    </member>
    <member name="T:System.Net.ServicePoint">
      <summary>
                    提供 HTTP 连接的连接管理。
                </summary>
    </member>
    <member name="P:System.Net.ServicePoint.Address">
      <summary>
                    获取此 <see cref="T:System.Net.ServicePoint" /> 对象连接到的服务器的统一资源标识符 (URI)。
                </summary>
      <returns>
        <see cref="T:System.Uri" /> 类的实例，包含此 <see cref="T:System.Net.ServicePoint" /> 对象连接到的 Internet 服务器的 URI。
                </returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Net.ServicePoint" /> 处于宿主模式。
                </exception>
    </member>
    <member name="P:System.Net.ServicePoint.BindIPEndPointDelegate">
      <summary>
                    指定用于将本地 <see cref="T:System.Net.IPEndPoint" /> 与 <see cref="T:System.Net.ServicePoint" /> 关联的委托。
                </summary>
      <returns>
                    强制 <see cref="T:System.Net.ServicePoint" /> 使用特定的本地 Internet 协议 (IP) 地址和端口号的委托。默认值为 null。
                </returns>
    </member>
    <member name="P:System.Net.ServicePoint.Certificate">
      <summary>
                    获取为此 <see cref="T:System.Net.ServicePoint" /> 对象接收的证书。
                </summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 类的实例，包含为此 <see cref="T:System.Net.ServicePoint" /> 对象接收的安全证书。
                </returns>
    </member>
    <member name="P:System.Net.ServicePoint.ClientCertificate">
      <summary>
                    获取发送到服务器的上一个客户端证书。
                </summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 对象，包含发送到服务器的上一个客户端证书的公共值。
                </returns>
    </member>
    <member name="M:System.Net.ServicePoint.CloseConnectionGroup(System.String)">
      <summary>
                    从此 <see cref="T:System.Net.ServicePoint" /> 对象移除指定的连接组。
                </summary>
      <returns>
                    指示连接组是否关闭的 <see cref="T:System.Boolean" /> 值。
                </returns>
      <param name="connectionGroupName">
                    连接组的名称，该连接组包含要关闭的和要从此服务点移除的连接。
                </param>
    </member>
    <member name="P:System.Net.ServicePoint.ConnectionLeaseTimeout">
      <summary>
                    获取或设置在多少毫秒之后关闭活动 <see cref="T:System.Net.ServicePoint" /> 连接。
                </summary>
      <returns>
        <see cref="T:System.Int32" />，它指定活动 <see cref="T:System.Net.ServicePoint" /> 连接保持打开的毫秒数。默认值为 -1，这样活动 <see cref="T:System.Net.ServicePoint" /> 连接可以无限期保持连接。将此属性设置为 0 以在 <see cref="T:System.Net.ServicePoint" /> 连接为请求提供服务之后强制关闭该连接。
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    为 Set 操作指定的值为小于 -1 的负数。
                </exception>
    </member>
    <member name="P:System.Net.ServicePoint.ConnectionLimit">
      <summary>
                    获取或设置此 <see cref="T:System.Net.ServicePoint" /> 对象上允许的最大连接数。
                </summary>
      <returns>
                    此 <see cref="T:System.Net.ServicePoint" /> 对象上允许的最大连接数。
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
连接限制为 0 或小于 0。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Net.DnsPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.ServicePoint.ConnectionName">
      <summary>
                    获取连接名称。
                </summary>
      <returns>
                    一个表示连接名称的 <see cref="T:System.String" />。
                </returns>
    </member>
    <member name="P:System.Net.ServicePoint.CurrentConnections">
      <summary>
                    获取与此 <see cref="T:System.Net.ServicePoint" /> 对象关联的打开连接的数目。
                </summary>
      <returns>
                    与此 <see cref="T:System.Net.ServicePoint" /> 对象关联的打开连接的数目。
                </returns>
    </member>
    <member name="P:System.Net.ServicePoint.Expect100Continue">
      <summary>
                    获取或设置一个 <see cref="T:System.Boolean" /> 值，该值确定是否使用 100-Continue 行为。
                </summary>
      <returns>
                    如果 POST 请求需要 100-Continue 响应，则为 true；否则为 false。默认值为 true。
                </returns>
    </member>
    <member name="P:System.Net.ServicePoint.IdleSince">
      <summary>
                    获取上次将 <see cref="T:System.Net.ServicePoint" /> 对象连接到主机的日期和时间。
                </summary>
      <returns>
        <see cref="T:System.DateTime" /> 对象，包含上次连接 <see cref="T:System.Net.ServicePoint" /> 对象的日期和时间。
                </returns>
    </member>
    <member name="P:System.Net.ServicePoint.MaxIdleTime">
      <summary>
                    获取或设置与 <see cref="T:System.Net.ServicePoint" /> 对象关联的连接在被关闭前可以持续空闲的时间。
                </summary>
      <returns>
                    与 <see cref="T:System.Net.ServicePoint" /> 对象关联的连接在被关闭和重用于另一个连接前可以持续空闲的时间长度（以毫秒为单位）。
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Net.ServicePoint.MaxIdleTime" /> 被设置为小于 <see cref="F:System.Threading.Timeout.Infinite" /> 或大于 <see cref="F:System.Int32.MaxValue" />。
                </exception>
    </member>
    <member name="P:System.Net.ServicePoint.ProtocolVersion">
      <summary>
                    获取 <see cref="T:System.Net.ServicePoint" /> 对象使用的 HTTP 协议的版本。
                </summary>
      <returns>
        <see cref="T:System.Version" /> 对象，它包含 <see cref="T:System.Net.ServicePoint" /> 对象使用的 HTTP 协议版本。
                </returns>
    </member>
    <member name="P:System.Net.ServicePoint.ReceiveBufferSize">
      <summary>
                    获取或设置此 <see cref="T:System.Net.ServicePoint" /> 使用的套接字的接收缓冲区的大小。
                </summary>
      <returns>
                    包含接收缓冲区的大小（以字节为单位）的 <see cref="T:System.Int32" />。默认值为 8192。
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    为 Set 操作指定的值大于 <see cref="F:System.Int32.MaxValue" />。
                </exception>
    </member>
    <member name="P:System.Net.ServicePoint.SupportsPipelining">
      <summary>
                    指示 <see cref="T:System.Net.ServicePoint" /> 对象是否支持管线连接。
                </summary>
      <returns>
                    如果 <see cref="T:System.Net.ServicePoint" /> 对象支持管线连接，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Net.ServicePoint.UseNagleAlgorithm">
      <summary>
                    获取或设置一个 <see cref="T:System.Boolean" /> 值，该值确定在此 <see cref="T:System.Net.ServicePoint" /> 对象所管理的连接上是否使用 Nagle 算法。
                </summary>
      <returns>
                    如果使用 Nagle 算法，则为 true；否则为 false。默认值为 true。
                </returns>
    </member>
    <member name="T:System.Net.ServicePointManager">
      <summary>
                    管理 <see cref="T:System.Net.ServicePoint" /> 对象集合。
                </summary>
    </member>
    <member name="P:System.Net.ServicePointManager.CertificatePolicy">
      <summary>
                    获取或设置服务器证书的策略。
                </summary>
      <returns>
                    实现 <see cref="T:System.Net.ICertificatePolicy" /> 接口的对象。
                </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.ServicePointManager.CheckCertificateRevocationList">
      <summary>
                    获取或设置一个 <see cref="T:System.Boolean" /> 值，该值指示是否根据证书颁发机构吊销列表检查证书。
                </summary>
      <returns>
                    如果检查证书吊销列表，则为 true；否则为 false。
                </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.ServicePointManager.DefaultConnectionLimit">
      <summary>
                    获取或设置 <see cref="T:System.Net.ServicePoint" /> 对象所允许的最大并发连接数。
                </summary>
      <returns>
        <see cref="T:System.Net.ServicePoint" /> 对象允许的最大并发连接数。默认值为 2。
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Net.ServicePointManager.DefaultConnectionLimit" /> 小于或等于零。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
        <IPermission class="System.Net.WebPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="F:System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit">
      <summary>
                    在连接到 HTTP/1.0 或更高版本服务器的 <see cref="T:System.Net.ServicePoint" /> 对象上允许存在的非持久性连接的默认数目 (4)。此字段为常量，但在 .NET Framework 2.0 中不再使用。
                </summary>
    </member>
    <member name="F:System.Net.ServicePointManager.DefaultPersistentConnectionLimit">
      <summary>
                    在连接到 HTTP/1.1 或更高版本服务器的 <see cref="T:System.Net.ServicePoint" /> 对象上允许存在的持久性连接的默认数目 (2)。如果未以直接方式或通过配置设置 <see cref="P:System.Net.ServicePointManager.DefaultConnectionLimit" /> 属性的值，则此字段为常量，用于初始化 <see cref="P:System.Net.ServicePointManager.DefaultConnectionLimit" /> 属性。
                </summary>
    </member>
    <member name="P:System.Net.ServicePointManager.DnsRefreshTimeout">
      <summary>
                    获取或设置一个值，该值指示域名服务 (DNS) 解析多长时间内视为有效。
                </summary>
      <returns>
                    超时值（以毫秒为单位）。值 -1 指示超时期限无限。默认值是 120,000 毫秒（2 分钟）。
                </returns>
    </member>
    <member name="P:System.Net.ServicePointManager.EnableDnsRoundRobin">
      <summary>
                    获取或设置一个值，该值指示域名服务 (DNS) 解析是否在多个适用的 Internet 协议 (IP) 地址之间轮流进行。
                </summary>
      <returns>
                    如果 DNS 解析总是返回特定主机的第一个 IP 地址，则为 false；否则，为 true。默认为 false。
                </returns>
    </member>
    <member name="P:System.Net.ServicePointManager.Expect100Continue">
      <summary>
                    获取或设置一个 <see cref="T:System.Boolean" /> 值，该值确定是否使用 100-Continue 行为。
                </summary>
      <returns>
                    如果 POST 请求需要 100-Continue 响应，则为 true；否则为 false。默认值为 true。
                </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.ServicePointManager.FindServicePoint(System.String,System.Net.IWebProxy)">
      <summary>
                    查找现有的 <see cref="T:System.Net.ServicePoint" /> 对象或创建新的 <see cref="T:System.Net.ServicePoint" /> 对象，以管理与指定的统一资源标识符 (URI) 的通信。
                </summary>
      <returns>
管理该请求的通信的 <see cref="T:System.Net.ServicePoint" /> 对象。
                </returns>
      <param name="uriString">
                    要联系的 Internet 资源的 URI。
                </param>
      <param name="proxy">
此请求的代理数据。
                </param>
      <exception cref="T:System.UriFormatException">
        <paramref name="uriString" /> 中指定的 URI 无效。
                </exception>
      <exception cref="T:System.InvalidOperationException">
已达到在 <see cref="P:System.Net.ServicePointManager.MaxServicePoints" /> 中定义的 <see cref="T:System.Net.ServicePoint" /> 对象的最大数量。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.ServicePointManager.FindServicePoint(System.Uri)">
      <summary>
查找现有的 <see cref="T:System.Net.ServicePoint" /> 对象或创建新的 <see cref="T:System.Net.ServicePoint" /> 对象来管理与指定 <see cref="T:System.Uri" /> 对象的通信。
                </summary>
      <returns>
管理该请求的通信的 <see cref="T:System.Net.ServicePoint" /> 对象。
                </returns>
      <param name="address">
                    要联系的 Internet 资源的 <see cref="T:System.Uri" /> 对象。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。
                </exception>
      <exception cref="T:System.InvalidOperationException">
已达到在 <see cref="P:System.Net.ServicePointManager.MaxServicePoints" /> 中定义的 <see cref="T:System.Net.ServicePoint" /> 对象的最大数量。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.ServicePointManager.FindServicePoint(System.Uri,System.Net.IWebProxy)">
      <summary>
查找现有的 <see cref="T:System.Net.ServicePoint" /> 对象或创建新的 <see cref="T:System.Net.ServicePoint" /> 对象来管理与指定 <see cref="T:System.Uri" /> 对象的通信。
                </summary>
      <returns>
管理该请求的通信的 <see cref="T:System.Net.ServicePoint" /> 对象。
                </returns>
      <param name="address">
        <see cref="T:System.Uri" /> 对象，包含要联系的 Internet 资源的地址。
                </param>
      <param name="proxy">
此请求的代理数据。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。
                </exception>
      <exception cref="T:System.InvalidOperationException">
已达到在 <see cref="P:System.Net.ServicePointManager.MaxServicePoints" /> 中定义的 <see cref="T:System.Net.ServicePoint" /> 对象的最大数量。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.ServicePointManager.MaxServicePointIdleTime">
      <summary>
                    获取或设置 <see cref="T:System.Net.ServicePoint" /> 对象的最大空闲时间。
                </summary>
      <returns>
        <see cref="T:System.Net.ServicePoint" /> 对象的最大空闲时间（以毫秒为单位）。默认值是 100,000 毫秒（100 秒）。
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Net.ServicePointManager.MaxServicePointIdleTime" /> 小于 <see cref="F:System.Threading.Timeout.Infinite" /> 或大于 <see cref="F:System.Int32.MaxValue" />。
                </exception>
      <PermissionSet>
        <IPermission class="System.Net.WebPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.ServicePointManager.MaxServicePoints">
      <summary>
                    获取或设置任何时候保持的最大 <see cref="T:System.Net.ServicePoint" /> 对象数。
                </summary>
      <returns>
                    要保持的最大 <see cref="T:System.Net.ServicePoint" /> 对象数。默认值是 0，表示对 <see cref="T:System.Net.ServicePoint" /> 对象的数量没有限制。
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Net.ServicePointManager.MaxServicePoints" /> 小于零或大于 <see cref="F:System.Int32.MaxValue" />。
                </exception>
      <PermissionSet>
        <IPermission class="System.Net.WebPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.ServicePointManager.SecurityProtocol">
      <summary>
                    获取或设置由 <see cref="T:System.Net.ServicePointManager" /> 对象管理的 <see cref="T:System.Net.ServicePoint" /> 对象所使用的安全协议。
                </summary>
      <returns>
        <see cref="T:System.Net.SecurityProtocolType" /> 枚举中定义的值之一。
                </returns>
      <exception cref="T:System.NotSupportedException">
                    用于设置该属性的指定值不是有效的 <see cref="T:System.Net.SecurityProtocolType" /> 枚举值。
                </exception>
    </member>
    <member name="P:System.Net.ServicePointManager.ServerCertificateValidationCallback">
      <summary>
                    获取或设置用于验证服务器证书的回调。
                </summary>
      <returns>
                    一个 <see cref="T:System.Net.Security.RemoteCertificateValidationCallback" />。默认值为 null。
                </returns>
    </member>
    <member name="P:System.Net.ServicePointManager.UseNagleAlgorithm">
      <summary>
                    确定由此 <see cref="T:System.Net.ServicePointManager" /> 对象管理的服务点是否使用 Nagle 算法。
                </summary>
      <returns>
                    如果使用 Nagle 算法，则为 true；否则为 false。默认值为 true。
                </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.Net.SocketAddress">
      <summary>存储 <see cref="T:System.Net.EndPoint" /> 派生类的序列化信息。</summary>
    </member>
    <member name="M:System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily)">
      <summary>为给定的地址族创建 <see cref="T:System.Net.SocketAddress" /> 类的新实例。</summary>
      <param name="family">
        <see cref="T:System.Net.Sockets.AddressFamily" /> 枚举值。 </param>
    </member>
    <member name="M:System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily,System.Int32)">
      <summary>使用指定的地址族和缓冲区大小创建 <see cref="T:System.Net.SocketAddress" /> 类的新实例。</summary>
      <param name="family">
        <see cref="T:System.Net.Sockets.AddressFamily" /> 枚举值。 </param>
      <param name="size">要为基础缓冲区分配的字节数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="size" /> 小于 2。需要使用这两个字节来存储 <paramref name="family" />。 </exception>
    </member>
    <member name="M:System.Net.SocketAddress.Equals(System.Object)">
      <summary>确定两个对象实例是否相等。</summary>
      <returns>
                    如果指定的 <see cref="T:System.Object" /> 等于当前的 <see cref="T:System.Object" />，则为 true；否则为 false。
                </returns>
      <param name="comparand"></param>
    </member>
    <member name="P:System.Net.SocketAddress.Family">
      <summary>获取当前 <see cref="T:System.Net.SocketAddress" /> 的 <see cref="T:System.Net.Sockets.AddressFamily" /> 枚举值。</summary>
      <returns>
        <see cref="T:System.Net.Sockets.AddressFamily" /> 枚举值之一。</returns>
    </member>
    <member name="M:System.Net.SocketAddress.GetHashCode">
      <summary>用作特定类型的哈希函数，适合在哈希算法和数据结构（如哈希表）中使用。</summary>
      <returns>
                    当前 <see cref="T:System.Object" /> 的哈希代码。
                </returns>
    </member>
    <member name="P:System.Net.SocketAddress.Item(System.Int32)">
      <summary>获取或设置基础缓冲区中指定的索引元素。</summary>
      <returns>基础缓冲区中指定的索引元素的值。</returns>
      <param name="offset">所需信息的数组索引元素。 </param>
      <exception cref="T:System.IndexOutOfRangeException">缓冲区中不存在指定的索引。 </exception>
    </member>
    <member name="P:System.Net.SocketAddress.Size">
      <summary>获取 <see cref="T:System.Net.SocketAddress" /> 的基础缓冲区大小。</summary>
      <returns>
        <see cref="T:System.Net.SocketAddress" /> 的基础缓冲区大小。</returns>
    </member>
    <member name="M:System.Net.SocketAddress.ToString">
      <summary>返回有关套接字地址的信息。</summary>
      <returns>一个字符串，包含有关 <see cref="T:System.Net.SocketAddress" /> 的信息。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="T:System.Net.SocketPermission">
      <summary>控制在传输地址上建立或接受连接的权利。</summary>
    </member>
    <member name="M:System.Net.SocketPermission.#ctor(System.Net.NetworkAccess,System.Net.TransportType,System.String,System.Int32)">
      <summary>用指定的权限初始化给定传输地址的 <see cref="T:System.Net.SocketPermission" /> 类的新实例。</summary>
      <param name="access">
        <see cref="T:System.Net.NetworkAccess" /> 值之一。 </param>
      <param name="transport">
        <see cref="T:System.Net.TransportType" /> 值之一。 </param>
      <param name="hostName">该传输地址的主机名。 </param>
      <param name="portNumber">该传输地址的端口号。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostName" /> 为 null。 </exception>
    </member>
    <member name="M:System.Net.SocketPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>初始化 <see cref="T:System.Net.SocketPermission" /> 类的新实例，该类允许对 <see cref="T:System.Net.Sockets.Socket" /> 的无限制访问或不允许对 <see cref="T:System.Net.Sockets.Socket" /> 的访问。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。 </param>
    </member>
    <member name="P:System.Net.SocketPermission.AcceptList">
      <summary>获取标识在此权限实例下可以接受的终结点的 <see cref="T:System.Net.EndpointPermission" /> 实例列表。</summary>
      <returns>一个实例，它实现包含 <see cref="T:System.Net.EndpointPermission" /> 实例的 <see cref="T:System.Collections.IEnumerator" /> 接口。</returns>
    </member>
    <member name="M:System.Net.SocketPermission.AddPermission(System.Net.NetworkAccess,System.Net.TransportType,System.String,System.Int32)">
      <summary>向传输地址的权限集添加权限。</summary>
      <param name="access">
        <see cref="T:System.Net.NetworkAccess" /> 值之一。 </param>
      <param name="transport">
        <see cref="T:System.Net.TransportType" /> 值之一。 </param>
      <param name="hostName">该传输地址的主机名。 </param>
      <param name="portNumber">该传输地址的端口号。 </param>
    </member>
    <member name="F:System.Net.SocketPermission.AllPorts">
      <summary>定义表示所有端口的常数。</summary>
    </member>
    <member name="P:System.Net.SocketPermission.ConnectList">
      <summary>获取标识在此权限实例下可以连接到的终结点的 <see cref="T:System.Net.EndpointPermission" /> 实例列表。</summary>
      <returns>一个实例，它实现包含 <see cref="T:System.Net.EndpointPermission" /> 实例的 <see cref="T:System.Collections.IEnumerator" /> 接口。</returns>
    </member>
    <member name="M:System.Net.SocketPermission.Copy">
      <summary>创建 <see cref="T:System.Net.SocketPermission" /> 实例的副本。</summary>
      <returns>
        <see cref="T:System.Net.SocketPermission" /> 类的新实例，是当前实例的副本。</returns>
    </member>
    <member name="M:System.Net.SocketPermission.FromXml(System.Security.SecurityElement)">
      <summary>重新构造一个 <see cref="T:System.Net.SocketPermission" /> 实例用于 XML 编码。</summary>
      <param name="securityElement">用来重新构造 <see cref="T:System.Net.SocketPermission" /> 实例的 XML 编码。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityElement" /> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="securityElement" /> 不是此类型的权限元素。 </exception>
    </member>
    <member name="M:System.Net.SocketPermission.Intersect(System.Security.IPermission)">
      <summary>返回两个 <see cref="T:System.Net.SocketPermission" /> 实例的逻辑交集。</summary>
      <returns>表示两个 <see cref="T:System.Net.SocketPermission" /> 实例的交集的 <see cref="T:System.Net.SocketPermission" /> 实例。如果该交集为空，则该方法返回 null。如果 <paramref name="target" /> 参数为空引用，则该方法返回 null。</returns>
      <param name="target">要与当前实例求交的 <see cref="T:System.Net.SocketPermission" /> 实例。 </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不是 <see cref="T:System.Net.SocketPermission" />。 </exception>
      <exception cref="T:System.Security.SecurityException">
没有向方法调用方授予 <see cref="T:System.Net.DnsPermission" />。 </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Net.DnsPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.SocketPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前权限是否为指定权限的子集。</summary>
      <returns>如果 <paramref name="target" /> 为 null，而且当前实例没有定义权限，则此方法返回 true；否则返回 false。如果 <paramref name="target" /> 不为 null，而且当前实例定义了 <paramref name="target" /> 权限的子集，则该方法返回 true；否则返回 false。</returns>
      <param name="target">
        <see cref="T:System.Net.SocketPermission" />，将对其进行测试以确定子集关系。 </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 <see cref="T:System.Net.Sockets.SocketException" />。 </exception>
      <exception cref="T:System.Security.SecurityException">
没有向方法调用方授予 <see cref="T:System.Net.DnsPermission" />。 </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Net.DnsPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.SocketPermission.IsUnrestricted">
      <summary>检查对象的整体权限状态。</summary>
      <returns>
如果 <see cref="T:System.Net.SocketPermission" /> 实例是用来自 <see cref="T:System.Security.Permissions.PermissionState" /> 的 Unrestricted 值创建的，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Net.SocketPermission.ToXml">
      <summary>创建 <see cref="T:System.Net.SocketPermission" /> 实例及其当前状态的 XML 编码。</summary>
      <returns>
        <see cref="T:System.Security.SecurityElement" /> 实例，包含 <see cref="T:System.Net.SocketPermission" /> 实例的 XML 编码表示形式（包括状态信息）。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.SocketPermission.Union(System.Security.IPermission)">
      <summary>返回两个 <see cref="T:System.Net.SocketPermission" /> 实例的逻辑并集。</summary>
      <returns>表示两个 <see cref="T:System.Net.SocketPermission" /> 实例的并集的 <see cref="T:System.Net.SocketPermission" /> 实例。如果 <paramref name="target" /> 参数为 null，则返回当前实例的副本。</returns>
      <param name="target">要与当前实例组合的 <see cref="T:System.Net.SocketPermission" /> 实例。 </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 <see cref="T:System.Net.SocketPermission" />。 </exception>
    </member>
    <member name="T:System.Net.SocketPermissionAttribute">
      <summary>指定安全操作以控制 <see cref="T:System.Net.Sockets.Socket" /> 连接。无法继承此类。</summary>
    </member>
    <member name="M:System.Net.SocketPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.SecurityAction" /> 值初始化 <see cref="T:System.Net.SocketPermissionAttribute" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。 </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="action" /> 不是有效的 <see cref="T:System.Security.Permissions.SecurityAction" /> 值。 </exception>
    </member>
    <member name="P:System.Net.SocketPermissionAttribute.Access">
      <summary>获取或设置该 <see cref="T:System.Net.SocketPermissionAttribute" /> 允许的网络访问方法。</summary>
      <returns>一个字符串，包含 <see cref="T:System.Net.SocketPermissionAttribute" /> 的该实例允许的网络访问方法。有效值是“Accept”和“Connect”。 </returns>
      <exception cref="T:System.ArgumentException">当试图设置该值时，<see cref="P:System.Net.SocketPermissionAttribute.Access" /> 属性不为 null。若要指定多个 Access 方法，请额外使用一个属性声明语句。 </exception>
    </member>
    <member name="M:System.Net.SocketPermissionAttribute.CreatePermission">
      <summary>创建并返回 <see cref="T:System.Net.SocketPermission" /> 类的新实例。</summary>
      <returns>与安全声明对应的 <see cref="T:System.Net.SocketPermission" /> 类的实例。</returns>
      <exception cref="T:System.ArgumentException">一个或多个当前实例的 <see cref="P:System.Net.SocketPermissionAttribute.Access" />、<see cref="P:System.Net.SocketPermissionAttribute.Host" />、<see cref="P:System.Net.SocketPermissionAttribute.Transport" /> 或 <see cref="P:System.Net.SocketPermissionAttribute.Port" /> 属性为 null。 </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.SocketPermissionAttribute.Host">
      <summary>获取或设置此 <see cref="T:System.Net.SocketPermissionAttribute" /> 指定的 DNS 主机名或 IP 地址。</summary>
      <returns>一个字符串，包含与 <see cref="T:System.Net.SocketPermissionAttribute" /> 的该实例关联的 DNS 主机名或 IP 地址。</returns>
      <exception cref="T:System.ArgumentException">
当试图设置该值时，<see cref="P:System.Net.SocketPermissionAttribute.Host" /> 不为 null。若要指定多个主机，请使用一个额外的属性声明语句。 </exception>
    </member>
    <member name="P:System.Net.SocketPermissionAttribute.Port">
      <summary>获取或设置与此 <see cref="T:System.Net.SocketPermissionAttribute" /> 关联的端口号。</summary>
      <returns>一个字符串，包含与 <see cref="T:System.Net.SocketPermissionAttribute" /> 的该实例关联的端口号。</returns>
      <exception cref="T:System.ArgumentException">试图设置该值时，<see cref="P:System.Net.SocketPermissionAttribute.Port" /> 属性为 null。若要指定多个端口，请使用一个额外的属性声明语句。 </exception>
    </member>
    <member name="P:System.Net.SocketPermissionAttribute.Transport">
      <summary>获取或设置此 <see cref="T:System.Net.SocketPermissionAttribute" /> 指定的 <see cref="T:System.Net.TransportType" />。</summary>
      <returns>一个字符串，包含与此 <see cref="T:System.Net.SocketPermissionAttribute" /> 关联的 <see cref="T:System.Net.TransportType" />。</returns>
      <exception cref="T:System.ArgumentException">
当试图设置该值时，<see cref="P:System.Net.SocketPermissionAttribute.Transport" /> 不为 null。若要指定多个传输类型，请使用一个额外的属性声明语句。 </exception>
    </member>
    <member name="T:System.Net.TransportType">
      <summary>为 <see cref="T:System.Net.SocketPermission" /> 和 <see cref="T:System.Net.Sockets.Socket" /> 类定义传输类型。</summary>
    </member>
    <member name="F:System.Net.TransportType.Udp">
      <summary>UDP 传输。</summary>
    </member>
    <member name="F:System.Net.TransportType.Connectionless">
      <summary>传输类型是无连接的，如 UDP。指定该值的效果与指定 <see cref="F:System.Net.TransportType.Udp" /> 相同。</summary>
    </member>
    <member name="F:System.Net.TransportType.Tcp">
      <summary>TCP 传输。</summary>
    </member>
    <member name="F:System.Net.TransportType.ConnectionOriented">
      <summary>传输是面向连接的，如 TCP。指定该值的效果与指定 <see cref="F:System.Net.TransportType.Tcp" /> 相同。</summary>
    </member>
    <member name="F:System.Net.TransportType.All">
      <summary>所有传输类型。</summary>
    </member>
    <member name="T:System.Net.UploadDataCompletedEventArgs">
      <summary>为 <see cref="E:System.Net.WebClient.UploadDataCompleted" /> 事件提供数据。</summary>
    </member>
    <member name="P:System.Net.UploadDataCompletedEventArgs.Result">
      <summary>获取通过调用 <see cref="Overload:System.Net.WebClient.UploadDataAsync" /> 方法启动的数据上载操作的服务器回复。</summary>
      <returns>包含服务器回复的 <see cref="T:System.Byte" /> 数组。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.Net.UploadDataCompletedEventHandler">
      <summary>表示将要处理 <see cref="T:System.Net.WebClient" /> 的 <see cref="E:System.Net.WebClient.UploadDataCompleted" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">一个包含事件数据的 <see cref="T:System.Net.UploadDataCompletedEventArgs" />。</param>
    </member>
    <member name="T:System.Net.UploadFileCompletedEventArgs">
      <summary>为 <see cref="E:System.Net.WebClient.UploadFileCompleted" /> 事件提供数据。</summary>
    </member>
    <member name="P:System.Net.UploadFileCompletedEventArgs.Result">
      <summary>获取通过调用 <see cref="Overload:System.Net.WebClient.UploadFileAsync" /> 方法启动的数据上载操作的服务器回复。</summary>
      <returns>一个包含服务器回复的 <see cref="T:System.Byte" /> 数组。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.Net.UploadFileCompletedEventHandler">
      <summary>表示将要处理 <see cref="T:System.Net.WebClient" /> 的 <see cref="E:System.Net.WebClient.UploadFileCompleted" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">
        <see cref="T:System.Net.UploadFileCompletedEventArgs" />，它包含事件数据。</param>
    </member>
    <member name="T:System.Net.UploadProgressChangedEventArgs">
      <summary>为 <see cref="T:System.Net.WebClient" /> 的 <see cref="E:System.Net.WebClient.UploadProgressChanged" /> 事件提供数据。</summary>
    </member>
    <member name="P:System.Net.UploadProgressChangedEventArgs.BytesReceived">
      <summary>获取收到的字节数。</summary>
      <returns>一个指示收到的字节数的 <see cref="T:System.Int64" /> 值。</returns>
    </member>
    <member name="P:System.Net.UploadProgressChangedEventArgs.BytesSent">
      <summary>获取已发送的字节数。</summary>
      <returns>一个指示发送的字节数的 <see cref="T:System.Int64" /> 值。</returns>
    </member>
    <member name="P:System.Net.UploadProgressChangedEventArgs.TotalBytesToReceive">
      <summary>获取 <see cref="T:System.Net.WebClient" /> 数据上载操作中的总字节数。</summary>
      <returns>一个指示将要接收的字节数的 <see cref="T:System.Int64" /> 值。</returns>
    </member>
    <member name="P:System.Net.UploadProgressChangedEventArgs.TotalBytesToSend">
      <summary>获取要发送的总字节数。</summary>
      <returns>一个指示将要发送的字节数的 <see cref="T:System.Int64" /> 值。</returns>
    </member>
    <member name="T:System.Net.UploadProgressChangedEventHandler">
      <summary>表示将要处理 <see cref="T:System.Net.WebClient" /> 的 <see cref="E:System.Net.WebClient.UploadProgressChanged" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">一个包含事件数据的 <see cref="T:System.Net.UploadProgressChangedEventArgs" />。</param>
    </member>
    <member name="T:System.Net.UploadStringCompletedEventArgs">
      <summary>为 <see cref="E:System.Net.WebClient.UploadStringCompleted" /> 事件提供数据。</summary>
    </member>
    <member name="P:System.Net.UploadStringCompletedEventArgs.Result">
      <summary>获取通过调用 <see cref="Overload:System.Net.WebClient.UploadStringAsync" /> 方法启动的字符串上载操作的服务器回复。</summary>
      <returns>一个包含服务器回复的 <see cref="T:System.Byte" /> 数组。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.Net.UploadStringCompletedEventHandler">
      <summary>表示将要处理 <see cref="T:System.Net.WebClient" /> 的 <see cref="E:System.Net.WebClient.UploadStringCompleted" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">一个包含事件数据的 <see cref="T:System.Net.UploadStringCompletedEventArgs" />。</param>
    </member>
    <member name="T:System.Net.UploadValuesCompletedEventArgs">
      <summary>为 <see cref="E:System.Net.WebClient.UploadValuesCompleted" /> 事件提供数据。</summary>
    </member>
    <member name="P:System.Net.UploadValuesCompletedEventArgs.Result">
      <summary>获取通过调用 <see cref="Overload:System.Net.WebClient.UploadValuesAsync" /> 方法启动的数据上载操作的服务器回复。</summary>
      <returns>包含服务器回复的 <see cref="T:System.Byte" /> 数组。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.Net.UploadValuesCompletedEventHandler">
      <summary>表示将要处理 <see cref="T:System.Net.WebClient" /> 的 <see cref="E:System.Net.WebClient.UploadValuesCompleted" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">
        <see cref="T:System.Net.UploadValuesCompletedEventArgs" />，它包含事件数据。</param>
    </member>
    <member name="T:System.Net.WebClient">
      <summary>
                    提供向 URI 标识的资源发送数据和从 URI 标识的资源接收数据的公共方法。
                </summary>
    </member>
    <member name="M:System.Net.WebClient.#ctor">
      <summary>
                    初始化 <see cref="T:System.Net.WebClient" /> 类的新实例。
                </summary>
    </member>
    <member name="P:System.Net.WebClient.BaseAddress">
      <summary>
                    获取或设置 <see cref="T:System.Net.WebClient" /> 发出请求的基 URI。
                </summary>
      <returns>
        <see cref="T:System.String" />，包含 <see cref="T:System.Net.WebClient" /> 请求的基 URI；如果尚未指定基地址，则为 <see cref="F:System.String.Empty" />。
                </returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Net.WebClient.BaseAddress" /> 被设置为无效的 URI。内部异常可能包含有助于找到错误的信息。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.WebClient.CachePolicy">
      <summary>
                    对于此 WebClient 实例使用 <see cref="T:System.Net.WebRequest" /> 对象获得的任何资源，获取或设置应用程序的缓存策略。
                </summary>
      <returns>
                    一个 <see cref="T:System.Net.Cache.RequestCachePolicy" /> 对象，表示应用程序的缓存要求。
                </returns>
    </member>
    <member name="M:System.Net.WebClient.CancelAsync">
      <summary>
                    取消一个挂起的异步操作。
                </summary>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.WebClient.Credentials">
      <summary>
                    获取或设置发送到主机并用于对请求进行身份验证的网络凭据。
                </summary>
      <returns>
                    一个 <see cref="T:System.Net.ICredentials" />，包含该请求的身份验证凭据。默认为 null。
                </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.WebClient.DownloadData(System.String)">
      <summary>
                    以 <see cref="T:System.Byte" /> 数组形式通过指定的 URI 下载资源。
                </summary>
      <returns>
                    一个 <see cref="T:System.Byte" /> 数组，其中包含下载的资源。
                </returns>
      <param name="address">
从中下载数据的 URI。
                </param>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                
下载数据时发生错误。
                </exception>
      <exception cref="T:System.NotSupportedException">
该方法已在多个线程上同时调用。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.WebClient.DownloadData(System.Uri)">
      <summary>
                    以 <see cref="T:System.Byte" /> 数组形式通过指定的 URI 下载资源。
                </summary>
      <returns>
                    一个 <see cref="T:System.Byte" /> 数组，其中包含下载的资源。
                </returns>
      <param name="address">
                    由 <see cref="T:System.Uri" /> 对象表示的 URI，将从中下载数据。
                </param>
    </member>
    <member name="M:System.Net.WebClient.DownloadDataAsync(System.Uri)">
      <summary>
                    以 <see cref="T:System.Byte" /> 数组形式下载指定的资源。此方法不会阻止调用线程。
                </summary>
      <param name="address">
                    包含要下载的 URI 的 <see cref="T:System.Uri" />。
                </param>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                
下载资源时出现错误。
                </exception>
    </member>
    <member name="M:System.Net.WebClient.DownloadDataAsync(System.Uri,System.Object)">
      <summary>
                    以 <see cref="T:System.Byte" /> 数组形式下载指定的资源。此方法不会阻止调用线程。
                </summary>
      <param name="address">
                    包含要下载的 URI 的 <see cref="T:System.Uri" />。
                </param>
      <param name="userToken">
一个用户定义对象，此对象将被传递给完成异步操作时所调用的方法。
                </param>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                
下载资源时出现错误。
                </exception>
    </member>
    <member name="E:System.Net.WebClient.DownloadDataCompleted">
      <summary>
                    在异步数据下载操作完成时发生。
                </summary>
    </member>
    <member name="M:System.Net.WebClient.DownloadFile(System.String,System.String)">
      <summary>
将具有指定 URI 的资源下载到本地文件。
                </summary>
      <param name="address">
从中下载数据的 URI。
                </param>
      <param name="fileName">
要接收数据的本地文件的名称。
                </param>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                <paramref name="filename" /> 为 null 或 <see cref="F:System.String.Empty" />。
                
                    - 或 -
                
文件不存在。
                
                    - 或 - 下载数据时发生错误。
                </exception>
      <exception cref="T:System.NotSupportedException">
该方法已在多个线程上同时调用。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.WebClient.DownloadFile(System.Uri,System.String)">
      <summary>
将具有指定 URI 的资源下载到本地文件。
                </summary>
      <param name="address">
                    以 <see cref="T:System.String" /> 形式指定的 URI，将从中下载数据。
                </param>
      <param name="fileName">
要接收数据的本地文件的名称。
                </param>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                <paramref name="filename" /> 为 null 或 <see cref="F:System.String.Empty" />。
                
                    - 或 -
                
文件不存在。
                
                     - 或 -
                
下载数据时发生错误。
                </exception>
      <exception cref="T:System.NotSupportedException">
该方法已在多个线程上同时调用。
                </exception>
    </member>
    <member name="M:System.Net.WebClient.DownloadFileAsync(System.Uri,System.String)">
      <summary>
将具有指定 URI 的资源下载到本地文件。此方法不会阻止调用线程。
                </summary>
      <param name="address">
                    要下载的资源的 URI。
                </param>
      <param name="fileName">
要放在本地计算机上的文件的名称。
                </param>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                
下载资源时出现错误。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="fileName" /> 指定的本地文件正由另一个线程使用。
                </exception>
    </member>
    <member name="M:System.Net.WebClient.DownloadFileAsync(System.Uri,System.String,System.Object)">
      <summary>
将具有指定 URI 的资源下载到本地文件。此方法不会阻止调用线程。
                </summary>
      <param name="address">
                    要下载的资源的 URI。
                </param>
      <param name="fileName">
要放在本地计算机上的文件的名称。
                </param>
      <param name="userToken">
一个用户定义对象，此对象将被传递给完成异步操作时所调用的方法。
                </param>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                
下载资源时出现错误。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="fileName" /> 指定的本地文件正由另一个线程使用。
                </exception>
    </member>
    <member name="E:System.Net.WebClient.DownloadFileCompleted">
      <summary>
                    在异步文件下载操作完成时发生。
                </summary>
    </member>
    <member name="E:System.Net.WebClient.DownloadProgressChanged">
      <summary>
                    在异步下载操作成功转换部分或全部数据后发生。
                </summary>
    </member>
    <member name="M:System.Net.WebClient.DownloadString(System.String)">
      <summary>
                    以 <see cref="T:System.String" /> 形式下载请求的资源。以包含 URI 的 <see cref="T:System.String" /> 的形式指定要下载的资源。
                </summary>
      <returns>
一个 <see cref="T:System.String" />，其中包含请求的资源。
                </returns>
      <param name="address">
                    包含要下载的 URI 的 <see cref="T:System.String" />。
                </param>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                
下载资源时出现错误。
                </exception>
      <exception cref="T:System.NotSupportedException">
该方法已在多个线程上同时调用。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.WebClient.DownloadString(System.Uri)">
      <summary>
                    以 <see cref="T:System.String" /> 形式下载请求的资源。以 <see cref="T:System.Uri" /> 形式指定要下载的资源。
                </summary>
      <returns>
一个 <see cref="T:System.String" />，其中包含请求的资源。
                </returns>
      <param name="address">
                    一个 <see cref="T:System.Uri" /> 对象，其中包含要下载的 URI。
                </param>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                
下载资源时出现错误。
                </exception>
      <exception cref="T:System.NotSupportedException">
该方法已在多个线程上同时调用。
                </exception>
    </member>
    <member name="M:System.Net.WebClient.DownloadStringAsync(System.Uri)">
      <summary>
                    下载以 <see cref="T:System.Uri" /> 形式指定的资源。此方法不会阻止调用线程。
                </summary>
      <param name="address">
                    包含要下载的 URI 的 <see cref="T:System.Uri" />。
                </param>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                
下载资源时出现错误。
                </exception>
    </member>
    <member name="M:System.Net.WebClient.DownloadStringAsync(System.Uri,System.Object)">
      <summary>
                    将指定的字符串下载到指定的资源。此方法不会阻止调用线程。
                </summary>
      <param name="address">
                    包含要下载的 URI 的 <see cref="T:System.Uri" />。
                </param>
      <param name="userToken">
一个用户定义对象，此对象将被传递给完成异步操作时所调用的方法。
                </param>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                
下载资源时出现错误。
                </exception>
    </member>
    <member name="E:System.Net.WebClient.DownloadStringCompleted">
      <summary>
                    在异步资源下载操作完成时发生。
                </summary>
    </member>
    <member name="P:System.Net.WebClient.Encoding">
      <summary>
                    获取和设置用于上载和下载字符串的 <see cref="T:System.Text.Encoding" />。
                </summary>
      <returns>
                    用于对字符串进行编码的 <see cref="T:System.Text.Encoding" />。此属性的默认值为 <see cref="P:System.Text.Encoding.Default" /> 返回的编码。
                </returns>
    </member>
    <member name="M:System.Net.WebClient.GetWebRequest(System.Uri)">
      <summary>
                    为指定资源返回一个 <see cref="T:System.Net.WebRequest" /> 对象。
                </summary>
      <returns>
                    一个新的 <see cref="T:System.Net.WebRequest" /> 对象，用于指定的资源。
                </returns>
      <param name="address">
                    一个 <see cref="T:System.Uri" />，用于标识要请求的资源。
                </param>
    </member>
    <member name="M:System.Net.WebClient.GetWebResponse(System.Net.WebRequest)">
      <summary>
                    返回对指定 <see cref="T:System.Net.WebRequest" /> 的 <see cref="T:System.Net.WebResponse" />。
                </summary>
      <returns>
        <see cref="T:System.Net.WebResponse" /> 包含对指定 <see cref="T:System.Net.WebRequest" /> 的响应。
                </returns>
      <param name="request">
                    用于获取响应的 <see cref="T:System.Net.WebRequest" />。
                </param>
    </member>
    <member name="M:System.Net.WebClient.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)">
      <summary>
                    使用指定的 <see cref="T:System.IAsyncResult" /> 获取对指定 <see cref="T:System.Net.WebRequest" /> 的 <see cref="T:System.Net.WebResponse" />。
                </summary>
      <returns>
        <see cref="T:System.Net.WebResponse" /> 包含对指定 <see cref="T:System.Net.WebRequest" /> 的响应。
                </returns>
      <param name="request">
                    用于获取响应的 <see cref="T:System.Net.WebRequest" />。
                </param>
      <param name="result">
                    一个 <see cref="T:System.IAsyncResult" /> 对象，来自以前对 <see cref="M:System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> 的调用。
                </param>
    </member>
    <member name="P:System.Net.WebClient.Headers">
      <summary>
                    获取或设置与请求关联的标头名称/值对集合。
                </summary>
      <returns>
                    一个 <see cref="T:System.Net.WebHeaderCollection" />，包含与此请求关联的标头名称/值对。
                </returns>
    </member>
    <member name="P:System.Net.WebClient.IsBusy">
      <summary>
                    了解是否存在进行中的 Web 请求。
                </summary>
      <returns>
                    如果存在进行中的 Web 请求，则为 true；否则为 false。
                </returns>
    </member>
    <member name="M:System.Net.WebClient.OnDownloadDataCompleted(System.Net.DownloadDataCompletedEventArgs)">
      <summary>
                    引发 <see cref="E:System.Net.WebClient.DownloadDataCompleted" /> 事件。
                </summary>
      <param name="e">
                    包含事件数据的 <see cref="T:System.Net.DownloadDataCompletedEventArgs" /> 对象。
                </param>
    </member>
    <member name="M:System.Net.WebClient.OnDownloadFileCompleted(System.ComponentModel.AsyncCompletedEventArgs)">
      <summary>
                    引发 <see cref="E:System.Net.WebClient.DownloadFileCompleted" /> 事件。
                </summary>
      <param name="e">
                    包含事件数据的 <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> 对象。
                </param>
    </member>
    <member name="M:System.Net.WebClient.OnDownloadProgressChanged(System.Net.DownloadProgressChangedEventArgs)">
      <summary>
                    引发 <see cref="E:System.Net.WebClient.DownloadProgressChanged" /> 事件。
                </summary>
      <param name="e">
                    包含事件数据的 <see cref="T:System.Net.DownloadProgressChangedEventArgs" /> 对象。
                </param>
    </member>
    <member name="M:System.Net.WebClient.OnDownloadStringCompleted(System.Net.DownloadStringCompletedEventArgs)">
      <summary>
                    引发 <see cref="E:System.Net.WebClient.DownloadStringCompleted" /> 事件。
                </summary>
      <param name="e">
                    包含事件数据的 <see cref="T:System.Net.DownloadStringCompletedEventArgs" /> 对象。
                </param>
    </member>
    <member name="M:System.Net.WebClient.OnOpenReadCompleted(System.Net.OpenReadCompletedEventArgs)">
      <summary>
                    引发 <see cref="E:System.Net.WebClient.OpenReadCompleted" /> 事件。
                </summary>
      <param name="e">
                    包含事件数据的 <see cref="T:System.Net.OpenReadCompletedEventArgs" /> 对象。
                </param>
    </member>
    <member name="M:System.Net.WebClient.OnOpenWriteCompleted(System.Net.OpenWriteCompletedEventArgs)">
      <summary>
                    引发 <see cref="E:System.Net.WebClient.OpenWriteCompleted" /> 事件。
                </summary>
      <param name="e">
                    包含事件数据的 <see cref="T:System.Net.OpenWriteCompletedEventArgs" /> 对象。
                </param>
    </member>
    <member name="M:System.Net.WebClient.OnUploadDataCompleted(System.Net.UploadDataCompletedEventArgs)">
      <summary>
                    引发 <see cref="E:System.Net.WebClient.UploadDataCompleted" /> 事件。
                </summary>
      <param name="e">
                    包含事件数据的 <see cref="T:System.Net.UploadDataCompletedEventArgs" /> 对象。
                </param>
    </member>
    <member name="M:System.Net.WebClient.OnUploadFileCompleted(System.Net.UploadFileCompletedEventArgs)">
      <summary>
                    引发 <see cref="E:System.Net.WebClient.UploadFileCompleted" /> 事件。
                </summary>
      <param name="e">
                    包含事件数据的 <see cref="T:System.Net.UploadFileCompletedEventArgs" /> 对象。
                </param>
    </member>
    <member name="M:System.Net.WebClient.OnUploadProgressChanged(System.Net.UploadProgressChangedEventArgs)">
      <summary>
                    引发 <see cref="E:System.Net.WebClient.UploadProgressChanged" /> 事件。
                </summary>
      <param name="e">
                    包含事件数据的 <see cref="T:System.Net.UploadProgressChangedEventArgs" /> 对象。
                </param>
    </member>
    <member name="M:System.Net.WebClient.OnUploadStringCompleted(System.Net.UploadStringCompletedEventArgs)">
      <summary>
                    引发 <see cref="E:System.Net.WebClient.UploadStringCompleted" /> 事件。
                </summary>
      <param name="e">
                    包含事件数据的 <see cref="T:System.Net.UploadStringCompletedEventArgs" /> 对象。
                </param>
    </member>
    <member name="M:System.Net.WebClient.OnUploadValuesCompleted(System.Net.UploadValuesCompletedEventArgs)">
      <summary>
                    引发 <see cref="E:System.Net.WebClient.UploadValuesCompleted" /> 事件。
                </summary>
      <param name="e">
                    包含事件数据的 <see cref="T:System.Net.UploadValuesCompletedEventArgs" /> 对象。
                </param>
    </member>
    <member name="M:System.Net.WebClient.OpenRead(System.String)">
      <summary>
                    为从具有 <see cref="T:System.String" /> 指定的 URI 的资源下载的数据打开一个可读的流。
                </summary>
      <returns>
                    一个 <see cref="T:System.IO.Stream" />，用于从资源读取数据。
                </returns>
      <param name="address">
                    以 <see cref="T:System.String" /> 形式指定的 URI，将从中下载数据。
                </param>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                
下载数据时发生错误。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.WebClient.OpenRead(System.Uri)">
      <summary>
                    为从具有 <see cref="T:System.Uri" /> 指定的 URI 的资源下载的数据打开一个可读的流
                </summary>
      <returns>
                    一个 <see cref="T:System.IO.Stream" />，用于从资源读取数据。
                </returns>
      <param name="address">
                    以 <see cref="T:System.Uri" /> 形式指定的 URI，将从中下载数据。
                </param>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                
下载数据时发生错误。
                </exception>
    </member>
    <member name="M:System.Net.WebClient.OpenReadAsync(System.Uri)">
      <summary>
打开包含指定资源的可读流。此方法不会阻止调用线程。
                </summary>
      <param name="address">
要检索的资源的 URI。
                </param>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 address 所构成的 URI 无效。
                
                    - 或 -
                
下载资源时出现错误。
                
                    - 或 -
                
打开流时发生错误。
                </exception>
    </member>
    <member name="M:System.Net.WebClient.OpenReadAsync(System.Uri,System.Object)">
      <summary>
打开包含指定资源的可读流。此方法不会阻止调用线程。
                </summary>
      <param name="address">
要检索的资源的 URI。
                </param>
      <param name="userToken">
一个用户定义对象，此对象将被传递给完成异步操作时所调用的方法。
                </param>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 address 所构成的 URI 无效。
                
                    - 或 -
                
下载资源时出现错误。
                
                    - 或 -
                
打开流时发生错误。
                </exception>
    </member>
    <member name="E:System.Net.WebClient.OpenReadCompleted">
      <summary>
                    在以下异步操作完成时发生，该操作打开包含某个资源的流。
                </summary>
    </member>
    <member name="M:System.Net.WebClient.OpenWrite(System.String)">
      <summary>
打开一个流以将数据写入指定的资源。
                </summary>
      <returns>
                    用于将数据写入资源的 <see cref="T:System.IO.Stream" />。
                </returns>
      <param name="address">
接收数据的资源的 URI。
                </param>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                
打开流时发生错误。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.WebClient.OpenWrite(System.String,System.String)">
      <summary>
打开一个流以使用指定的方法向指定的资源写入数据。
                </summary>
      <returns>
                    用于将数据写入资源的 <see cref="T:System.IO.Stream" />。
                </returns>
      <param name="address">
接收数据的资源的 URI。
                </param>
      <param name="method">
用于将数据发送到资源的方法。如果为 null，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。
                </param>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                
打开流时发生错误。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.WebClient.OpenWrite(System.Uri)">
      <summary>
打开一个流以将数据写入指定的资源。
                </summary>
      <returns>
                    用于将数据写入资源的 <see cref="T:System.IO.Stream" />。
                </returns>
      <param name="address">
接收数据的资源的 URI。
                </param>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                
打开流时发生错误。
                </exception>
    </member>
    <member name="M:System.Net.WebClient.OpenWrite(System.Uri,System.String)">
      <summary>
                    打开一个流以使用指定的方法将数据写入指定的资源。
                </summary>
      <returns>
                    用于将数据写入资源的 <see cref="T:System.IO.Stream" />。
                </returns>
      <param name="address">
接收数据的资源的 URI。
                </param>
      <param name="method">
用于将数据发送到资源的方法。如果为 null，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。
                </param>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                
打开流时发生错误。
                </exception>
    </member>
    <member name="M:System.Net.WebClient.OpenWriteAsync(System.Uri)">
      <summary>
打开一个流以将数据写入指定的资源。此方法不会阻止调用线程。
                </summary>
      <param name="address">
接收数据的资源的 URI。
                </param>
    </member>
    <member name="M:System.Net.WebClient.OpenWriteAsync(System.Uri,System.String)">
      <summary>
打开一个流以将数据写入指定的资源。此方法不会阻止调用线程。
                </summary>
      <param name="address">
接收数据的资源的 URI。
                </param>
      <param name="method">
用于将数据发送到资源的方法。如果为 null，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。
                </param>
    </member>
    <member name="M:System.Net.WebClient.OpenWriteAsync(System.Uri,System.String,System.Object)">
      <summary>
打开一个流以使用指定的方法向指定的资源写入数据。此方法不会阻止调用线程。
                </summary>
      <param name="address">
接收数据的资源的 URI。
                </param>
      <param name="method">
用于将数据发送到资源的方法。如果为 null，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。
                </param>
      <param name="userToken">
                    一个用户定义对象，此对象将被传递给完成异步操作时所调用的方法
                </param>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                
打开流时发生错误。
                </exception>
    </member>
    <member name="E:System.Net.WebClient.OpenWriteCompleted">
      <summary>
                    在打开流以将数据写入资源的异步操作完成时发生。
                </summary>
    </member>
    <member name="P:System.Net.WebClient.Proxy">
      <summary>
                    获取或设置此 <see cref="T:System.Net.WebClient" /> 对象使用的代理。
                </summary>
      <returns>
                    用于发送请求的 <see cref="T:System.Net.IWebProxy" /> 实例。
                </returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Net.WebClient.Proxy" /> 被设置为 null。
                </exception>
    </member>
    <member name="P:System.Net.WebClient.QueryString">
      <summary>
                    获取或设置与请求关联的查询名称/值对集合。
                </summary>
      <returns>
                    一个 <see cref="T:System.Collections.Specialized.NameValueCollection" />，包含与请求关联的查询名称/值对。如果没有与请求关联的名称/值对，则值为空的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。
                </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.WebClient.ResponseHeaders">
      <summary>
                    获取与响应关联的标头名称/值对集合。
                </summary>
      <returns>
        <see cref="T:System.Net.WebHeaderCollection" />，包含与响应关联的标头名称/值对；如果尚未收到任何响应，则为 null。
                </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.WebClient.UploadData(System.String,System.Byte[])">
      <summary>
将数据缓冲区上载到由 URI 标识的资源。
                </summary>
      <returns>
                    一个 <see cref="T:System.Byte" /> 数组，它包含来自资源的响应的正文。
                </returns>
      <param name="address">
接收数据的资源的 URI。
                </param>
      <param name="data">
要发送到资源的数据缓冲。
                </param>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                <paramref name="data" /> 为 null。
                
                    - 或 -
                
发送数据时出错。
                
                    - 或 -
                
承载资源的服务器没有响应。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.WebClient.UploadData(System.String,System.String,System.Byte[])">
      <summary>
使用指定的方法将数据缓冲区上载到指定资源。
                </summary>
      <returns>
                    一个 <see cref="T:System.Byte" /> 数组，它包含来自资源的响应的正文。
                </returns>
      <param name="address">
接收数据的资源的 URI。
                </param>
      <param name="method">
用于将数据发送到资源的 HTTP 方法。如果为 null，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。
                </param>
      <param name="data">
要发送到资源的数据缓冲。
                </param>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                <paramref name="data" /> 为 null。
                
                    - 或 -
                
上载数据时出错。
                
                    - 或 -
                
承载资源的服务器没有响应。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.WebClient.UploadData(System.Uri,System.Byte[])">
      <summary>
将数据缓冲区上载到由 URI 标识的资源。
                </summary>
      <returns>
                    一个 <see cref="T:System.Byte" /> 数组，它包含来自资源的响应的正文。
                </returns>
      <param name="address">
接收数据的资源的 URI。
                </param>
      <param name="data">
要发送到资源的数据缓冲。
                </param>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                <paramref name="data" /> 为 null。
                
                    - 或 -
                
发送数据时出错。
                
                    - 或 -
                
承载资源的服务器没有响应。
                </exception>
    </member>
    <member name="M:System.Net.WebClient.UploadData(System.Uri,System.String,System.Byte[])">
      <summary>
使用指定的方法将数据缓冲区上载到指定资源。
                </summary>
      <returns>
                    一个 <see cref="T:System.Byte" /> 数组，它包含来自资源的响应的正文。
                </returns>
      <param name="address">
接收数据的资源的 URI。
                </param>
      <param name="method">
用于将数据发送到资源的 HTTP 方法。如果为 null，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。
                </param>
      <param name="data">
要发送到资源的数据缓冲。
                </param>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                <paramref name="data" /> 为 null。
                
                    - 或 -
                
上载数据时出错。
                
                    - 或 -
                
承载资源的服务器没有响应。
                </exception>
    </member>
    <member name="M:System.Net.WebClient.UploadDataAsync(System.Uri,System.Byte[])">
      <summary>
                    使用 POST 方法将数据缓冲区上载到由 URI 标识的资源。此方法不会阻止调用线程。
                </summary>
      <param name="address">
接收数据的资源的 URI。
                </param>
      <param name="data">
要发送到资源的数据缓冲。
                </param>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                
打开流时发生错误。
                
                    - 或 -
                
承载资源的服务器没有响应。
                </exception>
    </member>
    <member name="M:System.Net.WebClient.UploadDataAsync(System.Uri,System.String,System.Byte[])">
      <summary>
                    使用指定的方法将数据缓冲区上载到由 URI 标识的资源。此方法不会阻止调用线程。
                </summary>
      <param name="address">
接收数据的资源的 URI。
                </param>
      <param name="method">
用于将文件发送到资源的 HTTP 方法。如果为 null，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。
                </param>
      <param name="data">
要发送到资源的数据缓冲。
                </param>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                
打开流时发生错误。
                
                    - 或 -
                
承载资源的服务器没有响应。
                </exception>
    </member>
    <member name="M:System.Net.WebClient.UploadDataAsync(System.Uri,System.String,System.Byte[],System.Object)">
      <summary>
                    使用指定的方法和标识标记将数据缓冲区上载到由 URI 标识的资源。
                </summary>
      <param name="address">
接收数据的资源的 URI。
                </param>
      <param name="method">
用于将文件发送到资源的 HTTP 方法。如果为 null，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。
                </param>
      <param name="data">
要发送到资源的数据缓冲。
                </param>
      <param name="userToken">
一个用户定义对象，此对象将被传递给完成异步操作时所调用的方法。
                </param>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                
打开流时发生错误。
                
                    - 或 -
                
承载资源的服务器没有响应。
                </exception>
    </member>
    <member name="E:System.Net.WebClient.UploadDataCompleted">
      <summary>
                    在异步数据上载操作完成时发生。
                </summary>
    </member>
    <member name="M:System.Net.WebClient.UploadFile(System.String,System.String)">
      <summary>
将指定的本地文件上载到具有指定 URI 的资源。
                </summary>
      <returns>
                    一个 <see cref="T:System.Byte" /> 数组，它包含来自资源的响应的正文。
                </returns>
      <param name="address">
接收文件的资源的 URI。例如，ftp://localhost/samplefile.txt。
                </param>
      <param name="fileName">
要发送到资源的文件。例如，“samplefile.txt”。
                </param>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                <paramref name="fileName" /> 为 null、为 <see cref="F:System.String.Empty" />、包含无效字符或者不存在。
                
                    - 或 -
                
上载文件时出错。
                
                    - 或 -
                
承载资源的服务器没有响应。
                
                    - 或 -
                Content-type 标头以 multipart 开头。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.WebClient.UploadFile(System.String,System.String,System.String)">
      <summary>
使用指定的方法将指定的本地文件上载到指定的资源。
                </summary>
      <returns>
                    一个 <see cref="T:System.Byte" /> 数组，它包含来自资源的响应的正文。
                </returns>
      <param name="address">
接收文件的资源的 URI。
                </param>
      <param name="method">
用于将文件发送到资源的 HTTP 方法。如果为 null，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。
                </param>
      <param name="fileName">
要发送到资源的文件。
                </param>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                <paramref name="fileName" /> 为 null、为 <see cref="F:System.String.Empty" />、包含无效字符或者不存在。
                
                    - 或 -
                
上载文件时出错。
                
                    - 或 -
                
承载资源的服务器没有响应。
                
                    - 或 -
                Content-type 标头以 multipart 开头。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.WebClient.UploadFile(System.Uri,System.String)">
      <summary>
将指定的本地文件上载到具有指定 URI 的资源。
                </summary>
      <returns>
                    一个 <see cref="T:System.Byte" /> 数组，它包含来自资源的响应的正文。
                </returns>
      <param name="address">
接收文件的资源的 URI。例如，ftp://localhost/samplefile.txt。
                </param>
      <param name="fileName">
要发送到资源的文件。例如，“samplefile.txt”。
                </param>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                <paramref name="fileName" /> 为 null、为 <see cref="F:System.String.Empty" />、包含无效字符或者不存在。
                
                    - 或 -
                
上载文件时出错。
                
                    - 或 -
                
承载资源的服务器没有响应。
                
                    - 或 -
                Content-type 标头以 multipart 开头。
                </exception>
    </member>
    <member name="M:System.Net.WebClient.UploadFile(System.Uri,System.String,System.String)">
      <summary>
使用指定的方法将指定的本地文件上载到指定的资源。
                </summary>
      <returns>
                    一个 <see cref="T:System.Byte" /> 数组，它包含来自资源的响应的正文。
                </returns>
      <param name="address">
接收文件的资源的 URI。
                </param>
      <param name="method">
用于将文件发送到资源的 HTTP 方法。如果为 null，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。
                </param>
      <param name="fileName">
要发送到资源的文件。
                </param>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                <paramref name="fileName" /> 为 null、为 <see cref="F:System.String.Empty" />、包含无效字符或者不存在。
                
                    - 或 -
                
上载文件时出错。
                
                    - 或 -
                
承载资源的服务器没有响应。
                
                    - 或 -
                Content-type 标头以 multipart 开头。
                </exception>
    </member>
    <member name="M:System.Net.WebClient.UploadFileAsync(System.Uri,System.String)">
      <summary>
使用 POST 方法将指定的本地文件上载到指定的资源。此方法不会阻止调用线程。
                </summary>
      <param name="address">
接收文件的资源的 URI。对于 HTTP 资源，此 URI 必须标识可以接受用 POST 方法发送的请求的资源，如脚本或 ASP 页。
                </param>
      <param name="fileName">
要发送到资源的文件。
                </param>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                <paramref name="fileName" /> 为 null、为 <see cref="F:System.String.Empty" />、包含无效字符或者指定的文件路径不存在。
                
                    - 或 -
                
打开流时发生错误。
                
                    - 或 -
                
承载资源的服务器没有响应。
                
                    - 或 -
                Content-type 标头以 multipart 开头。
                </exception>
    </member>
    <member name="M:System.Net.WebClient.UploadFileAsync(System.Uri,System.String,System.String)">
      <summary>
使用 POST 方法将指定的本地文件上载到指定的资源。此方法不会阻止调用线程。
                </summary>
      <param name="address">
接收文件的资源的 URI。对于 HTTP 资源，此 URI 必须标识可以接受用 POST 方法发送的请求的资源，如脚本或 ASP 页。
                </param>
      <param name="method">
用于将数据发送到资源的 HTTP 方法。如果为 null，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。
                </param>
      <param name="fileName">
要发送到资源的文件。
                </param>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                <paramref name="fileName" /> 为 null、为 <see cref="F:System.String.Empty" />、包含无效字符或者指定的文件路径不存在。
                
                    - 或 -
                
打开流时发生错误。
                
                    - 或 -
                
承载资源的服务器没有响应。
                
                    - 或 -
                Content-type 标头以 multipart 开头。
                </exception>
    </member>
    <member name="M:System.Net.WebClient.UploadFileAsync(System.Uri,System.String,System.String,System.Object)">
      <summary>
使用 POST 方法将指定的本地文件上载到指定的资源。此方法不会阻止调用线程。
                </summary>
      <param name="address">
接收文件的资源的 URI。对于 HTTP 资源，此 URI 必须标识可以接受用 POST 方法发送的请求的资源，如脚本或 ASP 页。
                </param>
      <param name="method">
用于将数据发送到资源的 HTTP 方法。如果为 null，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。
                </param>
      <param name="fileName">
要发送到资源的文件。
                </param>
      <param name="userToken">
一个用户定义对象，此对象将被传递给完成异步操作时所调用的方法。
                </param>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                <paramref name="fileName" /> 为 null、为 <see cref="F:System.String.Empty" />、包含无效字符或者指定的文件路径不存在。
                
                    - 或 -
                
打开流时发生错误。
                
                    - 或 -
                
承载资源的服务器没有响应。
                
                    - 或 -
                Content-type 标头以 multipart 开头。
                </exception>
    </member>
    <member name="E:System.Net.WebClient.UploadFileCompleted">
      <summary>
                    在异步文件上载操作完成时发生。
                </summary>
    </member>
    <member name="E:System.Net.WebClient.UploadProgressChanged">
      <summary>
                    在异步上载操作成功转换部分或全部数据后发生。
                </summary>
    </member>
    <member name="M:System.Net.WebClient.UploadString(System.String,System.String)">
      <summary>
使用 POST 方法将指定的字符串上载到指定的资源。
                </summary>
      <returns>
                    一个 <see cref="T:System.String" />，包含服务器发送的响应。
                </returns>
      <param name="address">
要接收字符串的资源的 URI。对于 Http 资源，此 URI 必须标识可以接受用 POST 方法发送的请求的资源，如脚本或 ASP 页。
                </param>
      <param name="data">
要上载的字符串。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。
                </exception>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                
承载资源的服务器没有响应。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.WebClient.UploadString(System.String,System.String,System.String)">
      <summary>
使用指定的方法将指定的字符串上载到指定的资源。
                </summary>
      <returns>
                    一个 <see cref="T:System.String" />，包含服务器发送的响应。
                </returns>
      <param name="address">
接收文件的资源的 URI。此 URI 必须标识可以接受使用 <paramref name="method" /> 方法发送的请求的资源。
                </param>
      <param name="method">
用于将字符串发送到资源的 HTTP 方法。如果为 null，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。
                </param>
      <param name="data">
要上载的字符串。
                </param>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                
承载资源的服务器没有响应。
                
                    - 或 -
                <paramref name="method" /> 不能用来发送内容。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.WebClient.UploadString(System.Uri,System.String)">
      <summary>
使用 POST 方法将指定的字符串上载到指定的资源。
                </summary>
      <returns>
                    一个 <see cref="T:System.String" />，包含服务器发送的响应。
                </returns>
      <param name="address">
要接收字符串的资源的 URI。对于 Http 资源，此 URI 必须标识可以接受用 POST 方法发送的请求的资源，如脚本或 ASP 页。
                </param>
      <param name="data">
要上载的字符串。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。
                </exception>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                
承载资源的服务器没有响应。
                </exception>
    </member>
    <member name="M:System.Net.WebClient.UploadString(System.Uri,System.String,System.String)">
      <summary>
使用指定的方法将指定的字符串上载到指定的资源。
                </summary>
      <returns>
                    一个 <see cref="T:System.String" />，包含服务器发送的响应。
                </returns>
      <param name="address">
接收文件的资源的 URI。此 URI 必须标识可以接受使用 <paramref name="method" /> 方法发送的请求的资源。
                </param>
      <param name="method">
用于将字符串发送到资源的 HTTP 方法。如果为 null，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。
                </param>
      <param name="data">
要上载的字符串。
                </param>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                
承载资源的服务器没有响应。
                
                    - 或 -
                <paramref name="method" /> 不能用来发送内容。
                </exception>
    </member>
    <member name="M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String)">
      <summary>
将指定的字符串上载到指定的资源。此方法不会阻止调用线程。
                </summary>
      <param name="address">
接收文件的资源的 URI。对于 HTTP 资源，此 URI 必须标识可以接受用 POST 方法发送的请求的资源，如脚本或 ASP 页。
                </param>
      <param name="data">
要上载的字符串。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。
                </exception>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                
承载资源的服务器没有响应。
                </exception>
    </member>
    <member name="M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String)">
      <summary>
将指定的字符串上载到指定的资源。此方法不会阻止调用线程。
                </summary>
      <param name="address">
接收文件的资源的 URI。对于 HTTP 资源，此 URI 必须标识可以接受用 POST 方法发送的请求的资源，如脚本或 ASP 页。
                </param>
      <param name="method">
用于将文件发送到资源的 HTTP 方法。如果为 null，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。
                </param>
      <param name="data">
要上载的字符串。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。
                </exception>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                
承载资源的服务器没有响应。
                </exception>
    </member>
    <member name="M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String,System.Object)">
      <summary>
将指定的字符串上载到指定的资源。此方法不会阻止调用线程。
                </summary>
      <param name="address">
接收文件的资源的 URI。对于 HTTP 资源，此 URI 必须标识可以接受用 POST 方法发送的请求的资源，如脚本或 ASP 页。
                </param>
      <param name="method">
用于将文件发送到资源的 HTTP 方法。如果为 null，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。
                </param>
      <param name="data">
要上载的字符串。
                </param>
      <param name="userToken">
一个用户定义对象，此对象将被传递给完成异步操作时所调用的方法。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。
                </exception>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                
承载资源的服务器没有响应。
                </exception>
    </member>
    <member name="E:System.Net.WebClient.UploadStringCompleted">
      <summary>
                    在异步字符串上载操作完成时发生。
                </summary>
    </member>
    <member name="M:System.Net.WebClient.UploadValues(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>
将指定的名称/值集合上载到指定的 URI 所标识的资源。
                </summary>
      <returns>
                    一个 <see cref="T:System.Byte" /> 数组，它包含来自资源的响应的正文。
                </returns>
      <param name="address">
接收集合的资源的 URI。
                </param>
      <param name="data">
                    要发送到资源的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。
                </param>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                <paramref name="data" /> 为 null。
                
                    - 或 -
                
承载资源的服务器没有响应。
                
                    - 或 -
                
打开流时发生错误。
                
                    - 或 -
                Content-type 标头不是 null 或“application/x-www-form-urlencoded”。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.WebClient.UploadValues(System.String,System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>
使用指定的方法将指定的名称/值集合上载到指定的 URI 所标识的资源。
                </summary>
      <returns>
                    一个 <see cref="T:System.Byte" /> 数组，它包含来自资源的响应的正文。
                </returns>
      <param name="address">
接收集合的资源的 URI。
                </param>
      <param name="method">
用于将文件发送到资源的 HTTP 方法。如果为 null，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。
                </param>
      <param name="data">
                    要发送到资源的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。
                </param>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                <paramref name="data" /> 为 null。
                
                    - 或 -
                
打开流时发生错误。
                
                    - 或 -
                
承载资源的服务器没有响应。
                
                    - 或 -
                Content-type 标头值既不是 null 也不是 application/x-www-form-urlencoded。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.WebClient.UploadValues(System.Uri,System.Collections.Specialized.NameValueCollection)">
      <summary>
将指定的名称/值集合上载到指定的 URI 所标识的资源。
                </summary>
      <returns>
                    一个 <see cref="T:System.Byte" /> 数组，它包含来自资源的响应的正文。
                </returns>
      <param name="address">
接收集合的资源的 URI。
                </param>
      <param name="data">
                    要发送到资源的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。
                </param>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                <paramref name="data" /> 为 null。
                
                    - 或 -
                
承载资源的服务器没有响应。
                
                    - 或 -
                
打开流时发生错误。
                
                    - 或 -
                Content-type 标头不是 null 或“application/x-www-form-urlencoded”。
                </exception>
    </member>
    <member name="M:System.Net.WebClient.UploadValues(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>
使用指定的方法将指定的名称/值集合上载到指定的 URI 所标识的资源。
                </summary>
      <returns>
                    一个 <see cref="T:System.Byte" /> 数组，它包含来自资源的响应的正文。
                </returns>
      <param name="address">
接收集合的资源的 URI。
                </param>
      <param name="method">
用于将文件发送到资源的 HTTP 方法。如果为 null，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。
                </param>
      <param name="data">
                    要发送到资源的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。
                </param>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                <paramref name="data" /> 为 null。
                
                    - 或 -
                
打开流时发生错误。
                
                    - 或 -
                
承载资源的服务器没有响应。
                
                    - 或 -
                Content-type 标头值既不是 null 也不是 application/x-www-form-urlencoded。
                </exception>
    </member>
    <member name="M:System.Net.WebClient.UploadValuesAsync(System.Uri,System.Collections.Specialized.NameValueCollection)">
      <summary>
                    将指定的名称/值集合中的数据上载到由指定的 URI 标识的资源。此方法不会阻止调用线程。
                </summary>
      <param name="address">
                    接收集合的资源的 URI。此 URI 必须标识可以接受使用默认方法发送的请求的资源。请参见“备注”。
                </param>
      <param name="data">
                    要发送到资源的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。
                </exception>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                
承载资源的服务器没有响应。
                </exception>
    </member>
    <member name="M:System.Net.WebClient.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>
                    使用指定的方法将指定的名称/值集合中的数据上载到由指定的 URI 标识的资源。此方法不会阻止调用线程。
                </summary>
      <param name="address">
接收集合的资源的 URI。此 URI 必须标识可以接受使用 <paramref name="method" /> 方法发送的请求的资源。
                </param>
      <param name="method">
                    用于将字符串发送到资源的方法。如果为 null，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。
                </param>
      <param name="data">
                    要发送到资源的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。
                
                    - 或 -
                <paramref name="address" /> 为 null。
                </exception>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                
承载资源的服务器没有响应。
                
                    - 或 -
                <paramref name="method" /> 不能用来发送内容。
                </exception>
    </member>
    <member name="M:System.Net.WebClient.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection,System.Object)">
      <summary>
                    使用指定的方法将指定的名称/值集合中的数据上载到由指定的 URI 标识的资源。此方法不会阻止调用线程，并允许调用方将对象传递给操作完成时所调用的方法。
                </summary>
      <param name="address">
接收集合的资源的 URI。此 URI 必须标识可以接受使用 <paramref name="method" /> 方法发送的请求的资源。
                </param>
      <param name="method">
用于将字符串发送到资源的 HTTP 方法。如果为 null，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。
                </param>
      <param name="data">
                    要发送到资源的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。
                </param>
      <param name="userToken">
一个用户定义对象，此对象将被传递给完成异步操作时所调用的方法。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。
                
                    - 或 -
                <paramref name="address" /> 为 null。
                </exception>
      <exception cref="T:System.Net.WebException">
                    通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。
                
                    - 或 -
                
承载资源的服务器没有响应。
                
                    - 或 -
                <paramref name="method" /> 不能用来发送内容。
                </exception>
    </member>
    <member name="E:System.Net.WebClient.UploadValuesCompleted">
      <summary>
                    在名称/值集合的异步上载完成时发生。
                </summary>
    </member>
    <member name="P:System.Net.WebClient.UseDefaultCredentials">
      <summary>
                    获取或设置 <see cref="T:System.Boolean" /> 值，该值控制 <see cref="P:System.Net.CredentialCache.DefaultCredentials" /> 是否随请求一起发送。
                </summary>
      <returns>
                    如果使用默认凭据，则为 true；否则为 false。默认值为 false。
                </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="USERNAME" />
      </PermissionSet>
    </member>
    <member name="T:System.Net.WebException">
      <summary>通过可插接协议访问网络期间出错时引发的异常。</summary>
    </member>
    <member name="M:System.Net.WebException.#ctor">
      <summary>初始化 <see cref="T:System.Net.WebException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.WebException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>根据指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 实例初始化 <see cref="T:System.Net.WebException" /> 类的新实例。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含序列化新的 <see cref="T:System.Net.WebException" /> 所需的信息。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，包含与新的 <see cref="T:System.Net.WebException" /> 关联的序列化流的源。</param>
    </member>
    <member name="M:System.Net.WebException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.Net.WebException" /> 类的新实例。</summary>
      <param name="message">错误信息的文本。</param>
    </member>
    <member name="M:System.Net.WebException.#ctor(System.String,System.Exception)">
      <summary>用指定的错误信息和嵌套异常初始化 <see cref="T:System.Net.WebException" /> 类的新实例。</summary>
      <param name="message">错误信息的文本。</param>
      <param name="innerException">嵌套异常。</param>
    </member>
    <member name="M:System.Net.WebException.#ctor(System.String,System.Exception,System.Net.WebExceptionStatus,System.Net.WebResponse)">
      <summary>用指定的错误信息、嵌套异常、状态和响应初始化 <see cref="T:System.Net.WebException" /> 类的新实例。</summary>
      <param name="message">错误信息的文本。</param>
      <param name="innerException">嵌套异常。</param>
      <param name="status">
        <see cref="T:System.Net.WebExceptionStatus" /> 值之一。</param>
      <param name="response">包含来自远程主机的响应的 <see cref="T:System.Net.WebResponse" /> 实例。</param>
    </member>
    <member name="M:System.Net.WebException.#ctor(System.String,System.Net.WebExceptionStatus)">
      <summary>用指定的错误信息和状态初始化 <see cref="T:System.Net.WebException" /> 类的新实例。</summary>
      <param name="message">错误信息的文本。</param>
      <param name="status">
        <see cref="T:System.Net.WebExceptionStatus" /> 值之一。</param>
    </member>
    <member name="M:System.Net.WebException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化 <see cref="T:System.Net.WebException" /> 所需的数据来填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例。</summary>
      <param name="serializationInfo">要使用的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="streamingContext">要使用的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="P:System.Net.WebException.Response">
      <summary>获取远程主机返回的响应。</summary>
      <returns>如果可从 Internet 资源获得响应，则为包含来自 Internet 资源的错误响应的 <see cref="T:System.Net.WebResponse" /> 实例；否则为 null。</returns>
    </member>
    <member name="P:System.Net.WebException.Status">
      <summary>获取响应的状态。</summary>
      <returns>
        <see cref="T:System.Net.WebExceptionStatus" /> 值之一。</returns>
    </member>
    <member name="M:System.Net.WebException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>将此实例序列化到指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象中。</summary>
      <param name="serializationInfo">此 <see cref="T:System.Net.WebException" /> 要序列化到的对象。</param>
      <param name="streamingContext">序列化的目标。</param>
    </member>
    <member name="T:System.Net.WebExceptionStatus">
      <summary>为 <see cref="T:System.Net.WebException" /> 类定义状态代码。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.Success">
      <summary>未遇到任何错误。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.NameResolutionFailure">
      <summary>名称解析服务未能解析主机名。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.ConnectFailure">
      <summary>未能在传输级联系到远程服务点。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.ReceiveFailure">
      <summary>没有从远程服务器接收到完整响应。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.SendFailure">
      <summary>未能将完整请求发送到远程服务器。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.PipelineFailure">
      <summary>该请求是管线请求，并且连接未接收到响应即被关闭。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.RequestCanceled">
      <summary>请求被取消，<see cref="M:System.Net.WebRequest.Abort" /> 方法被调用，或者发生了不可分类的错误。这是 <see cref="P:System.Net.WebException.Status" /> 的默认值。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.ProtocolError">
      <summary>从服务器接收到的响应完成了，但它指示了一个协议级错误。例如，HTTP 协议错误（如 401 访问被拒绝）使用此状态。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.ConnectionClosed">
      <summary>连接被过早关闭。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.TrustFailure">
      <summary>未能验证服务器证书。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.SecureChannelFailure">
      <summary>使用 SSL 建立连接时发生错误。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.ServerProtocolViolation">
      <summary>此服务器响应不是有效的 HTTP 响应。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.KeepAliveFailure">
      <summary>指定 Keep-alive 标头的请求连接被意外关闭。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.Pending">
      <summary>内部异步请求挂起。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.Timeout">
      <summary>在请求的超时期限内未收到任何响应。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.ProxyNameResolutionFailure">
      <summary>名称解析服务未能解析代理主机名。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.UnknownError">
      <summary>发生未知类型的异常。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.MessageLengthLimitExceeded">
      <summary>当发送请求或从服务器接收响应时，会接收到超出指定限制的消息。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.CacheEntryNotFound">
      <summary>未找到指定的缓存项。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.RequestProhibitedByCachePolicy">
      <summary>缓存策略不允许该请求。一般而言，当请求不可缓存或有效策略禁止向服务器发送请求时会发生这种情况。如果请求方法暗示请求正文存在，请求方法需要与服务器直接交互，或者请求包含条件标头，则您可能会收到此状态。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.RequestProhibitedByProxy">
      <summary>代理不允许此请求。</summary>
    </member>
    <member name="T:System.Net.WebHeaderCollection">
      <summary>包含与请求或响应关联的协议标头。</summary>
    </member>
    <member name="M:System.Net.WebHeaderCollection.#ctor">
      <summary>初始化 <see cref="T:System.Net.WebHeaderCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.WebHeaderCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的指定实例初始化 <see cref="T:System.Net.WebHeaderCollection" /> 类的新实例。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含序列化 <see cref="T:System.Net.WebHeaderCollection" /> 所需的信息。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，包含与新的 <see cref="T:System.Net.WebHeaderCollection" /> 关联的序列化流的源。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="headerName" /> 包含无效字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="headerName" /> 是 null 引用或为 <see cref="F:System.String.Empty" />。</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Add(System.Net.HttpRequestHeader,System.String)">
      <summary>将包含指定值的指定标头插入到集合中。</summary>
      <param name="header">要添加到集合中的标头。</param>
      <param name="value">标头的内容。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 的长度大于 65535。</exception>
      <exception cref="T:System.InvalidOperationException">此 <see cref="T:System.Net.WebHeaderCollection" /> 实例不允许使用 <see cref="T:System.Net.HttpRequestHeader" /> 的实例。</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Add(System.Net.HttpResponseHeader,System.String)">
      <summary>将包含指定值的指定标头插入到集合中。</summary>
      <param name="header">要添加到集合中的标头。</param>
      <param name="value">标头的内容。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 的长度大于 65535。</exception>
      <exception cref="T:System.InvalidOperationException">此 <see cref="T:System.Net.WebHeaderCollection" /> 实例不允许使用 <see cref="T:System.Net.HttpResponseHeader" /> 的实例。</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Add(System.String)">
      <summary>将指定的标头插入集合中。</summary>
      <param name="header">要添加的标头，其名称和值用冒号分隔。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="header" /> 为 null 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="header" /> 不包含冒号 (:) 字符。<paramref name="value" /> 的长度大于 65535。- 或 - <paramref name="header" /> 的名称部分为 <see cref="F:System.String.Empty" />，或者包含无效字符。- 或 - <paramref name="header" /> 是应由属性设置的受限制的标头。- 或 - <paramref name="header" /> 的值部分包含无效字符。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">冒号 (:) 后的字符串的长度大于 65535。</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Add(System.String,System.String)">
      <summary>将具有指定名称和值的标头插入到集合中。</summary>
      <param name="name">要添加到集合中的标头。</param>
      <param name="value">标头的内容。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 为 null，或者为 <see cref="F:System.String.Empty" />，或者包含无效字符。- 或 - <paramref name="name" /> 是受限制的标头，必须用属性设置来设置。- 或 - <paramref name="value" /> 包含无效字符。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 的长度大于 65535。</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.AddWithoutValidate(System.String,System.String)">
      <summary>将标头插入到集合中，不检查此标头是否在受限制的标头列表上。</summary>
      <param name="headerName">要添加到集合中的标头。</param>
      <param name="headerValue">标头的内容。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="headerName" /> 为 null，或者为 <see cref="F:System.String.Empty" />，或者包含无效字符。- 或 - <paramref name="headerValue" /> 包含无效字符。</exception>
    </member>
    <member name="P:System.Net.WebHeaderCollection.AllKeys">
      <summary>获取集合中的所有标头名（关键字）。</summary>
      <returns>包含 Web 请求中所有标头名称的 <see cref="T:System.String" /> 类型的数组。</returns>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Clear">
      <summary>从集合中移除所有标头。</summary>
    </member>
    <member name="P:System.Net.WebHeaderCollection.Count">
      <summary>获取集合中的标头数。</summary>
      <returns>
        <see cref="T:System.Int32" />，它指示请求中的标头数。</returns>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Get(System.Int32)">
      <summary>获取集合中特定标头的值，该值由索引指定到集合中。</summary>
      <returns>一个 <see cref="T:System.String" />，它包含指定标头的值。</returns>
      <param name="index">要从集合中获取的从零开始的键索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 为负。 - 或 -<paramref name="index" /> 超出了集合的大小。</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Get(System.String)">
      <summary>获取集合中特定标头的值，该值由标头名指定。</summary>
      <returns>一个 <see cref="T:System.String" />，它保存指定标头的值。</returns>
      <param name="name">Web 标头的名称。</param>
    </member>
    <member name="M:System.Net.WebHeaderCollection.GetEnumerator">
      <summary>返回可循环访问 <see cref="T:System.Net.WebHeaderCollection" /> 实例的枚举数。</summary>
      <returns>用于 <see cref="T:System.Net.WebHeaderCollection" /> 的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Net.WebHeaderCollection.GetKey(System.Int32)">
      <summary>获取集合中位于指定位置的标头名。</summary>
      <returns>保存标头名的 <see cref="T:System.String" />。</returns>
      <param name="index">要从集合中获取的从零开始的键索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 为负。 - 或 -<paramref name="index" /> 超出了集合的大小。</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用将目标对象序列化所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="serializationInfo">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="streamingContext">用于指定该序列化的目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.Net.WebHeaderCollection.GetValues(System.Int32)">
      <summary>获取存储在标头集合的 <paramref name="index" /> 位置中的标头值数组。</summary>
      <returns>标头字符串数组。</returns>
      <param name="index">要返回的标头索引。</param>
    </member>
    <member name="M:System.Net.WebHeaderCollection.GetValues(System.String)">
      <summary>获取标头中存储的标头值数组。</summary>
      <returns>标头字符串数组。</returns>
      <param name="header">要返回的标头。</param>
    </member>
    <member name="M:System.Net.WebHeaderCollection.IsRestricted(System.String)">
      <summary>测试是否能够为请求设置指定的 HTTP 标头。</summary>
      <returns>
            如果标头是受限制的，则为 true；否则为 false。</returns>
      <param name="headerName">要测试的标头。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="headerName" /> 为 null 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="headerName" /> 包含无效字符。</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.IsRestricted(System.String,System.Boolean)">
      <summary>测试是否能够为请求或响应设置指定的 HTTP 标头。</summary>
      <returns>
            如果标头是受限制的，则为 true；否则为 false。</returns>
      <param name="headerName">要测试的标头。</param>
      <param name="response">Framework 测试响应或请求吗？</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="headerName" /> 为 null 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="headerName" /> 包含无效字符。</exception>
    </member>
    <member name="P:System.Net.WebHeaderCollection.Item(System.Net.HttpRequestHeader)">
      <summary>获取或设置指定的请求标头。</summary>
      <returns>包含指定标头值的 <see cref="T:System.String" /> 实例。</returns>
      <param name="header">请求标头值。</param>
      <exception cref="T:System.InvalidOperationException">此 <see cref="T:System.Net.WebHeaderCollection" /> 实例不允许使用 <see cref="T:System.Net.HttpRequestHeader" /> 的实例。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.WebHeaderCollection.Item(System.Net.HttpResponseHeader)">
      <summary>获取或设置指定的响应标头。</summary>
      <returns>包含指定标头的 <see cref="T:System.String" /> 实例。</returns>
      <param name="header">响应标头值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 的长度大于 65535。</exception>
      <exception cref="T:System.InvalidOperationException">此 <see cref="T:System.Net.WebHeaderCollection" /> 实例不允许使用 <see cref="T:System.Net.HttpResponseHeader" /> 的实例。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.WebHeaderCollection.Keys">
      <summary>获取集合中的标头名（关键字）的集合。</summary>
      <returns>包含 We 请求中所有标头名称的 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" />。</returns>
    </member>
    <member name="M:System.Net.WebHeaderCollection.OnDeserialization(System.Object)">
      <summary>实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并在完成反序列化之后引发反序列化事件。</summary>
      <param name="sender">反序列化事件源。</param>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Remove(System.Net.HttpRequestHeader)">
      <summary>从集合中移除指定的标头。</summary>
      <param name="header">要从该集合中移除的 <see cref="T:System.Net.HttpRequestHeader" /> 实例。</param>
      <exception cref="T:System.InvalidOperationException">此 <see cref="T:System.Net.WebHeaderCollection" /> 实例不允许使用 <see cref="T:System.Net.HttpRequestHeader" /> 的实例。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Remove(System.Net.HttpResponseHeader)">
      <summary>从集合中移除指定的标头。</summary>
      <param name="header">要从该集合中移除的 <see cref="T:System.Net.HttpResponseHeader" /> 实例。</param>
      <exception cref="T:System.InvalidOperationException">此 <see cref="T:System.Net.WebHeaderCollection" /> 实例不允许使用 <see cref="T:System.Net.HttpResponseHeader" /> 的实例。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Remove(System.String)">
      <summary>从集合中移除指定的标头。</summary>
      <param name="name">要从集合中移除的标头名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null<see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 是受限制的标头。- 或 - <paramref name="name" /> 包含无效字符。</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Set(System.Net.HttpRequestHeader,System.String)">
      <summary>将指定的标头设置为指定的值。</summary>
      <param name="header">要设置的 <see cref="T:System.Net.HttpRequestHeader" /> 值。</param>
      <param name="value">要设置的标头内容。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 的长度大于 65535。</exception>
      <exception cref="T:System.InvalidOperationException">此 <see cref="T:System.Net.WebHeaderCollection" /> 实例不允许使用 <see cref="T:System.Net.HttpRequestHeader" /> 的实例。</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Set(System.Net.HttpResponseHeader,System.String)">
      <summary>将指定的标头设置为指定的值。</summary>
      <param name="header">要设置的 <see cref="T:System.Net.HttpResponseHeader" /> 值。</param>
      <param name="value">要设置的标头内容。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 的长度大于 65535。</exception>
      <exception cref="T:System.InvalidOperationException">此 <see cref="T:System.Net.WebHeaderCollection" /> 实例不允许使用 <see cref="T:System.Net.HttpResponseHeader" /> 的实例。</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Set(System.String,System.String)">
      <summary>将指定的标头设置为指定的值。</summary>
      <param name="name">要设置的标头。</param>
      <param name="value">要设置的标头内容。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 的长度大于 65535。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 是受限制的标头。- 或 - <paramref name="name" /> 或 <paramref name="value" /> 包含无效字符。</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>将此实例序列化到指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象中。</summary>
      <param name="serializationInfo">此 <see cref="T:System.Net.WebHeaderCollection" /> 要序列化到的对象。</param>
      <param name="streamingContext">序列化的目标。</param>
    </member>
    <member name="M:System.Net.WebHeaderCollection.ToByteArray">
      <summary>将 <see cref="T:System.Net.WebHeaderCollection" /> 转换为字节数组。</summary>
      <returns>保存标头集合的 <see cref="T:System.Byte" /> 数组。</returns>
    </member>
    <member name="M:System.Net.WebHeaderCollection.ToString">
      <summary>已过时。</summary>
      <returns>集合的 <see cref="T:System.String" /> 表示形式。</returns>
    </member>
    <member name="T:System.Net.WebPermission">
      <summary>控制访问 HTTP Internet 资源的权限。</summary>
    </member>
    <member name="M:System.Net.WebPermission.#ctor">
      <summary>创建 <see cref="T:System.Net.WebPermission" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.WebPermission.#ctor(System.Net.NetworkAccess,System.String)">
      <summary>用指定 URI 的指定访问权限初始化 <see cref="T:System.Net.WebPermission" /> 类的新实例。</summary>
      <param name="access">一个 NetworkAccess 值，指示向指定的 URI 授予哪种访问权限。<see cref="F:System.Net.NetworkAccess.Accept" /> 指示允许应用程序在本地资源上接受来自 Internet 的连接。<see cref="F:System.Net.NetworkAccess.Connect" /> 指示允许应用程序连接到特定的 Internet 资源。 </param>
      <param name="uriString">向其授予访问权限的 URI 字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" /> 为 null。 </exception>
    </member>
    <member name="M:System.Net.WebPermission.#ctor(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)">
      <summary>用指定 URI 正则表达式的指定访问权限初始化 <see cref="T:System.Net.WebPermission" /> 类的新实例。</summary>
      <param name="access">一个 <see cref="T:System.Net.NetworkAccess" /> 值，指示向指定的 URI 授予哪种访问权限。<see cref="F:System.Net.NetworkAccess.Accept" /> 指示允许应用程序在本地资源上接受来自 Internet 的连接。<see cref="F:System.Net.NetworkAccess.Connect" /> 指示允许应用程序连接到特定的 Internet 资源。 </param>
      <param name="uriRegex">一个正则表达式，描述要对其授予访问权限的 URI。 </param>
    </member>
    <member name="M:System.Net.WebPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>创建 <see cref="T:System.Net.WebPermission" /> 类的新实例，该实例允许所有命令或禁止所有命令。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值。 </param>
    </member>
    <member name="P:System.Net.WebPermission.AcceptList">
      <summary>此属性返回该 <see cref="T:System.Net.WebPermission" /> 持有的单个接受权限的枚举。返回枚举中包含的可能对象类型是 <see cref="T:System.String" /> 和 <see cref="T:System.Text.RegularExpressions.Regex" />。</summary>
      <returns>包含接受权限的 <see cref="T:System.Collections.IEnumerator" /> 接口。</returns>
    </member>
    <member name="M:System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.String)">
      <summary>将具有指定访问权限的指定 URI 字符串添加到当前 <see cref="T:System.Net.WebPermission" /> 中。</summary>
      <param name="access">指定授予 URI 的访问权限的 <see cref="T:System.Net.NetworkAccess" />。 </param>
      <param name="uriString">一个字符串，描述向其授予访问权限的 URI。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" /> 为 null。 </exception>
    </member>
    <member name="M:System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)">
      <summary>将具有指定访问权限的指定 URI 添加到当前 <see cref="T:System.Net.WebPermission" /> 中。</summary>
      <param name="access">一个 NetworkAccess，指定授予 URI 的访问权限。 </param>
      <param name="uriRegex">一个正则表达式，描述向其授予访问权限的 URI 集。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriRegex" /> 参数为 null。 </exception>
    </member>
    <member name="P:System.Net.WebPermission.ConnectList">
      <summary>此属性返回该 <see cref="T:System.Net.WebPermission" /> 持有的单个连接权限的枚举。返回枚举中包含的可能对象类型是 <see cref="T:System.String" /> 和 <see cref="T:System.Text.RegularExpressions.Regex" />。</summary>
      <returns>包含连接权限的 <see cref="T:System.Collections.IEnumerator" /> 接口。</returns>
    </member>
    <member name="M:System.Net.WebPermission.Copy">
      <summary>创建 <see cref="T:System.Net.WebPermission" /> 的副本。</summary>
      <returns>
        <see cref="T:System.Net.WebPermission" /> 类的新实例，该实例与原始权限具有相同的值。 </returns>
    </member>
    <member name="M:System.Net.WebPermission.FromXml(System.Security.SecurityElement)">
      <summary>通过 XML 编码重新构造 <see cref="T:System.Net.WebPermission" />。</summary>
      <param name="securityElement">通过其重新构造 <see cref="T:System.Net.WebPermission" /> 的 XML 编码。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityElement" /> 参数为 null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="securityElement" /> 不是此类型的权限元素。 </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.WebPermission.Intersect(System.Security.IPermission)">
      <summary>返回两个 <see cref="T:System.Net.WebPermission" /> 实例的逻辑交集。</summary>
      <returns>一个新 <see cref="T:System.Net.WebPermission" />，表示当前实例和 <paramref name="target" /> 参数的交集。如果该交集为空，则该方法返回 null。</returns>
      <param name="target">与当前实例进行比较的 <see cref="T:System.Net.WebPermission" />。 </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不为 null，或者不是 <see cref="T:System.Net.WebPermission" /> 类型。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.WebPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前 <see cref="T:System.Net.WebPermission" /> 是否是指定对象的子集。</summary>
      <returns>
如果当前实例是 <paramref name="target" /> 参数的子集，则为 true；否则为 false。如果目标为 null，则对于受限制的、空的当前权限，该方法返回 true，否则返回 false。</returns>
      <param name="target">要与当前 <see cref="T:System.Net.WebPermission" /> 进行比较的 <see cref="T:System.Net.WebPermission" />。 </param>
      <exception cref="T:System.ArgumentException">目标参数不是 <see cref="T:System.Net.WebPermission" /> 的实例。 </exception>
      <exception cref="T:System.NotSupportedException">当前实例包含 Regex 编码的权限并且目标实例中未找到完全相同的权限。 </exception>
    </member>
    <member name="M:System.Net.WebPermission.IsUnrestricted">
      <summary>检查 <see cref="T:System.Net.WebPermission" /> 的整体权限状态。</summary>
      <returns>
如果 <see cref="T:System.Net.WebPermission" /> 是使用 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /><see cref="T:System.Security.Permissions.PermissionState" /> 创建的，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Net.WebPermission.ToXml">
      <summary>创建 <see cref="T:System.Net.WebPermission" /> 及其当前状态的 XML 编码。</summary>
      <returns>一个 <see cref="T:System.Security.SecurityElement" />，包含 <see cref="T:System.Net.WebPermission" />（包括状态信息）的 XML 编码表示形式。</returns>
    </member>
    <member name="M:System.Net.WebPermission.Union(System.Security.IPermission)">
      <summary>返回 <see cref="T:System.Net.WebPermission" /> 类两个实例之间的逻辑并集。</summary>
      <returns>
        <see cref="T:System.Net.WebPermission" />，表示当前实例和 <paramref name="target" /> 参数的并集。如果其中任何一个 WebPermission 是 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />，则该方法返回一个为 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> 的 <see cref="T:System.Net.WebPermission" />。如果目标为 null，则该方法返回当前 <see cref="T:System.Net.WebPermission" /> 的副本。</returns>
      <param name="target">与当前 <see cref="T:System.Net.WebPermission" /> 进行合并的 <see cref="T:System.Net.WebPermission" />。 </param>
      <exception cref="T:System.ArgumentException">目标不为 null，或者不是 <see cref="T:System.Net.WebPermission" /> 类型。 </exception>
    </member>
    <member name="T:System.Net.WebPermissionAttribute">
      <summary>指定权限以访问 Internet 资源。无法继承此类。</summary>
    </member>
    <member name="M:System.Net.WebPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>用指定可在此类上执行的安全操作的值初始化 <see cref="T:System.Net.WebPermissionAttribute" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="action" /> 不是有效的 <see cref="T:System.Security.Permissions.SecurityAction" /> 值。</exception>
    </member>
    <member name="P:System.Net.WebPermissionAttribute.Accept">
      <summary>获取或设置当前 <see cref="T:System.Net.WebPermissionAttribute" /> 接受的 URI 字符串。</summary>
      <returns>一个字符串，包含当前 <see cref="T:System.Net.WebPermissionAttribute" /> 接受的 URI。</returns>
      <exception cref="T:System.ArgumentException">
                当试图设置该值时，<see cref="P:System.Net.WebPermissionAttribute.Accept" /> 不为 null。如果希望指定多个 Accept URI，请使用附加的属性声明语句。</exception>
    </member>
    <member name="P:System.Net.WebPermissionAttribute.AcceptPattern">
      <summary>获取或设置正则表达式模式，该正则表达式模式描述当前 <see cref="T:System.Net.WebPermissionAttribute" /> 接受的 URI。</summary>
      <returns>一个字符串，包含描述当前 <see cref="T:System.Net.WebPermissionAttribute" /> 接受的 URI 的正则表达式模式。必须根据对 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数字符串编码的规则对该字符串进行转义。</returns>
      <exception cref="T:System.ArgumentException">
                当试图设置该值时，<see cref="P:System.Net.WebPermissionAttribute.AcceptPattern" /> 不为 null。如果希望指定多个 Accept URI，请使用附加的属性声明语句。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.WebPermissionAttribute.Connect">
      <summary>获取或设置当前 <see cref="T:System.Net.WebPermissionAttribute" /> 控制的 URI 连接字符串。</summary>
      <returns>一个字符串，包含当前 <see cref="T:System.Net.WebPermissionAttribute" /> 控制的 URI 连接。</returns>
      <exception cref="T:System.ArgumentException">
                当试图设置该值时，<see cref="P:System.Net.WebPermissionAttribute.Connect" /> 不为 null。如果希望指定多个 Connect URI，请使用附加的属性声明语句。</exception>
    </member>
    <member name="P:System.Net.WebPermissionAttribute.ConnectPattern">
      <summary>获取或设置描述当前 <see cref="T:System.Net.WebPermissionAttribute" /> 控制的 URI 连接的正则表达式模式。</summary>
      <returns>一个字符串，包含描述该 <see cref="T:System.Net.WebPermissionAttribute" /> 控制的 URI 连接的正则表达式模式。</returns>
      <exception cref="T:System.ArgumentException">
                当试图设置该值时，<see cref="P:System.Net.WebPermissionAttribute.ConnectPattern" /> 不为 null。如果希望指定多个 Connect URI，请使用附加的属性声明语句。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.WebPermissionAttribute.CreatePermission">
      <summary>创建并返回 <see cref="T:System.Net.WebPermission" /> 类的新实例。</summary>
      <returns>与安全声明相对应的 <see cref="T:System.Net.WebPermission" />。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="T:System.Net.WebProxy">
      <summary>包含 <see cref="T:System.Net.WebRequest" /> 类的 HTTP 代理设置。</summary>
    </member>
    <member name="M:System.Net.WebProxy.#ctor">
      <summary>初始化 <see cref="T:System.Net.WebProxy" /> 类的空实例。</summary>
    </member>
    <member name="M:System.Net.WebProxy.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用以前经过序列化的内容对 <see cref="T:System.Net.WebProxy" /> 类的实例进行初始化。</summary>
      <param name="serializationInfo">序列化数据。</param>
      <param name="streamingContext">序列化数据的上下文。</param>
    </member>
    <member name="M:System.Net.WebProxy.#ctor(System.String)">
      <summary>用指定 URI 初始化 <see cref="T:System.Net.WebProxy" /> 类的新实例。</summary>
      <param name="Address">代理服务器的 URI。</param>
      <exception cref="T:System.UriFormatException">
        <paramref name="Address" /> 是无效的 URI。</exception>
    </member>
    <member name="M:System.Net.WebProxy.#ctor(System.String,System.Boolean)">
      <summary>用指定的 URI 和回避设置初始化 <see cref="T:System.Net.WebProxy" /> 类的新实例。</summary>
      <param name="Address">代理服务器的 URI。</param>
      <param name="BypassOnLocal">
                如果对本地地址跳过代理，则为 true；否则，为 false。</param>
      <exception cref="T:System.UriFormatException">
        <paramref name="Address" /> 是无效的 URI。</exception>
    </member>
    <member name="M:System.Net.WebProxy.#ctor(System.String,System.Boolean,System.String[])">
      <summary>用指定的 URI、回避设置和回避 URI 列表初始化 <see cref="T:System.Net.WebProxy" /> 类的新实例。</summary>
      <param name="Address">代理服务器的 URI。</param>
      <param name="BypassOnLocal">
                如果对本地地址跳过代理，则为 true；否则，为 false。</param>
      <param name="BypassList">一个正则表达式字符串数组，它包含要跳过的服务器的 URI。</param>
      <exception cref="T:System.UriFormatException">
        <paramref name="Address" /> 是无效的 URI。</exception>
    </member>
    <member name="M:System.Net.WebProxy.#ctor(System.String,System.Boolean,System.String[],System.Net.ICredentials)">
      <summary>用指定的 URI、回避设置、回避的 URI 列表和凭据初始化 <see cref="T:System.Net.WebProxy" /> 类的新实例。</summary>
      <param name="Address">代理服务器的 URI。</param>
      <param name="BypassOnLocal">
如果对本地地址跳过代理，则为 true；否则，为 false。</param>
      <param name="BypassList">一个正则表达式字符串数组，它包含要跳过的服务器的 URI。</param>
      <param name="Credentials">要提交给代理服务器进行身份验证的 <see cref="T:System.Net.ICredentials" /> 实例。</param>
      <exception cref="T:System.UriFormatException">
        <paramref name="Address" /> 是无效的 URI。</exception>
    </member>
    <member name="M:System.Net.WebProxy.#ctor(System.String,System.Int32)">
      <summary>用指定的主机和端口号初始化 <see cref="T:System.Net.WebProxy" /> 类的新实例。</summary>
      <param name="Host">代理主机的名称。</param>
      <param name="Port">要使用的 <paramref name="Host" /> 上的端口号。</param>
      <exception cref="T:System.UriFormatException">通过组合 <paramref name="Host" /> 和 <paramref name="Port" /> 构成的 URI 不是有效的 URI。</exception>
    </member>
    <member name="M:System.Net.WebProxy.#ctor(System.Uri)">
      <summary>从指定的 <see cref="T:System.Uri" /> 实例初始化 <see cref="T:System.Net.WebProxy" /> 类的新实例。</summary>
      <param name="Address">包含代理服务器地址的 <see cref="T:System.Uri" /> 实例。</param>
    </member>
    <member name="M:System.Net.WebProxy.#ctor(System.Uri,System.Boolean)">
      <summary>用 <see cref="T:System.Uri" /> 实例和回避设置初始化 <see cref="T:System.Net.WebProxy" /> 类的新实例。</summary>
      <param name="Address">包含代理服务器地址的 <see cref="T:System.Uri" /> 实例。</param>
      <param name="BypassOnLocal">
                如果对本地地址跳过代理，则为 true；否则，为 false。</param>
    </member>
    <member name="M:System.Net.WebProxy.#ctor(System.Uri,System.Boolean,System.String[])">
      <summary>用指定的 <see cref="T:System.Uri" /> 实例、回避设置和回避的 URI 列表初始化 <see cref="T:System.Net.WebProxy" /> 类的新实例。</summary>
      <param name="Address">包含代理服务器地址的 <see cref="T:System.Uri" /> 实例。</param>
      <param name="BypassOnLocal">
                如果对本地地址跳过代理，则为 true；否则，为 false。</param>
      <param name="BypassList">一个正则表达式字符串数组，它包含要跳过的服务器的 URI。</param>
    </member>
    <member name="M:System.Net.WebProxy.#ctor(System.Uri,System.Boolean,System.String[],System.Net.ICredentials)">
      <summary>用指定的 <see cref="T:System.Uri" /> 实例、回避设置、回避的 URI 列表和凭据初始化 <see cref="T:System.Net.WebProxy" /> 类的新实例。</summary>
      <param name="Address">包含代理服务器地址的 <see cref="T:System.Uri" /> 实例。</param>
      <param name="BypassOnLocal">
如果对本地地址跳过代理，则为 true；否则，为 false。</param>
      <param name="BypassList">一个正则表达式字符串数组，它包含要跳过的服务器的 URI。</param>
      <param name="Credentials">要提交给代理服务器进行身份验证的 <see cref="T:System.Net.ICredentials" /> 实例。</param>
    </member>
    <member name="P:System.Net.WebProxy.Address">
      <summary>获取或设置代理服务器的地址。</summary>
      <returns>包含代理服务器地址的 <see cref="T:System.Uri" /> 实例。</returns>
    </member>
    <member name="P:System.Net.WebProxy.BypassArrayList">
      <summary>获取不使用代理服务器的地址列表。</summary>
      <returns>一个 <see cref="T:System.Collections.ArrayList" />，其中包含表示 URI 的 <see cref="P:System.Net.WebProxy.BypassList" /> 数组的列表，这些 URI 在被访问时不使用代理服务器。</returns>
    </member>
    <member name="P:System.Net.WebProxy.BypassList">
      <summary>获取或设置一个地址数组，这些地址不使用代理服务器。</summary>
      <returns>包含描述 URI 的正则表达式列表的数组，这些 URI 在被访问时不使用代理服务器。</returns>
    </member>
    <member name="P:System.Net.WebProxy.BypassProxyOnLocal">
      <summary>获取或设置一个值，该值指示是否对本地地址不使用代理服务器。</summary>
      <returns>
            如果对本地地址不使用代理服务器，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="P:System.Net.WebProxy.Credentials">
      <summary>获取或设置提交给代理服务器进行身份验证的凭据。</summary>
      <returns>一个 <see cref="T:System.Net.ICredentials" /> 实例，它包含要提交给代理服务器进行身份验证的凭据。</returns>
      <exception cref="T:System.InvalidOperationException">当 <see cref="P:System.Net.WebProxy.UseDefaultCredentials" /> 属性被设置为 true 时，试图设置此属性。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.WebProxy.GetDefaultProxy">
      <summary>读取 Internet Explorer 非动态代理设置。</summary>
      <returns>一个 <see cref="T:System.Net.WebProxy" /> 实例，它包含 Internet Explorer 5.5 及更高版本中的非动态代理设置。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Net.WebPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.WebProxy.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化目标对象所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="serializationInfo">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="streamingContext">用于指定该序列化的目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.Net.WebProxy.GetProxy(System.Uri)">
      <summary>返回请求的已代理的 URI。</summary>
      <returns>如果资源在回避列表上，则为 Internet 资源的 <see cref="T:System.Uri" /> 实例；否则为代理的 <see cref="T:System.Uri" /> 实例。</returns>
      <param name="destination">所请求的 Internet 资源的 <see cref="T:System.Uri" /> 实例。</param>
    </member>
    <member name="M:System.Net.WebProxy.IsBypassed(System.Uri)">
      <summary>指示是否对指定的主机使用代理服务器。</summary>
      <returns>
            如果代理服务器不应用于 <paramref name="host" />，则为 true；否则，为 false。</returns>
      <param name="host">要检查代理使用情况的主机的 <see cref="T:System.Uri" /> 实例。</param>
    </member>
    <member name="M:System.Net.WebProxy.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>创建系统序列化 <see cref="T:System.Net.WebProxy" /> 对象时所使用的序列化数据和上下文。</summary>
      <param name="serializationInfo">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="streamingContext">指定该序列化的目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 结构。</param>
    </member>
    <member name="P:System.Net.WebProxy.UseDefaultCredentials">
      <summary>获取或设置 <see cref="T:System.Boolean" /> 值，该值控制 <see cref="P:System.Net.CredentialCache.DefaultCredentials" /> 是否随请求一起发送。</summary>
      <returns>
            如果使用默认凭据，则为 true；否则为 false。默认值为 false。</returns>
      <exception cref="T:System.InvalidOperationException">当 <see cref="P:System.Net.WebProxy.Credentials" /> 属性包含默认凭据以外的凭据时，试图设置此属性。有关更多信息，请参见“备注”部分。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="USERNAME" />
      </PermissionSet>
    </member>
    <member name="T:System.Net.WebRequest">
      <summary>发出对统一资源标识符 (URI) 的请求。这是一个 abstract 类。</summary>
    </member>
    <member name="M:System.Net.WebRequest.#ctor">
      <summary>初始化 <see cref="T:System.Net.WebRequest" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.WebRequest.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的指定实例初始化 <see cref="T:System.Net.WebRequest" /> 类的新实例。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含序列化新的 <see cref="T:System.Net.WebRequest" /> 实例所需的信息。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，指示与新的 <see cref="T:System.Net.WebRequest" /> 实例关联的序列化流的源。</param>
      <exception cref="T:System.NotImplementedException">当未在子类中重写该构造函数时，试图访问该构造函数。</exception>
    </member>
    <member name="M:System.Net.WebRequest.Abort">
      <summary>中止请求</summary>
      <exception cref="T:System.NotImplementedException">当未在子类中重写该方法时，试图访问该方法。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.WebRequest.AuthenticationLevel">
      <summary>获取或设置用于此请求的身份验证和模拟的级别。</summary>
      <returns>
        <see cref="T:System.Net.Security.AuthenticationLevel" /> 值的按位组合。默认值为 <see cref="F:System.Net.Security.AuthenticationLevel.MutualAuthRequested" />。在相互身份验证中，客户端和服务器双方都出示凭据以确定其身份。<see cref="F:System.Net.Security.AuthenticationLevel.MutualAuthRequired" /> 和 <see cref="F:System.Net.Security.AuthenticationLevel.MutualAuthRequested" /> 值与 Kerberos 身份验证有关。可以直接支持 Kerberos 身份验证，也可以仅在使用 Negotiate 安全协议选择实际的安全协议时使用该身份验证。有关身份验证协议的更多信息，请参见 Internet 身份验证。若要确定相互身份验证是否发生，请检查 <see cref="P:System.Net.WebResponse.IsMutuallyAuthenticated" /> 属性。如果您指定了 <see cref="F:System.Net.Security.AuthenticationLevel.MutualAuthRequired" /> 身份验证标志值，而未发生相互身份验证，则应用程序将收到一个带有 <see cref="T:System.Net.ProtocolViolationException" /> 内部异常的 <see cref="T:System.IO.IOException" />，指示相互身份验证失败。</returns>
    </member>
    <member name="M:System.Net.WebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)">
      <summary>当在子类中重写时，提供 <see cref="M:System.Net.WebRequest.GetRequestStream" /> 方法的异步版本。</summary>
      <returns>引用该异步请求的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">包含此异步请求的状态信息的对象。</param>
      <exception cref="T:System.NotImplementedException">当未在子类中重写该方法时，试图访问该方法。</exception>
    </member>
    <member name="M:System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)">
      <summary>当在子类中被重写时，开始对 Internet 资源的异步请求。</summary>
      <returns>引用该异步请求的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">包含此异步请求的状态信息的对象。</param>
      <exception cref="T:System.NotImplementedException">当未在子类中重写该方法时，试图访问该方法。</exception>
    </member>
    <member name="P:System.Net.WebRequest.CachePolicy">
      <summary>获取或设置此请求的缓存策略。</summary>
      <returns>定义缓存策略的 <see cref="T:System.Net.Cache.RequestCachePolicy" /> 对象。</returns>
    </member>
    <member name="P:System.Net.WebRequest.ConnectionGroupName">
      <summary>当在子类中重写时，获取或设置请求的连接组的名称。</summary>
      <returns>请求的连接组的名称。</returns>
      <exception cref="T:System.NotImplementedException">当未在子类中重写该属性时，试图获取或设置该属性。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.WebRequest.ContentLength">
      <summary>当在子类中被重写时，获取或设置所发送的请求数据的内容长度。</summary>
      <returns>发送的请求数据的字节数。</returns>
      <exception cref="T:System.NotImplementedException">当未在子类中重写该属性时，试图获取或设置该属性。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.WebRequest.ContentType">
      <summary>当在子类中被重写时，获取或设置所发送的请求数据的内容类型。</summary>
      <returns>请求数据的内容类型。</returns>
      <exception cref="T:System.NotImplementedException">当未在子类中重写该属性时，试图获取或设置该属性。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.WebRequest.Create(System.String)">
      <summary>为指定的 URI 方案初始化新的 <see cref="T:System.Net.WebRequest" /> 实例。</summary>
      <returns>特定 URI 方案的 <see cref="T:System.Net.WebRequest" /> 子代。</returns>
      <param name="requestUriString">标识 Internet 资源的 URI。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="requestUriString" /> 中指定的请求方案尚未注册。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUriString" /> 为 null。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有连接到请求的 URI 或请求重定向到的 URI 上的权限。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="requestUriString" /> 中指定的 URI 不是有效的 URI。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.WebRequest.Create(System.Uri)">
      <summary>为指定的 URI 方案初始化新的 <see cref="T:System.Net.WebRequest" /> 实例。</summary>
      <returns>指定的 URI 方案的 <see cref="T:System.Net.WebRequest" /> 子代。</returns>
      <param name="requestUri">包含请求的资源的 URI 的 <see cref="T:System.Uri" />。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="requestUri" /> 中指定的请求方案未注册。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> 为 null。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有连接到请求的 URI 或请求重定向到的 URI 上的权限。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.WebRequest.CreateDefault(System.Uri)">
      <summary>为指定的 URI 方案初始化新的 <see cref="T:System.Net.WebRequest" /> 实例。</summary>
      <returns>指定的 URI 方案的 <see cref="T:System.Net.WebRequest" /> 子代。</returns>
      <param name="requestUri">包含请求的资源的 URI 的 <see cref="T:System.Uri" />。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="requestUri" /> 中指定的请求方案未注册。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> 为 null。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有连接到请求的 URI 或请求重定向到的 URI 上的权限。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.WebRequest.Credentials">
      <summary>当在子类中被重写时，获取或设置用于对 Internet 资源请求进行身份验证的网络凭据。</summary>
      <returns>包含与该请求关联的身份验证凭据的 <see cref="T:System.Net.ICredentials" />。默认为 null。</returns>
      <exception cref="T:System.NotImplementedException">当未在子类中重写该属性时，试图获取或设置该属性。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.WebRequest.DefaultCachePolicy">
      <summary>获取或设置此请求的默认缓存策略。</summary>
      <returns>一个 <see cref="T:System.Net.Cache.HttpRequestCachePolicy" />，它指定当没有其他策略适用时对此请求有效的缓存策略。</returns>
    </member>
    <member name="P:System.Net.WebRequest.DefaultWebProxy">
      <summary>获取或设置全局 HTTP 代理。</summary>
      <returns>对 <see cref="T:System.Net.WebRequest" /> 实例的每一次调用所使用的 <see cref="T:System.Net.IWebProxy" />。</returns>
    </member>
    <member name="M:System.Net.WebRequest.EndGetRequestStream(System.IAsyncResult)">
      <summary>当在子类中重写时，返回用于将数据写入 Internet 资源的 <see cref="T:System.IO.Stream" />。</summary>
      <returns>将数据写入的 <see cref="T:System.IO.Stream" />。</returns>
      <param name="asyncResult">引用对流的挂起请求的 <see cref="T:System.IAsyncResult" />。</param>
      <exception cref="T:System.NotImplementedException">当未在子类中重写该方法时，试图访问该方法。</exception>
    </member>
    <member name="M:System.Net.WebRequest.EndGetResponse(System.IAsyncResult)">
      <summary>当在子类中重写时，返回 <see cref="T:System.Net.WebResponse" />。</summary>
      <returns>包含对 Internet 请求的响应的 <see cref="T:System.Net.WebResponse" />。</returns>
      <param name="asyncResult">引用对响应的挂起请求的 <see cref="T:System.IAsyncResult" />。</param>
      <exception cref="T:System.NotImplementedException">当未在子类中重写该方法时，试图访问该方法。</exception>
    </member>
    <member name="M:System.Net.WebRequest.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用将目标对象序列化所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="serializationInfo">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="streamingContext">用于指定该序列化的目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.Net.WebRequest.GetRequestStream">
      <summary>当在子类中重写时，返回用于将数据写入 Internet 资源的 <see cref="T:System.IO.Stream" />。</summary>
      <returns>用于将数据写入 Internet 资源的 <see cref="T:System.IO.Stream" />。</returns>
      <exception cref="T:System.NotImplementedException">当未在子类中重写该方法时，试图访问该方法。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.WebRequest.GetResponse">
      <summary>当在子类中被重写时，返回对 Internet 请求的响应。</summary>
      <returns>包含对 Internet 请求的响应的 <see cref="T:System.Net.WebResponse" />。</returns>
      <exception cref="T:System.NotImplementedException">当未在子类中重写该方法时，试图访问该方法。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.WebRequest.GetSystemWebProxy">
      <summary>返回当前模拟用户的 Internet Explorer 设置中配置的代理。</summary>
      <returns>对 <see cref="T:System.Net.WebRequest" /> 实例的每一次调用所使用的 <see cref="T:System.Net.IWebProxy" />。</returns>
    </member>
    <member name="P:System.Net.WebRequest.Headers">
      <summary>当在子类中被重写时，获取或设置与请求关联的标头名称/值对的集合。</summary>
      <returns>包含与此请求关联的标题名/值对的 <see cref="T:System.Net.WebHeaderCollection" />。</returns>
      <exception cref="T:System.NotImplementedException">当未在子类中重写该属性时，试图获取或设置该属性。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.WebRequest.ImpersonationLevel">
      <summary>获取或设置当前请求的模拟级别。</summary>
      <returns>
        <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值。</returns>
    </member>
    <member name="P:System.Net.WebRequest.Method">
      <summary>当在子类中被重写时，获取或设置要在此请求中使用的协议方法。</summary>
      <returns>在此请求中使用的协议方法。</returns>
      <exception cref="T:System.NotImplementedException">在子类中未重写该属性的情况下，试图获取或设置该属性。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.WebRequest.PreAuthenticate">
      <summary>当在子类中被重写时，指示是否对请求进行预身份验证。</summary>
      <returns>
            若要进行预身份验证，则为 true；否则为 false。</returns>
      <exception cref="T:System.NotImplementedException">当未在子类中重写该属性时，试图获取或设置该属性。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.WebRequest.Proxy">
      <summary>当在子类中被重写时，获取或设置用于访问此 Internet 资源的网络代理。</summary>
      <returns>用于访问 Internet 资源的 <see cref="T:System.Net.IWebProxy" />。</returns>
      <exception cref="T:System.NotImplementedException">当未在子类中重写该属性时，试图获取或设置该属性。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.WebRequest.RegisterPrefix(System.String,System.Net.IWebRequestCreate)">
      <summary>为指定的 URI 注册 <see cref="T:System.Net.WebRequest" /> 子代。</summary>
      <returns>
            如果注册成功，则为 true；否则为 false。</returns>
      <param name="prefix">
        <see cref="T:System.Net.WebRequest" /> 子代为其提供服务的完整 URI 或 URI 前缀。</param>
      <param name="creator">创建方法，<see cref="T:System.Net.WebRequest" /> 调用它以创建 <see cref="T:System.Net.WebRequest" /> 子代。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="prefix" /> 为null- 或 -<paramref name="creator" /> 为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
        <IPermission class="System.Net.WebPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.WebRequest.RequestUri">
      <summary>当在子类中被重写时，获取与请求关联的 Internet 资源的 URI。</summary>
      <returns>表示与请求关联的资源的 <see cref="T:System.Uri" />。</returns>
      <exception cref="T:System.NotImplementedException">当未在子类中重写该属性时，试图获取或设置该属性。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.WebRequest.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>当在子代类中重写时，使用序列化 <see cref="T:System.Net.WebRequest" /> 所需要的数据来填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例。</summary>
      <param name="serializationInfo">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它保存 <see cref="T:System.Net.WebRequest" /> 的序列化数据。</param>
      <param name="streamingContext">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" />，包含与新的 <see cref="T:System.Net.WebRequest" /> 关联的序列化流的目标。</param>
      <exception cref="T:System.NotImplementedException">当未在子代类中重写该接口时，试图序列化该对象。</exception>
    </member>
    <member name="P:System.Net.WebRequest.Timeout">
      <summary>获取或设置请求超时之前的时间长度（以毫秒为单位）。</summary>
      <returns>请求超时前的时间长度（以毫秒为单位）或指示请求不超时的 <see cref="F:System.Threading.Timeout.Infinite" /> 值。默认值是由子代类定义的。</returns>
      <exception cref="T:System.NotImplementedException">当未在子类中重写该属性时，试图获取或设置该属性。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.WebRequest.UseDefaultCredentials">
      <summary>当在子代类中重写时，获取或设置一个 <see cref="T:System.Boolean" /> 值，该值控制 <see cref="P:System.Net.CredentialCache.DefaultCredentials" /> 是否随请求一起发送。</summary>
      <returns>
            如果使用默认凭据，则为 true；否则为 false。默认值为 false。</returns>
      <exception cref="T:System.InvalidOperationException">您试图在该请求发送之后设置此属性。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.Net.WebRequestMethods">
      <summary>
        <see cref="T:System.Net.WebRequestMethods.Ftp" />、<see cref="T:System.Net.WebRequestMethods.File" /> 和 <see cref="T:System.Net.WebRequestMethods.Http" /> 类的容器类。无法继承此类</summary>
    </member>
    <member name="T:System.Net.WebRequestMethods.File">
      <summary>表示可用于 FILE 请求的文件协议方法的类型。无法继承此类。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.File.DownloadFile">
      <summary>表示用来从指定的位置检索文件的 FILE GET 协议方法。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.File.UploadFile">
      <summary>表示用来将文件复制到指定位置的 FILE PUT 协议方法。</summary>
    </member>
    <member name="T:System.Net.WebRequestMethods.Ftp">
      <summary>
                    表示可与 FTP 请求一起使用的 FTP 协议方法的类型。无法继承此类。
                </summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.AppendFile">
      <summary>
                    表示要用于将文件追加到 FTP 服务器上的现有文件的 FTP APPE 协议方法。
                </summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.DeleteFile">
      <summary>
                    表示要用于删除 FTP 服务器上的文件的 FTP DELE 协议方法。
                </summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.DownloadFile">
      <summary>
                    表示要用于从 FTP 服务器下载文件的 FTP RETR 协议方法。
                </summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.GetDateTimestamp">
      <summary>
表示要用于从 FTP 服务器上的文件检索日期时间戳的 FTP MDTM 协议方法。
                </summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.GetFileSize">
      <summary>
                    表示要用于检索 FTP 服务器上的文件大小的 FTP SIZE 协议方法。
                </summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.ListDirectory">
      <summary>
                    表示获取 FTP 服务器上的文件的简短列表的 FTP NLIST 协议方法。
                </summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.ListDirectoryDetails">
      <summary>
                    表示获取 FTP 服务器上的文件的详细列表的 FTP LIST 协议方法。
                </summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.MakeDirectory">
      <summary>
                    表示在 FTP 服务器上创建目录的 FTP MKD 协议方法。
                </summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.PrintWorkingDirectory">
      <summary>
                    表示打印当前工作目录的名称的 FTP PWD 协议方法。
                </summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.RemoveDirectory">
      <summary>
                    表示移除目录的 FTP RMD 协议方法。
                </summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.Rename">
      <summary>
                    表示重命名目录的 FTP RENAME 协议方法。
                </summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.UploadFile">
      <summary>
                    表示将文件上载到 FTP 服务器的 FTP STOR 协议方法。
                </summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.UploadFileWithUniqueName">
      <summary>
                    表示将具有唯一名称的文件上载到 FTP 服务器的 FTP STOU 协议方法。
                </summary>
    </member>
    <member name="T:System.Net.WebRequestMethods.Http">
      <summary>表示可与 HTTP 请求一起使用的 HTTP 协议方法的类型。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Http.Connect">
      <summary>表示与代理一起使用的 HTTP CONNECT 协议方法，该代理可以动态切换到隧道，如 SSL 隧道的情况。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Http.Get">
      <summary>表示一个 HTTP GET 协议方法。 </summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Http.Head">
      <summary>表示一个 HTTP HEAD 协议方法。除了服务器在响应中只返回消息头不返回消息体以外，HEAD 方法和 GET 是一样的。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Http.MkCol">
      <summary>表示一个 HTTP MKCOL 请求，该请求在请求 URI（统一资源标识符）指定的位置新建集合，如页的集合。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Http.Post">
      <summary>表示一个 HTTP POST 协议方法，该方法用于将新实体作为补充发送到某个 URI。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Http.Put">
      <summary>表示一个 HTTP PUT 协议方法，该方法用于替换 URI 标识的实体。</summary>
    </member>
    <member name="T:System.Net.WebResponse">
      <summary>提供来自统一资源标识符 (URI) 的响应。这是一个 abstract 类。</summary>
    </member>
    <member name="M:System.Net.WebResponse.#ctor">
      <summary>初始化 <see cref="T:System.Net.WebResponse" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.WebResponse.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的指定实例初始化 <see cref="T:System.Net.WebResponse" /> 类的新实例。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 类的实例，包含序列化新 <see cref="T:System.Net.WebRequest" /> 实例所需的信息。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的实例，指示与新的 <see cref="T:System.Net.WebRequest" /> 实例关联的序列化流的源。</param>
      <exception cref="T:System.NotSupportedException">当未在子类中重写该构造函数时，试图访问该构造函数。</exception>
    </member>
    <member name="M:System.Net.WebResponse.Close">
      <summary>当由子类重写时，将关闭响应流。</summary>
      <exception cref="T:System.NotSupportedException">当未在子类中重写该方法时，试图访问该方法。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.WebResponse.ContentLength">
      <summary>当在子类中重写时，获取或设置接收的数据的内容长度。</summary>
      <returns>从 Internet 资源返回的字节数。</returns>
      <exception cref="T:System.NotSupportedException">当未在子类中重写该属性时，试图获取或设置该属性。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.WebResponse.ContentType">
      <summary>当在派生类中重写时，获取或设置接收的数据的内容类型。</summary>
      <returns>包含响应的内容类型的字符串。</returns>
      <exception cref="T:System.NotSupportedException">当未在子类中重写该属性时，试图获取或设置该属性。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.WebResponse.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化目标对象所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="serializationInfo">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="streamingContext">用于指定该序列化的目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.Net.WebResponse.GetResponseStream">
      <summary>当在子类中重写时，从 Internet 资源返回数据流。</summary>
      <returns>用于从 Internet 资源中读取数据的 <see cref="T:System.IO.Stream" /> 类的实例。</returns>
      <exception cref="T:System.NotSupportedException">当未在子类中重写该方法时，试图访问该方法。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.WebResponse.Headers">
      <summary>当在派生类中重写时，获取与此请求关联的标头名称/值对的集合。</summary>
      <returns>
        <see cref="T:System.Net.WebHeaderCollection" /> 类的实例，包含与此响应关联的标头值。</returns>
      <exception cref="T:System.NotSupportedException">当未在子类中重写该属性时，试图获取或设置该属性。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.WebResponse.IsFromCache">
      <summary>获取一个 <see cref="T:System.Boolean" /> 值，该值指示此响应是否为从缓存中获取的。</summary>
      <returns>
            如果此响应来自缓存，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.WebResponse.IsMutuallyAuthenticated">
      <summary>获取一个 <see cref="T:System.Boolean" /> 值，该值指示是否发生了相互身份验证。</summary>
      <returns>
            如果客户端和服务器均经过验证，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.WebResponse.ResponseUri">
      <summary>当在派生类中重写时，获取实际响应此请求的 Internet 资源的 URI。</summary>
      <returns>
        <see cref="T:System.Uri" /> 类的实例，包含实际响应此请求的 Internet 资源的 URI。</returns>
      <exception cref="T:System.NotSupportedException">当未在子类中重写该属性时，试图获取或设置该属性。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.WebResponse.System#IDisposable#Dispose">
      <summary>当在派生类中被重写时，释放 <see cref="T:System.Net.WebResponse" /> 使用的所有资源。</summary>
      <exception cref="T:System.NotSupportedException">当未在子类中重写该方法时，试图访问该方法。</exception>
    </member>
    <member name="M:System.Net.WebResponse.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化 <see cref="T:System.Net.WebResponse" /> 所需的数据来填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例。</summary>
      <param name="serializationInfo">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，将存放 <see cref="T:System.Net.WebResponse" /> 的序列化数据。</param>
      <param name="streamingContext">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" />，包含与新的 <see cref="T:System.Net.WebResponse" /> 关联的序列化流的目标。</param>
    </member>
    <member name="M:System.Net.ServicePoint.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)"></member>
    <member name="M:System.Net.ServicePointManager.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)">
      <param name="enabled">
                    对 TCP 连接启用或禁用 keep-alive 选项。
                </param>
      <param name="keepAliveTime">
                    指定发送第一个 keep-alive 数据包之前没有活动的超时时间（以毫秒为单位）。
                </param>
      <param name="keepAliveInterval">
                    指定当未收到确认消息时发送连续 keep-alive 数据包之间的间隔（以毫秒为单位）。
                </param>
    </member>
    <member name="M:System.Net.FileWebResponse.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Net.FileWebResponse" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">
                如果为 true，则释放托管资源和非托管资源；如果为 false，则仅释放非托管资源。</param>
    </member>
    <member name="M:System.Net.FileWebResponse.System#IDisposable#Dispose">
      <summary>释放由 <see cref="T:System.Net.FileWebResponse" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.Net.HttpWebRequest.GetHashCode">
      <summary>
                    返回 <see cref="T:System.Net.WebRequest" /> 实例的哈希值。
                </summary>
      <returns>
                    整数哈希值。
                </returns>
    </member>
    <member name="M:System.Net.HttpWebResponse.Dispose(System.Boolean)">
      <summary>
                    释放由 <see cref="T:System.Net.HttpWebResponse" /> 使用的非托管资源，并可根据需要释放托管资源。
                </summary>
      <param name="disposing">
                    如果为 true，则释放托管资源和非托管资源；如果为 false，则仅释放非托管资源。
                </param>
    </member>
    <member name="M:System.Net.HttpWebResponse.GetHashCode">
      <summary>
                    返回 <see cref="T:System.Net.HttpWebResponse" /> 实例的哈希值。
                </summary>
      <returns>
整数哈希值。
                </returns>
    </member>
    <member name="M:System.Net.HttpWebResponse.System#IDisposable#Dispose">
      <summary>
                    释放由 <see cref="T:System.Net.HttpWebResponse" /> 使用的所有资源。
                </summary>
    </member>
    <member name="M:System.Net.ServicePoint.GetHashCode">
      <summary>
                    返回 <see cref="T:System.Net.ServicePoint" /> 实例的哈希值。
                </summary>
      <returns>
整数哈希值。
                </returns>
    </member>
    <member name="M:System.Net.HttpWebRequest.Finalize"></member>
    <member name="T:System.Net.Cache.HttpCacheAgeControl">
      <summary>指定时间值的含义，这些时间值控制使用 <see cref="T:System.Net.HttpWebRequest" /> 对象获取的资源的缓存行为。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpCacheAgeControl.None">
      <summary>仅限内部使用。如果您试图使用此成员，则 Framework 将引发 <see cref="T:System.ArgumentException" />。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpCacheAgeControl.MinFresh">
      <summary>如果在过期前剩余的时间大于或等于用该值指定的时间，则可以将内容从缓存中取出。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpCacheAgeControl.MaxAge">
      <summary>在内容超出用该值指定的生存期之前，可以从缓存中取出内容。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpCacheAgeControl.MaxStale">
      <summary>在内容过期后到用该值指定的时间结束之前，可以将内容从缓存中取出。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpCacheAgeControl.MaxAgeAndMinFresh">
      <summary>
        <see cref="P:System.Net.Cache.HttpRequestCachePolicy.MaxAge" /> 和 <see cref="P:System.Net.Cache.HttpRequestCachePolicy.MinFresh" />。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpCacheAgeControl.MaxAgeAndMaxStale">
      <summary>
        <see cref="P:System.Net.Cache.HttpRequestCachePolicy.MaxAge" /> 和 <see cref="P:System.Net.Cache.HttpRequestCachePolicy.MaxStale" />。</summary>
    </member>
    <member name="T:System.Net.Cache.HttpRequestCacheLevel">
      <summary>为使用超文本传输协议 (HTTP) 获取的资源指定缓存行为。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpRequestCacheLevel.Default">
      <summary>通过使用资源的缓存副本或通过将资源请求发送到服务器来满足资源请求。采取的操作取决于当前的缓存策略和缓存内容的生存期。 </summary>
    </member>
    <member name="F:System.Net.Cache.HttpRequestCacheLevel.BypassCache">
      <summary>使用服务器满足请求。在客户端和服务器之间没有项从缓存中取出、添加到缓存中或从缓存中移除。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpRequestCacheLevel.CacheOnly">
      <summary>使用本地缓存资源满足请求，不发送对不在缓存中的项的请求。当指定此缓存策略级别时，如果项不在客户端缓存中，则引发 <see cref="T:System.Net.WebException" /> 异常。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpRequestCacheLevel.CacheIfAvailable">
      <summary>如果资源可用，则从缓存满足资源请求；否则，将资源请求发送到服务器。如果请求的项在客户端和服务器之间的任何缓存中可用，则可能由中间缓存满足请求。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpRequestCacheLevel.Revalidate">
      <summary>比较缓存中的资源副本和服务器上的副本。如果服务器上的副本更新，则使用它满足请求并替换缓存中的副本。如果缓存中的副本和服务器副本一样新，则使用缓存的副本。在 HTTP 缓存协议中，这是通过条件请求实现的。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpRequestCacheLevel.Reload">
      <summary>使用服务器满足请求。响应可能保存在缓存中。在 HTTP 缓存协议中，这是通过  no-cache 缓存控制指令和 no-cache Pragma 标头实现的。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpRequestCacheLevel.NoCacheNoStore">
      <summary>从不通过使用缓存中的资源来满足请求，也不缓存资源。如果资源在本地缓存中，则将资源移除。此策略级别指示应由中间缓存移除资源。在 HTTP 缓存协议中，这是通过 no-cache 缓存控制指令实现的。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpRequestCacheLevel.CacheOrNextCacheOnly">
      <summary>或者从本地计算机的缓存，或者从局域网上的远程缓存满足资源请求。如果无法满足请求，则引发 <see cref="T:System.Net.WebException" /> 异常。在 HTTP 缓存协议中，这是通过使用 only-if-cached 缓存控制指令实现的。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpRequestCacheLevel.Refresh">
      <summary>通过使用服务器或本地缓存以外的缓存来满足请求。在可以由中间缓存满足请求之前，该缓存必须向服务器重新验证它的缓存项。在 HTTP 缓存协议中，这是通过 max-age = 0 缓存控制指令和 no-cache Pragma 标头实现的。</summary>
    </member>
    <member name="T:System.Net.Cache.HttpRequestCachePolicy">
      <summary>为通过使用 <see cref="T:System.Net.HttpWebRequest" /> 对象获取的资源定义应用程序的缓存要求。</summary>
    </member>
    <member name="M:System.Net.Cache.HttpRequestCachePolicy.#ctor">
      <summary>初始化 <see cref="T:System.Net.Cache.HttpRequestCachePolicy" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.Cache.HttpRequestCachePolicy.#ctor(System.DateTime)">
      <summary>使用指定的缓存同步日期初始化 <see cref="T:System.Net.Cache.HttpRequestCachePolicy" /> 类的新实例。</summary>
      <param name="cacheSyncDate">一个 <see cref="T:System.DateTime" /> 对象，它指定必须重新验证缓存中存储的资源的时间。</param>
    </member>
    <member name="M:System.Net.Cache.HttpRequestCachePolicy.#ctor(System.Net.Cache.HttpCacheAgeControl,System.TimeSpan)">
      <summary>使用指定的生存期控件和时间值初始化 <see cref="T:System.Net.Cache.HttpRequestCachePolicy" /> 类的新实例。</summary>
      <param name="cacheAgeControl">以下 <see cref="T:System.Net.Cache.HttpCacheAgeControl" /> 枚举值之一：<see cref="F:System.Net.Cache.HttpCacheAgeControl.MaxAge" />、<see cref="F:System.Net.Cache.HttpCacheAgeControl.MaxStale" /> 或 <see cref="F:System.Net.Cache.HttpCacheAgeControl.MinFresh" />。</param>
      <param name="ageOrFreshOrStale">指定时间量的 <see cref="T:System.TimeSpan" /> 值。有关更多信息，请参见备注部分。</param>
      <exception cref="T:System.ArgumentException">为 <paramref name="cacheAgeControl" /> 参数指定的值不能与此构造函数一起使用。</exception>
    </member>
    <member name="M:System.Net.Cache.HttpRequestCachePolicy.#ctor(System.Net.Cache.HttpCacheAgeControl,System.TimeSpan,System.TimeSpan)">
      <summary>使用指定的最大生存期、生存期控制值和时间值初始化 <see cref="T:System.Net.Cache.HttpRequestCachePolicy" /> 类的新实例。</summary>
      <param name="cacheAgeControl">一个 <see cref="T:System.Net.Cache.HttpCacheAgeControl" /> 值。</param>
      <param name="maxAge">指定资源最大生存期的 <see cref="T:System.TimeSpan" /> 值。</param>
      <param name="freshOrStale">指定时间量的 <see cref="T:System.TimeSpan" /> 值。有关更多信息，请参见备注部分。 </param>
      <exception cref="T:System.ArgumentException">为 <paramref name="cacheAgeControl" /> 参数指定的值无效。</exception>
    </member>
    <member name="M:System.Net.Cache.HttpRequestCachePolicy.#ctor(System.Net.Cache.HttpCacheAgeControl,System.TimeSpan,System.TimeSpan,System.DateTime)">
      <summary>使用指定的最大生存期、生存期控制值、时间值和缓存同步日期初始化 <see cref="T:System.Net.Cache.HttpRequestCachePolicy" /> 类的新实例。</summary>
      <param name="cacheAgeControl">一个 <see cref="T:System.Net.Cache.HttpCacheAgeControl" /> 值。</param>
      <param name="maxAge">指定资源最大生存期的 <see cref="T:System.TimeSpan" /> 值。</param>
      <param name="freshOrStale">指定时间量的 <see cref="T:System.TimeSpan" /> 值。有关更多信息，请参见备注部分。 </param>
      <param name="cacheSyncDate">一个 <see cref="T:System.DateTime" /> 对象，它指定必须重新验证缓存中存储的资源的时间。</param>
    </member>
    <member name="M:System.Net.Cache.HttpRequestCachePolicy.#ctor(System.Net.Cache.HttpRequestCacheLevel)">
      <summary>使用指定的缓存策略初始化 <see cref="T:System.Net.Cache.HttpRequestCachePolicy" /> 类的新实例。</summary>
      <param name="level">一个 <see cref="T:System.Net.Cache.HttpRequestCacheLevel" /> 值。</param>
    </member>
    <member name="P:System.Net.Cache.HttpRequestCachePolicy.CacheSyncDate">
      <summary>获取此实例的缓存同步日期。</summary>
      <returns>一个 <see cref="T:System.DateTime" /> 值，被设置为在创建此实例时指定的日期。如果未指定日期，此属性的值则为 <see cref="F:System.DateTime.MinValue" />。</returns>
    </member>
    <member name="P:System.Net.Cache.HttpRequestCachePolicy.Level">
      <summary>获取创建此实例时指定的 <see cref="T:System.Net.Cache.HttpRequestCacheLevel" /> 值。</summary>
      <returns>一个 <see cref="T:System.Net.Cache.HttpRequestCacheLevel" /> 值，该值指定使用 <see cref="T:System.Net.HttpWebRequest" /> 对象获取的资源的缓存行为。</returns>
    </member>
    <member name="P:System.Net.Cache.HttpRequestCachePolicy.MaxAge">
      <summary>获取从缓存返回的资源所允许的最大生存期。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" /> 值，被设置为创建此实例时指定的最大生存期值。如果未指定日期，此属性的值则为 <see cref="F:System.DateTime.MinValue" />。</returns>
    </member>
    <member name="P:System.Net.Cache.HttpRequestCachePolicy.MaxStale">
      <summary>获取从缓存返回的资源所允许的最大过期值。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" /> 值，被设置为创建此实例时指定的最大过期值。如果未指定日期，此属性的值则为 <see cref="F:System.DateTime.MinValue" />。</returns>
    </member>
    <member name="P:System.Net.Cache.HttpRequestCachePolicy.MinFresh">
      <summary>获取从缓存返回的资源所允许的最小新鲜值。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" /> 值，它指定创建此实例时指定的最小新鲜值。如果未指定日期，此属性的值则为 <see cref="F:System.DateTime.MinValue" />。</returns>
    </member>
    <member name="M:System.Net.Cache.HttpRequestCachePolicy.ToString">
      <summary>返回此实例的字符串表示形式。</summary>
      <returns>包含此实例的属性值的 <see cref="T:System.String" /> 值。</returns>
    </member>
    <member name="T:System.Net.Cache.RequestCacheLevel">
      <summary>为使用 <see cref="T:System.Net.WebRequest" /> 和它的派生类获取的资源指定缓存行为。</summary>
    </member>
    <member name="F:System.Net.Cache.RequestCacheLevel.Default">
      <summary>通过使用资源的缓存副本或通过将资源请求发送到服务器来满足资源请求。采取的操作取决于当前的缓存策略和缓存内容的生存期。这是大多数应用程序应使用的缓存级别。</summary>
    </member>
    <member name="F:System.Net.Cache.RequestCacheLevel.BypassCache">
      <summary>使用服务器满足请求。在客户端和服务器之间没有项从缓存中取出、添加到缓存中或从缓存中移除。这是 .NET Framework 附带的计算机配置文件中指定的默认缓存行为。</summary>
    </member>
    <member name="F:System.Net.Cache.RequestCacheLevel.CacheOnly">
      <summary>使用本地缓存资源满足请求，不发送对不在缓存中的项的请求。当指定此缓存策略级别时，如果项不在客户端缓存中，则引发 <see cref="T:System.Net.WebException" /> 异常。</summary>
    </member>
    <member name="F:System.Net.Cache.RequestCacheLevel.CacheIfAvailable">
      <summary>如果有可用的资源，则从缓存满足资源请求；否则，将资源请求发送到服务器。如果请求的项在客户端和服务器之间的任何缓存中可用，则可能由中间缓存满足请求。</summary>
    </member>
    <member name="F:System.Net.Cache.RequestCacheLevel.Revalidate">
      <summary>如果时间戳与服务器上的资源的时间戳相同，则使用资源的缓存副本满足请求；否则从服务器下载资源，将资源展示给调用方然后存储在缓存中。</summary>
    </member>
    <member name="F:System.Net.Cache.RequestCacheLevel.Reload">
      <summary>使用服务器满足请求。响应可能保存在缓存中。在 HTTP 缓存协议中，这是通过 no-cache 缓存控制指令和 no-cache Pragma 标头实现的。</summary>
    </member>
    <member name="F:System.Net.Cache.RequestCacheLevel.NoCacheNoStore">
      <summary>从不通过使用缓存中的资源来满足请求，也不缓存资源。如果资源在本地缓存中，则将资源移除。此策略级别指示应由中间缓存移除资源。在 HTTP 缓存协议中，这是通过 no-cache 缓存控制指令实现的。</summary>
    </member>
    <member name="T:System.Net.Cache.RequestCachePolicy">
      <summary>为通过使用 <see cref="T:System.Net.WebRequest" /> 对象获取的资源定义应用程序的缓存要求。</summary>
    </member>
    <member name="M:System.Net.Cache.RequestCachePolicy.#ctor">
      <summary>初始化 <see cref="T:System.Net.Cache.RequestCachePolicy" /> 类的新实例。 </summary>
    </member>
    <member name="M:System.Net.Cache.RequestCachePolicy.#ctor(System.Net.Cache.RequestCacheLevel)">
      <summary>使用指定的缓存策略初始化 <see cref="T:System.Net.Cache.RequestCachePolicy" /> 类的新实例。</summary>
      <param name="level">一个 <see cref="T:System.Net.Cache.RequestCacheLevel" />，它为使用 <see cref="T:System.Net.WebRequest" /> 对象获取的资源指定缓存行为。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">级别不是有效的 <see cref="T:System.Net.Cache.RequestCacheLevel" /> 值。</exception>
    </member>
    <member name="P:System.Net.Cache.RequestCachePolicy.Level">
      <summary>获取构造此实例时指定的 <see cref="T:System.Net.Cache.RequestCacheLevel" /> 值。</summary>
      <returns>一个 <see cref="T:System.Net.Cache.RequestCacheLevel" /> 值，它为使用 <see cref="T:System.Net.WebRequest" /> 对象获取的资源指定缓存行为。</returns>
    </member>
    <member name="M:System.Net.Cache.RequestCachePolicy.ToString">
      <summary>返回此实例的字符串表示形式。</summary>
      <returns>一个 <see cref="T:System.String" />，包含此实例的 <see cref="P:System.Net.Cache.RequestCachePolicy.Level" />。</returns>
    </member>
    <member name="T:System.Net.Configuration.AuthenticationModuleElement">
      <summary>表示身份验证模块的类型信息。无法继承此类。</summary>
    </member>
    <member name="M:System.Net.Configuration.AuthenticationModuleElement.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.AuthenticationModuleElement" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Net.Configuration.AuthenticationModuleElement.#ctor(System.String)">
      <summary>用指定的类型信息初始化 <see cref="T:System.Net.Configuration.AuthenticationModuleElement" /> 类的新实例。</summary>
      <param name="typeName">一个字符串，它标识类型和包含该类型的程序集。</param>
    </member>
    <member name="P:System.Net.Configuration.AuthenticationModuleElement.Type">
      <summary>获取或设置当前实例的类型和程序集信息。</summary>
      <returns>一个标识实现身份验证模块的类型的字符串；如果未指定任何值，则为 null。</returns>
    </member>
    <member name="T:System.Net.Configuration.AuthenticationModuleElementCollection">
      <summary>表示身份验证模块配置元素的容器。无法继承此类。</summary>
    </member>
    <member name="M:System.Net.Configuration.AuthenticationModuleElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.AuthenticationModuleElementCollection" /> 类的新实例。 </summary>
    </member>
    <member name="M:System.Net.Configuration.AuthenticationModuleElementCollection.Add(System.Net.Configuration.AuthenticationModuleElement)">
      <summary>向集合中添加一个元素。</summary>
      <param name="element">要添加到集合中的 <see cref="T:System.Net.Configuration.AuthenticationModuleElement" />。</param>
    </member>
    <member name="M:System.Net.Configuration.AuthenticationModuleElementCollection.Clear">
      <summary>移除集合中的所有元素。</summary>
    </member>
    <member name="M:System.Net.Configuration.AuthenticationModuleElementCollection.IndexOf(System.Net.Configuration.AuthenticationModuleElement)">
      <summary>返回指定的配置元素的索引。</summary>
      <returns>
        <paramref name="element" /> 的从零开始的索引。</returns>
      <param name="element">
        <see cref="T:System.Net.Configuration.AuthenticationModuleElement" />。</param>
    </member>
    <member name="P:System.Net.Configuration.AuthenticationModuleElementCollection.Item(System.Int32)">
      <summary>获取或设置集合中指定位置的元素。</summary>
      <returns>指定索引位置的 <see cref="T:System.Net.Configuration.AuthenticationModuleElement" />。</returns>
      <param name="index">元素的索引（索引从零开始）。</param>
    </member>
    <member name="P:System.Net.Configuration.AuthenticationModuleElementCollection.Item(System.String)">
      <summary>获取或设置具有指定键的元素。</summary>
      <returns>具有指定键的 <see cref="T:System.Net.Configuration.AuthenticationModuleElement" />；如果不存在具有指定键的元素，则为 null。</returns>
      <param name="name">集合中的元素的键。 </param>
    </member>
    <member name="M:System.Net.Configuration.AuthenticationModuleElementCollection.Remove(System.Net.Configuration.AuthenticationModuleElement)">
      <summary>移除集合中的指定配置元素。</summary>
      <param name="element">要移除的 <see cref="T:System.Net.Configuration.AuthenticationModuleElement" />。</param>
    </member>
    <member name="M:System.Net.Configuration.AuthenticationModuleElementCollection.Remove(System.String)">
      <summary>移除具有指定键的元素。</summary>
      <param name="name">要移除的元素的键。</param>
    </member>
    <member name="M:System.Net.Configuration.AuthenticationModuleElementCollection.RemoveAt(System.Int32)">
      <summary>移除指定索引处的元素。</summary>
      <param name="index">要移除的元素的从零开始的索引。</param>
    </member>
    <member name="T:System.Net.Configuration.AuthenticationModulesSection">
      <summary>表示身份验证模块的配置节。无法继承此类。</summary>
    </member>
    <member name="M:System.Net.Configuration.AuthenticationModulesSection.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.AuthenticationModulesSection" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Net.Configuration.AuthenticationModulesSection.AuthenticationModules">
      <summary>获取该节中的身份验证模块的集合。</summary>
      <returns>一个 <see cref="T:System.Net.Configuration.AuthenticationModuleElementCollection" />，包含已注册的身份验证模块。</returns>
    </member>
    <member name="T:System.Net.Configuration.BypassElement">
      <summary>表示不使用代理服务器检索的资源的地址信息。无法继承此类。</summary>
    </member>
    <member name="M:System.Net.Configuration.BypassElement.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.BypassElement" /> 类的新实例。 </summary>
    </member>
    <member name="M:System.Net.Configuration.BypassElement.#ctor(System.String)">
      <summary>用指定的类型信息初始化 <see cref="T:System.Net.Configuration.BypassElement" /> 类的新实例。</summary>
      <param name="address">标识资源地址的字符串。</param>
    </member>
    <member name="P:System.Net.Configuration.BypassElement.Address">
      <summary>获取或设置跳过代理服务器的资源的地址。</summary>
      <returns>标识资源的字符串。</returns>
    </member>
    <member name="T:System.Net.Configuration.BypassElementCollection">
      <summary>表示跳过代理服务器的资源地址的容器。无法继承此类。</summary>
    </member>
    <member name="M:System.Net.Configuration.BypassElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.BypassElementCollection" /> 类的空实例。 </summary>
    </member>
    <member name="M:System.Net.Configuration.BypassElementCollection.Add(System.Net.Configuration.BypassElement)">
      <summary>向集合中添加一个元素。</summary>
      <param name="element">要添加到集合中的 <see cref="T:System.Net.Configuration.BypassElement" />。</param>
    </member>
    <member name="M:System.Net.Configuration.BypassElementCollection.Clear">
      <summary>移除集合中的所有元素。</summary>
    </member>
    <member name="M:System.Net.Configuration.BypassElementCollection.IndexOf(System.Net.Configuration.BypassElement)">
      <summary>返回指定的配置元素的索引。</summary>
      <returns>
        <paramref name="element" /> 的从零开始的索引。</returns>
      <param name="element">
        <see cref="T:System.Net.Configuration.BypassElement" />。</param>
    </member>
    <member name="P:System.Net.Configuration.BypassElementCollection.Item(System.Int32)">
      <summary>获取或设置集合中指定位置的元素。</summary>
      <returns>指定索引位置的 <see cref="T:System.Net.Configuration.BypassElement" />。</returns>
      <param name="index">元素的索引（索引从零开始）。</param>
    </member>
    <member name="P:System.Net.Configuration.BypassElementCollection.Item(System.String)">
      <summary>获取或设置具有指定键的元素。</summary>
      <returns>具有指定键的 <see cref="T:System.Net.Configuration.BypassElement" />，如果不存在具有指定键的元素，则为 null。</returns>
      <param name="name">集合中的元素的键。 </param>
    </member>
    <member name="M:System.Net.Configuration.BypassElementCollection.Remove(System.Net.Configuration.BypassElement)">
      <summary>移除集合中的指定配置元素。</summary>
      <param name="element">要移除的 <see cref="T:System.Net.Configuration.BypassElement" />。</param>
    </member>
    <member name="M:System.Net.Configuration.BypassElementCollection.Remove(System.String)">
      <summary>移除具有指定键的元素。</summary>
      <param name="name">要移除的元素的键。</param>
    </member>
    <member name="M:System.Net.Configuration.BypassElementCollection.RemoveAt(System.Int32)">
      <summary>移除指定索引处的元素。</summary>
      <param name="index">要移除的元素的从零开始的索引。</param>
    </member>
    <member name="T:System.Net.Configuration.ConnectionManagementElement">
      <summary>表示到远程计算机的最大连接数。无法继承此类。</summary>
    </member>
    <member name="M:System.Net.Configuration.ConnectionManagementElement.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.ConnectionManagementElement" /> 类的新实例。 </summary>
    </member>
    <member name="M:System.Net.Configuration.ConnectionManagementElement.#ctor(System.String,System.Int32)">
      <summary>用指定的地址和连接限制信息初始化 <see cref="T:System.Net.Configuration.ConnectionManagementElement" /> 类的新实例。</summary>
      <param name="address">一个字符串，它标识远程计算机的地址。</param>
      <param name="maxConnection">一个整数，它标识所允许的从本地计算机到 <paramref name="address" /> 的最大连接数。</param>
    </member>
    <member name="P:System.Net.Configuration.ConnectionManagementElement.Address">
      <summary>获取或设置远程计算机的地址。</summary>
      <returns>一个字符串，包含描述 IP 地址或 DNS 名的正则表达式。</returns>
    </member>
    <member name="P:System.Net.Configuration.ConnectionManagementElement.MaxConnection">
      <summary>获取或设置到远程计算机的最大连接数。</summary>
      <returns>一个指定最大连接数的整数。</returns>
    </member>
    <member name="T:System.Net.Configuration.ConnectionManagementElementCollection">
      <summary>表示连接管理配置元素的容器。无法继承此类。</summary>
    </member>
    <member name="M:System.Net.Configuration.ConnectionManagementElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.ConnectionManagementElementCollection" /> 类的新实例。 </summary>
    </member>
    <member name="M:System.Net.Configuration.ConnectionManagementElementCollection.Add(System.Net.Configuration.ConnectionManagementElement)">
      <summary>向集合中添加一个元素。</summary>
      <param name="element">要添加到集合中的 <see cref="T:System.Net.Configuration.ConnectionManagementElement" />。</param>
    </member>
    <member name="M:System.Net.Configuration.ConnectionManagementElementCollection.Clear">
      <summary>移除集合中的所有元素。</summary>
    </member>
    <member name="M:System.Net.Configuration.ConnectionManagementElementCollection.IndexOf(System.Net.Configuration.ConnectionManagementElement)">
      <summary>返回指定的配置元素的索引。</summary>
      <returns>
        <paramref name="element" /> 的从零开始的索引。</returns>
      <param name="element">
        <see cref="T:System.Net.Configuration.ConnectionManagementElement" />。</param>
    </member>
    <member name="P:System.Net.Configuration.ConnectionManagementElementCollection.Item(System.Int32)">
      <summary>获取或设置集合中指定位置的元素。</summary>
      <returns>指定索引位置的 <see cref="T:System.Net.Configuration.ConnectionManagementElement" />。</returns>
      <param name="index">元素的索引（索引从零开始）。</param>
    </member>
    <member name="P:System.Net.Configuration.ConnectionManagementElementCollection.Item(System.String)">
      <summary>获取或设置具有指定键的元素。</summary>
      <returns>具有指定键的 <see cref="T:System.Net.Configuration.ConnectionManagementElement" />；如果没有具有指定键的元素，则为 null。</returns>
      <param name="name">集合中的元素的键。 </param>
    </member>
    <member name="M:System.Net.Configuration.ConnectionManagementElementCollection.Remove(System.Net.Configuration.ConnectionManagementElement)">
      <summary>移除集合中的指定配置元素。</summary>
      <param name="element">要移除的 <see cref="T:System.Net.Configuration.ConnectionManagementElement" />。</param>
    </member>
    <member name="M:System.Net.Configuration.ConnectionManagementElementCollection.Remove(System.String)">
      <summary>移除具有指定键的元素。</summary>
      <param name="name">要移除的元素的键。</param>
    </member>
    <member name="M:System.Net.Configuration.ConnectionManagementElementCollection.RemoveAt(System.Int32)">
      <summary>移除指定索引处的元素。</summary>
      <param name="index">要移除的元素的从零开始的索引。</param>
    </member>
    <member name="T:System.Net.Configuration.ConnectionManagementSection">
      <summary>表示连接管理的配置节。无法继承此类。</summary>
    </member>
    <member name="M:System.Net.Configuration.ConnectionManagementSection.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.ConnectionManagementSection" /> 类的新实例。 </summary>
    </member>
    <member name="P:System.Net.Configuration.ConnectionManagementSection.ConnectionManagement">
      <summary>获取节中连接管理对象的集合。</summary>
      <returns>一个 <see cref="T:System.Net.Configuration.ConnectionManagementElementCollection" />，包含本地计算机的连接管理信息。 </returns>
    </member>
    <member name="T:System.Net.Configuration.DefaultProxySection">
      <summary>表示 Web 代理服务器用法的配置节。无法继承此类。</summary>
    </member>
    <member name="M:System.Net.Configuration.DefaultProxySection.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.DefaultProxySection" /> 类的新实例。 </summary>
    </member>
    <member name="P:System.Net.Configuration.DefaultProxySection.BypassList">
      <summary>获取不使用 Web 代理服务器获取的资源的集合。</summary>
      <returns>
        <see cref="T:System.Net.Configuration.BypassElementCollection" />，包含跳过 Web 代理服务器的资源的地址。 </returns>
    </member>
    <member name="P:System.Net.Configuration.DefaultProxySection.Enabled">
      <summary>获取或设置是否使用 Web 代理。</summary>
      <returns>
如果使用 Web 代理，则为 true，否则为 false。</returns>
    </member>
    <member name="P:System.Net.Configuration.DefaultProxySection.Module">
      <summary>获取自定义 Web 代理实现的类型信息。</summary>
      <returns>
        <see cref="T:System.Net.Configuration.ModuleElement" />。 </returns>
    </member>
    <member name="P:System.Net.Configuration.DefaultProxySection.Proxy">
      <summary>获取标识要使用的 Web 代理服务器的 URI。</summary>
      <returns>
        <see cref="T:System.Net.Configuration.ProxyElement" />。 </returns>
    </member>
    <member name="P:System.Net.Configuration.DefaultProxySection.UseDefaultCredentials">
      <summary>获取或设置是否使用默认凭据访问 Web 代理服务器。</summary>
      <returns>
如果使用默认凭据，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Net.Configuration.FtpCachePolicyElement">
      <summary>表示网络资源的默认 FTP 缓存策略。无法继承此类。</summary>
    </member>
    <member name="M:System.Net.Configuration.FtpCachePolicyElement.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.FtpCachePolicyElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Net.Configuration.FtpCachePolicyElement.PolicyLevel">
      <summary>获取或设置本地计算机的 FTP 缓存行为。</summary>
      <returns>一个指定缓存行为的 <see cref="T:System.Net.Cache.RequestCacheLevel" /> 值。</returns>
    </member>
    <member name="T:System.Net.Configuration.HttpCachePolicyElement">
      <summary>表示网络资源的默认 HTTP 缓存策略。无法继承此类。</summary>
    </member>
    <member name="M:System.Net.Configuration.HttpCachePolicyElement.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.HttpCachePolicyElement" /> 类的新实例。 </summary>
    </member>
    <member name="P:System.Net.Configuration.HttpCachePolicyElement.MaximumAge">
      <summary>获取或设置从缓存返回的资源所允许的最大生存期。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" /> 值，它指定配置文件中指定的缓存资源的最大生存期。</returns>
    </member>
    <member name="P:System.Net.Configuration.HttpCachePolicyElement.MaximumStale">
      <summary>获取或设置从缓存返回的资源所允许的最大过期值。</summary>
      <returns>
        <see cref="T:System.TimeSpan" /> 值，被设置为配置文件中指定的最大过期值。</returns>
    </member>
    <member name="P:System.Net.Configuration.HttpCachePolicyElement.MinimumFresh">
      <summary>获取或设置从缓存返回的资源所允许的最小新鲜值。</summary>
      <returns>
        <see cref="T:System.TimeSpan" /> 值，它指定配置文件中指定的最小新鲜值。</returns>
    </member>
    <member name="P:System.Net.Configuration.HttpCachePolicyElement.PolicyLevel">
      <summary>获取或设置本地计算机的 HTTP 缓存行为。</summary>
      <returns>指定缓存行为的 <see cref="T:System.Net.Cache.HttpRequestCacheLevel" /> 值。</returns>
    </member>
    <member name="T:System.Net.Configuration.HttpWebRequestElement">
      <summary>表示响应标头的最大长度。无法继承此类。</summary>
    </member>
    <member name="M:System.Net.Configuration.HttpWebRequestElement.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.HttpWebRequestElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Net.Configuration.HttpWebRequestElement.MaximumErrorResponseLength">
      <summary>获取或设置错误响应允许的最大长度。</summary>
      <returns>32 位有符号的整数，包含以 KB（1024 个字节）为单位的错误响应的最大长度。默认值为 64。</returns>
    </member>
    <member name="P:System.Net.Configuration.HttpWebRequestElement.MaximumResponseHeadersLength">
      <summary>获取或设置响应标题允许的最大长度。</summary>
      <returns>32 位有符号的整数，包含以 KB（1024 个字节）为单位的响应标头的最大长度。默认值为 64。</returns>
    </member>
    <member name="P:System.Net.Configuration.HttpWebRequestElement.MaximumUnauthorizedUploadLength">
      <summary>获取或设置响应未经授权的错误代码的上载的最大长度。</summary>
      <returns>32 位有符号的整数，包含响应未经授权的错误代码的上载的最大长度（以字节为单位）。值 -1 表示没有对上载施加大小限制。默认值为 -1。</returns>
    </member>
    <member name="P:System.Net.Configuration.HttpWebRequestElement.UseUnsafeHeaderParsing">
      <summary>设置该属性将忽略在 HTTP 分析过程中发生的验证错误。</summary>
      <returns>Boolean，指示是否已经设置该属性。</returns>
    </member>
    <member name="T:System.Net.Configuration.Ipv6Element">
      <summary>确定是否在本地计算机上启用 Internet 协议版本 6。无法继承此类。</summary>
    </member>
    <member name="M:System.Net.Configuration.Ipv6Element.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.Ipv6Element" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Net.Configuration.Ipv6Element.Enabled">
      <summary>获取或设置一个布尔值，该值指示在本地计算机上是否启用 Internet 协议版本 6。</summary>
      <returns>
            如果启用 IPv6，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Net.Configuration.MailSettingsSectionGroup">
      <summary>初始化 <see cref="T:System.Net.Configuration.MailSettingsSectionGroup" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Net.Configuration.MailSettingsSectionGroup.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.MailSettingsSectionGroup" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Net.Configuration.MailSettingsSectionGroup.Smtp">
      <summary>获取本地计算机的 SMTP 设置。</summary>
      <returns>
        <see cref="T:System.Net.Configuration.SmtpSection" /> 对象，它包含本地计算机的配置信息。</returns>
    </member>
    <member name="T:System.Net.Configuration.ModuleElement">
      <summary>表示自定义 <see cref="T:System.Net.IWebProxy" /> 模块的类型信息。无法继承此类。</summary>
    </member>
    <member name="M:System.Net.Configuration.ModuleElement.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.ModuleElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Net.Configuration.ModuleElement.Type">
      <summary>获取或设置当前实例的类型和程序集信息。</summary>
      <returns>标识实现 <see cref="T:System.Net.IWebProxy" /> 接口的类型的字符串，如果没有指定值，则为 null。</returns>
    </member>
    <member name="T:System.Net.Configuration.NetSectionGroup">
      <summary>获取网络命名空间的节组信息。无法继承此类。</summary>
    </member>
    <member name="M:System.Net.Configuration.NetSectionGroup.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.NetSectionGroup" /> 类的新实例。 </summary>
    </member>
    <member name="P:System.Net.Configuration.NetSectionGroup.AuthenticationModules">
      <summary>获取包含为本地计算机注册的身份验证模块的配置节。</summary>
      <returns>一个 <see cref="T:System.Net.Configuration.AuthenticationModulesSection" /> 对象。</returns>
    </member>
    <member name="P:System.Net.Configuration.NetSectionGroup.ConnectionManagement">
      <summary>获取包含本地计算机的连接管理设置的配置节。</summary>
      <returns>一个 <see cref="T:System.Net.Configuration.ConnectionManagementSection" /> 对象。</returns>
    </member>
    <member name="P:System.Net.Configuration.NetSectionGroup.DefaultProxy">
      <summary>获取包含本地计算机的默认 Web 代理服务器设置的配置节。</summary>
      <returns>一个 <see cref="T:System.Net.Configuration.DefaultProxySection" /> 对象。</returns>
    </member>
    <member name="M:System.Net.Configuration.NetSectionGroup.GetSectionGroup(System.Configuration.Configuration)">
      <summary>从指定的配置文件中获取 System.Net 配置节组。</summary>
      <returns>一个表示 <paramref name="config" /> 中的 System.Net 设置的 <see cref="T:System.Net.Configuration.NetSectionGroup" />。</returns>
      <param name="config">表示配置文件的 <see cref="T:System.Configuration.Configuration" />。</param>
    </member>
    <member name="P:System.Net.Configuration.NetSectionGroup.MailSettings">
      <summary>获取包含本地计算机的 SMTP 客户端电子邮件设置的配置节。</summary>
      <returns>一个 <see cref="T:System.Net.Configuration.MailSettingsSectionGroup" /> 对象。</returns>
    </member>
    <member name="P:System.Net.Configuration.NetSectionGroup.RequestCaching">
      <summary>获取包含本地计算机的缓存配置设置的配置节。</summary>
      <returns>一个 <see cref="T:System.Net.Configuration.RequestCachingSection" /> 对象。</returns>
    </member>
    <member name="P:System.Net.Configuration.NetSectionGroup.Settings">
      <summary>获取包含本地计算机的网络设置的配置节。</summary>
      <returns>一个 <see cref="T:System.Net.Configuration.SettingsSection" /> 对象。</returns>
    </member>
    <member name="P:System.Net.Configuration.NetSectionGroup.WebRequestModules">
      <summary>获取包含注册与 <see cref="T:System.Net.WebRequest" /> 类一起使用的模块的配置节。</summary>
      <returns>一个 <see cref="T:System.Net.Configuration.WebRequestModulesSection" /> 对象。</returns>
    </member>
    <member name="T:System.Net.Configuration.PerformanceCountersElement">
      <summary>表示 System.Net 配置文件中的性能计数器元素，该元素确定是否启用性能计数器。无法继承此类。</summary>
    </member>
    <member name="M:System.Net.Configuration.PerformanceCountersElement.#ctor">
      <summary>实例化一个 <see cref="T:System.Net.Configuration.PerformanceCountersElement" /> 对象。</summary>
    </member>
    <member name="P:System.Net.Configuration.PerformanceCountersElement.Enabled">
      <summary>获取或设置是否启用性能计数器。</summary>
      <returns>
如果启用性能计数器，则为 true，否则为 false。</returns>
    </member>
    <member name="T:System.Net.Configuration.ProxyElement">
      <summary>标识 Web 代理服务器的配置设置。无法继承此类。</summary>
    </member>
    <member name="M:System.Net.Configuration.ProxyElement.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.ProxyElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Net.Configuration.ProxyElement.AutoDetect">
      <summary>获取和设置一个 <see cref="T:System.Net.Configuration.ProxyElement.AutoDetectValues" /> 值，该值控制是否自动检测 Web 代理。</summary>
      <returns>
            如果自动检测 <see cref="T:System.Net.WebProxy" />，则为 <see cref="F:System.Net.Configuration.ProxyElement.AutoDetectValues.True" />；如果不自动检测 <see cref="T:System.Net.WebProxy" />，则为 <see cref="F:System.Net.Configuration.ProxyElement.AutoDetectValues.False" />；或者为 <see cref="F:System.Net.Configuration.ProxyElement.AutoDetectValues.Unspecified" />。</returns>
    </member>
    <member name="P:System.Net.Configuration.ProxyElement.BypassOnLocal">
      <summary>获取和设置一个值，该值指示是否使用 Web 代理服务器检索本地资源。</summary>
      <returns>
        <see cref="T:System.Net.Configuration.ProxyElement.BypassOnLocalValues" />。</returns>
    </member>
    <member name="P:System.Net.Configuration.ProxyElement.ProxyAddress">
      <summary>获取和设置标识要使用的 Web 代理服务器的 URI。</summary>
      <returns>
        <see cref="T:System.String" />，包含 URI。</returns>
    </member>
    <member name="P:System.Net.Configuration.ProxyElement.ScriptLocation">
      <summary>获取和设置一个 <see cref="T:System.Uri" /> 值，该值指定自动代理检测脚本的位置。</summary>
      <returns>一个 <see cref="T:System.Uri" />，它指定自动代理检测脚本的位置。</returns>
    </member>
    <member name="P:System.Net.Configuration.ProxyElement.UseSystemDefault">
      <summary>获取和设置一个 <see cref="T:System.Boolean" /> 值，该值控制是否使用 Internet Explorer Web 代理设置。</summary>
      <returns>
            如果使用 Internet Explorer LAN 设置来检测和配置用于请求的默认 <see cref="T:System.Net.WebProxy" />，则为 true，否则为 false。</returns>
    </member>
    <member name="T:System.Net.Configuration.ProxyElement.AutoDetectValues">
      <summary>指定是否自动检测代理。</summary>
    </member>
    <member name="F:System.Net.Configuration.ProxyElement.AutoDetectValues.Unspecified">
      <summary>未指定。</summary>
    </member>
    <member name="F:System.Net.Configuration.ProxyElement.AutoDetectValues.False">
      <summary>不会自动检测代理。</summary>
    </member>
    <member name="F:System.Net.Configuration.ProxyElement.AutoDetectValues.True">
      <summary>自动检测代理。</summary>
    </member>
    <member name="T:System.Net.Configuration.ProxyElement.BypassOnLocalValues">
      <summary>指定对于本地资源是否跳过代理。</summary>
    </member>
    <member name="F:System.Net.Configuration.ProxyElement.BypassOnLocalValues.Unspecified">
      <summary>未指定。</summary>
    </member>
    <member name="F:System.Net.Configuration.ProxyElement.BypassOnLocalValues.False">
      <summary>所有本地资源请求均应通过代理</summary>
    </member>
    <member name="F:System.Net.Configuration.ProxyElement.BypassOnLocalValues.True">
      <summary>直接访问本地资源。</summary>
    </member>
    <member name="T:System.Net.Configuration.ProxyElement.UseSystemDefaultValues">
      <summary>
                    指定是否使用本地系统代理设置来确定对于本地资源是否跳过代理。
                </summary>
    </member>
    <member name="F:System.Net.Configuration.ProxyElement.UseSystemDefaultValues.Unspecified">
      <summary>
                    未指定系统默认代理设置。
                </summary>
    </member>
    <member name="F:System.Net.Configuration.ProxyElement.UseSystemDefaultValues.False">
      <summary>
                    不使用系统默认代理设置值
                </summary>
    </member>
    <member name="F:System.Net.Configuration.ProxyElement.UseSystemDefaultValues.True">
      <summary>
                    使用系统默认代理设置值。
                </summary>
    </member>
    <member name="T:System.Net.Configuration.RequestCachingSection">
      <summary>表示缓存行为的配置节。无法继承此类。</summary>
    </member>
    <member name="M:System.Net.Configuration.RequestCachingSection.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.RequestCachingSection" /> 类的新实例。 </summary>
    </member>
    <member name="P:System.Net.Configuration.RequestCachingSection.DefaultFtpCachePolicy">
      <summary>获取本地计算机的默认 FTP 缓存行为。</summary>
      <returns>一个 <see cref="T:System.Net.Configuration.FtpCachePolicyElement" />，定义默认缓存策略。</returns>
    </member>
    <member name="P:System.Net.Configuration.RequestCachingSection.DefaultHttpCachePolicy">
      <summary>获取本地计算机的默认缓存行为。</summary>
      <returns>一个定义默认缓存策略的 <see cref="T:System.Net.Configuration.HttpCachePolicyElement" />。</returns>
    </member>
    <member name="P:System.Net.Configuration.RequestCachingSection.DefaultPolicyLevel">
      <summary>获取或设置默认缓存策略级别。</summary>
      <returns>一个 <see cref="T:System.Net.Cache.RequestCacheLevel" /> 枚举值。</returns>
    </member>
    <member name="P:System.Net.Configuration.RequestCachingSection.DisableAllCaching">
      <summary>获取或设置一个在本地计算机上启用缓存的布尔值。</summary>
      <returns>
如果在本地计算机上禁用缓存，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.Configuration.RequestCachingSection.IsPrivateCache">
      <summary>获取或设置一个布尔值，该值指示本地计算机缓存是否为私有。</summary>
      <returns>
如果缓存提供用户隔离，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.Configuration.RequestCachingSection.UnspecifiedMaximumAge">
      <summary>获取或设置一个值，该值用作没有过期信息的缓存资源的最大生存期。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，提供缓存资源的默认最大生存期。</returns>
    </member>
    <member name="T:System.Net.Configuration.ServicePointManagerElement">
      <summary>表示用于创建远程计算机连接的默认设置。无法继承此类。</summary>
    </member>
    <member name="M:System.Net.Configuration.ServicePointManagerElement.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.ServicePointManagerElement" /> 类的新实例。 </summary>
    </member>
    <member name="P:System.Net.Configuration.ServicePointManagerElement.CheckCertificateName">
      <summary>获取或设置一个布尔值，该值控制是否检查 X509 证书中的主机名信息。</summary>
      <returns>
如果指定主机名检查，则为 true，否则为 false。 </returns>
    </member>
    <member name="P:System.Net.Configuration.ServicePointManagerElement.CheckCertificateRevocationList">
      <summary>获取或设置一个布尔值，该值指示是否根据证书颁发机构吊销列表来检查证书。</summary>
      <returns>
如果检查证书吊销列表，则为 true，否则为 false。默认值为 false。</returns>
    </member>
    <member name="P:System.Net.Configuration.ServicePointManagerElement.DnsRefreshTimeout">
      <summary>获取或设置时间量，经过该时间后刷新地址信息。</summary>
      <returns>指定何时使用 DNS 解析地址的 <see cref="T:System.TimeSpan" />。</returns>
    </member>
    <member name="P:System.Net.Configuration.ServicePointManagerElement.EnableDnsRoundRobin">
      <summary>获取或设置一个布尔值，该值控制是否使用不同的 IP 地址连接到同一服务器。</summary>
      <returns>
如果启用 DNS 循环行为，则为 true，否则为 false。</returns>
    </member>
    <member name="P:System.Net.Configuration.ServicePointManagerElement.Expect100Continue">
      <summary>获取或设置一个布尔值，该值确定是否使用 100-Continue 行为。</summary>
      <returns>
如果 POST 请求需要 100-Continue 响应，则为 true；否则为 false。默认值为 true。</returns>
    </member>
    <member name="P:System.Net.Configuration.ServicePointManagerElement.UseNagleAlgorithm">
      <summary>获取或设置一个布尔值，该值确定是否使用 Nagle 算法。</summary>
      <returns>
如果使用 Nagle 算法，则为 true；否则为 false。默认值为 true。</returns>
    </member>
    <member name="T:System.Net.Configuration.SettingsSection">
      <summary>表示套接字、IPv6、响应头和服务点的配置节。无法继承此类。</summary>
    </member>
    <member name="M:System.Net.Configuration.SettingsSection.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.ConnectionManagementSection" /> 类的新实例。 </summary>
    </member>
    <member name="P:System.Net.Configuration.SettingsSection.HttpWebRequest">
      <summary>获取控制最大响应头长度的配置元素。</summary>
      <returns>一个 <see cref="T:System.Net.Configuration.HttpWebRequestElement" /> 对象。</returns>
    </member>
    <member name="P:System.Net.Configuration.SettingsSection.Ipv6">
      <summary>获取启用 Internet 协议版本 6 (IPv6) 的配置元素。</summary>
      <returns>
        <see cref="T:System.Net.Configuration.Ipv6Element" />。</returns>
    </member>
    <member name="P:System.Net.Configuration.SettingsSection.PerformanceCounters">
      <summary>获取控制是否启用性能计数器的配置元素。</summary>
      <returns>
        <see cref="T:System.Net.Configuration.PerformanceCountersElement" />。</returns>
    </member>
    <member name="P:System.Net.Configuration.SettingsSection.ServicePointManager">
      <summary>获取控制远程主机连接设置的配置元素。</summary>
      <returns>一个 <see cref="T:System.Net.Configuration.ServicePointManagerElement" /> 对象。</returns>
    </member>
    <member name="P:System.Net.Configuration.SettingsSection.Socket">
      <summary>获取控制套接字设置的配置元素。</summary>
      <returns>一个 <see cref="T:System.Net.Configuration.SocketElement" /> 对象。</returns>
    </member>
    <member name="P:System.Net.Configuration.SettingsSection.WebProxyScript">
      <summary>获取控制执行超时和 Web 代理脚本下载超时的配置元素。</summary>
      <returns>一个 <see cref="T:System.Net.Configuration.WebProxyScriptElement" /> 对象。</returns>
    </member>
    <member name="T:System.Net.Configuration.SmtpNetworkElement">
      <summary>表示 SMTP 配置文件中的网络元素。无法继承此类。</summary>
    </member>
    <member name="M:System.Net.Configuration.SmtpNetworkElement.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.SmtpNetworkElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Net.Configuration.SmtpNetworkElement.DefaultCredentials">
      <summary>确定是否使用默认用户凭据访问 SMTP 服务器。默认值为 false。</summary>
      <returns>true 指示使用默认用户凭据访问 SMTP 服务器，否则为 false。</returns>
    </member>
    <member name="P:System.Net.Configuration.SmtpNetworkElement.Host">
      <summary>获取或设置 SMTP 服务器的名称。</summary>
      <returns>一个字符串，表示连接到的 SMTP 服务器的名称。</returns>
    </member>
    <member name="P:System.Net.Configuration.SmtpNetworkElement.Password">
      <summary>获取或设置用于连接到 SMTP 邮件服务器的用户密码。</summary>
      <returns>表示用于连接到 SMTP 邮件服务器的密码的字符串。</returns>
    </member>
    <member name="P:System.Net.Configuration.SmtpNetworkElement.Port">
      <summary>获取或设置 SMTP 客户端用来连接到 SMTP 邮件服务器的端口。默认值为 25。</summary>
      <returns>表示连接到 SMTP 邮件服务器的端口的字符串。</returns>
    </member>
    <member name="P:System.Net.Configuration.SmtpNetworkElement.UserName">
      <summary>获取或设置连接到 SMTP 邮件服务器的用户名。</summary>
      <returns>表示连接到 SMTP 邮件服务器的用户名的字符串。</returns>
    </member>
    <member name="T:System.Net.Configuration.SmtpSection">
      <summary>表示 System.Net 配置文件中的 SMTP 节。</summary>
    </member>
    <member name="M:System.Net.Configuration.SmtpSection.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.SmtpSection" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Net.Configuration.SmtpSection.DeliveryMethod">
      <summary>获取或设置 SMTP 传递方法。默认传递方法是 <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" />。</summary>
      <returns>表示 SMTP 传递方法的字符串。</returns>
    </member>
    <member name="P:System.Net.Configuration.SmtpSection.From">
      <summary>获取或设置默认值，该值指示电子邮件的发件人。</summary>
      <returns>表示默认值的字符串，该值指示邮件的发件人。</returns>
    </member>
    <member name="P:System.Net.Configuration.SmtpSection.Network">
      <summary>获取一个 <see cref="T:System.Net.Configuration.SmtpNetworkElement" />。</summary>
      <returns>一个 <see cref="T:System.Net.Configuration.SmtpNetworkElement" /> 对象。</returns>
    </member>
    <member name="P:System.Net.Configuration.SmtpSection.SpecifiedPickupDirectory">
      <summary>获取将由 SMPT 客户端使用的拾取目录。</summary>
      <returns>一个 <see cref="T:System.Net.Configuration.SmtpSpecifiedPickupDirectoryElement" /> 对象，指定拾取目录文件夹。</returns>
    </member>
    <member name="T:System.Net.Configuration.SmtpSpecifiedPickupDirectoryElement">
      <summary>表示 SMTP 拾取目录配置元素。</summary>
    </member>
    <member name="M:System.Net.Configuration.SmtpSpecifiedPickupDirectoryElement.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.SmtpSpecifiedPickupDirectoryElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Net.Configuration.SmtpSpecifiedPickupDirectoryElement.PickupDirectoryLocation">
      <summary>获取或设置文件夹，应用程序在该文件夹中保存将由 SMTP 服务器处理的邮件。</summary>
      <returns>一个字符串，指定电子邮件的拾取目录。</returns>
    </member>
    <member name="T:System.Net.Configuration.SocketElement">
      <summary>表示用于配置 <see cref="T:System.Net.Sockets.Socket" /> 对象的信息。无法继承此类。</summary>
    </member>
    <member name="M:System.Net.Configuration.SocketElement.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.SocketElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Net.Configuration.SocketElement.AlwaysUseCompletionPortsForAccept">
      <summary>获取或设置一个布尔值，该值指定是否在接受连接时使用完成端口。</summary>
      <returns>
            如果使用完成端口，则为 true，否则为 false。</returns>
    </member>
    <member name="P:System.Net.Configuration.SocketElement.AlwaysUseCompletionPortsForConnect">
      <summary>获取或设置一个布尔值，该值指定是否在连接时使用完成端口。</summary>
      <returns>
            如果使用完成端口，则为 true，否则为 false。</returns>
    </member>
    <member name="T:System.Net.Configuration.WebProxyScriptElement">
      <summary>表示用于配置 Web 代理脚本的信息。无法继承此类。</summary>
    </member>
    <member name="M:System.Net.Configuration.WebProxyScriptElement.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.WebProxyScriptElement" /> 类的实例。</summary>
    </member>
    <member name="P:System.Net.Configuration.WebProxyScriptElement.DownloadTimeout">
      <summary>获取或设置使用“小时:分钟:秒钟”格式的 Web 代理脚本下载超时。</summary>
      <returns>包含超时值的 <see cref="T:System.TimeSpan" /> 对象。默认的下载超时为一分钟。</returns>
    </member>
    <member name="T:System.Net.Configuration.WebRequestModuleElement">
      <summary>表示 URI 前缀以及处理创建前缀 Web 请求的关联类。无法继承此类。</summary>
    </member>
    <member name="M:System.Net.Configuration.WebRequestModuleElement.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.WebRequestModuleElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.Configuration.WebRequestModuleElement.#ctor(System.String,System.String)">
      <summary>使用指定的 URI 前缀和类型信息初始化 <see cref="T:System.Net.Configuration.WebRequestModuleElement" /> 类的新实例。</summary>
      <param name="prefix">包含 URI 前缀的字符串。</param>
      <param name="type">一个字符串，包含处理创建使用 <paramref name="prefix" /> URI 前缀的资源请求的类的类型和程序集信息。有关更多信息，请参见“备注”部分。</param>
    </member>
    <member name="M:System.Net.Configuration.WebRequestModuleElement.#ctor(System.String,System.Type)">
      <summary>使用指定的 URI 前缀和类型标识符初始化 <see cref="T:System.Net.Configuration.WebRequestModuleElement" /> 类的新实例。</summary>
      <param name="prefix">包含 URI 前缀的字符串。</param>
      <param name="type">一个 <see cref="T:System.Type" />，标识处理创建对资源请求的类，这些请求使用 <paramref name="prefix" /> URI 前缀。</param>
    </member>
    <member name="P:System.Net.Configuration.WebRequestModuleElement.Prefix">
      <summary>获取或设置当前 Web 请求模块的 URI 前缀。</summary>
      <returns>包含 URI 前缀的字符串。</returns>
    </member>
    <member name="P:System.Net.Configuration.WebRequestModuleElement.Type">
      <summary>获取或设置创建 Web 请求的类。</summary>
      <returns>一个 <see cref="T:System.Type" /> 实例，标识 Web 请求模块。</returns>
    </member>
    <member name="T:System.Net.Configuration.WebRequestModuleElementCollection">
      <summary>表示 Web 请求模块配置元素的容器。无法继承此类。</summary>
    </member>
    <member name="M:System.Net.Configuration.WebRequestModuleElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.WebRequestModuleElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.Configuration.WebRequestModuleElementCollection.Add(System.Net.Configuration.WebRequestModuleElement)">
      <summary>向集合中添加一个元素。</summary>
      <param name="element">要添加到集合中的 <see cref="T:System.Net.Configuration.WebRequestModuleElement" />。</param>
    </member>
    <member name="M:System.Net.Configuration.WebRequestModuleElementCollection.Clear">
      <summary>移除集合中的所有元素。</summary>
    </member>
    <member name="M:System.Net.Configuration.WebRequestModuleElementCollection.IndexOf(System.Net.Configuration.WebRequestModuleElement)">
      <summary>返回指定的配置元素的索引。</summary>
      <returns>
        <paramref name="element" /> 的从零开始的索引。</returns>
      <param name="element">
        <see cref="T:System.Net.Configuration.WebRequestModuleElement" />。</param>
    </member>
    <member name="P:System.Net.Configuration.WebRequestModuleElementCollection.Item(System.Int32)">
      <summary>获取或设置集合中指定位置的元素。</summary>
      <returns>指定索引位置的 <see cref="T:System.Net.Configuration.WebRequestModuleElement" />。</returns>
      <param name="index">元素的索引（索引从零开始）。</param>
    </member>
    <member name="P:System.Net.Configuration.WebRequestModuleElementCollection.Item(System.String)">
      <summary>获取或设置具有指定键的元素。</summary>
      <returns>具有指定键的 <see cref="T:System.Net.Configuration.WebRequestModuleElement" />；如果不存在具有指定键的元素，则为 null。</returns>
      <param name="name">集合中的元素的键。</param>
    </member>
    <member name="M:System.Net.Configuration.WebRequestModuleElementCollection.Remove(System.Net.Configuration.WebRequestModuleElement)">
      <summary>移除集合中的指定配置元素。</summary>
      <param name="element">要移除的 <see cref="T:System.Net.Configuration.WebRequestModuleElement" />。</param>
    </member>
    <member name="M:System.Net.Configuration.WebRequestModuleElementCollection.Remove(System.String)">
      <summary>移除具有指定键的元素。</summary>
      <param name="name">要移除的元素的键。</param>
    </member>
    <member name="M:System.Net.Configuration.WebRequestModuleElementCollection.RemoveAt(System.Int32)">
      <summary>移除指定索引处的元素。</summary>
      <param name="index">要移除的元素的从零开始的索引。</param>
    </member>
    <member name="T:System.Net.Configuration.WebRequestModulesSection">
      <summary>表示 Web 请求模块的配置节。无法继承此类。</summary>
    </member>
    <member name="M:System.Net.Configuration.WebRequestModulesSection.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.WebRequestModulesSection" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Net.Configuration.WebRequestModulesSection.WebRequestModules">
      <summary>获取该节中 Web 请求模块的集合。</summary>
      <returns>包含注册的 Web 请求模块的 <see cref="T:System.Net.Configuration.WebRequestModuleElementCollection" />。 </returns>
    </member>
    <member name="T:System.Net.Mail.AlternateView">
      <summary>表示电子邮件的查看格式。</summary>
    </member>
    <member name="M:System.Net.Mail.AlternateView.#ctor(System.IO.Stream)">
      <summary>用指定的 <see cref="T:System.IO.Stream" /> 初始化 <see cref="T:System.Net.Mail.AlternateView" /> 的新实例。</summary>
      <param name="contentStream">包含此视图的内容的流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contentStream" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.Mail.AlternateView.#ctor(System.IO.Stream,System.Net.Mime.ContentType)">
      <summary>用指定的 <see cref="T:System.IO.Stream" /> 和 <see cref="T:System.Net.Mime.ContentType" /> 初始化 <see cref="T:System.Net.Mail.AlternateView" /> 的新实例。</summary>
      <param name="contentStream">一个包含此附件的内容的流。</param>
      <param name="contentType">内容的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contentStream" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="contentType" /> 不是有效值。</exception>
    </member>
    <member name="M:System.Net.Mail.AlternateView.#ctor(System.IO.Stream,System.String)">
      <summary>使用指定的 <see cref="T:System.IO.Stream" /> 和媒体类型初始化 <see cref="T:System.Net.Mail.AlternateView" /> 的新实例。</summary>
      <param name="contentStream">一个包含此附件的内容的流。</param>
      <param name="mediaType">内容的 MIME 媒体类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contentStream" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="mediaType" /> 不是有效值。</exception>
    </member>
    <member name="M:System.Net.Mail.AlternateView.#ctor(System.String)">
      <summary>用指定的文件名初始化 <see cref="T:System.Net.Mail.AlternateView" /> 的新实例。</summary>
      <param name="fileName">包含此可选视图内容的文件的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 为 null。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误，如磁盘错误。</exception>
      <exception cref="T:System.UnauthorizedAccessException">对于指定的文件句柄，操作系统不允许所请求的访问，例如，当访问为 Write 或 ReadWrite 而文件句柄设置为只读访问时。</exception>
    </member>
    <member name="M:System.Net.Mail.AlternateView.#ctor(System.String,System.Net.Mime.ContentType)">
      <summary>用指定的文件名和内容类型初始化 <see cref="T:System.Net.Mail.AlternateView" /> 的新实例。</summary>
      <param name="fileName">包含此可选视图内容的文件的名称。</param>
      <param name="contentType">内容的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="contentType" /> 不是有效值。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误，如磁盘错误。</exception>
      <exception cref="T:System.UnauthorizedAccessException">对于指定的文件句柄，操作系统不允许所请求的访问，例如，当访问为 Write 或 ReadWrite 而文件句柄设置为只读访问时。</exception>
    </member>
    <member name="M:System.Net.Mail.AlternateView.#ctor(System.String,System.String)">
      <summary>用指定的文件名和媒体类型初始化 <see cref="T:System.Net.Mail.AlternateView" /> 的新实例。</summary>
      <param name="fileName">包含此可选视图内容的文件的名称。</param>
      <param name="mediaType">内容的 MIME 媒体类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="mediaType" /> 不是有效值。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误，如磁盘错误。</exception>
      <exception cref="T:System.UnauthorizedAccessException">对于指定的文件句柄，操作系统不允许所请求的访问，例如，当访问为 Write 或 ReadWrite 而文件句柄设置为只读访问时。</exception>
    </member>
    <member name="P:System.Net.Mail.AlternateView.BaseUri">
      <summary>获取或设置用于解析 <see cref="T:System.Net.Mail.AlternateView" /> 中的相对 URI 的基 URI。</summary>
      <returns>
        <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="M:System.Net.Mail.AlternateView.CreateAlternateViewFromString(System.String)">
      <summary>创建使用字符串中指定的内容查看电子邮件的 <see cref="T:System.Net.Mail.AlternateView" />。</summary>
      <returns>一个 <see cref="T:System.Net.Mail.AlternateView" /> 对象。</returns>
      <param name="content">包含电子邮件内容的 <see cref="T:System.String" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="content" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.Mail.AlternateView.CreateAlternateViewFromString(System.String,System.Net.Mime.ContentType)">
      <summary>创建使用字符串中指定的内容和指定的 <see cref="T:System.Net.Mime.ContentType" /> 查看电子邮件的 <see cref="T:System.Net.Mail.AlternateView" />。</summary>
      <returns>
        <see cref="T:System.Net.Mail.AlternateView" /> 对象，表示电子邮件的替代视图。</returns>
      <param name="content">一个包含附件内容的 <see cref="T:System.String" />。</param>
      <param name="contentType">
        <see cref="T:System.Net.Mime.ContentType" />，描述 <paramref name="string" /> 中的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="content" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.Mail.AlternateView.CreateAlternateViewFromString(System.String,System.Text.Encoding,System.String)">
      <summary>创建使用字符串中指定的内容、指定的文本编码和 MIME 媒体类型查看电子邮件的 <see cref="T:System.Net.Mail.AlternateView" />。</summary>
      <returns>
        <see cref="T:System.Net.Mail.AlternateView" /> 对象，表示电子邮件的替代视图。</returns>
      <param name="content">一个包含附件内容的 <see cref="T:System.String" />。</param>
      <param name="contentEncoding">一个 <see cref="T:System.Text.Encoding" />。此值可为 null。</param>
      <param name="mediaType">内容的 MIME 媒体类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="content" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.Mail.AlternateView.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Net.Mail.AlternateView" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing"></param>
    </member>
    <member name="P:System.Net.Mail.AlternateView.LinkedResources">
      <summary>获取此附件引用的嵌入资源集。</summary>
      <returns>
        <see cref="T:System.Net.Mail.LinkedResourceCollection" /> 对象，存储将作为电子邮件的一部分发送的链接资源的集合。</returns>
    </member>
    <member name="T:System.Net.Mail.AlternateViewCollection">
      <summary>表示 <see cref="T:System.Net.Mail.AlternateView" /> 对象的集合。</summary>
    </member>
    <member name="M:System.Net.Mail.AlternateViewCollection.Dispose">
      <summary>释放由 <see cref="T:System.Net.Mail.AlternateViewCollection" /> 使用的所有资源。</summary>
    </member>
    <member name="T:System.Net.Mail.Attachment">
      <summary>表示电子邮件的附件。</summary>
    </member>
    <member name="M:System.Net.Mail.Attachment.#ctor(System.IO.Stream,System.Net.Mime.ContentType)">
      <summary>使用指定的流和内容类型初始化 <see cref="T:System.Net.Mail.Attachment" /> 类的新实例。 </summary>
      <param name="contentStream">一个包含附件内容的可读 <see cref="T:System.IO.Stream" />。</param>
      <param name="contentType">描述 <paramref name="stream" /> 中的数据的 <see cref="T:System.Net.Mime.ContentType" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contentType" /> 为 null。- 或 -<paramref name="contentStream" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.Mail.Attachment.#ctor(System.IO.Stream,System.String)">
      <summary>使用指定的流和名称初始化 <see cref="T:System.Net.Mail.Attachment" /> 类的新实例。</summary>
      <param name="contentStream">一个包含附件内容的可读 <see cref="T:System.IO.Stream" />。</param>
      <param name="name">一个 <see cref="T:System.String" />，它包含与此附件关联的 <see cref="T:System.Net.Mime.ContentType" /> 的 <see cref="P:System.Net.Mime.ContentType.Name" /> 属性值。此值可为 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contentStream" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.Mail.Attachment.#ctor(System.IO.Stream,System.String,System.String)">
      <summary>使用指定的流、名称和 MIME 类型信息初始化 <see cref="T:System.Net.Mail.Attachment" /> 类的新实例。 </summary>
      <param name="contentStream">一个包含附件内容的可读 <see cref="T:System.IO.Stream" />。</param>
      <param name="name">一个 <see cref="T:System.String" />，它包含与此附件关联的 <see cref="T:System.Net.Mime.ContentType" /> 的 <see cref="P:System.Net.Mime.ContentType.Name" /> 属性值。此值可为 null。</param>
      <param name="mediaType">
        <see cref="T:System.String" /> 包含此附件的 MIME 内容标头信息。此值可为 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="mediaType" /> 的格式不正确。</exception>
    </member>
    <member name="M:System.Net.Mail.Attachment.#ctor(System.String)">
      <summary>使用指定的内容字符串初始化 <see cref="T:System.Net.Mail.Attachment" /> 类的新实例。 </summary>
      <param name="fileName">一个 <see cref="T:System.String" />，它包含用于创建此附件的文件路径。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="fileName" /> 为空。</exception>
    </member>
    <member name="M:System.Net.Mail.Attachment.#ctor(System.String,System.Net.Mime.ContentType)">
      <summary>使用指定的内容字符串和 <see cref="T:System.Net.Mime.ContentType" /> 初始化 <see cref="T:System.Net.Mail.Attachment" /> 类的新实例。</summary>
      <param name="fileName">一个 <see cref="T:System.String" />，它包含用于创建此附件的文件路径。</param>
      <param name="contentType">
        <see cref="T:System.Net.Mime.ContentType" />，描述 <paramref name="string" /> 中的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mediaType" /> 的格式不正确。</exception>
    </member>
    <member name="M:System.Net.Mail.Attachment.#ctor(System.String,System.String)">
      <summary>使用指定的内容字符串和 MIME 类型信息初始化 <see cref="T:System.Net.Mail.Attachment" /> 类的新实例。 </summary>
      <param name="fileName">一个包含附件内容的 <see cref="T:System.String" />。</param>
      <param name="mediaType">
        <see cref="T:System.String" /> 包含此附件的 MIME 内容标头信息。此值可为 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="mediaType" /> 的格式不正确。</exception>
    </member>
    <member name="P:System.Net.Mail.Attachment.ContentDisposition">
      <summary>获取此附件的 MIME 内容处置。</summary>
      <returns>
        <see cref="T:System.Net.Mime.ContentDisposition" />，提供此附件的表示信息。 </returns>
    </member>
    <member name="M:System.Net.Mail.Attachment.CreateAttachmentFromString(System.String,System.Net.Mime.ContentType)">
      <summary>使用指定字符串中的内容和指定的 <see cref="T:System.Net.Mime.ContentType" /> 创建邮件附件。</summary>
      <returns>
        <see cref="T:System.Net.Mail.Attachment" /> 类型的对象。</returns>
      <param name="content">一个包含附件内容的 <see cref="T:System.String" />。</param>
      <param name="contentType">
        <see cref="T:System.Net.Mime.ContentType" /> 对象，表示使用多用途 Internet 邮件交换 (MIME) 协议 Content-Type 标头。</param>
    </member>
    <member name="M:System.Net.Mail.Attachment.CreateAttachmentFromString(System.String,System.String)">
      <summary>使用指定字符串中的内容和指定的 MIME 内容类型名创建邮件附件。</summary>
      <returns>
        <see cref="T:System.Net.Mail.Attachment" /> 类型的对象。</returns>
      <param name="content">一个包含附件内容的 <see cref="T:System.String" />。</param>
      <param name="name">与此附件关联的内容类型中的 MIME 内容类型名称值。</param>
    </member>
    <member name="M:System.Net.Mail.Attachment.CreateAttachmentFromString(System.String,System.String,System.Text.Encoding,System.String)">
      <summary>使用指定字符串中的内容、指定的 MIME 内容类型名、字符编码和附件的 MIME 标头信息创建邮件附件。</summary>
      <returns>
        <see cref="T:System.Net.Mail.Attachment" /> 类型的对象。</returns>
      <param name="content">一个包含附件内容的 <see cref="T:System.String" />。</param>
      <param name="name">与此附件关联的内容类型中的 MIME 内容类型名称值。</param>
      <param name="contentEncoding">一个 <see cref="T:System.Text.Encoding" />。此值可为 null。</param>
      <param name="mediaType">
        <see cref="T:System.String" /> 包含此附件的 MIME 内容标头信息。此值可为 null。</param>
    </member>
    <member name="P:System.Net.Mail.Attachment.Name">
      <summary>获取或设置与此附件关联的内容类型中的 MIME 内容类型名称值。</summary>
      <returns>
        <see cref="T:System.String" />，包含由 <see cref="P:System.Net.Mime.ContentType.Name" /> 属性表示的内容类型 <paramref name="name" /> 的值。</returns>
      <exception cref="T:System.ArgumentNullException">为 set 操作指定的值为 null。</exception>
      <exception cref="T:System.ArgumentException">为 set 操作指定的值为 <see cref="F:System.String.Empty" /> ("")。</exception>
    </member>
    <member name="P:System.Net.Mail.Attachment.NameEncoding">
      <summary>指定用于 <see cref="T:System.Net.Mail.Attachment" /><see cref="P:System.Net.Mail.Attachment.Name" /> 的编码。</summary>
      <returns>一个 <see cref="T:System.Text.Encoding" /> 值，它指定名称编码的类型。根据附件名称确定默认值。</returns>
    </member>
    <member name="T:System.Net.Mail.AttachmentBase">
      <summary>表示电子邮件附件的基类。<see cref="T:System.Net.Mail.Attachment" />、<see cref="T:System.Net.Mail.AlternateView" /> 和 <see cref="T:System.Net.Mail.LinkedResource" /> 类从此类派生。</summary>
    </member>
    <member name="M:System.Net.Mail.AttachmentBase.#ctor(System.IO.Stream)">
      <summary>用指定的 <see cref="T:System.IO.Stream" /> 实例化一个 <see cref="T:System.Net.Mail.AttachmentBase" />。</summary>
      <param name="contentStream">一个包含此附件内容的流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contentStream" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.Mail.AttachmentBase.#ctor(System.IO.Stream,System.Net.Mime.ContentType)">
      <summary>用指定的 <see cref="T:System.IO.Stream" /> 和 <see cref="T:System.Net.Mime.ContentType" /> 实例化一个 <see cref="T:System.Net.Mail.AttachmentBase" />。</summary>
      <param name="contentStream">一个包含此附件内容的流。</param>
      <param name="contentType">内容的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contentStream" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="contentType" /> 不是有效值。</exception>
    </member>
    <member name="M:System.Net.Mail.AttachmentBase.#ctor(System.IO.Stream,System.String)">
      <summary>用指定的 <see cref="T:System.IO.Stream" /> 和媒体类型实例化一个 <see cref="T:System.Net.Mail.AttachmentBase" />。</summary>
      <param name="contentStream">一个包含此附件内容的流。</param>
      <param name="mediaType">内容的 MIME 媒体类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contentStream" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="mediaType" /> 不是有效值。</exception>
    </member>
    <member name="M:System.Net.Mail.AttachmentBase.#ctor(System.String)">
      <summary>用指定的文件名实例化一个 <see cref="T:System.Net.Mail.AttachmentBase" />。</summary>
      <param name="fileName">保存此附件内容的文件的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.Mail.AttachmentBase.#ctor(System.String,System.Net.Mime.ContentType)">
      <summary>用指定的文件名和内容类型实例化一个 <see cref="T:System.Net.Mail.AttachmentBase" />。</summary>
      <param name="fileName">保存此附件内容的文件的名称。</param>
      <param name="contentType">内容的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="contentType" /> 不是有效值。</exception>
    </member>
    <member name="M:System.Net.Mail.AttachmentBase.#ctor(System.String,System.String)">
      <summary>用指定的文件名和媒体类型实例化一个 <see cref="T:System.Net.Mail.AttachmentBase" />。</summary>
      <param name="fileName">保存此附件内容的文件的名称。</param>
      <param name="mediaType">内容的 MIME 媒体类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="mediaType" /> 不是有效值。</exception>
    </member>
    <member name="P:System.Net.Mail.AttachmentBase.ContentId">
      <summary>获取或设置此附件的 MIME 内容 ID。</summary>
      <returns>包含内容 ID 的 <see cref="T:System.String" />。</returns>
      <exception cref="T:System.ArgumentNullException">试图将 <see cref="P:System.Net.Mail.AttachmentBase.ContentId" /> 设置为 null。</exception>
    </member>
    <member name="P:System.Net.Mail.AttachmentBase.ContentStream">
      <summary>获取此附件的内容流。</summary>
      <returns>
        <see cref="T:System.IO.Stream" />。</returns>
    </member>
    <member name="P:System.Net.Mail.AttachmentBase.ContentType">
      <summary>获取此附件的内容类型。</summary>
      <returns>
        <see cref="T:System.Net.Mime.ContentType" />。</returns>
    </member>
    <member name="M:System.Net.Mail.AttachmentBase.Dispose">
      <summary>释放由 <see cref="T:System.Net.Mail.AttachmentBase" /> 占用的资源。</summary>
    </member>
    <member name="M:System.Net.Mail.AttachmentBase.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Net.Mail.AttachmentBase" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">
                为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。</param>
    </member>
    <member name="P:System.Net.Mail.AttachmentBase.TransferEncoding">
      <summary>获取或设置此附件的编码。</summary>
      <returns>
        <see cref="T:System.Net.Mime.TransferEncoding" />。</returns>
    </member>
    <member name="T:System.Net.Mail.AttachmentCollection">
      <summary>存储将作为电子邮件的一部分发送的附件。</summary>
    </member>
    <member name="M:System.Net.Mail.AttachmentCollection.Dispose">
      <summary>释放由 <see cref="T:System.Net.Mail.AttachmentCollection" /> 使用的所有资源。</summary>
    </member>
    <member name="T:System.Net.Mail.DeliveryNotificationOptions">
      <summary>描述电子邮件的传送通知选项。</summary>
    </member>
    <member name="F:System.Net.Mail.DeliveryNotificationOptions.None">
      <summary>没有通知。</summary>
    </member>
    <member name="F:System.Net.Mail.DeliveryNotificationOptions.OnSuccess">
      <summary>通知传送是否成功。</summary>
    </member>
    <member name="F:System.Net.Mail.DeliveryNotificationOptions.OnFailure">
      <summary>通知传送是否失败。</summary>
    </member>
    <member name="F:System.Net.Mail.DeliveryNotificationOptions.Delay">
      <summary>通知传送是否延迟</summary>
    </member>
    <member name="F:System.Net.Mail.DeliveryNotificationOptions.Never">
      <summary>从不通知。</summary>
    </member>
    <member name="T:System.Net.Mail.LinkedResource">
      <summary>表示电子邮件附件中嵌入的外部资源，如 HTML 附件中的图像。</summary>
    </member>
    <member name="M:System.Net.Mail.LinkedResource.#ctor(System.IO.Stream)">
      <summary>使用提供的 <see cref="T:System.IO.Stream" /> 初始化 <see cref="T:System.Net.Mail.LinkedResource" /> 的新实例。</summary>
      <param name="contentStream">包含此嵌入资源的内容的流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contentStream" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.Mail.LinkedResource.#ctor(System.IO.Stream,System.Net.Mime.ContentType)">
      <summary>用 <see cref="T:System.IO.Stream" /> 和 <see cref="T:System.Net.Mime.ContentType" /> 提供的值初始化 <see cref="T:System.Net.Mail.LinkedResource" /> 的新实例。</summary>
      <param name="contentStream">包含此嵌入资源的内容的流。</param>
      <param name="contentType">内容的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contentStream" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="contentType" /> 不是有效值。</exception>
    </member>
    <member name="M:System.Net.Mail.LinkedResource.#ctor(System.IO.Stream,System.String)">
      <summary>使用指定的 <see cref="T:System.IO.Stream" /> 和媒体类型初始化 <see cref="T:System.Net.Mail.LinkedResource" /> 的新实例。</summary>
      <param name="contentStream">包含此嵌入资源的内容的流。</param>
      <param name="mediaType">内容的 MIME 媒体类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contentStream" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="mediaType" /> 不是有效值。</exception>
    </member>
    <member name="M:System.Net.Mail.LinkedResource.#ctor(System.String)">
      <summary>使用指定的文件名初始化 <see cref="T:System.Net.Mail.LinkedResource" /> 的新实例。</summary>
      <param name="fileName">包含此嵌入资源的内容的文件名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.Mail.LinkedResource.#ctor(System.String,System.Net.Mime.ContentType)">
      <summary>使用指定的文件名和内容类型初始化 <see cref="T:System.Net.Mail.LinkedResource" /> 的新实例。</summary>
      <param name="fileName">包含此嵌入资源的内容的文件名。</param>
      <param name="contentType">内容的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="contentType" /> 不是有效值。</exception>
    </member>
    <member name="M:System.Net.Mail.LinkedResource.#ctor(System.String,System.String)">
      <summary>使用指定的文件名和媒体类型初始化 <see cref="T:System.Net.Mail.LinkedResource" /> 的新实例。</summary>
      <param name="fileName">包含此嵌入资源的内容的文件名。</param>
      <param name="mediaType">内容的 MIME 媒体类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="mediaType" /> 不是有效值。</exception>
    </member>
    <member name="P:System.Net.Mail.LinkedResource.ContentLink">
      <summary>获取或设置资源必须匹配的 URI。</summary>
      <returns>如果 <see cref="P:System.Net.Mail.LinkedResource.ContentLink" /> 是相对 URI，则邮件的收件人必须解析它。</returns>
    </member>
    <member name="M:System.Net.Mail.LinkedResource.CreateLinkedResourceFromString(System.String)">
      <summary>用作为嵌入资源包含在电子邮件附件中的字符串创建 <see cref="T:System.Net.Mail.LinkedResource" /> 对象。默认媒体类型是纯文本，默认内容类型是 ASCII。</summary>
      <returns>一个包含嵌入资源的 <see cref="T:System.Net.Mail.LinkedResource" /> 对象，嵌入资源将包括在电子邮件附件中。</returns>
      <param name="content">包含嵌入资源的字符串，嵌入资源将包括在电子邮件附件中。</param>
      <exception cref="T:System.ArgumentNullException">指定的内容字符串为空。</exception>
    </member>
    <member name="M:System.Net.Mail.LinkedResource.CreateLinkedResourceFromString(System.String,System.Net.Mime.ContentType)">
      <summary>用作为嵌入资源包含在电子邮件附件中的字符串、指定的内容类型、纯文本媒体类型创建 <see cref="T:System.Net.Mail.LinkedResource" /> 对象。</summary>
      <returns>一个包含嵌入资源的 <see cref="T:System.Net.Mail.LinkedResource" /> 对象，嵌入资源将包括在电子邮件附件中。</returns>
      <param name="content">包含嵌入资源的字符串，嵌入资源将包括在电子邮件附件中。</param>
      <param name="contentType">内容的类型。</param>
      <exception cref="T:System.ArgumentNullException">指定的内容字符串为空。</exception>
    </member>
    <member name="M:System.Net.Mail.LinkedResource.CreateLinkedResourceFromString(System.String,System.Text.Encoding,System.String)">
      <summary>用作为嵌入资源包含在电子邮件附件中的字符串、指定的内容类型和媒体类型创建 <see cref="T:System.Net.Mail.LinkedResource" /> 对象。</summary>
      <returns>一个包含嵌入资源的 <see cref="T:System.Net.Mail.LinkedResource" /> 对象，嵌入资源将包括在电子邮件附件中。</returns>
      <param name="content">包含嵌入资源的字符串，嵌入资源将包括在电子邮件附件中。</param>
      <param name="contentEncoding">内容的类型。</param>
      <param name="mediaType">内容的 MIME 媒体类型。</param>
      <exception cref="T:System.ArgumentNullException">指定的内容字符串为空。</exception>
    </member>
    <member name="T:System.Net.Mail.LinkedResourceCollection">
      <summary>存储将作为电子邮件的一部分发送的链接资源。</summary>
    </member>
    <member name="M:System.Net.Mail.LinkedResourceCollection.Dispose">
      <summary>释放由 <see cref="T:System.Net.Mail.LinkedResourceCollection" /> 使用的所有资源。</summary>
    </member>
    <member name="T:System.Net.Mail.MailAddress">
      <summary>表示电子邮件发件人或收件人的地址。</summary>
    </member>
    <member name="M:System.Net.Mail.MailAddress.#ctor(System.String)">
      <summary>使用指定的地址初始化 <see cref="T:System.Net.Mail.MailAddress" /> 类的新实例。 </summary>
      <param name="address">
        <see cref="T:System.String" />，包含电子邮件地址。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> 为 <see cref="F:System.String.Empty" /> ("")。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="address" /> 的格式无法识别。</exception>
    </member>
    <member name="M:System.Net.Mail.MailAddress.#ctor(System.String,System.String)">
      <summary>使用指定的地址和显示名初始化 <see cref="T:System.Net.Mail.MailAddress" /> 类的新实例。</summary>
      <param name="address">
        <see cref="T:System.String" />，包含电子邮件地址。</param>
      <param name="displayName">
        <see cref="T:System.String" />，包含与 <paramref name="address" /> 关联的显示名。此参数可以为 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> 为 <see cref="F:System.String.Empty" /> ("")。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="address" /> 的格式无法识别。- 或 -<paramref name="address" /> 包含非 ASCII 字符。</exception>
    </member>
    <member name="M:System.Net.Mail.MailAddress.#ctor(System.String,System.String,System.Text.Encoding)">
      <summary>使用指定的地址、显示名和编码初始化 <see cref="T:System.Net.Mail.MailAddress" /> 类的新实例。</summary>
      <param name="address">
        <see cref="T:System.String" />，包含电子邮件地址。</param>
      <param name="displayName">
        <see cref="T:System.String" />，包含与 <paramref name="address" /> 关联的显示名。</param>
      <param name="displayNameEncoding">
        <see cref="T:System.Text.Encoding" />，定义用于 <paramref name="displayName" /> 的字符集。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。- 或 -<paramref name="displayName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> 为 <see cref="F:System.String.Empty" /> ("")。- 或 -<paramref name="displayName" /> 为 <see cref="F:System.String.Empty" /> ("")。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="address" /> 的格式无法识别。- 或 -<paramref name="address" /> 包含非 ASCII 字符。</exception>
    </member>
    <member name="P:System.Net.Mail.MailAddress.Address">
      <summary>获取创建此实例时指定的电子邮件地址。</summary>
      <returns>包含电子邮件地址的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Net.Mail.MailAddress.DisplayName">
      <summary>获取由创建此实例时指定的显示名和地址信息构成的显示名。</summary>
      <returns>包含显示名的 <see cref="T:System.String" />；如果创建此实例时没有指定显示名信息，则为 <see cref="F:System.String.Empty" /> ("")。</returns>
    </member>
    <member name="M:System.Net.Mail.MailAddress.Equals(System.Object)">
      <summary>比较两个邮件地址。</summary>
      <returns>
如果两个邮件地址相等，则为 true；否则为 false。</returns>
      <param name="value">与当前实例比较的 <see cref="T:System.Net.Mail.MailAddress" /> 实例。</param>
    </member>
    <member name="M:System.Net.Mail.MailAddress.GetHashCode">
      <summary>返回邮件地址的哈希值。</summary>
      <returns>整数哈希值。</returns>
    </member>
    <member name="P:System.Net.Mail.MailAddress.Host">
      <summary>获取创建此实例时指定的地址的主机部分。</summary>
      <returns>
        <see cref="T:System.String" />，包含接受 <see cref="P:System.Net.Mail.MailAddress.User" /> 属性的电子邮件的主机名。</returns>
    </member>
    <member name="M:System.Net.Mail.MailAddress.ToString">
      <summary>返回此实例的字符串表示形式。</summary>
      <returns>
        <see cref="T:System.String" />，包含此 <see cref="T:System.Net.Mail.MailAddress" /> 的内容。</returns>
    </member>
    <member name="P:System.Net.Mail.MailAddress.User">
      <summary>获取创建此实例时指定的地址中的用户信息。</summary>
      <returns>
        <see cref="T:System.String" />，包含 <see cref="P:System.Net.Mail.MailAddress.Address" /> 的用户名部分。</returns>
    </member>
    <member name="T:System.Net.Mail.MailAddressCollection">
      <summary>存储与电子邮件关联的电子邮件地址。</summary>
    </member>
    <member name="M:System.Net.Mail.MailAddressCollection.#ctor">
      <summary>初始化 <see cref="T:System.Net.Mail.MailAddressCollection" /> 类的空实例。</summary>
    </member>
    <member name="M:System.Net.Mail.MailAddressCollection.Add(System.String)">
      <summary>向集合中添加电子邮件地址列表。</summary>
      <param name="addresses">要添加到 <see cref="T:System.Net.Mail.MailAddressCollection" /> 中的电子邮件地址。多个电子邮件地址之间必须用逗号字符（“,”）分隔。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name=" addresses" /> 参数为 NULL。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name=" addresses" /> 参数是空字符串。</exception>
      <exception cref="T:System.FormatException">
        <paramref name=" addresses" /> 参数包含无效或不受支持的电子邮件地址。 </exception>
    </member>
    <member name="M:System.Net.Mail.MailAddressCollection.InsertItem(System.Int32,System.Net.Mail.MailAddress)">
      <summary>将电子邮件地址插入到 <see cref="T:System.Net.Mail.MailAddressCollection" /> 中的指定位置。</summary>
      <param name="index">将电子邮件地址插入到的位置，由 <paramref name="item" /> 指定。</param>
      <param name="item">要插入到集合中的电子邮件地址。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name=" item" /> 参数为 NULL。</exception>
    </member>
    <member name="M:System.Net.Mail.MailAddressCollection.SetItem(System.Int32,System.Net.Mail.MailAddress)">
      <summary>替换指定索引处的元素。</summary>
      <param name="index">要被替换的电子邮件地址元素的索引。</param>
      <param name="item">要替换集合中的元素的电子邮件地址。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name=" item" /> 参数为 NULL。</exception>
    </member>
    <member name="M:System.Net.Mail.MailAddressCollection.ToString">
      <summary>返回该 <see cref="T:System.Net.Mail.MailAddressCollection" /> 对象中电子邮件地址的字符串表示形式。</summary>
      <returns>包含此集合中的电子邮件地址的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Net.Mail.MailMessage">
      <summary>表示可以使用 <see cref="T:System.Net.Mail.SmtpClient" /> 类发送的电子邮件。</summary>
    </member>
    <member name="M:System.Net.Mail.MailMessage.#ctor">
      <summary>初始化 <see cref="T:System.Net.Mail.MailMessage" /> 类的空实例。</summary>
    </member>
    <member name="M:System.Net.Mail.MailMessage.#ctor(System.Net.Mail.MailAddress,System.Net.Mail.MailAddress)">
      <summary>使用指定的 <see cref="T:System.Net.Mail.MailAddress" /> 类对象初始化 <see cref="T:System.Net.Mail.MailMessage" /> 类的新实例。 </summary>
      <param name="from">包含电子邮件发件人的地址的 <see cref="T:System.Net.Mail.MailAddress" />。</param>
      <param name="to">包含电子邮件收件人的地址的 <see cref="T:System.Net.Mail.MailAddress" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="from" /> 为null。- 或 -<paramref name="to" /> 为null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="from" /> 或 <paramref name="to" /> 的格式不正确。</exception>
    </member>
    <member name="M:System.Net.Mail.MailMessage.#ctor(System.String,System.String)">
      <summary>使用指定的 <see cref="T:System.String" /> 类对象初始化 <see cref="T:System.Net.Mail.MailMessage" /> 类的新实例。 </summary>
      <param name="from">包含电子邮件发件人的地址的 <see cref="T:System.String" />。</param>
      <param name="to">包含电子邮件收件人的地址的 <see cref="T:System.String" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="from" /> 为 null。- 或 -<paramref name="to" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="from" /> 为 <see cref="F:System.String.Empty" /> ("")。- 或 -<paramref name="to" /> 为 <see cref="F:System.String.Empty" /> ("")。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="from" /> 或 <paramref name="to" /> 的格式不正确。</exception>
    </member>
    <member name="M:System.Net.Mail.MailMessage.#ctor(System.String,System.String,System.String,System.String)">
      <summary>初始化 <see cref="T:System.Net.Mail.MailMessage" /> 类的新实例。 </summary>
      <param name="from">包含电子邮件发件人的地址的 <see cref="T:System.String" />。</param>
      <param name="to">包含电子邮件收件人的地址的 <see cref="T:System.String" />。</param>
      <param name="subject">包含主题文本的 <see cref="T:System.String" />。</param>
      <param name="body">包含邮件正文的 <see cref="T:System.String" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="from" /> 为null。- 或 -<paramref name="to" /> 为null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="from" /> 为 <see cref="F:System.String.Empty" /> ("")。- 或 -<paramref name="to" /> 为 <see cref="F:System.String.Empty" /> ("")。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="from" /> 或 <paramref name="to" /> 的格式不正确。</exception>
    </member>
    <member name="P:System.Net.Mail.MailMessage.AlternateViews">
      <summary>获取用于存储邮件正文的替代形式的附件集合。</summary>
      <returns>可写的 <see cref="T:System.Net.Mail.AttachmentCollection" />。</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.Attachments">
      <summary>获取用于存储附加到此电子邮件的数据的附件集合。</summary>
      <returns>可写的 <see cref="T:System.Net.Mail.AttachmentCollection" />。</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.Bcc">
      <summary>获取包含此电子邮件的密件抄送 (BCC) 收件人的地址集合。</summary>
      <returns>可写的 <see cref="T:System.Net.Mail.MailAddressCollection" /> 对象。</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.Body">
      <summary>获取或设置邮件正文。</summary>
      <returns>包含正文的 <see cref="T:System.String" /> 值。</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.BodyEncoding">
      <summary>获取或设置用于邮件正文的编码。</summary>
      <returns>应用于 <see cref="P:System.Net.Mail.MailMessage.Body" /> 的内容的 <see cref="T:System.Text.Encoding" />。</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.CC">
      <summary>获取包含此电子邮件的抄送 (CC) 收件人的地址集合。</summary>
      <returns>可写的 <see cref="T:System.Net.Mail.MailAddressCollection" /> 对象。</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.DeliveryNotificationOptions">
      <summary>获取或设置此电子邮件的发送通知。</summary>
      <returns>包含此邮件的发送通知的 <see cref="T:System.Net.Mail.DeliveryNotificationOptions" /> 值。</returns>
    </member>
    <member name="M:System.Net.Mail.MailMessage.Dispose">
      <summary>释放由 <see cref="T:System.Net.Mail.MailMessage" /> 使用的所有资源。 </summary>
    </member>
    <member name="M:System.Net.Mail.MailMessage.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Net.Mail.MailMessage" /> 占用的非托管资源，还可以另外再释放托管资源。 </summary>
      <param name="disposing">
为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。 </param>
    </member>
    <member name="P:System.Net.Mail.MailMessage.From">
      <summary>获取或设置此电子邮件的发信人地址。</summary>
      <returns>包含发信人地址信息的 <see cref="T:System.Net.Mail.MailAddress" />。</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.Headers">
      <summary>获取与此电子邮件一起传输的电子邮件标头。</summary>
      <returns>包含电子邮件标头的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.IsBodyHtml">
      <summary>获取或设置指示邮件正文是否为 Html 格式的值。</summary>
      <returns>
如果邮件正文为 Html 格式，则为 true；否则为 false。默认为 false。</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.Priority">
      <summary>获取或设置此电子邮件的优先级。</summary>
      <returns>包含此邮件的优先级的 <see cref="T:System.Net.Mail.MailPriority" />。</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.ReplyTo">
      <summary>获取或设置邮件的回复地址。</summary>
      <returns>指示 <see cref="P:System.Net.Mail.MailMessage.ReplyTo" /> 字段的值的 MailAddress。</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.Sender">
      <summary>获取或设置此电子邮件的发件人地址。</summary>
      <returns>包含发件人地址信息的 <see cref="T:System.Net.Mail.MailAddress" />。</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.Subject">
      <summary>获取或设置此电子邮件的主题行。</summary>
      <returns>包含主题内容的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.SubjectEncoding">
      <summary>获取或设置此电子邮件的主题内容使用的编码。</summary>
      <returns>用于对 <see cref="P:System.Net.Mail.MailMessage.Subject" /> 属性进行编码的 <see cref="T:System.Text.Encoding" />。</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.To">
      <summary>获取包含此电子邮件的收件人的地址集合。</summary>
      <returns>可写的 <see cref="T:System.Net.Mail.MailAddressCollection" /> 对象。</returns>
    </member>
    <member name="T:System.Net.Mail.MailPriority">
      <summary>指定 <see cref="T:System.Net.Mail.MailMessage" /> 的优先级。</summary>
    </member>
    <member name="F:System.Net.Mail.MailPriority.Normal">
      <summary>此电子邮件具有正常优先级。</summary>
    </member>
    <member name="F:System.Net.Mail.MailPriority.Low">
      <summary>此电子邮件具有低优先级。</summary>
    </member>
    <member name="F:System.Net.Mail.MailPriority.High">
      <summary>此电子邮件具有高优先级。</summary>
    </member>
    <member name="T:System.Net.Mail.SendCompletedEventHandler">
      <summary>表示将处理 <see cref="E:System.Net.Mail.SmtpClient.SendCompleted" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" />。</param>
    </member>
    <member name="T:System.Net.Mail.SmtpAccess">
      <summary>指定允许的简单邮件传输协议 (SMTP) 服务器访问级别。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpAccess.None">
      <summary>不能访问 SMTP 主机。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpAccess.Connect">
      <summary>连接到默认端口（端口 25）上的 SMTP 主机。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpAccess.ConnectToUnrestrictedPort">
      <summary>连接到任何端口上的 SMTP 主机。</summary>
    </member>
    <member name="T:System.Net.Mail.SmtpClient">
      <summary>允许应用程序使用简单邮件传输协议 (SMTP) 来发送电子邮件。</summary>
    </member>
    <member name="M:System.Net.Mail.SmtpClient.#ctor">
      <summary>使用配置文件设置初始化 <see cref="T:System.Net.Mail.SmtpClient" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.Mail.SmtpClient.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Net.Mail.SmtpClient" /> 类的新实例，让其使用指定的 SMTP 服务器发送电子邮件。</summary>
      <param name="host">
        <see cref="T:System.String" />，包含用于 SMTP 事务的主机的名称或 IP 地址。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpClient.#ctor(System.String,System.Int32)">
      <summary>初始化 <see cref="T:System.Net.Mail.SmtpClient" /> 类的新实例，让其使用指定的 SMTP 服务器和端口发送电子邮件。</summary>
      <param name="host">
        <see cref="T:System.String" />，包含用于 SMTP 事务的主机的名称或 IP 地址。</param>
      <param name="port">大于 0 的 <see cref="T:System.Int32" />，包含要在 <paramref name="host" /> 上使用的端口。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 不能小于 0。</exception>
    </member>
    <member name="P:System.Net.Mail.SmtpClient.ClientCertificates">
      <summary>指定应该使用哪些证书来建立安全套接字层 (SSL) 连接。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />，包含一个或多个客户端证书。默认值从配置文件中的邮件配置属性导出。</returns>
    </member>
    <member name="P:System.Net.Mail.SmtpClient.Credentials">
      <summary>获取或设置用于验证发件人身份的凭据。</summary>
      <returns>表示用于身份验证的凭据的 <see cref="T:System.Net.ICredentialsByHost" />，如果没有指定凭据，则为 null。</returns>
      <exception cref="T:System.InvalidOperationException">在发送电子邮件时无法更改此属性的值。</exception>
    </member>
    <member name="P:System.Net.Mail.SmtpClient.DeliveryMethod">
      <summary>指定如何处理待发的电子邮件。</summary>
      <returns>
        <see cref="T:System.Net.Mail.SmtpDeliveryMethod" />，它指示如何传递电子邮件。</returns>
    </member>
    <member name="P:System.Net.Mail.SmtpClient.EnableSsl">
      <summary>指定 <see cref="T:System.Net.Mail.SmtpClient" /> 是否使用安全套接字层 (SSL) 加密连接。</summary>
      <returns>
            如果 <see cref="T:System.Net.Mail.SmtpClient" /> 使用 SSL，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="P:System.Net.Mail.SmtpClient.Host">
      <summary>获取或设置用于 SMTP 事务的主机的名称或 IP 地址。</summary>
      <returns>
        <see cref="T:System.String" />，包含用于 SMTP 事务的计算机的名称或 IP 地址。</returns>
      <exception cref="T:System.ArgumentNullException">为 set 操作指定的值为 null。</exception>
      <exception cref="T:System.ArgumentException">为 set 操作指定的值等于 <see cref="F:System.String.Empty" /> ("")。</exception>
      <exception cref="T:System.InvalidOperationException">在发送电子邮件时无法更改此属性的值。</exception>
    </member>
    <member name="M:System.Net.Mail.SmtpClient.OnSendCompleted(System.ComponentModel.AsyncCompletedEventArgs)">
      <summary>引发 <see cref="E:System.Net.Mail.SmtpClient.SendCompleted" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" />。</param>
    </member>
    <member name="P:System.Net.Mail.SmtpClient.PickupDirectoryLocation">
      <summary>获取或设置文件夹，应用程序在该文件夹中保存将由本地 SMTP 服务器处理的邮件。</summary>
      <returns>
        <see cref="T:System.String" />，它指定邮件的拾取目录。</returns>
    </member>
    <member name="P:System.Net.Mail.SmtpClient.Port">
      <summary>获取或设置用于 SMTP 事务的端口。</summary>
      <returns>
        <see cref="T:System.Int32" />，包含 SMTP 主机上的端口号。默认值为 25。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">为 set 操作指定的值小于或等于零。</exception>
      <exception cref="T:System.InvalidOperationException">在发送电子邮件时无法更改此属性的值。</exception>
    </member>
    <member name="M:System.Net.Mail.SmtpClient.Send(System.Net.Mail.MailMessage)">
      <summary>将指定的邮件发送到 SMTP 服务器以便传递。</summary>
      <param name="message">包含要发送的消息的 <see cref="T:System.Net.Mail.MailMessage" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Net.Mail.MailMessage.From" /> 为 null。- 或 -<see cref="P:System.Net.Mail.MailMessage.To" /> 为 null。- 或 -<paramref name="message" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Net.Mail.MailMessage.To" />、<see cref="P:System.Net.Mail.MailMessage.CC" /> 和 <see cref="P:System.Net.Mail.MailMessage.Bcc" /> 中没有收件人。</exception>
      <exception cref="T:System.InvalidOperationException">此 <see cref="T:System.Net.Mail.SmtpClient" /> 有一个 <see cref="Overload:System.Net.Mail.SmtpClient.SendAsync" /> 调用正在进行。- 或 -<see cref="P:System.Net.Mail.SmtpClient.Host" /> 为 null。- 或 -<see cref="P:System.Net.Mail.SmtpClient.Host" /> 是空字符串 ("")。或者 <see cref="P:System.Net.Mail.SmtpClient.Port" /> 是零。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
      <exception cref="T:System.Net.Mail.SmtpException">连接到 SMTP 服务器失败。- 或 -身份验证失败。- 或 -操作超时。</exception>
      <exception cref="T:System.Net.Mail.SmtpFailedRecipientsException">message 无法传递给 <see cref="P:System.Net.Mail.MailMessage.To" />、<see cref="P:System.Net.Mail.MailMessage.CC" /> 或 <see cref="P:System.Net.Mail.MailMessage.Bcc" /> 中的一个或多个收件人。</exception>
    </member>
    <member name="M:System.Net.Mail.SmtpClient.Send(System.String,System.String,System.String,System.String)">
      <summary>将指定的电子邮件发送到 SMTP 服务器以便传递。使用 <see cref="T:System.String" /> 对象指定邮件的发件人、收件人、主题和邮件正文。</summary>
      <param name="from">包含邮件发件人的地址信息的 <see cref="T:System.String" />。</param>
      <param name="recipients">包含邮件收件人的地址的 <see cref="T:System.String" />。</param>
      <param name="subject">包含邮件主题行的 <see cref="T:System.String" />。</param>
      <param name="body">包含邮件正文的 <see cref="T:System.String" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="from" /> 为 null。- 或 -<paramref name="recipient" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="from" /> 为<see cref="F:System.String.Empty" />。- 或 -<paramref name="recipient" /> 为<see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.InvalidOperationException">此 <see cref="T:System.Net.Mail.SmtpClient" /> 有一个 <see cref="Overload:System.Net.Mail.SmtpClient.SendAsync" /> 调用正在进行。- 或 -<see cref="P:System.Net.Mail.SmtpClient.Host" /> 为 null。- 或 -<see cref="P:System.Net.Mail.SmtpClient.Host" /> 是空字符串 ("")。或者 <see cref="P:System.Net.Mail.SmtpClient.Port" /> 是零。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
      <exception cref="T:System.Net.Mail.SmtpException">连接到 SMTP 服务器失败。- 或 -身份验证失败。- 或 -操作超时。</exception>
      <exception cref="T:System.Net.Mail.SmtpFailedRecipientsException">邮件无法传递给 <paramref name="recipients" /> 中的一个或多个收件人。</exception>
    </member>
    <member name="M:System.Net.Mail.SmtpClient.SendAsync(System.Net.Mail.MailMessage,System.Object)">
      <summary>将指定的电子邮件发送到 SMTP 服务器以便传递。此方法不会阻止调用线程，并允许调用方将对象传递给操作完成时调用的方法。</summary>
      <param name="message">包含要发送的消息的 <see cref="T:System.Net.Mail.MailMessage" />。</param>
      <param name="userToken">一个用户定义对象，此对象将被传递给完成异步操作时所调用的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Net.Mail.MailMessage.From" /> 为 null。- 或 -<see cref="P:System.Net.Mail.MailMessage.To" /> 为 null。- 或 -<paramref name="message" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Net.Mail.MailMessage.To" />、<see cref="P:System.Net.Mail.MailMessage.CC" /> 和 <see cref="P:System.Net.Mail.MailMessage.Bcc" /> 中没有收件人。</exception>
      <exception cref="T:System.InvalidOperationException">此 <see cref="T:System.Net.Mail.SmtpClient" /> 有一个 <see cref="Overload:System.Net.Mail.SmtpClient.SendAsync" /> 调用正在进行。- 或 -<see cref="P:System.Net.Mail.SmtpClient.Host" /> 为 null。- 或 -<see cref="P:System.Net.Mail.SmtpClient.Host" /> 是空字符串 ("")。- 或 -<see cref="P:System.Net.Mail.SmtpClient.Port" /> 是零。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
      <exception cref="T:System.Net.Mail.SmtpException">连接到 SMTP 服务器失败。- 或 -身份验证失败。- 或 -操作超时。</exception>
      <exception cref="T:System.Net.Mail.SmtpFailedRecipientsException">
        <paramref name="message" /> 无法传递给 <see cref="P:System.Net.Mail.MailMessage.To" />、<see cref="P:System.Net.Mail.MailMessage.CC" /> 或 <see cref="P:System.Net.Mail.MailMessage.Bcc" /> 中的一个或多个收件人。</exception>
    </member>
    <member name="M:System.Net.Mail.SmtpClient.SendAsync(System.String,System.String,System.String,System.String,System.Object)">
      <summary>将电子邮件发送到 SMTP 服务器以便传递。使用 <see cref="T:System.String" /> 对象指定邮件的发件人、收件人、主题和邮件正文。此方法不会阻止调用线程，并允许调用方将对象传递给操作完成时调用的方法。</summary>
      <param name="from">包含邮件发件人的地址信息的 <see cref="T:System.String" />。</param>
      <param name="recipients">包含邮件收件人的地址的 <see cref="T:System.String" />。</param>
      <param name="subject">包含邮件主题行的 <see cref="T:System.String" />。</param>
      <param name="body">包含邮件正文的 <see cref="T:System.String" />。</param>
      <param name="userToken">一个用户定义对象，此对象将被传递给完成异步操作时所调用的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="from" /> 为 null。- 或 -<paramref name="recipient" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="from" /> 为<see cref="F:System.String.Empty" />。- 或 -<paramref name="recipient" /> 为<see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.InvalidOperationException">此 <see cref="T:System.Net.Mail.SmtpClient" /> 有一个 <see cref="Overload:System.Net.Mail.SmtpClient.SendAsync" /> 调用正在进行。- 或 -<see cref="P:System.Net.Mail.SmtpClient.Host" /> 为 null。- 或 -<see cref="P:System.Net.Mail.SmtpClient.Host" /> 是空字符串 ("")。- 或 -<see cref="P:System.Net.Mail.SmtpClient.Port" /> 是零。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
      <exception cref="T:System.Net.Mail.SmtpException">连接到 SMTP 服务器失败。- 或 -身份验证失败。- 或 -操作超时。</exception>
      <exception cref="T:System.Net.Mail.SmtpFailedRecipientsException">邮件无法传递给 <paramref name="recipients" /> 中的一个或多个收件人。</exception>
    </member>
    <member name="M:System.Net.Mail.SmtpClient.SendAsyncCancel">
      <summary>取消异步操作以发送电子邮件。</summary>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
    </member>
    <member name="E:System.Net.Mail.SmtpClient.SendCompleted">
      <summary>在异步电子邮件发送操作完成时出现。</summary>
    </member>
    <member name="P:System.Net.Mail.SmtpClient.ServicePoint">
      <summary>获取用于传输电子邮件的网络连接。</summary>
      <returns>连接到用于 SMTP 的 <see cref="P:System.Net.Mail.SmtpClient.Host" /> 属性的 <see cref="T:System.Net.ServicePoint" />。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Net.Mail.SmtpClient.Host" /> 为 null 或是空字符串 ("")。- 或 -<see cref="P:System.Net.Mail.SmtpClient.Port" /> 是零。</exception>
    </member>
    <member name="P:System.Net.Mail.SmtpClient.Timeout">
      <summary>获取或设置一个值，该值指定同步 <see cref="Overload:System.Net.Mail.SmtpClient.Send" /> 调用的超时时间。</summary>
      <returns>指定超时值（以毫秒为单位）的 <see cref="T:System.Int32" />。默认值为 100,000（100 秒）。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">为 set 操作指定的值小于 0。</exception>
      <exception cref="T:System.InvalidOperationException">在发送电子邮件时无法更改此属性的值。</exception>
    </member>
    <member name="P:System.Net.Mail.SmtpClient.UseDefaultCredentials">
      <summary>获取或设置 <see cref="T:System.Boolean" /> 值，该值控制 <see cref="P:System.Net.CredentialCache.DefaultCredentials" /> 是否随请求一起发送。</summary>
      <returns>
            如果使用默认凭据，则为 true；否则为 false。默认值为 false。</returns>
      <exception cref="T:System.InvalidOperationException">在发送电子邮件时无法更改此属性的值。</exception>
    </member>
    <member name="T:System.Net.Mail.SmtpDeliveryMethod">
      <summary>指定如何发送电子邮件。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpDeliveryMethod.Network">
      <summary>电子邮件通过网络发送到 SMTP 服务器。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpDeliveryMethod.SpecifiedPickupDirectory">
      <summary>将电子邮件复制到 <see cref="P:System.Net.Mail.SmtpClient.PickupDirectoryLocation" /> 属性指定的目录，然后由外部应用程序传送。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpDeliveryMethod.PickupDirectoryFromIis">
      <summary>将电子邮件复制到挑选目录，然后通过本地 Internet 信息服务 (IIS) 传送。</summary>
    </member>
    <member name="T:System.Net.Mail.SmtpException">
      <summary>
                    表示当 <see cref="T:System.Net.Mail.SmtpClient" /> 无法完成 <see cref="Overload:System.Net.Mail.SmtpClient.Send" /> 或 <see cref="Overload:System.Net.Mail.SmtpClient.SendAsync" /> 操作时引发的异常。
                </summary>
    </member>
    <member name="M:System.Net.Mail.SmtpException.#ctor">
      <summary>
                    初始化 <see cref="T:System.Net.Mail.SmtpException" /> 类的新实例。
                </summary>
    </member>
    <member name="M:System.Net.Mail.SmtpException.#ctor(System.Net.Mail.SmtpStatusCode)">
      <summary>
                    用指定的状态代码初始化 <see cref="T:System.Net.Mail.SmtpException" /> 类的新实例。
                </summary>
      <param name="statusCode">
                    一个 <see cref="T:System.Net.Mail.SmtpStatusCode" /> 值。
                </param>
    </member>
    <member name="M:System.Net.Mail.SmtpException.#ctor(System.Net.Mail.SmtpStatusCode,System.String)">
      <summary>
                    用指定的状态代码和错误信息初始化 <see cref="T:System.Net.Mail.SmtpException" /> 类的新实例。
                </summary>
      <param name="statusCode">
                    一个 <see cref="T:System.Net.Mail.SmtpStatusCode" /> 值。
                </param>
      <param name="message">
                    描述发生的错误的 <see cref="T:System.String" />。
                </param>
    </member>
    <member name="M:System.Net.Mail.SmtpException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                    从 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的指定实例初始化 <see cref="T:System.Net.Mail.SmtpException" /> 类的新实例。
                </summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含序列化新的 <see cref="T:System.Net.Mail.SmtpException" /> 所需的信息。
                </param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，包含与新实例关联的序列化流的源和目标。
                </param>
    </member>
    <member name="M:System.Net.Mail.SmtpException.#ctor(System.String)">
      <summary>
                    使用指定的错误信息初始化 <see cref="T:System.Net.Mail.SmtpException" /> 类的新实例。
                </summary>
      <param name="message">
                    描述发生的错误的 <see cref="T:System.String" />。
                </param>
    </member>
    <member name="M:System.Net.Mail.SmtpException.#ctor(System.String,System.Exception)">
      <summary>
                    使用指定的错误信息和内部异常初始化 <see cref="T:System.Net.Mail.SmtpException" /> 类的新实例。
                </summary>
      <param name="message">
                    描述发生的错误的 <see cref="T:System.String" />。
                </param>
      <param name="innerException">
                    导致当前异常的异常。
                </param>
    </member>
    <member name="M:System.Net.Mail.SmtpException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                    用序列化 <see cref="T:System.Net.Mail.SmtpException" /> 所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例。
                </summary>
      <param name="serializationInfo">
                    要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。
                </param>
      <param name="streamingContext">
                    用于指定该序列化的目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。
                </param>
    </member>
    <member name="P:System.Net.Mail.SmtpException.StatusCode">
      <summary>
                    获取传输电子邮件时由 SMTP 服务器返回的状态代码。
                </summary>
      <returns>
                    指示所发生的错误的 <see cref="T:System.Net.Mail.SmtpStatusCode" /> 值。
                </returns>
    </member>
    <member name="M:System.Net.Mail.SmtpException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                    用序列化 <see cref="T:System.Net.Mail.SmtpException" /> 所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例。
                </summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含 <see cref="T:System.Net.Mail.SmtpException" /> 的序列化数据。
                </param>
      <param name="streamingContext">
                    一个 <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含与新的 <see cref="T:System.Net.Mail.SmtpException" /> 关联的序列化流的目标。
                </param>
    </member>
    <member name="T:System.Net.Mail.SmtpFailedRecipientException">
      <summary>表示当 <see cref="T:System.Net.Mail.SmtpClient" /> 不能对特定收件人完成 <see cref="Overload:System.Net.Mail.SmtpClient.Send" /> 或 <see cref="Overload:System.Net.Mail.SmtpClient.SendAsync" /> 操作时引发的异常。</summary>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientException.#ctor">
      <summary>初始化 <see cref="T:System.Net.Mail.SmtpFailedRecipientException" /> 类的空实例。</summary>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientException.#ctor(System.Net.Mail.SmtpStatusCode,System.String)">
      <summary>用指定的状态代码和电子邮件地址初始化 <see cref="T:System.Net.Mail.SmtpFailedRecipientException" /> 类的新实例。</summary>
      <param name="statusCode">一个 <see cref="T:System.Net.Mail.SmtpStatusCode" /> 值。</param>
      <param name="failedRecipient">包含电子邮件地址的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientException.#ctor(System.Net.Mail.SmtpStatusCode,System.String,System.String)">
      <summary>用指定的状态代码、电子邮件地址和服务器响应初始化 <see cref="T:System.Net.Mail.SmtpFailedRecipientException" /> 类的新实例。</summary>
      <param name="statusCode">一个 <see cref="T:System.Net.Mail.SmtpStatusCode" /> 值。</param>
      <param name="failedRecipient">包含电子邮件地址的 <see cref="T:System.String" />。</param>
      <param name="serverResponse">包含服务器响应的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的指定实例初始化 <see cref="T:System.Net.Mail.SmtpFailedRecipientException" /> 类的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含序列化新的 <see cref="T:System.Net.Mail.SmtpFailedRecipientException" /> 所需的信息。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，包含与新实例关联的序列化流的源和目标。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.Net.Mail.SmtpFailedRecipientException" /> 类的新实例。</summary>
      <param name="message">包含错误信息的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误信息和内部异常初始化 <see cref="T:System.Net.Mail.SmtpException" /> 类的新实例。</summary>
      <param name="message">描述发生的错误的 <see cref="T:System.String" />。</param>
      <param name="innerException">导致当前异常的异常。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientException.#ctor(System.String,System.String,System.Exception)">
      <summary>用指定的错误信息、电子邮件地址和内部异常初始化 <see cref="T:System.Net.Mail.SmtpException" /> 类的新实例。</summary>
      <param name="message">描述发生的错误的 <see cref="T:System.String" />。</param>
      <param name="failedRecipient">包含电子邮件地址的 <see cref="T:System.String" />。</param>
      <param name="innerException">导致当前异常的异常。</param>
    </member>
    <member name="P:System.Net.Mail.SmtpFailedRecipientException.FailedRecipient">
      <summary>指示有发送困难的电子邮件地址。</summary>
      <returns>包含电子邮件地址的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化 <see cref="T:System.Net.Mail.SmtpFailedRecipientException" /> 所需的数据来填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例。</summary>
      <param name="serializationInfo">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="streamingContext">用于指定该序列化的目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化 <see cref="T:System.Net.Mail.SmtpFailedRecipientException" /> 所需的数据来填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例，它保存用于 <see cref="T:System.Net.Mail.SmtpFailedRecipientException" /> 的序列化数据。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 实例，它包含与新的 <see cref="T:System.Net.Mail.SmtpFailedRecipientException" /> 关联的序列化流的目标。</param>
    </member>
    <member name="T:System.Net.Mail.SmtpFailedRecipientsException">
      <summary>当使用 <see cref="T:System.Net.Mail.SmtpClient" /> 发送电子邮件但邮件不能发送至所有收件人时引发的异常。</summary>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientsException.#ctor">
      <summary>初始化 <see cref="T:System.Net.Mail.SmtpFailedRecipientsException" /> 类的空实例。</summary>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的指定实例初始化 <see cref="T:System.Net.Mail.SmtpFailedRecipientsException" /> 类的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例，包含序列化新 <see cref="T:System.Net.Mail.SmtpFailedRecipientsException" /> 实例所需的信息。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，包含与新的 <see cref="T:System.Net.Mail.SmtpFailedRecipientsException" /> 实例关联的序列化流的源。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientsException.#ctor(System.String)">
      <summary>用指定的 <see cref="T:System.String" /> 初始化 <see cref="T:System.Net.Mail.SmtpFailedRecipientsException" /> 类的新实例。</summary>
      <param name="message">异常消息。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientsException.#ctor(System.String,System.Exception)">
      <summary>使用指定的 <see cref="T:System.String" /> 和内部 <see cref="T:System.Exception" /> 初始化 <see cref="T:System.Net.Mail.SmtpFailedRecipientsException" /> 类的新实例。</summary>
      <param name="message">异常消息。</param>
      <param name="innerException">内部异常。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientsException.#ctor(System.String,System.Net.Mail.SmtpFailedRecipientException[])">
      <summary>使用指定的 <see cref="T:System.String" /> 和类型为 <see cref="T:System.Net.Mail.SmtpFailedRecipientException" /> 的数组初始化 <see cref="T:System.Net.Mail.SmtpFailedRecipientsException" /> 类的新实例。</summary>
      <param name="message">异常消息。</param>
      <param name="innerExceptions">存在发送错误的收件人的数组。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化 <see cref="T:System.Net.Mail.SmtpFailedRecipientsException" /> 所需的数据来填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例。</summary>
      <param name="serializationInfo">要使用的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="streamingContext">要使用的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="P:System.Net.Mail.SmtpFailedRecipientsException.InnerExceptions">
      <summary>获取一个或多个 <see cref="T:System.Net.Mail.SmtpFailedRecipientException" />，指示存在 SMTP 发送错误的电子邮件收件人。</summary>
      <returns>列出存在发送错误的收件人的 <see cref="T:System.Net.Mail.SmtpFailedRecipientException" /> 类型的数组。</returns>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientsException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>根据指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 实例初始化 <see cref="T:System.Net.Mail.SmtpFailedRecipientsException" /> 类的新实例。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含序列化新的 <see cref="T:System.Net.Mail.SmtpFailedRecipientsException" /> 所需的信息。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，包含与新的 <see cref="T:System.Net.Mail.SmtpFailedRecipientsException" /> 关联的序列化流的源。</param>
    </member>
    <member name="T:System.Net.Mail.SmtpPermission">
      <summary>控制对简单邮件传输协议 (SMTP) 服务器的访问。</summary>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.#ctor(System.Boolean)">
      <summary>使用指定的状态初始化 <see cref="T:System.Net.Mail.SmtpPermission" /> 类的新实例。</summary>
      <param name="unrestricted">
如果新权限不受限制，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.#ctor(System.Net.Mail.SmtpAccess)">
      <summary>使用指定的访问级别初始化 <see cref="T:System.Net.Mail.SmtpPermission" /> 类的新实例。</summary>
      <param name="access">
        <see cref="T:System.Net.Mail.SmtpAccess" /> 值之一。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>使用指定的权限状态值初始化 <see cref="T:System.Net.Mail.SmtpPermission" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。 </param>
    </member>
    <member name="P:System.Net.Mail.SmtpPermission.Access">
      <summary>获取由权限控制的 SMTP 服务器的访问级别。</summary>
      <returns>
        <see cref="T:System.Net.Mail.SmtpAccess" /> 值之一。 </returns>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.AddPermission(System.Net.Mail.SmtpAccess)">
      <summary>将指定的访问级别值添加到权限。 </summary>
      <param name="access">
        <see cref="T:System.Net.Mail.SmtpAccess" /> 值之一。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.Copy">
      <summary>创建并返回当前权限的相同副本。 </summary>
      <returns>
        <see cref="T:System.Net.Mail.SmtpPermission" />，与当前权限相同。</returns>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.FromXml(System.Security.SecurityElement)">
      <summary>使用指定的 XML 编码设置权限的状态。</summary>
      <param name="securityElement">用于设置当前权限的状态的 XML 编码。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="securityElement" /> 不描述 <see cref="T:System.Net.Mail.SmtpPermission" /> 对象。- 或 -<paramref name="securityElement" /> 不包含重建权限所需的状态信息。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityElement" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.Intersect(System.Security.IPermission)">
      <summary>创建并返回一个权限，该权限是当前权限和指定权限的交集。</summary>
      <returns>代表当前权限和指定权限交集的 <see cref="T:System.Net.Mail.SmtpPermission" />。如果交集为空或 <paramref name="target" /> 为 null，则返回 null。</returns>
      <param name="target">与当前权限相交的 <see cref="T:System.Security.IPermission" />。它必须与当前权限属于同一类型。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 <see cref="T:System.Net.Mail.SmtpPermission" />。</exception>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>返回一个值，指示当前的权限是否为指定权限的一个子集。 </summary>
      <returns>
如果当前权限是指定权限的子集，则为 true；否则为 false。</returns>
      <param name="target">将要测试子集关系的 <see cref="T:System.Security.IPermission" />。此权限必须与当前权限属于同一类型。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 <see cref="T:System.Net.Mail.SmtpPermission" />。</exception>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.IsUnrestricted">
      <summary>返回一个值，该值指示当前权限是否为无限制的。</summary>
      <returns>
如果当前权限是无限制的，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.ToXml">
      <summary>创建权限状态的 XML 编码。 </summary>
      <returns>
        <see cref="T:System.Security.SecurityElement" />，包含当前权限的 XML 编码。</returns>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.Union(System.Security.IPermission)">
      <summary>创建一个权限，该权限是当前权限与指定权限的并集。 </summary>
      <returns>新 <see cref="T:System.Net.Mail.SmtpPermission" /> 权限，表示当前权限与指定权限的并集。</returns>
      <param name="target">与当前权限合并的 <see cref="T:System.Security.IPermission" />。 </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 <see cref="T:System.Net.Mail.SmtpPermission" />。</exception>
    </member>
    <member name="T:System.Net.Mail.SmtpPermissionAttribute">
      <summary>控制对简单邮件传输协议 (SMTP) 服务器的访问。</summary>
    </member>
    <member name="M:System.Net.Mail.SmtpPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>初始化 <see cref="T:System.Net.Mail.SmtpPermissionAttribute" /> 类的新实例。 </summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一，它指定权限行为。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="action" /> 不是有效的 <see cref="T:System.Security.Permissions.SecurityAction" />。</exception>
    </member>
    <member name="P:System.Net.Mail.SmtpPermissionAttribute.Access">
      <summary>获取或设置由该属性控制的对 SMTP 服务器的访问级别。</summary>
      <returns>
        <see cref="T:System.String" /> 值。有效值是“连接”和“无”。</returns>
    </member>
    <member name="M:System.Net.Mail.SmtpPermissionAttribute.CreatePermission">
      <summary>创建可以与 <see cref="T:System.Security.Permissions.SecurityAction" /> 一起存储在程序集的元数据中的权限对象。</summary>
      <returns>一个 <see cref="T:System.Net.Mail.SmtpPermission" /> 实例。</returns>
    </member>
    <member name="T:System.Net.Mail.SmtpStatusCode">
      <summary>指定使用 <see cref="T:System.Net.Mail.SmtpClient" /> 类发送电子邮件的结果。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.SystemStatus">
      <summary>系统状态或系统帮助回复。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.HelpMessage">
      <summary>服务返回了帮助消息。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.ServiceReady">
      <summary>SMTP 服务已准备就绪。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.ServiceClosingTransmissionChannel">
      <summary>SMTP 服务正在关闭传输通道。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.Ok">
      <summary>电子邮件已成功发送到 SMTP 服务。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.UserNotLocalWillForward">
      <summary>用户邮箱不是位于接收服务器上；服务器会转发电子邮件。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.CannotVerifyUserWillAttemptDelivery">
      <summary>指定的用户不是本地用户，但用于接收的 SMTP 服务接受了邮件并试图传递它。在 RFC 1123 中定义了此状态代码，这可以在 http://www.ietf.org 上找到。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.StartMailInput">
      <summary>SMTP 服务已准备好接收电子邮件内容。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.ServiceNotAvailable">
      <summary>SMTP 服务不可用，服务器正在关闭传输通道。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.MailboxBusy">
      <summary>目标邮箱正在使用。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.LocalErrorInProcessing">
      <summary>SMTP 服务无法完成请求。如果无法解析客户端的 IP 地址（即反向查找失败），则可能发生此错误。如果客户端域被识别为一个开放中继或未经请求的电子邮件（垃圾邮件）源，也可能收到此错误。有关详细信息，请参见 RFC 2505，这可以在 http://www.ietf.org 上找到。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.InsufficientStorage">
      <summary>SMTP 服务没有足够的存储空间来完成请求。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.ClientNotPermitted">
      <summary>客户端未经过身份验证或者不允许客户端使用指定的 SMTP 主机发送电子邮件。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.CommandUnrecognized">
      <summary>SMTP 服务不识别指定的命令。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.SyntaxError">
      <summary>用于指定命令或参数的语法不正确。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.CommandNotImplemented">
      <summary>SMTP 服务未实现指定的命令。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.BadCommandSequence">
      <summary>发送命令的顺序不正确。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.MustIssueStartTlsFirst">
      <summary>SMTP 服务器被配置为仅接受 TLS 连接，而 SMTP 客户端尝试通过使用非 TLS 连接进行连接。解决方法是让用户在 SMTP 客户端上设置 EnableSsl=true。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.CommandParameterNotImplemented">
      <summary>SMTP 服务未实现指定的命令参数。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.MailboxUnavailable">
      <summary>未找到目标邮箱或未能访问目标邮箱。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.UserNotLocalTryAlternatePath">
      <summary>用户邮箱不是位于接收服务器上。您应使用提供的地址信息重新发送。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.ExceededStorageAllocation">
      <summary>邮件太大，无法存储在目标邮箱中。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.MailboxNameNotAllowed">
      <summary>用于指定目标邮箱的语法不正确。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.TransactionFailed">
      <summary>事务失败。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.GeneralFailure">
      <summary>事务未能发生。当未能找到指定的 SMTP 主机时，会收到此错误。</summary>
    </member>
    <member name="T:System.Net.Mime.ContentDisposition">
      <summary>表示 MIME 协议 Content-Disposition 标头。</summary>
    </member>
    <member name="M:System.Net.Mime.ContentDisposition.#ctor">
      <summary>用 <see cref="F:System.Net.Mime.DispositionTypeNames.Attachment" /> 的 <see cref="P:System.Net.Mime.ContentDisposition.DispositionType" /> 初始化 <see cref="T:System.Net.Mime.ContentDisposition" /> 类的新实例。 </summary>
    </member>
    <member name="M:System.Net.Mime.ContentDisposition.#ctor(System.String)">
      <summary>使用指定的处置信息初始化 <see cref="T:System.Net.Mime.ContentDisposition" /> 类的新实例。</summary>
      <param name="disposition">包含处置方式的 <see cref="T:System.Net.Mime.DispositionTypeNames" /> 值。</param>
      <exception cref="T:System.FormatException">
        <paramref name="disposition" /> 为 null 或等于 <see cref="F:System.String.Empty" /> ("")。</exception>
    </member>
    <member name="P:System.Net.Mime.ContentDisposition.CreationDate">
      <summary>获取或设置文件附件的创建日期。</summary>
      <returns>表示文件创建日期的 <see cref="T:System.DateTime" /> 值，如果没有指定日期，则为 <see cref="F:System.DateTime.MinValue" />。</returns>
    </member>
    <member name="P:System.Net.Mime.ContentDisposition.DispositionType">
      <summary>获取或设置电子邮件附件的处置类型。</summary>
      <returns>包含处置类型的 <see cref="T:System.String" />。对于该值没有任何限制，但它一般是 <see cref="P:System.Net.Mime.ContentDisposition.DispositionType" /> 值之一。</returns>
      <exception cref="T:System.ArgumentNullException">为 set 操作指定的值为 null。</exception>
      <exception cref="T:System.ArgumentException">为 set 操作指定的值等于 <see cref="F:System.String.Empty" /> ("")。</exception>
    </member>
    <member name="M:System.Net.Mime.ContentDisposition.Equals(System.Object)">
      <summary>确定指定 <see cref="T:System.Net.Mime.ContentDisposition" /> 对象的 Content-Disposition 标头是否等于此对象的 Content-Disposition 标头。</summary>
      <returns>
如果 Content-Disposition 标头相同，则为 true；否则为 false。</returns>
      <param name="rparam">与此对象进行比较的 <see cref="T:System.Net.Mime.ContentDisposition" /> 对象。</param>
    </member>
    <member name="P:System.Net.Mime.ContentDisposition.FileName">
      <summary>获取或设置电子邮件附件的建议文件名。</summary>
      <returns>包含文件名的 <see cref="T:System.String" />。 </returns>
    </member>
    <member name="M:System.Net.Mime.ContentDisposition.GetHashCode">
      <summary>确定指定的 <see cref="T:System.Net.Mime.ContentDisposition" /> 对象的哈希代码</summary>
      <returns>整数哈希值。</returns>
    </member>
    <member name="P:System.Net.Mime.ContentDisposition.Inline">
      <summary>获取或设置 <see cref="T:System.Boolean" /> 值，该值确定电子邮件附件的处置类型（内联或附件）。</summary>
      <returns>
如果附件中的内容作为电子邮件正文的一部分内联显示，则为 true，否则为 false。 </returns>
    </member>
    <member name="P:System.Net.Mime.ContentDisposition.ModificationDate">
      <summary>获取或设置文件附件的修改日期。</summary>
      <returns>表示文件修改日期的 <see cref="T:System.DateTime" /> 值，如果没有指定日期，则为 <see cref="F:System.DateTime.MinValue" />。</returns>
    </member>
    <member name="P:System.Net.Mime.ContentDisposition.Parameters">
      <summary>获取由此实例表示的 Content-Disposition 标头中包括的参数。</summary>
      <returns>可写的 <see cref="T:System.Collections.Specialized.StringDictionary" />，包含参数名/值对。</returns>
    </member>
    <member name="P:System.Net.Mime.ContentDisposition.ReadDate">
      <summary>获取或设置文件附件的读取日期。</summary>
      <returns>表示文件读取日期的 <see cref="T:System.DateTime" /> 值，如果没有指定日期，则为 <see cref="F:System.DateTime.MinValue" />。</returns>
    </member>
    <member name="P:System.Net.Mime.ContentDisposition.Size">
      <summary>获取或设置文件附件的大小。</summary>
      <returns>
        <see cref="T:System.Int32" />，指定文件附件中的字节数。默认值为 -1，表示文件大小未知。</returns>
    </member>
    <member name="M:System.Net.Mime.ContentDisposition.ToString">
      <summary>返回此实例的 <see cref="T:System.String" /> 表示形式。</summary>
      <returns>
        <see cref="T:System.String" />，包含此实例的属性值。</returns>
    </member>
    <member name="T:System.Net.Mime.ContentType">
      <summary>表示 MIME 协议 Content-Type 标头。</summary>
    </member>
    <member name="M:System.Net.Mime.ContentType.#ctor">
      <summary>初始化 <see cref="T:System.Net.Mime.ContentType" /> 类的一个新默认实例。 </summary>
    </member>
    <member name="M:System.Net.Mime.ContentType.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Net.Mime.ContentType" /> 类的新实例。 </summary>
      <param name="contentType">包含 MIME 媒体类型、子类型和可选参数的 <see cref="T:System.String" />（例如 "text/plain; charset=us-ascii"）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contentType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="contentType" /> 为 <see cref="F:System.String.Empty" /> ("")。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="contentType" /> 的格式是无法分析的。</exception>
    </member>
    <member name="P:System.Net.Mime.ContentType.Boundary">
      <summary>获取或设置由此实例表示的 Content-Type 标头中包含的边界参数的值。</summary>
      <returns>
        <see cref="T:System.String" />，包含与边界参数关联的值。</returns>
    </member>
    <member name="P:System.Net.Mime.ContentType.CharSet">
      <summary>获取或设置由此实例表示的 Content-Type 标头中包含的字符集参数的值。</summary>
      <returns>
        <see cref="T:System.String" />，包含与字符集参数关联的值。</returns>
    </member>
    <member name="M:System.Net.Mime.ContentType.Equals(System.Object)">
      <summary>确定指定 <see cref="T:System.Net.Mime.ContentType" /> 对象的 Content-Type 标头是否等于此对象的 Content-Type 标头。</summary>
      <returns>
如果 Content-Type 标头相同，则为 true；否则为 false。</returns>
      <param name="rparam">与此对象进行比较的 <see cref="T:System.Net.Mime.ContentType" /> 对象。</param>
    </member>
    <member name="M:System.Net.Mime.ContentType.GetHashCode">
      <summary>确定指定的 <see cref="T:System.Net.Mime.ContentType" /> 对象的哈希代码</summary>
      <returns>整数哈希值。</returns>
    </member>
    <member name="P:System.Net.Mime.ContentType.MediaType">
      <summary>获取或设置由此实例表示的 Content-Type 标头中包含的媒体类型值。</summary>
      <returns>包含媒体类型和子类型值的 <see cref="T:System.String" />。在该值中，子类型后面没有分号 (;) 分隔符。</returns>
      <exception cref="T:System.ArgumentNullException">为 set 操作指定的值为 null。</exception>
      <exception cref="T:System.ArgumentException">为 set 操作指定的值为 <see cref="F:System.String.Empty" /> ("")。</exception>
      <exception cref="T:System.FormatException">为 Set 操作指定的值的格式是无法分析的。</exception>
    </member>
    <member name="P:System.Net.Mime.ContentType.Name">
      <summary>获取或设置由此实例表示的 Content-Type 标头中包含的名称参数的值。</summary>
      <returns>
        <see cref="T:System.String" />，包含与名称参数关联的值。 </returns>
    </member>
    <member name="P:System.Net.Mime.ContentType.Parameters">
      <summary>获取包含由此实例表示的 Content-Type 标头中包含的参数的字典。</summary>
      <returns>可写的 <see cref="T:System.Collections.Specialized.StringDictionary" />，包含名称和值。</returns>
    </member>
    <member name="M:System.Net.Mime.ContentType.ToString">
      <summary>返回此 <see cref="T:System.Net.Mime.ContentType" /> 对象的字符串表示形式。</summary>
      <returns>
        <see cref="T:System.String" />，包含此 <see cref="T:System.Net.Mime.ContentType" /> 的当前设置。</returns>
    </member>
    <member name="T:System.Net.Mime.DispositionTypeNames">
      <summary>提供用于指定电子邮件附件的处置类型的字符串。</summary>
    </member>
    <member name="F:System.Net.Mime.DispositionTypeNames.Attachment">
      <summary>指定附件作为附加到电子邮件的文件显示。</summary>
    </member>
    <member name="F:System.Net.Mime.DispositionTypeNames.Inline">
      <summary>指定附件作为电子邮件正文的一部分显示。</summary>
    </member>
    <member name="T:System.Net.Mime.MediaTypeNames">
      <summary>指定电子邮件附件的媒体类型信息。</summary>
    </member>
    <member name="T:System.Net.Mime.MediaTypeNames.Application">
      <summary>指定电子邮件附件中的应用程序数据的类型。</summary>
    </member>
    <member name="F:System.Net.Mime.MediaTypeNames.Application.Octet">
      <summary>指定不解释 <see cref="T:System.Net.Mime.MediaTypeNames.Application" /> 数据。</summary>
    </member>
    <member name="F:System.Net.Mime.MediaTypeNames.Application.Pdf">
      <summary>指定 <see cref="T:System.Net.Mime.MediaTypeNames.Application" /> 数据为可移植文档格式 (PDF)。</summary>
    </member>
    <member name="F:System.Net.Mime.MediaTypeNames.Application.Rtf">
      <summary>指定 <see cref="T:System.Net.Mime.MediaTypeNames.Application" /> 数据为 RTF 格式 (RTF)。</summary>
    </member>
    <member name="F:System.Net.Mime.MediaTypeNames.Application.Soap">
      <summary>指定 <see cref="T:System.Net.Mime.MediaTypeNames.Application" /> 数据为 SOAP 文档。</summary>
    </member>
    <member name="F:System.Net.Mime.MediaTypeNames.Application.Zip">
      <summary>指定 <see cref="T:System.Net.Mime.MediaTypeNames.Application" /> 数据是压缩的。</summary>
    </member>
    <member name="T:System.Net.Mime.MediaTypeNames.Image">
      <summary>指定电子邮件附件中的图像数据类型。</summary>
    </member>
    <member name="F:System.Net.Mime.MediaTypeNames.Image.Gif">
      <summary>指定 <see cref="T:System.Net.Mime.MediaTypeNames.Image" /> 数据为图形交换格式 (GIF)。</summary>
    </member>
    <member name="F:System.Net.Mime.MediaTypeNames.Image.Jpeg">
      <summary>指定 <see cref="T:System.Net.Mime.MediaTypeNames.Image" /> 数据为联合专家组 (JPEG) 格式。</summary>
    </member>
    <member name="F:System.Net.Mime.MediaTypeNames.Image.Tiff">
      <summary>指定 <see cref="T:System.Net.Mime.MediaTypeNames.Image" /> 数据为标记图像文件格式 (TIFF)。</summary>
    </member>
    <member name="T:System.Net.Mime.MediaTypeNames.Text">
      <summary>指定电子邮件附件中的文本数据的类型。</summary>
    </member>
    <member name="F:System.Net.Mime.MediaTypeNames.Text.Html">
      <summary>指定 <see cref="T:System.Net.Mime.MediaTypeNames.Text" /> 数据为 HTML 格式。</summary>
    </member>
    <member name="F:System.Net.Mime.MediaTypeNames.Text.Plain">
      <summary>指定 <see cref="T:System.Net.Mime.MediaTypeNames.Text" /> 数据为纯文本格式。</summary>
    </member>
    <member name="F:System.Net.Mime.MediaTypeNames.Text.RichText">
      <summary>指定 <see cref="T:System.Net.Mime.MediaTypeNames.Text" /> 数据为 RTF 格式 (RTF)。</summary>
    </member>
    <member name="F:System.Net.Mime.MediaTypeNames.Text.Xml">
      <summary>指定 <see cref="T:System.Net.Mime.MediaTypeNames.Text" /> 数据为 XML 格式。</summary>
    </member>
    <member name="T:System.Net.Mime.TransferEncoding">
      <summary>指定电子邮件附件的 Content-Transfer-Encoding 标头信息。</summary>
    </member>
    <member name="F:System.Net.Mime.TransferEncoding.QuotedPrintable">
      <summary>将由 US-ASCII 字符集中可打印的字符组成的数据编码。请参见 RFC 2406 第 6.7 节。</summary>
    </member>
    <member name="F:System.Net.Mime.TransferEncoding.Base64">
      <summary>将基于流的数据编码。请参见 RFC 2406 第 6.8 节。</summary>
    </member>
    <member name="F:System.Net.Mime.TransferEncoding.SevenBit">
      <summary>用于不编码的数据。数据为 7 位 US-ASCII 字符，总行长不超过 1000 个字符。请参见 RFC2406 第 2.7 节。</summary>
    </member>
    <member name="F:System.Net.Mime.TransferEncoding.Unknown">
      <summary>表示传输编码未知。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.DuplicateAddressDetectionState">
      <summary>指定 IP 地址的当前状态。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.DuplicateAddressDetectionState.Invalid">
      <summary>此地址无效。无效的地址已过期，不再被分配给接口，应用程序不应将数据包发送到此地址。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.DuplicateAddressDetectionState.Tentative">
      <summary>此地址的重复地址检测过程评估没有成功完成。应用程序不应使用此地址，因为此地址已无效，发送给它的数据包将被丢弃。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.DuplicateAddressDetectionState.Duplicate">
      <summary>此地址不是唯一的。此地址不应分配给网络接口。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.DuplicateAddressDetectionState.Deprecated">
      <summary>此地址有效，但它的租约期限已快到期，应用程序不应使用它。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.DuplicateAddressDetectionState.Preferred">
      <summary>此地址有效而且它的使用是无限制的。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.GatewayIPAddressInformation">
      <summary>表示网关的 IP 地址。此类无法实例化。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.GatewayIPAddressInformation.#ctor">
      <summary>初始化此类的成员。</summary>
    </member>
    <member name="P:System.Net.NetworkInformation.GatewayIPAddressInformation.Address">
      <summary>获取网关的 IP 地址。</summary>
      <returns>包含网关的 IP 地址的 <see cref="T:System.Net.IPAddress" /> 对象。</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.GatewayIPAddressInformationCollection">
      <summary>存储 <see cref="T:System.Net.NetworkInformation.GatewayIPAddressInformation" /> 类型集。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.GatewayIPAddressInformationCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.Add(System.Net.NetworkInformation.GatewayIPAddressInformation)">
      <summary>由于该集合不支持此操作，因此引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="address">要添加到集合中的对象。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.Clear">
      <summary>由于该集合不支持此操作，因此引发 <see cref="T:System.NotSupportedException" />。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.Contains(System.Net.NetworkInformation.GatewayIPAddressInformation)">
      <summary>检查该集合是否包含指定的 <see cref="T:System.Net.NetworkInformation.GatewayIPAddressInformation" /> 对象。</summary>
      <returns>
            如果该集合中存在 <see cref="T:System.Net.NetworkInformation.GatewayIPAddressInformation" /> 对象，则为 true；否则为 false。</returns>
      <param name="address">要在该集合中搜索的 <see cref="T:System.Net.NetworkInformation.GatewayIPAddressInformation" /> 对象。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.CopyTo(System.Net.NetworkInformation.GatewayIPAddressInformation[],System.Int32)">
      <summary>将该集合中的元素复制到类型为 <see cref="T:System.Net.NetworkInformation.GatewayIPAddressInformation" /> 的一维数组中。</summary>
      <param name="array">接收该集合副本的一维数组。</param>
      <param name="offset">
        <paramref name="array" /> 中从零开始的索引，在此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 -<paramref name="count" /> 等于或大于 <paramref name="array" /> 的长度。- 或 -此 <see cref="T:System.Net.NetworkInformation.GatewayIPAddressInformation" /> 中的元素数大于从 <paramref name="count" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</exception>
      <exception cref="T:System.InvalidCastException">该 <see cref="T:System.Net.NetworkInformation.GatewayIPAddressInformation" /> 中的元素不能自动被强制转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.Count">
      <summary>获取该集合中 <see cref="T:System.Net.NetworkInformation.GatewayIPAddressInformation" /> 类型的数目。</summary>
      <returns>
        <see cref="T:System.Int32" /> 值，该值包含该集合中 <see cref="T:System.Net.NetworkInformation.GatewayIPAddressInformation" /> 类型的数目。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.GetEnumerator">
      <summary>返回一个可用于循环访问此集合的对象。</summary>
      <returns>实现 <see cref="T:System.Collections.IEnumerator" /> 接口并提供对此集合中 <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation" /> 类型的访问的对象。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.IsReadOnly">
      <summary>获取一个值，该值指示对该集合的访问是否为只读。</summary>
      <returns>
            在所有情况下均为 true。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.Item(System.Int32)">
      <summary>获取集合中特定索引位置的 <see cref="T:System.Net.NetworkInformation.GatewayIPAddressInformation" />。</summary>
      <returns>集合中特定索引位置的 <see cref="T:System.Net.NetworkInformation.GatewayIPAddressInformation" />。</returns>
      <param name="index">相关索引。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.Remove(System.Net.NetworkInformation.GatewayIPAddressInformation)">
      <summary>由于该集合不支持此操作，因此引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>总是引发 <see cref="T:System.NotSupportedException" />。</returns>
      <param name="address">要移除的对象。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个可用于循环访问此集合的对象。</summary>
      <returns>实现 <see cref="T:System.Collections.IEnumerator" /> 接口并提供对此集合中 <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation" /> 类型的访问的对象。</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.IcmpV4Statistics">
      <summary>提供本地计算机的 Internet 控制消息协议 IPv4 (ICMPv4) 统计数据。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IcmpV4Statistics.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.IcmpV4Statistics" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.AddressMaskRepliesReceived">
      <summary>获取接收到的 Internet 控制消息协议版本 4 (ICMPv4)“地址掩码应答”消息的数目。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，指定接收到的“地址掩码应答”消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.AddressMaskRepliesSent">
      <summary>获取已发送的 Internet 控制消息协议版本 4 (ICMPv4)“地址掩码应答”消息的数目。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，指定已发送的“地址掩码应答”消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.AddressMaskRequestsReceived">
      <summary>获取接收到的 Internet 控制消息协议版本 4 (ICMPv4)“地址掩码请求”消息的数目。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，指定接收到的“地址掩码请求”消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.AddressMaskRequestsSent">
      <summary>获取已发送的 Internet 控制消息协议版本 4 (ICMPv4)“地址掩码请求”消息的数目。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，指定已发送的“地址掩码请求”消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.DestinationUnreachableMessagesReceived">
      <summary>获取由于数据包的目标中存在无法访问的地址而接收到的 Internet 控制消息协议版本 4 (ICMPv4) 消息的数目。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，指定接收到的“无法到达目标”消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.DestinationUnreachableMessagesSent">
      <summary>获取由于数据包的目标中存在无法访问的地址而发送的 Internet 控制消息协议版本 4 (ICMPv4) 消息的数目。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定发送的“无法到达目标”消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.EchoRepliesReceived">
      <summary>获取接收到的 Internet 控制消息协议版本 4 (ICMPv4)“回送应答”消息的数目。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，指定接收到的 ICMP“回送应答”消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.EchoRepliesSent">
      <summary>获取已发送的 Internet 控制消息协议版本 4 (ICMPv4)“回送应答”消息的数目。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，指定已发送的 ICMP“回送应答”消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.EchoRequestsReceived">
      <summary>获取接收到的 Internet 控制消息协议版本 4 (ICMPv4)“回送请求”消息的数目。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，指定接收到的 ICMP“回送请求”消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.EchoRequestsSent">
      <summary>获取已发送的 Internet 控制消息协议版本 4 (ICMPv4)“回送请求”消息的数目。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，指定已发送的 ICMP“回送请求”消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.ErrorsReceived">
      <summary>获取接收到的 Internet 控制消息协议版本 4 (ICMPv4) 错误信息的数目。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，指定接收到的 ICMP 错误信息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.ErrorsSent">
      <summary>获取已发送的 Internet 控制消息协议版本 4 (ICMPv4) 错误信息的数目。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，指定已发送的 ICMP 错误信息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.MessagesReceived">
      <summary>获取接收到的 Internet 控制消息协议消息的数目。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，指定接收到的 ICMPv4 消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.MessagesSent">
      <summary>获取已发送的 Internet 控制消息协议版本 4 (ICMPv4) 消息的数目。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，指定已发送的 ICMPv4 消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.ParameterProblemsReceived">
      <summary>获取接收到的 Internet 控制消息协议版本 4 (ICMPv4)“参数问题”消息的数目。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，指定接收到的 ICMP“参数问题”消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.ParameterProblemsSent">
      <summary>获取已发送的 Internet 控制消息协议版本 4 (ICMPv4)“参数问题”消息的数目。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，指定已发送的 ICMP“参数问题”消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.RedirectsReceived">
      <summary>获取接收到的 Internet 控制消息协议版本 4 (ICMPv4) 重定向消息的数目。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，指定接收到的 ICMP 重定向消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.RedirectsSent">
      <summary>获取已发送的 Internet 控制消息协议版本 4 (ICMPv4) 重定向消息的数目。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，指定已发送的 ICMP 重定向消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.SourceQuenchesReceived">
      <summary>获取接收到的 Internet 控制消息协议版本 4 (ICMPv4)“源抑制”消息的数目。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，指定接收到的“源抑制”消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.SourceQuenchesSent">
      <summary>获取已发送的 Internet 控制消息协议版本 4 (ICMPv4)“源抑制”消息的数目。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，指定已发送的“源抑制”消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.TimeExceededMessagesReceived">
      <summary>获取接收到的 Internet 控制消息协议版本 4 (ICMPv4)“超时”消息的数目。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，指定接收到的 ICMP“超时”消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.TimeExceededMessagesSent">
      <summary>获取已发送的 Internet 控制消息协议版本 4 (ICMPv4)“超时”消息的数目。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，指定已发送的 ICMP“超时”消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.TimestampRepliesReceived">
      <summary>获取接收到的 Internet 控制消息协议版本 4 (ICMPv4)“时间戳应答”消息的数目。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，指定接收到的“时间戳应答”消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.TimestampRepliesSent">
      <summary>获取已发送的 Internet 控制消息协议版本 4 (ICMPv4)“时间戳应答”消息的数目。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，指定已发送的“时间戳应答”消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.TimestampRequestsReceived">
      <summary>获取接收到的 Internet 控制消息协议版本 4 (ICMPv4)“时间戳请求”消息的数目。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，指定接收到的“时间戳请求”消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.TimestampRequestsSent">
      <summary>获取已发送的 Internet 控制消息协议版本 4 (ICMPv4)“时间戳请求”消息的数目。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，指定已发送的“时间戳请求”消息的总数。</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.IcmpV6Statistics">
      <summary>提供本地计算机的 Internet 协议版本 6 (ICMPv6) Internet 控制消息协议的统计数据。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IcmpV6Statistics.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.IcmpV6Statistics" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.DestinationUnreachableMessagesReceived">
      <summary>获取由于无法到达数据包的目标地址而接收的 Internet 控制消息协议版本 6 (ICMPv6) 消息数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定接收的“无法到达目标”消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.DestinationUnreachableMessagesSent">
      <summary>获取由于无法到达数据包的目标地址而发送的 Internet 控制消息协议版本 6 (ICMPv6) 消息数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定发送的“无法到达目标”消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.EchoRepliesReceived">
      <summary>获取接收的 Internet 控制消息协议版本 6 (ICMPv6) 回送答复消息数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定接收到的“ICMP 回送答复”消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.EchoRepliesSent">
      <summary>获取发送的 Internet 控制消息协议版本 6 (ICMPv6) 回送答复消息数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定已发送的“ICMP 回送答复”消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.EchoRequestsReceived">
      <summary>获取接收的 Internet 控制消息协议版本 6 (ICMPv6) 回送请求消息数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定接收到的“ICMP 回送请求”消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.EchoRequestsSent">
      <summary>获取发送的 Internet 控制消息协议版本 6 (ICMPv6) 回送请求消息数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定已发送的“ICMP 回送请求”消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.ErrorsReceived">
      <summary>获取接收的 Internet 控制消息协议版本 6 (ICMPv6) 错误信息数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定接收到的 ICMP 错误信息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.ErrorsSent">
      <summary>获取发送的 Internet 控制消息协议版本 6 (ICMPv6) 错误信息数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定发送的 ICMP 错误信息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.MembershipQueriesReceived">
      <summary>获取接收的 Internet 组管理协议 (IGMP) 组成员查询消息数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定接收的组成员查询消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.MembershipQueriesSent">
      <summary>获取发送的 Internet 组管理协议 (IGMP) 组成员查询消息数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定发送的组成员查询消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.MembershipReductionsReceived">
      <summary>获取接收的 Internet 组管理协议 (IGMP) 成员减少消息数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定接收的组成员减少消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.MembershipReductionsSent">
      <summary>获取发送的 Internet 组管理协议 (IGMP) 成员减少消息数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定发送的组成员减少消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.MembershipReportsReceived">
      <summary>获取接收的 Internet 组管理协议 (IGMP) 成员报告消息数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定接收的组成员报告消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.MembershipReportsSent">
      <summary>获取发送的 Internet 组管理协议 (IGMP) 组成员报告消息数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定发送的组成员报告消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.MessagesReceived">
      <summary>获取接收的 Internet 控制消息协议版本 6 (ICMPv6) 消息数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定接收的 ICMPv6 消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.MessagesSent">
      <summary>获取发送的 Internet 控制消息协议版本 6 (ICMPv6) 消息数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定发送的 ICMPv6 消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.NeighborAdvertisementsReceived">
      <summary>获取接收的 Internet 控制消息协议版本 6 (ICMPv6) 邻居广播消息数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定接收的 ICMP 邻居广播消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.NeighborAdvertisementsSent">
      <summary>获取发送的 Internet 控制消息协议版本 6 (ICMPv6) 邻居广播消息数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定发送的邻居广播消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.NeighborSolicitsReceived">
      <summary>获取接收的 Internet 控制消息协议版本 6 (ICMPv6) 邻居请求消息数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定接收的邻居请求消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.NeighborSolicitsSent">
      <summary>获取发送的 Internet 控制消息协议版本 6 (ICMPv6) 邻居请求消息数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定发送的邻居请求消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.PacketTooBigMessagesReceived">
      <summary>获取接收的 Internet 控制消息协议版本 6 (ICMPv6) 数据包太大消息数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定接收的 ICMP 数据包太大消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.PacketTooBigMessagesSent">
      <summary>获取发送的 Internet 控制消息协议版本 6 (ICMPv6) 数据包太大消息数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定发送的 ICMP 数据包太大消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.ParameterProblemsReceived">
      <summary>获取接收的 Internet 控制消息协议版本 6 (ICMPv6) 参数问题消息数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定接收到的“ICMP 参数问题”消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.ParameterProblemsSent">
      <summary>获取发送的 Internet 控制消息协议版本 6 (ICMPv6) 参数问题消息数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定已发送的“ICMP 参数问题”消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.RedirectsReceived">
      <summary>获取接收的 Internet 控制消息协议版本 6 (ICMPv6) 重定向消息数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定接收到的“ICMP 重定向”消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.RedirectsSent">
      <summary>获取发送的 Internet 控制消息协议版本 6 (ICMPv6) 重定向消息数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定已发送的“ICMP 重定向”消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.RouterAdvertisementsReceived">
      <summary>获取接收的 Internet 控制消息协议版本 6 (ICMPv6) 路由器广播消息数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定接收的路由器广播消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.RouterAdvertisementsSent">
      <summary>获取发送的 Internet 控制消息协议版本 6 (ICMPv6) 路由器广播消息数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定发送的路由器广播消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.RouterSolicitsReceived">
      <summary>获取接收的 Internet 控制消息协议版本 6 (ICMPv6) 路由器请求消息数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定接收的路由器请求消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.RouterSolicitsSent">
      <summary>获取发送的 Internet 控制消息协议版本 6 (ICMPv6) 路由器请求消息数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定发送的路由器请求消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.TimeExceededMessagesReceived">
      <summary>获取接收的 Internet 控制消息协议版本 6 (ICMPv6) 超时消息数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定接收到的“ICMP 超时”消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.TimeExceededMessagesSent">
      <summary>获取发送的 Internet 控制消息协议版本 6 (ICMPv6) 超时消息数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定已发送的“ICMP 超时”消息的总数。</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.IPAddressCollection">
      <summary>存储一组 <see cref="T:System.Net.IPAddress" /> 类型。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressCollection.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.IPAddressCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressCollection.Add(System.Net.IPAddress)">
      <summary>由于该集合不支持此操作，因此引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="address">要添加到集合中的对象。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressCollection.Clear">
      <summary>由于该集合不支持此操作，因此引发 <see cref="T:System.NotSupportedException" />。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressCollection.Contains(System.Net.IPAddress)">
      <summary>检查集合中是否包含指定的 <see cref="T:System.Net.IPAddress" /> 对象。</summary>
      <returns>
            如果集合中存在 <see cref="T:System.Net.IPAddress" /> 对象，则为 true；否则为 false。</returns>
      <param name="address">要在集合中搜索的 <see cref="T:System.Net.IPAddress" /> 对象。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressCollection.CopyTo(System.Net.IPAddress[],System.Int32)">
      <summary>将此集合中的元素复制到 <see cref="T:System.Net.IPAddress" /> 类型的一维数组中。</summary>
      <param name="array">接收该集合副本的一维数组。</param>
      <param name="offset">
        <paramref name="array" /> 中从零开始的索引，在此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 - <paramref name="offset" /> 等于或大于 array 的长度。- 或 -此 <see cref="T:System.Net.NetworkInformation.IPAddressCollection" /> 中的元素数大于从 <paramref name="offset" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</exception>
      <exception cref="T:System.InvalidCastException">该 <see cref="T:System.Net.NetworkInformation.IPAddressCollection" /> 中的元素不能自动被强制转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.IPAddressCollection.Count">
      <summary>获取此集合中的 <see cref="T:System.Net.IPAddress" /> 类型的数目。</summary>
      <returns>一个 <see cref="T:System.Int32" /> 值，该值包含此集合中的 <see cref="T:System.Net.IPAddress" /> 类型的数目。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressCollection.GetEnumerator">
      <summary>返回一个可用于循环访问此集合的对象。</summary>
      <returns>实现 <see cref="T:System.Collections.IEnumerator" /> 接口并提供对此集合中 <see cref="T:System.Net.NetworkInformation.IPAddressCollection" /> 类型的访问的对象。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPAddressCollection.IsReadOnly">
      <summary>获取一个值，该值指示对该集合的访问是否为只读。</summary>
      <returns>
            在所有情况下均为 true。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPAddressCollection.Item(System.Int32)">
      <summary>获取集合中指定索引处的 <see cref="T:System.Net.IPAddress" />。</summary>
      <returns>位于集合中指定索引处的 <see cref="T:System.Net.IPAddress" />。</returns>
      <param name="index">相关索引。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressCollection.Remove(System.Net.IPAddress)">
      <summary>由于该集合不支持此操作，因此引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>总是引发 <see cref="T:System.NotSupportedException" />。</returns>
      <param name="address">要移除的对象。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个可用于循环访问此集合的对象。</summary>
      <returns>实现 <see cref="T:System.Collections.IEnumerator" /> 接口并提供对此集合中 <see cref="T:System.Net.NetworkInformation.IPAddressCollection" /> 类型的访问的对象。</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.IPAddressInformation">
      <summary>提供有关网络接口地址的信息。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressInformation.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.IPAddressInformation" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Net.NetworkInformation.IPAddressInformation.Address">
      <summary>获取 Internet 协议 (IP) 地址。</summary>
      <returns>
        <see cref="T:System.Net.IPAddress" /> 实例，它包含接口的 IP 地址。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPAddressInformation.IsDnsEligible">
      <summary>获取一个 <see cref="T:System.Boolean" /> 值，指示 Internet 协议 (IP) 地址出现在域名系统 (DNS) 服务器数据库中时是否有效。</summary>
      <returns>
如果地址可以出现在 DNS 数据库，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPAddressInformation.IsTransient">
      <summary>获取 <see cref="T:System.Boolean" /> 值，指示 Internet 协议 (IP) 地址是否为瞬态（群集地址）。</summary>
      <returns>
如果该地址为瞬态，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.IPAddressInformationCollection">
      <summary>存储一组 <see cref="T:System.Net.NetworkInformation.IPAddressInformation" /> 类型。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressInformationCollection.Add(System.Net.NetworkInformation.IPAddressInformation)">
      <summary>由于该集合不支持此操作，因此引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="address">要添加到集合中的对象。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressInformationCollection.Clear">
      <summary>由于该集合不支持此操作，因此引发 <see cref="T:System.NotSupportedException" />。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressInformationCollection.Contains(System.Net.NetworkInformation.IPAddressInformation)">
      <summary>检查该集合是否包含指定的 <see cref="T:System.Net.NetworkInformation.IPAddressInformation" /> 对象。</summary>
      <returns>
            如果该集合中存在 <see cref="T:System.Net.NetworkInformation.IPAddressInformation" /> 对象，则为 true；否则为 false。false.</returns>
      <param name="address">要在该集合中搜索的 <see cref="T:System.Net.NetworkInformation.IPAddressInformation" /> 对象。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressInformationCollection.CopyTo(System.Net.NetworkInformation.IPAddressInformation[],System.Int32)">
      <summary>将该集合复制到指定的数组。</summary>
      <param name="array">接收该集合副本的一维数组。</param>
      <param name="offset">
        <paramref name="array" /> 中从零开始的索引，在此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 - <paramref name="offset" /> 等于或大于 <paramref name="array" /> 的长度。- 或 - 此 <see cref="T:System.Net.NetworkInformation.IPAddressInformation" /> 中的元素数大于从 <paramref name="offset" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</exception>
      <exception cref="T:System.InvalidCastException">该 <see cref="T:System.Net.NetworkInformation.IPAddressInformation" /> 中的元素不能自动被强制转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.IPAddressInformationCollection.Count">
      <summary>获取该集合中 <see cref="T:System.Net.NetworkInformation.IPAddressInformation" /> 类型的数目。</summary>
      <returns>
        <see cref="T:System.Int32" /> 值，该值包含该集合中 <see cref="T:System.Net.NetworkInformation.IPAddressInformation" /> 类型的数目。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressInformationCollection.GetEnumerator">
      <summary>返回一个可用于循环访问此集合的对象。</summary>
      <returns>一个对象，它将实现 <see cref="T:System.Collections.IEnumerator" /> 接口并提供对该集合中的 <see cref="T:System.Net.NetworkInformation.IPAddressInformation" /> 类型的访问。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPAddressInformationCollection.IsReadOnly">
      <summary>获取一个值，该值指示对该集合的访问是否为只读。</summary>
      <returns>
            在所有情况下均为 true。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPAddressInformationCollection.Item(System.Int32)">
      <summary>获取集合中指定索引处的 <see cref="T:System.Net.NetworkInformation.IPAddressInformation" />。</summary>
      <returns>指定索引位置的 <see cref="T:System.Net.NetworkInformation.IPAddressInformation" />。</returns>
      <param name="index">元素的索引（索引从零开始）。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressInformationCollection.Remove(System.Net.NetworkInformation.IPAddressInformation)">
      <summary>由于该集合不支持此操作，因此引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>总是引发 <see cref="T:System.NotSupportedException" />。</returns>
      <param name="address">要移除的对象。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressInformationCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个可用于循环访问此集合的对象。</summary>
      <returns>一个对象，它将实现 <see cref="T:System.Collections.IEnumerator" /> 接口并提供对该集合中的 <see cref="T:System.Net.NetworkInformation.IPAddressInformation" /> 类型的访问。</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.IPGlobalProperties">
      <summary>提供有关本地计算机的网络连接的信息。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.IPGlobalProperties" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalProperties.DhcpScopeName">
      <summary>获取动态主机配置协议 (DHCP) 范围名。</summary>
      <returns>包含计算机的 DHCP 范围名称的 <see cref="T:System.String" /> 实例。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">Win32 函数调用失败。 </exception>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalProperties.DomainName">
      <summary>获取在其中注册本地计算机的域。</summary>
      <returns>包含计算机域名的 <see cref="T:System.String" /> 实例。如果计算机不属于域，则返回 <see cref="F:System.String.Empty" />。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">Win32 函数调用失败。 </exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.GetActiveTcpConnections">
      <summary>返回有关本地计算机上的 Internet 协议版本 4 (IPV4) 传输控制协议 (TCP) 连接的信息。</summary>
      <returns>一个 <see cref="T:System.Net.NetworkInformation.TcpConnectionInformation" /> 数组，其中包含描述活动 TCP 连接的对象；如果没有检测到活动 TCP 连接，则为一个空数组。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">Win32 函数 GetTcpTable 失败。 </exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.GetActiveTcpListeners">
      <summary>返回有关本地计算机上的 Internet 协议版本 4 (IPV4) 传输控制协议 (TCP) 侦听器的终结点信息。</summary>
      <returns>一个 <see cref="T:System.Net.IPEndPoint" /> 数组，其中包含描述活动 TCP 侦听器的对象；如果没有检测到活动 TCP 侦听器，则为一个空数组。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">Win32 函数 GetTcpTable 失败。 </exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.GetActiveUdpListeners">
      <summary>返回有关本地计算机上的 Internet 协议版本 4 (IPv4) 用户数据报协议 (UDP) 侦听器的信息。</summary>
      <returns>一个 <see cref="T:System.Net.IPEndPoint" /> 数组，其中包含描述活动 UDP 侦听器的对象；如果没有检测到活动 UDP 侦听器，则为一个空数组。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">调用 Win32 函数 GetUdpTable 失败。 </exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.GetIcmpV4Statistics">
      <summary>提供本地计算机的 Internet 控制消息协议 (ICMP) 版本 4 统计数据。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.IcmpV4Statistics" /> 对象，提供本地计算机的 ICMP 版本 4 通信统计数据。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">Win32 函数 GetIcmpStatistics 失败。 </exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.GetIcmpV6Statistics">
      <summary>提供本地计算机的 Internet 控制消息协议 (ICMP) 版本 6 统计数据。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.IcmpV6Statistics" /> 对象，提供本地计算机的 ICMP 版本 6 通信统计数据。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">Win32 函数 GetIcmpStatisticsEx 失败。 </exception>
      <exception cref="T:System.PlatformNotSupportedException">本地计算机的操作系统不是 Windows XP 或更高版本。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.GetIPGlobalProperties">
      <summary>获取一个对象，该对象提供有关本地计算机的网络连接和通信统计数据的信息。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.IPGlobalProperties" /> 对象，该对象包含有关本地计算机的信息。</returns>
      <PermissionSet>
        <IPermission class="System.Net.NetworkInformation.NetworkInformationPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Access="Read" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.GetIPv4GlobalStatistics">
      <summary>提供本地计算机的 Internet 协议版本 4 (IPv4) 统计数据。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.IPGlobalStatistics" /> 对象，提供本地计算机的 IPv4 通信统计数据。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">调用 Win32 函数 GetIpStatistics 失败。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.GetIPv6GlobalStatistics">
      <summary>提供本地计算机的 Internet 协议版本 6 (IPv6) 统计数据。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.IPGlobalStatistics" /> 对象，提供本地计算机的 IPv6 通信统计数据。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">调用 Win32 函数 GetIpStatistics 失败。</exception>
      <exception cref="T:System.PlatformNotSupportedException">本地计算机运行的操作系统不支持 IPv6。 </exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.GetTcpIPv4Statistics">
      <summary>提供本地计算机的传输控制协议/Internet 协议版本 4 (TCP/IPv4) 统计数据。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.TcpStatistics" /> 对象，提供本地计算机的 TCP/IPv4 通信统计数据。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">调用 Win32 函数 GetTcpStatistics 失败。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.GetTcpIPv6Statistics">
      <summary>提供本地计算机的传输控制协议/Internet 协议版本 6 (TCP/IPv6) 统计数据。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.TcpStatistics" /> 对象，提供本地计算机的 TCP/IPv6 通信统计数据。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">调用 Win32 函数 GetTcpStatistics 失败。</exception>
      <exception cref="T:System.PlatformNotSupportedException">本地计算机运行的操作系统不支持 IPv6。 </exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.GetUdpIPv4Statistics">
      <summary>提供本地计算机的用户数据报协议/Internet 协议版本 4 (UDP/IPv4) 统计数据。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.UdpStatistics" /> 对象，提供本地计算机的 UDP/IPv4 通信统计数据。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">调用 Win32 函数 GetUdpStatistics 失败。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.GetUdpIPv6Statistics">
      <summary>提供本地计算机的用户数据报协议/Internet 协议版本 6 (UDP/IPv6) 统计数据。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.UdpStatistics" /> 对象，提供本地计算机的 UDP/IPv6 通信统计数据。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">调用 Win32 函数 GetUdpStatistics 失败。</exception>
      <exception cref="T:System.PlatformNotSupportedException">本地计算机运行的操作系统不支持 IPv6。 </exception>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalProperties.HostName">
      <summary>获取本地计算机的主机名。</summary>
      <returns>包含计算机的 NetBIOS 名称的 <see cref="T:System.String" /> 实例。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">Win32 函数调用失败。 </exception>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalProperties.IsWinsProxy">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指定本地计算机是否作为 Windows Internet 名称服务 (WINS) 代理。</summary>
      <returns>
如果本地计算机是 WINS 代理，则为 true，否则为 false。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">Win32 函数调用失败。 </exception>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalProperties.NodeType">
      <summary>获取本地计算机的网络基本输入/输出系统 (NetBIOS) 节点类型。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.NetBiosNodeType" /> 值。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">Win32 函数调用失败。 </exception>
    </member>
    <member name="T:System.Net.NetworkInformation.IPGlobalStatistics">
      <summary>提供 Internet 协议 (IP) 统计数据。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalStatistics.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.IPGlobalStatistics" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.DefaultTtl">
      <summary>获取 Internet 协议 (IP) 数据包的默认生存时间 (TTL) 值。</summary>
      <returns>指定 TTL 的 <see cref="T:System.Int64" /> 值。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.ForwardingEnabled">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指定是否启用 Internet 协议 (IP) 数据包转发。</summary>
      <returns>指定是否启用数据包转发的 <see cref="T:System.Boolean" /> 值。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.NumberOfInterfaces">
      <summary>获取网络接口数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，它包含用于获取此 <see cref="T:System.Net.NetworkInformation.IPGlobalStatistics" /> 实例的地址族的网络接口数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.NumberOfIPAddresses">
      <summary>获取分配给本地计算机的 Internet 协议 (IP) 地址数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，它指示分配给由此对象描述的地址族（Internet 协议版本 4 或 Internet 协议版本 6）的 IP 地址数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.NumberOfRoutes">
      <summary>获取 Internet 协议 (IP) 路由表中的路由数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，它指定路由表中的路由总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.OutputPacketRequests">
      <summary>获取出站 Internet 协议 (IP) 数据包数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，它指定出站数据包的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.OutputPacketRoutingDiscards">
      <summary>获取已从路由表中丢弃的路由数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，它指定已丢弃的有效路由的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.OutputPacketsDiscarded">
      <summary>获取已丢弃的已传输 Internet 协议 (IP) 数据包数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，它指定已丢弃的外发数据包的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.OutputPacketsWithNoRoute">
      <summary>获取本地计算机无法确定其目标地址路由的 Internet 协议 (IP) 数据包数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，它指定由于无法找到路由而无法发送的数据包数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.PacketFragmentFailures">
      <summary>获取无法分段的 Internet 协议 (IP) 数据包数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，它指定需要分段但设置了“不要分段”(Don't Fragment) 位的数据包总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.PacketReassembliesRequired">
      <summary>获取需要重新组合的 Internet 协议 (IP) 数据包数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，它指定需要重新组合的数据包的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.PacketReassemblyFailures">
      <summary>获取没有成功重新组合的 Internet 协议 (IP) 数据包数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，它指定无法重新组合的数据包的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.PacketReassemblyTimeout">
      <summary>获取 Internet 协议 (IP) 数据包的所有段必须到达的最长时限。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，它指定数据包的所有段必须到达以免被丢弃的最大毫秒数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.PacketsFragmented">
      <summary>获取分段的 Internet 协议 (IP) 数据包数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，它指定分段的数据包的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.PacketsReassembled">
      <summary>获取重新组合的 Internet 协议 (IP) 数据包数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，它指定已成功重新组合的分段数据包的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.ReceivedPackets">
      <summary>获取收到的 Internet 协议 (IP) 数据包数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，它指定收到的 IP 数据包的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.ReceivedPacketsDelivered">
      <summary>获取传送的 Internet 协议 (IP) 数据包数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，它指定传送的 IP 数据包的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.ReceivedPacketsDiscarded">
      <summary>获取已收到但被丢弃的 Internet 协议 (IP) 数据包数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，它指定已丢弃的传入数据包的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.ReceivedPacketsForwarded">
      <summary>获取转发的 Internet 协议 (IP) 数据包数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，它指定转发的数据包的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.ReceivedPacketsWithAddressErrors">
      <summary>获取收到的地址有错误的 Internet 协议 (IP) 数据包数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，它指定收到的、标头的地址部分有错误的 IP 数据包的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.ReceivedPacketsWithHeadersErrors">
      <summary>获取收到的标头有错误的 Internet 协议 (IP) 数据包数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，它指定收到的但因标头中有错误而被丢弃的 IP 数据包的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.ReceivedPacketsWithUnknownProtocol">
      <summary>获取在本地计算机上收到的、标头中有未知协议的 Internet 协议 (IP) 数据包数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，它指示收到的、协议未知的 IP 数据包的总数。</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.IPInterfaceProperties">
      <summary>提供有关支持 Internet 协议版本 4 (IPv4) 或 Internet 协议版本 6 (IPv6) 的网络接口的信息。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPInterfaceProperties.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.IPInterfaceProperties" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceProperties.AnycastAddresses">
      <summary>获取分配给此接口的任意广播 IP 地址。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.IPAddressInformationCollection" />，包含此接口的任意广播地址。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceProperties.DhcpServerAddresses">
      <summary>获取此接口的动态主机配置协议 (DHCP) 服务器的地址。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.IPAddressCollection" />，它包含 DHCP 服务器的地址信息，如果找不到服务器，则包含空数组。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceProperties.DnsAddresses">
      <summary>获取此接口的域名系统 (DNS) 服务器的地址。</summary>
      <returns>包含 DNS 服务器地址的 <see cref="T:System.Net.NetworkInformation.IPAddressInformationCollection" />。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceProperties.DnsSuffix">
      <summary>获取与此接口关联的域名系统 (DNS) 后缀。</summary>
      <returns>包含此接口的 DNS 后缀的 <see cref="T:System.String" />，如果此接口没有 DNS 后缀，则为 <see cref="F:System.String.Empty" />。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此属性在运行早于 Windows 2000 的操作系统的计算机上无效。</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceProperties.GatewayAddresses">
      <summary>获取此接口的网关地址。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.IPAddressCollection" />，它包含网关的地址信息，如果找不到网关，则包含空数组。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.IPInterfaceProperties.GetIPv4Properties">
      <summary>提供此网络接口的 Internet 协议版本 4 (IPv4) 配置数据。</summary>
      <returns>包含 IPv4 配置数据的 <see cref="T:System.Net.NetworkInformation.IPv4InterfaceProperties" /> 对象，如果没有可用于此接口的数据，则为 null。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">此接口不支持 IPv4 协议。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPInterfaceProperties.GetIPv6Properties">
      <summary>提供此网络接口的 Internet 协议版本 6 (IPv6) 配置数据。</summary>
      <returns>包含 IPv6 配置数据的 <see cref="T:System.Net.NetworkInformation.IPv6InterfaceProperties" /> 对象。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">此接口不支持 IPv6 协议。</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceProperties.IsDnsEnabled">
      <summary>获取一个 <see cref="T:System.Boolean" /> 值，该值指示是否将 NetBt 配置为对此接口使用 DNS 名称解析。</summary>
      <returns>
            如果将 NetBt 配置为对此接口使用 DNS 名称解析，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceProperties.IsDynamicDnsEnabled">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示此接口是否被配置为自动向域名系统 (DNS) 注册其 IP 地址信息。</summary>
      <returns>
            如果此接口被配置为自动注册其动态 IP 地址与静态域名之间的映射，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceProperties.MulticastAddresses">
      <summary>获取分配给此接口的多路广播地址。</summary>
      <returns>包含此接口的多路广播地址的 <see cref="T:System.Net.NetworkInformation.IPAddressInformationCollection" />。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceProperties.UnicastAddresses">
      <summary>获取分配给此接口的单播地址。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformationCollection" />，它包含该接口的单播地址。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceProperties.WinsServersAddresses">
      <summary>获取 Windows Internet 名称服务 (WINS) 服务器的地址。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.IPAddressCollection" />，它包含 WINS 服务器的地址信息，如果找不到服务器，则包含空数组。</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.IPStatus">
      <summary>报告向计算机发送 Internet 控制消息协议 (ICMP) 回送消息的状态。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.Success">
      <summary>ICMP 回送请求成功；收到一个 ICMP 回送答复。当收到此状态代码时，另一个 <see cref="T:System.Net.NetworkInformation.PingReply" /> 属性包含有效的数据。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.DestinationNetworkUnreachable">
      <summary>由于无法访问包含目标计算机的网络，ICMP 回送请求失败。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.DestinationHostUnreachable">
      <summary>由于无法访问目标计算机，ICMP 回送请求失败。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.DestinationProtocolUnreachable">
      <summary>由于无法访问 ICMP 回送消息中指定的目标计算机，ICMP 回送请求失败，这是因为目标计算机不支持数据包的协议。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.DestinationPortUnreachable">
      <summary>由于目标计算机上的端口不可用，ICMP 回送请求失败。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.DestinationProhibited">
      <summary>由于管理员禁止联系目标计算机，ICMP 回送请求失败。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.NoResources">
      <summary>由于网络资源不足，ICMP 回送请求失败。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.BadOption">
      <summary>由于包含无效选项，ICMP 回送请求失败。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.HardwareError">
      <summary>由于硬件错误，ICMP 回送请求失败。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.PacketTooBig">
      <summary>由于包含请求的数据包的大小超过了位于源和目标之间的节点（路由器或网关）的最大传输单位 (MTU)，ICMP 回送请求失败。MTU 定义可传送数据包的最大大小。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.TimedOut">
      <summary>在所分配的时间内未收到 ICMP 回送答复。允许的默认答复时间为 5 秒。可以使用带 <paramref name="timeout" /> 参数的 <see cref="Overload:System.Net.NetworkInformation.Ping.Send" /> 或 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> 方法更改此值。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.BadRoute">
      <summary>由于在源计算机和目标计算机之间没有有效的路由，ICMP 回送请求失败。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.TtlExpired">
      <summary>由于数据包的生存时间 (TTL) 值达到零，导致转发节点（路由器或网关）将数据包丢弃，ICMP 回送请求失败。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.TtlReassemblyTimeExceeded">
      <summary>由于数据包被分割为片段以便传输，但在分配的时间内未收到所有片段以进行重组，ICMP 回送请求失败。RFC 2460（参见 www.ietf.org）将此时间限制指定为 60 秒，60 秒内必须收到所有数据包片段。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.ParameterProblem">
      <summary>由于节点（路由器或网关）在处理数据包标头时遇到问题，ICMP 回送请求失败。例如，当标头包含无效的字段数据或无法识别的选项时会出现这种状况。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.SourceQuench">
      <summary>由于已丢弃数据包，ICMP 回送请求失败。当源计算机的输出队列中没有足够的存储空间时，或者当数据包到达目标过快而无法进行处理时，就会发生这种情况。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.BadDestination">
      <summary>由于目标 IP 地址无法收到 ICMP 回送请求或者永远都不应当出现在任何 IP 数据报的目标地址字段中，ICMP 回送请求失败。例如，调用 <see cref="Overload:System.Net.NetworkInformation.Ping.Send" /> 并指定 IP 地址“000.0.0.0”将返回此状态。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.DestinationUnreachable">
      <summary>由于无法访问 ICMP 回送消息中指定的目标计算机，ICMP 回送请求失败；此问题的确切原因未知。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.TimeExceeded">
      <summary>由于数据包的生存时间 (TTL) 值达到零，导致转发节点（路由器或网关）将数据包丢弃，ICMP 回送请求失败。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.BadHeader">
      <summary>由于标头无效，ICMP 回送请求失败。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.UnrecognizedNextHeader">
      <summary>由于“下一标头”字段中没有可识别的值，ICMP 回送请求失败。“下一标头”字段指示扩展标头类型（如果存在的话）或者 IP 层之上的协议（例如，TCP 或 UDP）。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.IcmpError">
      <summary>由于 ICMP 协议错误，ICMP 回送请求失败。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.DestinationScopeMismatch">
      <summary>由于 ICMP 回送消息中指定的源地址和目标地址不在同一范围内，ICMP 回送请求失败。这通常是由于路由器使用了源地址范围以外的接口转发数据包所导致的。地址范围（本地链接、本地站点和全局范围）确定地址在网络上的有效位置。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.Unknown">
      <summary>由于未知原因，ICMP 回送请求失败。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.IPv4InterfaceProperties">
      <summary>提供有关支持 Internet 协议版本 4 (IPv4) 的网络接口的信息。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPv4InterfaceProperties.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.IPv4InterfaceProperties" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceProperties.Index">
      <summary>获取 Internet 协议版本 4 (IPv4) 地址的接口索引。</summary>
      <returns>包含 IPv4 接口索引的 <see cref="T:System.Int64" />。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceProperties.IsAutomaticPrivateAddressingActive">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示此接口是否具有自动专用 IP 寻址 (APIPA) 地址。</summary>
      <returns>
如果此接口使用 APIPA 地址，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceProperties.IsAutomaticPrivateAddressingEnabled">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示此接口是否启用了自动专用 IP 寻址 (APIPA)。</summary>
      <returns>
如果此接口使用 APIPA，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceProperties.IsDhcpEnabled">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示此接口是否配置为使用动态主机配置协议 (DHCP) 服务器来获取 IP 地址。</summary>
      <returns>
如果此接口配置为从 DHCP 服务器获取 IP 地址，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceProperties.IsForwardingEnabled">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示此接口是否可以转发（路由）数据包。</summary>
      <returns>
如果此接口可以路由数据包，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceProperties.Mtu">
      <summary>获取此网络接口的最大传输单位 (MTU)。</summary>
      <returns>用于指定 MTU 的 <see cref="T:System.Int64" /> 值。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceProperties.UsesWins">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示接口是否使用 Windows Internet 名称服务 (WINS)。</summary>
      <returns>
如果接口使用 WINS，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.IPv4InterfaceStatistics">
      <summary>提供本地计算机上的网络接口的统计数据。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPv4InterfaceStatistics.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.IPv4InterfaceStatistics" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceStatistics.BytesReceived">
      <summary>获取该接口上接收到的字节数。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，它指定该接口上接收到的总字节数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceStatistics.BytesSent">
      <summary>获取该接口上发送的字节数。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，它指定该接口上传输的总字节数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceStatistics.IncomingPacketsDiscarded">
      <summary>获取丢弃的传入数据包个数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定丢弃的传入数据包的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceStatistics.IncomingPacketsWithErrors">
      <summary>获取有错误的传入数据包数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定有错误的传入数据包的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceStatistics.IncomingUnknownProtocolPackets">
      <summary>获取协议未知的传入数据包数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定协议未知的传入数据包的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceStatistics.NonUnicastPacketsReceived">
      <summary>获取该接口上接收到的非单播数据包个数。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，它指定该接口上接收到的非单播数据包个数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceStatistics.NonUnicastPacketsSent">
      <summary>获取该接口上发送的非单播数据包个数。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，它指定该接口上发送的非单播数据包个数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceStatistics.OutgoingPacketsDiscarded">
      <summary>获取丢弃的传出数据包数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定丢弃的传出数据包的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceStatistics.OutgoingPacketsWithErrors">
      <summary>获取有错误的传出数据包数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定有错误的传出数据包的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceStatistics.OutputQueueLength">
      <summary>获取输出队列的长度。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定输出队列中的数据包的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceStatistics.UnicastPacketsReceived">
      <summary>获取该接口上接收到的单播数据包个数。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，它指定该接口上接收到的单播数据包个数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceStatistics.UnicastPacketsSent">
      <summary>获取该接口上发送的单播数据包个数。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，它指定该接口上发送的单播数据包个数。</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.IPv6InterfaceProperties">
      <summary>提供有关支持 Internet 协议版本 6.0 (IPv6) 的网络接口的信息。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPv6InterfaceProperties.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.IPv6InterfaceProperties" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv6InterfaceProperties.Index">
      <summary>获取 Internet 协议版本 6.0 (IPv6) 地址的接口索引。</summary>
      <returns>包含 IPv6 接口索引的 <see cref="T:System.Int64" /> 值。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv6InterfaceProperties.Mtu">
      <summary>获取此网络接口的最大传输单位 (MTU)。</summary>
      <returns>用于指定 MTU 的 <see cref="T:System.Int64" /> 值。</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.MulticastIPAddressInformation">
      <summary>提供网络接口的多路广播地址信息。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.MulticastIPAddressInformation.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformation" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Net.NetworkInformation.MulticastIPAddressInformation.AddressPreferredLifetime">
      <summary>获取此地址作为首选地址的剩余秒数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，它指定此地址保持首选的剩余秒数。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此属性在运行早于 Windows XP 的操作系统的计算机上无效。 </exception>
    </member>
    <member name="P:System.Net.NetworkInformation.MulticastIPAddressInformation.AddressValidLifetime">
      <summary>获取此地址保持有效的剩余秒数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，它指定此地址保持已分配的剩余秒数。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此属性在运行早于 Windows XP 的操作系统的计算机上无效。 </exception>
    </member>
    <member name="P:System.Net.NetworkInformation.MulticastIPAddressInformation.DhcpLeaseLifetime">
      <summary>指定此 IP 地址的动态主机配置协议 (DHCP) 租约的剩余时间量。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，包含计算机在必须释放 <see cref="T:System.Net.IPAddress" /> 实例之前剩余的秒数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.MulticastIPAddressInformation.DuplicateAddressDetectionState">
      <summary>获取一个值，该值指示重复地址检测算法的状态。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.DuplicateAddressDetectionState" /> 值之一，指示在确定此 IP 地址的唯一性的过程中，该算法的进度。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此属性在运行早于 Windows XP 的操作系统的计算机上无效。 </exception>
    </member>
    <member name="P:System.Net.NetworkInformation.MulticastIPAddressInformation.PrefixOrigin">
      <summary>获取一个值，该值标识多路广播 Internet 协议 (IP) 地址前缀的源。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.PrefixOrigin" /> 值之一，标识前缀信息是如何获取的。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此属性在运行早于 Windows XP 的操作系统的计算机上无效。 </exception>
    </member>
    <member name="P:System.Net.NetworkInformation.MulticastIPAddressInformation.SuffixOrigin">
      <summary>获取一个值，该值标识多路广播 Internet 协议 (IP) 地址后缀的源。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.SuffixOrigin" /> 值之一，标识后缀信息是如何获取的。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此属性在运行早于 Windows XP 的操作系统的计算机上无效。 </exception>
    </member>
    <member name="T:System.Net.NetworkInformation.MulticastIPAddressInformationCollection">
      <summary>存储一组 <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformation" /> 类型。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformationCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.Add(System.Net.NetworkInformation.MulticastIPAddressInformation)">
      <summary>引发 <see cref="T:System.NotSupportedException" />，原因是该集合为只读且不能向其中添加元素。</summary>
      <param name="address">要添加到集合中的对象。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.Clear">
      <summary>引发 <see cref="T:System.NotSupportedException" />，因为该集合是只读的，不能移除其中的元素。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.Contains(System.Net.NetworkInformation.MulticastIPAddressInformation)">
      <summary>检查集合中是否包含指定的 <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformation" /> 对象。</summary>
      <returns>
            如果集合中存在 <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformation" /> 对象，则为 true；否则为 false。</returns>
      <param name="address">要在集合中搜索的 <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformation" /> 对象。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.CopyTo(System.Net.NetworkInformation.MulticastIPAddressInformation[],System.Int32)">
      <summary>将此集合中的元素复制到 <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformation" /> 类型的一维数组中。</summary>
      <param name="array">接收该集合副本的一维数组。</param>
      <param name="offset">
        <paramref name="array" /> 中从零开始的索引，在此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 -<paramref name="count" /> 等于或大于 <paramref name="array" /> 的长度。- 或 -此 <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformation" /> 中的元素数大于从 <paramref name="count" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</exception>
      <exception cref="T:System.InvalidCastException">该 <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformation" /> 中的元素不能自动被强制转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.Count">
      <summary>获取此集合中 <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformation" /> 类型的数目。</summary>
      <returns>一个包含此集合中 <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformation" /> 类型的数目的 <see cref="T:System.Int32" /> 值。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.GetEnumerator">
      <summary>返回一个可用于循环访问此集合的对象。</summary>
      <returns>实现 <see cref="T:System.Collections.IEnumerator" /> 接口并提供对此集合中 <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation" /> 类型的访问的对象。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.IsReadOnly">
      <summary>获取一个值，该值指示对该集合的访问是否为只读。</summary>
      <returns>
            在所有情况下均为 true。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.Item(System.Int32)">
      <summary>获取集合中指定索引处的 <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformation" />。</summary>
      <returns>位于集合中指定索引处的 <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformation" />。</returns>
      <param name="index">相关索引。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.Remove(System.Net.NetworkInformation.MulticastIPAddressInformation)">
      <summary>引发 <see cref="T:System.NotSupportedException" />，因为该集合是只读的，不能移除其中的元素。</summary>
      <returns>总是引发 <see cref="T:System.NotSupportedException" />。</returns>
      <param name="address">要移除的对象。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个可用于循环访问此集合的对象。</summary>
      <returns>实现 <see cref="T:System.Collections.IEnumerator" /> 接口并提供对此集合中 <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation" /> 类型的访问的对象。</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.NetBiosNodeType">
      <summary>指定网络基本输入/输出系统 (NetBIOS) 节点类型。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetBiosNodeType.Unknown">
      <summary>未知节点类型。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetBiosNodeType.Broadcast">
      <summary>广播节点。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetBiosNodeType.Peer2Peer">
      <summary>对等节点。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetBiosNodeType.Mixed">
      <summary>Mixed 混合节点。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetBiosNodeType.Hybrid">
      <summary>Hybrid 混合节点。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkAddressChangedEventHandler">
      <summary>引用在网络接口地址更改时调用的一个或多个方法。</summary>
      <param name="sender">事件源。 </param>
      <param name="e">包含事件数据的 <see cref="T:System.EventArgs" /> 对象。 </param>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkAvailabilityChangedEventHandler">
      <summary>引用在网络可用性更改时调用的一个或多个方法。</summary>
      <param name="sender">事件源。 </param>
      <param name="e">包含事件数据的 <see cref="T:System.EventArgs" /> 对象。</param>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkAvailabilityEventArgs">
      <summary>为 <see cref="E:System.Net.NetworkInformation.NetworkChange.NetworkAvailabilityChanged" /> 事件提供数据。</summary>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkAvailabilityEventArgs.IsAvailable">
      <summary>获取网络连接的当前状态。</summary>
      <returns>
如果网络可用，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkChange">
      <summary>使应用程序可以在网络接口（也称为网卡或网络适配器）的 Internet 协议 (IP) 地址更改时收到通知。</summary>
    </member>
    <member name="E:System.Net.NetworkInformation.NetworkChange.NetworkAddressChanged">
      <summary>在网络接口的 IP 地址更改时发生。</summary>
    </member>
    <member name="E:System.Net.NetworkInformation.NetworkChange.NetworkAvailabilityChanged">
      <summary>在网络的可用性更改时发生。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkInformationAccess">
      <summary>指定访问网络接口信息和通信统计数据的权限。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInformationAccess.None">
      <summary>不能访问网络信息。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInformationAccess.Read">
      <summary>可以读取网络信息。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping">
      <summary>对网络信息的 Ping 访问。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkInformationException">
      <summary>检索网络信息时发生错误而引发的异常。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationException.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.NetworkInformationException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationException.#ctor(System.Int32)">
      <summary>用指定的错误代码初始化 <see cref="T:System.Net.NetworkInformation.NetworkInformationException" /> 类的新实例。</summary>
      <param name="errorCode">Win32 错误代码。 </param>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Net.NetworkInformation.NetworkInformationException" /> 类的新实例。</summary>
      <param name="serializationInfo">SerializationInfo 对象，包含序列化异常数据。 </param>
      <param name="streamingContext">StreamingContext，包含有关序列化异常的上下文信息。 </param>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInformationException.ErrorCode">
      <summary>获取此异常的 Win32 错误代码。</summary>
      <returns>包含 Win32 错误代码的 <see cref="T:System.Int32" /> 值。</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkInformationPermission">
      <summary>控制对本地计算机的网络信息和通信统计信息的访问。无法继承此类。 </summary>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.#ctor(System.Net.NetworkInformation.NetworkInformationAccess)">
      <summary>使用指定的 <see cref="T:System.Net.NetworkInformation.NetworkInformationAccess" /> 值初始化 <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission" /> 类的新实例。</summary>
      <param name="access">
        <see cref="T:System.Net.NetworkInformation.NetworkInformationAccess" /> 值之一。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>用指定的 <see cref="T:System.Security.Permissions.PermissionState" /> 初始化 <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInformationPermission.Access">
      <summary>获取对此权限控制的网络信息的访问级别。 </summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.NetworkInformationAccess" /> 值之一。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.AddPermission(System.Net.NetworkInformation.NetworkInformationAccess)">
      <summary>将指定的值添加到此权限中。</summary>
      <param name="access">
        <see cref="T:System.Net.NetworkInformation.NetworkInformationAccess" /> 值之一。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.Copy">
      <summary>创建并返回此权限的完全相同副本。</summary>
      <returns>与当前权限完全相同的 <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission" />。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.FromXml(System.Security.SecurityElement)">
      <summary>使用指定的 XML 编码设置此权限的状态。</summary>
      <param name="securityElement">
        <see cref="T:System.Security.SecurityElement" />，包含用于设置当前权限状态的 XML 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityElement" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="securityElement" /> 不是权限编码。- 或 -<paramref name="securityElement" /> 不是 <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission" /> 的编码。 - 或 -<paramref name="securityElement" /> 有无效的 <see cref="T:System.Net.NetworkInformation.NetworkInformationAccess" /> 值。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.Intersect(System.Security.IPermission)">
      <summary>创建并返回一个权限，该权限是当前权限和指定权限的交集。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission" />，表示当前权限与指定权限的交集。如果交集为空或 <paramref name="target" /> 为 null，则此新权限为 null。</returns>
      <param name="target">与当前权限相交的 <see cref="T:System.Security.IPermission" />。它必须与当前权限属于同一类型。 </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission" />。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前权限是否为指定权限的子集。</summary>
      <returns>
如果当前权限是指定权限的子集，则为 true；否则为 false。</returns>
      <param name="target">将要测试子集关系的 <see cref="T:System.Security.IPermission" />。此权限必须与当前权限属于同一类型。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.IsUnrestricted">
      <summary>返回一个值，该值指示当前权限是否为无限制的。</summary>
      <returns>
如果当前权限是无限制的，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.ToXml">
      <summary>创建此权限状态的 XML 编码。</summary>
      <returns>包含当前权限的 XML 编码的 <see cref="T:System.Security.SecurityElement" />。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.Union(System.Security.IPermission)">
      <summary>创建一个权限，该权限是此权限与指定权限的并集。</summary>
      <returns>一个新权限，它表示当前权限与指定权限的并集。</returns>
      <param name="target">与当前权限合并的 <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission" /> 权限。 </param>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkInformationPermissionAttribute">
      <summary>允许对使用声明安全性应用到代码中的 <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission" /> 进行安全操作。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.NetworkInformationPermissionAttribute" /> 类的新实例。</summary>
      <param name="action">指定权限行为的 <see cref="T:System.Security.Permissions.SecurityAction" /> 值。</param>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInformationPermissionAttribute.Access">
      <summary>获取或设置网络信息访问级别。</summary>
      <returns>指定访问级别的字符串。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermissionAttribute.CreatePermission">
      <summary>创建并返回一个新的 <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission" /> 对象。</summary>
      <returns>与此属性对应的 <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission" />。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkInterface">
      <summary>
                    提供网络接口的配置和统计信息。
                </summary>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInterface.#ctor">
      <summary>
                    初始化 <see cref="T:System.Net.NetworkInformation.NetworkInterface" /> 类的新实例。
                </summary>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInterface.Description">
      <summary>
                    获取接口的描述。
                </summary>
      <returns>
        <see cref="T:System.String" />，用于描述此接口。
                </returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces">
      <summary>
                    返回描述本地计算机上的网络接口的对象。
                </summary>
      <returns>
                    包含描述可用网络接口的对象的 <see cref="T:System.Net.NetworkInformation.NetworkInterface" /> 数组，如果没有检测到接口，则为空数组。
                </returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">
                    Windows 系统函数调用失败。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Net.NetworkInformation.NetworkInformationPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Access="Read" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInterface.GetIPProperties">
      <summary>
返回描述此网络接口的配置的对象。
                </summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.IPInterfaceProperties" /> 对象，用于描述此网络接口。
                </returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInterface.GetIPv4Statistics">
      <summary>
                    获取 IPv4 统计信息。
                </summary>
      <returns>
                    一个 <see cref="T:System.Net.NetworkInformation.IPv4InterfaceStatistics" /> 对象。
                </returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInterface.GetIsNetworkAvailable">
      <summary>
                    指示是否有任何可用的网络连接。
                </summary>
      <returns>
                    如果网络连接可用，则为 true；否则为 false。
                </returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress">
      <summary>
                    返回此适配器的媒体访问控制 (MAC) 或物理地址。
                </summary>
      <returns>
                    包含物理地址的 <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> 对象。
                </returns>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInterface.Id">
      <summary>
                    获取网络适配器的标识符。
                </summary>
      <returns>
                    包含标识符的 <see cref="T:System.String" />。
                </returns>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInterface.IsReceiveOnly">
      <summary>
                    获取 <see cref="T:System.Boolean" /> 值，该值指示网络接口是否设置为仅接收数据包。
                </summary>
      <returns>
                    如果接口仅接收网络通信，则为 true；否则为 false。
                </returns>
      <exception cref="T:System.PlatformNotSupportedException">
此属性在运行早于 Windows XP 的操作系统的计算机上无效。
                </exception>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInterface.LoopbackInterfaceIndex">
      <summary>
                    获取 IPv4 环回接口的索引。
                </summary>
      <returns>
                    一个包含 IPv4 环回接口的索引的 <see cref="T:System.Int32" />。
                </returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">
此属性在仅运行 Ipv6 的计算机上无效。
                </exception>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInterface.Name">
      <summary>
                    获取网络适配器的名称。
                </summary>
      <returns>
                    包含网络适配器名称的 <see cref="T:System.String" />。
                </returns>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInterface.NetworkInterfaceType">
      <summary>
获取接口类型。
                </summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.NetworkInterfaceType" /> 值，指定网络接口类型。
                </returns>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInterface.OperationalStatus">
      <summary>
                    获取网络连接的当前操作状态。
                </summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.OperationalStatus" /> 值之一。
                </returns>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInterface.Speed">
      <summary>
                    获取网络接口的速度。
                </summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定速度（每位/秒为单位）。
                </returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInterface.Supports(System.Net.NetworkInformation.NetworkInterfaceComponent)">
      <summary>
                    获取 <see cref="T:System.Boolean" /> 值，该值指示接口是否支持指定的协议。
                </summary>
      <returns>
                    如果支持指定的协议，则为 true；否则为 false。
                </returns>
      <param name="networkInterfaceComponent">
        <see cref="T:System.Net.NetworkInformation.NetworkInterfaceComponent" /> 值。
                </param>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInterface.SupportsMulticast">
      <summary>
                    获取 <see cref="T:System.Boolean" /> 值，该值指示是否启用网络接口以接收多路广播数据包。
                </summary>
      <returns>
                    如果接口接收多路广播数据包，则为 true；否则为 false。
                </returns>
      <exception cref="T:System.PlatformNotSupportedException">
此属性在运行早于 Windows XP 的操作系统的计算机上无效。
                </exception>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkInterfaceComponent">
      <summary>指定网络接口支持的 Internet 协议版本。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceComponent.IPv4">
      <summary>Internet 协议版本 4。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceComponent.IPv6">
      <summary>Internet 协议 (IP) 版本 6。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkInterfaceType">
      <summary>
                    指定网络接口类型。
                </summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Unknown">
      <summary>
                    接口类型是未知的。
                </summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Ethernet">
      <summary>
                    网络接口使用以太网连接。以太网在 IEEE 标准 802.3 中定义。
                </summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.TokenRing">
      <summary>
                    网络接口使用令牌环连接。令牌环在 IEEE 标准 802.5 中定义。
                </summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Fddi">
      <summary>
                    网络接口使用分布式光纤数据接口 (FDDI) 连接。FDDI 是一组用于局域网中光纤线路上的数据传输的标准。
                </summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.BasicIsdn">
      <summary>
                    网络接口使用基本速率接口综合业务数字网 (ISDN) 连接。ISDN 是一组通过电话线传输数据的标准。
                </summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.PrimaryIsdn">
      <summary>
                    网络接口使用主速率接口综合业务数字网 (ISDN) 连接。ISDN 是一组通过电话线传输数据的标准。
                </summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Ppp">
      <summary>
                    网络接口使用点对点协议 (PPP) 连接。PPP 是使用串行设备进行数据传输的协议。
                </summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Loopback">
      <summary>
                    网络接口是环回适配器。此类接口通常用于测试；不通过电缆发送流量。
                </summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Ethernet3Megabit">
      <summary>
                    网络接口使用以太网 3 兆位/秒连接。以太网的此版本在 IETF RFC 895 中定义。
                </summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Slip">
      <summary>
                    网络接口使用串行线路 Internet 协议 (SLIP) 连接。SLIP 在 IETF RFC 1055 中定义。
                </summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Atm">
      <summary>
                    网络接口使用异步传输模式 (ATM) 传输数据。
                </summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.GenericModem">
      <summary>
                    网络接口使用调制解调器。
                </summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.FastEthernetT">
      <summary>
                    网络接口使用基于双绞线的 Fast Ethernet 连接，其数据速率为 100 兆位/秒。此连接类型也称为 100Base-T。
                </summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Isdn">
      <summary>
                    网络接口使用为 ISDN 和 X.25 协议配置的连接。X.25 允许公用网络上的计算机使用中间计算机通信。
                </summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.FastEthernetFx">
      <summary>
                    网络接口使用基于光纤的 Fast Ethernet 连接，其数据速率为 100 兆位/秒。此连接类型也称为 100Base-FX。
                </summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Wireless80211">
      <summary>
                    网络接口使用无线 LAN 连接（IEEE 802.11 标准）。
                </summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.AsymmetricDsl">
      <summary>
                    网络接口使用非对称数字用户线路 (ADSL)。
                </summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.RateAdaptDsl">
      <summary>
                    网络接口使用速率自适应数字用户线路 (RADSL)。
                </summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.SymmetricDsl">
      <summary>
                    网络接口使用对称数字用户线路 (SDSL)。
                </summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.VeryHighSpeedDsl">
      <summary>
                    网络接口使用超高数据速率数字用户线路 (VDSL)。
                </summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.IPOverAtm">
      <summary>
                    网络接口使用 Internet 协议 (IP) 与异步传输模式 (ATM) 相结合来传输数据。
                </summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.GigabitEthernet">
      <summary>
                    网络接口使用 Gigabit Ethernet 连接，其数据速率为 1,000 兆位/秒（1 吉比特/秒）。
                </summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Tunnel">
      <summary>
                    网络接口使用隧道连接。
                </summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.MultiRateSymmetricDsl">
      <summary>
                    网络接口使用多速率数字用户线路。
                </summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.HighPerformanceSerialBus">
      <summary>
                    网络接口使用高性能串行总线。
                </summary>
    </member>
    <member name="T:System.Net.NetworkInformation.OperationalStatus">
      <summary>指定网络接口的操作状态。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.OperationalStatus.Up">
      <summary>网络接口已运行，可以传输数据包。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.OperationalStatus.Down">
      <summary>网络接口无法传输数据包。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.OperationalStatus.Testing">
      <summary>网络接口正在运行测试。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.OperationalStatus.Unknown">
      <summary>网络接口的状态未知。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.OperationalStatus.Dormant">
      <summary>网络接口不处于传输数据包的状态；它正等待外部事件。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.OperationalStatus.NotPresent">
      <summary>由于缺少组件（通常为硬件组件），网络接口无法传输数据包。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.OperationalStatus.LowerLayerDown">
      <summary>网络接口无法传输数据包，因为它运行在一个或多个其他接口之上，而这些“低层”接口中至少有一个已关闭。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.PhysicalAddress">
      <summary>
                    提供网络接口（适配器）的媒体访问控制 (MAC) 地址。
                </summary>
    </member>
    <member name="M:System.Net.NetworkInformation.PhysicalAddress.#ctor(System.Byte[])">
      <summary>
                    初始化 <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> 类的新实例。
                </summary>
      <param name="address">
包含地址的 <see cref="T:System.Byte" /> 数组。
                </param>
    </member>
    <member name="M:System.Net.NetworkInformation.PhysicalAddress.Equals(System.Object)">
      <summary>
                    比较两个 <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> 实例。
                </summary>
      <returns>
                    如果此实例和指定的实例包含相同的地址，则为 true，否则为 false。
                </returns>
      <param name="comparand">
                    要与当前实例进行比较的 <see cref="T:System.Net.NetworkInformation.PhysicalAddress" />。
                </param>
    </member>
    <member name="M:System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes">
      <summary>
                    返回当前实例的地址。
                </summary>
      <returns>
包含地址的 <see cref="T:System.Byte" /> 数组。
                </returns>
    </member>
    <member name="M:System.Net.NetworkInformation.PhysicalAddress.GetHashCode">
      <summary>
                    返回物理地址的哈希值。
                </summary>
      <returns>
                    整数哈希值。
                </returns>
    </member>
    <member name="F:System.Net.NetworkInformation.PhysicalAddress.None">
      <summary>
                    返回一个具有零长度地址的新 <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> 实例。此字段为只读。
                </summary>
    </member>
    <member name="M:System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)">
      <summary>
                    分析指定的 <see cref="T:System.String" /> 并将其内容存储为由此方法返回的 <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> 的地址字节。
                </summary>
      <returns>
                    具有指定地址的 <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> 实例。
                </returns>
      <param name="address">
        <see cref="T:System.String" />，包含用于初始化由此方法返回的 <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> 实例的地址。
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="address" /> 参数包含非法硬件地址。
                
                    如果 <paramref name="address" /> 参数包含格式不正确的字符串，也会出现此异常。
                </exception>
    </member>
    <member name="M:System.Net.NetworkInformation.PhysicalAddress.ToString">
      <summary>
                    返回此实例的地址的 <see cref="T:System.String" /> 表示形式。
                </summary>
      <returns>
                    包含此实例中包含的地址的 <see cref="T:System.String" />。
                </returns>
    </member>
    <member name="T:System.Net.NetworkInformation.Ping">
      <summary>允许应用程序确定是否可通过网络访问远程计算机。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.Ping" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)">
      <summary>引发 <see cref="E:System.Net.NetworkInformation.Ping.PingCompleted" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.Net.NetworkInformation.PingCompletedEventArgs" /> 对象。</param>
    </member>
    <member name="E:System.Net.NetworkInformation.Ping.PingCompleted">
      <summary>当发送 Internet 控制消息协议 (ICMP) 回送消息并接收相应 ICMP 回送答复消息的异步操作完成或被取消时发生。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress)">
      <summary>尝试将 Internet 控制消息协议 (ICMP) 回送消息发送到具有指定 <see cref="T:System.Net.IPAddress" /> 的计算机，并接收来自该计算机的相应 ICMP 回送答复消息。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.PingReply" /> 对象。如果收到 ICMP 回送答复消息，此对象提供有关该消息的信息；如果没有收到 ICMP 回送答复消息，此对象将提供失败的原因。</returns>
      <param name="address">标识 ICMP 回送消息目标计算机的 <see cref="T:System.Net.IPAddress" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">对 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> 的调用正在进行。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="address" /> 是一个 IPv6 地址，并且本地计算机运行的操作系统的版本低于 Windows 2000。</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">发送或接收 ICMP 消息时引发异常。请参见内部异常，以确切地了解所引发的异常。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="address" /> 不是有效的 IP 地址。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.SocketPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32)">
      <summary>试图将包含指定数据缓冲区的 Internet 控制消息协议 (ICMP) 回送消息发送到具有指定的 <see cref="T:System.Net.IPAddress" /> 的计算机，并接收来自该计算机的相应 ICMP 回送应答消息。使用此方法可以为操作指定一个超时值。</summary>
      <returns>一个 <see cref="T:System.Net.NetworkInformation.PingReply" /> 对象，如果收到了 ICMP 回显回复消息，则该对象提供相应消息的相关信息；如果未收到消息，则该对象提供失败原因。</returns>
      <param name="address">标识 ICMP 回送消息目标计算机的 <see cref="T:System.Net.IPAddress" />。</param>
      <param name="timeout">一个 <see cref="T:System.Int32" /> 值，指定（发送回送消息后）等待 ICMP 回送答复消息的最大毫秒数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 小于零。</exception>
      <exception cref="T:System.InvalidOperationException">对 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> 的调用正在进行。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="address" /> 是一个 IPv6 地址，并且本地计算机运行的操作系统的版本低于 Windows 2000。</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">发送或接收 ICMP 消息时引发异常。请参见内部异常，以确切地了解所引发的异常。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="address" /> 不是有效的 IP 地址。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32,System.Byte[])">
      <summary>试图将包含指定数据缓冲区的 Internet 控制消息协议 (ICMP) 回送消息发送到具有指定的 <see cref="T:System.Net.IPAddress" /> 的计算机，并接收来自该计算机的相应 ICMP 回送应答消息。此重载使您可以为操作指定一个超时值。</summary>
      <returns>一个 <see cref="T:System.Net.NetworkInformation.PingReply" /> 对象。如果已收到 ICMP 回送应答消息，此对象将提供有关该消息的信息；如果没有收到 ICMP 回送应答消息，此对象将提供失败的原因。如果数据包的大小超过最大传输单元 (MTU)，该方法将返回 <see cref="F:System.Net.NetworkInformation.IPStatus.PacketTooBig" />。</returns>
      <param name="address">标识 ICMP 回送消息目标计算机的 <see cref="T:System.Net.IPAddress" />。</param>
      <param name="timeout">一个 <see cref="T:System.Int32" /> 值，指定（发送回送消息后）等待 ICMP 回送答复消息的最大毫秒数。</param>
      <param name="buffer">一个 <see cref="T:System.Byte" /> 数组，它包含要与 ICMP 回送消息一起发送并在 ICMP 回送应答消息中返回的数据。该数组包含的字节数不能超过 65,500 个字节。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。- 或 -<paramref name="buffer" /> 为 null，或 <paramref name="buffer" /> 大小大于 65500 字节。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 小于零。</exception>
      <exception cref="T:System.InvalidOperationException">对 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> 的调用正在进行。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="address" /> 是一个 IPv6 地址，并且本地计算机运行的操作系统的版本低于 Windows 2000。</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">发送或接收 ICMP 消息时引发异常。请参见内部异常，以确切地了解所引发的异常。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="address" /> 不是有效的 IP 地址。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffer" /> 的大小超过 65500 字节。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)">
      <summary>尝试将包含指定数据缓冲区的 Internet 控制消息协议 (ICMP) 回送消息发送到具有指定 <see cref="T:System.Net.IPAddress" /> 的计算机，并接收来自该计算机的相应 ICMP 回送答复消息。此重载允许您指定操作的超时值，并控制 ICMP 回显消息数据包的碎片和生存时间值。</summary>
      <returns>一个 <see cref="T:System.Net.NetworkInformation.PingReply" /> 对象。如果已收到 ICMP 回送应答消息，此对象将提供有关该消息的信息；如果没有收到 ICMP 回送应答消息，此对象将提供失败的原因。如果数据包的大小超过最大传输单元 (MTU)，该方法将返回 <see cref="F:System.Net.NetworkInformation.IPStatus.PacketTooBig" />。</returns>
      <param name="address">标识 ICMP 回送消息目标计算机的 <see cref="T:System.Net.IPAddress" />。</param>
      <param name="timeout">一个 <see cref="T:System.Int32" /> 值，指定（发送回送消息后）等待 ICMP 回送答复消息的最大毫秒数。</param>
      <param name="buffer">一个 <see cref="T:System.Byte" /> 数组，它包含要与 ICMP 回送消息一起发送并在 ICMP 回送应答消息中返回的数据。该数组包含的字节数不能超过 65,500 个字节。</param>
      <param name="options">一个 <see cref="T:System.Net.NetworkInformation.PingOptions" /> 对象，用于控制 ICMP 回显消息数据包的碎片和生存时间值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。- 或 -<paramref name="buffer" /> 为 null，或 <paramref name="buffer" /> 大小大于 65500 字节。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 小于零。</exception>
      <exception cref="T:System.InvalidOperationException">对 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> 的调用正在进行。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="address" /> 是一个 IPv6 地址，并且本地计算机运行的操作系统的版本低于 Windows 2000。</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">发送或接收 ICMP 消息时引发异常。请参见内部异常，以确切地了解所引发的异常。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="address" /> 不是有效的 IP 地址。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffer" /> 的大小超过 65500 字节。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.Send(System.String)">
      <summary>试图向指定的计算机发送 Internet 控制消息协议 (ICMP) 回送消息，并从该计算机接收相应的 ICMP 回送答复消息。</summary>
      <returns>一个 <see cref="T:System.Net.NetworkInformation.PingReply" /> 对象。如果已收到 ICMP 回送应答消息，此对象将提供有关该消息的信息；如果没有收到 ICMP 回送应答消息，此对象将提供失败的原因。</returns>
      <param name="hostNameOrAddress">一个 <see cref="T:System.String" />，它标识作为 ICMP 回送消息目标的计算机。为此参数指定的值可以是主机名，也可以是以字符串形式表示的 IP 地址。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostNameOrAddress" /> 为 null 或是一个空字符串 ("")。</exception>
      <exception cref="T:System.InvalidOperationException">对 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> 的调用正在进行。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="address" /> 是一个 IPv6 地址，并且本地计算机运行的操作系统的版本低于 Windows 2000。</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">发送或接收 ICMP 消息时引发异常。请参见内部异常，以确切地了解所引发的异常。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="hostNameOrAddress" /> 未能解析为有效的 IP 地址。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.SocketPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32)">
      <summary>试图向指定的计算机发送 Internet 控制消息协议 (ICMP) 回送消息，并从该计算机接收相应的 ICMP 回送答复消息。使用此方法可以为操作指定一个超时值。</summary>
      <returns>一个 <see cref="T:System.Net.NetworkInformation.PingReply" /> 对象，如果收到了 ICMP 回显回复消息，则该对象提供相应消息的相关信息；如果未收到消息，则该对象提供失败原因。</returns>
      <param name="hostNameOrAddress">一个 <see cref="T:System.String" />，它标识作为 ICMP 回送消息目标的计算机。为此参数指定的值可以是主机名，也可以是以字符串形式表示的 IP 地址。</param>
      <param name="timeout">一个 <see cref="T:System.Int32" /> 值，指定（发送回送消息后）等待 ICMP 回送答复消息的最大毫秒数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostNameOrAddress" /> 为 null 或是一个空字符串 ("")。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 小于零。</exception>
      <exception cref="T:System.InvalidOperationException">对 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> 的调用正在进行。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="hostNameOrAddress" /> 未能解析为有效的 IP 地址。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32,System.Byte[])">
      <summary>试图用指定的数据缓冲区将 Internet 控制消息协议 (ICMP) 回显消息发送到指定计算机，然后从该计算机接收对应的 ICMP 回显回复消息。此重载使您可以为操作指定一个超时值。</summary>
      <returns>一个 <see cref="T:System.Net.NetworkInformation.PingReply" /> 对象，如果收到了 ICMP 回显回复消息，则该对象提供相应消息的相关信息；如果未收到消息，则该对象提供失败原因。</returns>
      <param name="hostNameOrAddress">一个 <see cref="T:System.String" />，它标识作为 ICMP 回送消息目标的计算机。为此参数指定的值可以是主机名，也可以是以字符串形式表示的 IP 地址。</param>
      <param name="timeout">一个 <see cref="T:System.Int32" /> 值，指定（发送回送消息后）等待 ICMP 回送答复消息的最大毫秒数。</param>
      <param name="buffer">一个 <see cref="T:System.Byte" /> 数组，它包含要与 ICMP 回送消息一起发送并在 ICMP 回送应答消息中返回的数据。该数组包含的字节数不能超过 65,500 个字节。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostNameOrAddress" /> 为 null 或是一个空字符串 ("")。- 或 -<paramref name="buffer" /> 为 null，或 <paramref name="buffer" /> 大小大于 65500 字节。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 小于零。</exception>
      <exception cref="T:System.InvalidOperationException">对 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> 的调用正在进行。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="hostNameOrAddress" /> 未能解析为有效的 IP 地址。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffer" /> 的大小超过 65500 字节。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)">
      <summary>试图用指定的数据缓冲区将 Internet 控制消息协议 (ICMP) 回显消息发送到指定计算机，然后从该计算机接收对应的 ICMP 回显回复消息。此重载允许您指定操作的超时值，并控制 ICMP 数据包的碎片和生存时间值。</summary>
      <returns>一个 <see cref="T:System.Net.NetworkInformation.PingReply" /> 对象，如果收到了 ICMP 回显回复消息，则该对象提供相应消息的相关信息；如果未收到消息，则该对象提供失败原因。</returns>
      <param name="hostNameOrAddress">一个 <see cref="T:System.String" />，它标识作为 ICMP 回送消息目标的计算机。为此参数指定的值可以是主机名，也可以是以字符串形式表示的 IP 地址。</param>
      <param name="timeout">一个 <see cref="T:System.Int32" /> 值，指定（发送回送消息后）等待 ICMP 回送答复消息的最大毫秒数。</param>
      <param name="buffer">一个 <see cref="T:System.Byte" /> 数组，它包含要与 ICMP 回送消息一起发送并在 ICMP 回送应答消息中返回的数据。该数组包含的字节数不能超过 65,500 个字节。</param>
      <param name="options">一个 <see cref="T:System.Net.NetworkInformation.PingOptions" /> 对象，用于控制 ICMP 回显消息数据包的碎片和生存时间值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostNameOrAddress" /> 为 null 或为零长度字符串。- 或 -<paramref name="buffer" /> 为 null，或 <paramref name="buffer" /> 大小大于 65500 字节。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 小于零。</exception>
      <exception cref="T:System.InvalidOperationException">对 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> 的调用正在进行。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="address" /> 是一个 IPv6 地址，并且本地计算机运行的操作系统的版本低于 Windows 2000。</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">发送或接收 ICMP 消息时引发异常。请参见内部异常，以确切地了解所引发的异常。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="hostNameOrAddress" /> 未能解析为有效的 IP 地址。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffer" /> 的大小超过 65500 字节。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)">
      <summary>试图用指定的数据缓冲区以异步方式将 Internet 控制消息协议 (ICMP) 回显消息发送到具有指定的 <see cref="T:System.Net.IPAddress" /> 的计算机，并从该计算机接收对应的 ICMP 回显回复消息。此重载允许您指定操作的超时值，并控制 ICMP 回显消息数据包的碎片和生存时间值。</summary>
      <param name="address">标识 ICMP 回送消息目标计算机的 <see cref="T:System.Net.IPAddress" />。</param>
      <param name="timeout">一个 <see cref="T:System.Byte" /> 数组，它包含要与 ICMP 回送消息一起发送并在 ICMP 回送应答消息中返回的数据。该数组包含的字节数不能超过 65,500 个字节。</param>
      <param name="buffer">一个 <see cref="T:System.Int32" /> 值，指定（发送回送消息后）等待 ICMP 回送答复消息的最大毫秒数。</param>
      <param name="options">一个 <see cref="T:System.Net.NetworkInformation.PingOptions" /> 对象，用于控制 ICMP 回显消息数据包的碎片和生存时间值。</param>
      <param name="userToken">一个对象，此对象将被传递给异步操作完成后所调用的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。- 或 -<paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 小于零。</exception>
      <exception cref="T:System.InvalidOperationException">对 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> 的调用正在进行。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="address" /> 是一个 IPv6 地址，并且本地计算机运行的操作系统的版本低于 Windows 2000。</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">发送或接收 ICMP 消息时引发异常。请参见内部异常，以确切地了解所引发的异常。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="address" /> 不是有效的 IP 地址。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffer" /> 的大小超过 65500 字节。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Object)">
      <summary>试图用指定的数据缓冲区以异步方式将 Internet 控制消息协议 (ICMP) 回显消息发送到具有指定的 <see cref="T:System.Net.IPAddress" /> 的计算机，并从该计算机接收对应的 ICMP 回显回复消息。此重载使您可以为操作指定一个超时值。</summary>
      <param name="address">标识 ICMP 回送消息目标计算机的 <see cref="T:System.Net.IPAddress" />。</param>
      <param name="timeout">一个 <see cref="T:System.Int32" /> 值，指定（发送回送消息后）等待 ICMP 回送答复消息的最大毫秒数。</param>
      <param name="buffer">一个 <see cref="T:System.Byte" /> 数组，它包含要与 ICMP 回送消息一起发送并在 ICMP 回送应答消息中返回的数据。该数组包含的字节数不能超过 65,500 个字节。</param>
      <param name="userToken">一个对象，此对象将被传递给异步操作完成后所调用的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。- 或 -<paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 小于零。</exception>
      <exception cref="T:System.InvalidOperationException">对 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> 的调用正在进行。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="address" /> 是一个 IPv6 地址，并且本地计算机运行的操作系统的版本低于 Windows 2000。</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">发送或接收 ICMP 消息时引发异常。请参见内部异常，以确切地了解所引发的异常。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="address" /> 不是有效的 IP 地址。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffer" /> 的大小超过 65500 字节。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Object)">
      <summary>试图以异步方式向指定 <see cref="T:System.Net.IPAddress" /> 的计算机发送 Internet 控制消息协议 (ICMP) 回送消息，并从该计算机接收相应的 ICMP 回送答复消息。此重载使您可以为操作指定一个超时值。</summary>
      <param name="address">标识 ICMP 回送消息目标计算机的 <see cref="T:System.Net.IPAddress" />。</param>
      <param name="timeout">一个 <see cref="T:System.Int32" /> 值，指定（发送回送消息后）等待 ICMP 回送答复消息的最大毫秒数。</param>
      <param name="userToken">一个对象，此对象将被传递给异步操作完成后所调用的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 小于零。</exception>
      <exception cref="T:System.InvalidOperationException">对 <see cref="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Object)" /> 方法的调用正在进行中。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="address" /> 是一个 IPv6 地址，并且本地计算机运行的操作系统的版本低于 Windows 2000。</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">发送或接收 ICMP 消息时引发异常。请参见内部异常，以确切地了解所引发的异常。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="address" /> 不是有效的 IP 地址。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Object)">
      <summary>试图以异步方式向指定 <see cref="T:System.Net.IPAddress" /> 的计算机发送 Internet 控制消息协议 (ICMP) 回送消息，并从该计算机接收相应的 ICMP 回送答复消息。</summary>
      <param name="address">标识 ICMP 回送消息目标计算机的 <see cref="T:System.Net.IPAddress" />。</param>
      <param name="userToken">一个对象，此对象将被传递给异步操作完成后所调用的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> 调用正在进行中。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="address" /> 是一个 IPv6 地址，并且本地计算机运行的操作系统的版本低于 Windows 2000。</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">发送或接收 ICMP 消息时引发异常。请参见内部异常，以确切地了解所引发的异常。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="address" /> 不是有效的 IP 地址。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.SocketPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)">
      <summary>试图用指定的数据缓冲区以异步方式将 Internet 控制消息协议 (ICMP) 回显消息发送到指定计算机，并从该计算机接收对应的 ICMP 回显回复消息。此重载允许您指定操作的超时值，并控制 ICMP 数据包的碎片和生存时间值。</summary>
      <param name="hostNameOrAddress">一个 <see cref="T:System.String" />，它标识作为 ICMP 回送消息目标的计算机。为此参数指定的值可以是主机名，也可以是以字符串形式表示的 IP 地址。</param>
      <param name="timeout">一个 <see cref="T:System.Byte" /> 数组，它包含要与 ICMP 回送消息一起发送并在 ICMP 回送应答消息中返回的数据。该数组包含的字节数不能超过 65,500 个字节。</param>
      <param name="buffer">一个 <see cref="T:System.Int32" /> 值，指定（发送回送消息后）等待 ICMP 回送答复消息的最大毫秒数。</param>
      <param name="options">一个 <see cref="T:System.Net.NetworkInformation.PingOptions" /> 对象，用于控制 ICMP 回显消息数据包的碎片和生存时间值。</param>
      <param name="userToken">一个对象，此对象将被传递给异步操作完成后所调用的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostNameOrAddress" /> 为 null 或是一个空字符串 ("")。- 或 -<paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 小于零。</exception>
      <exception cref="T:System.InvalidOperationException">对 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> 的调用正在进行。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="address" /> 是一个 IPv6 地址，并且本地计算机运行的操作系统的版本低于 Windows 2000。</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">发送或接收 ICMP 消息时引发异常。请参见内部异常，以确切地了解所引发的异常。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="hostNameOrAddress" /> 未能解析为有效的 IP 地址。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffer" /> 的大小超过 65500 字节。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Byte[],System.Object)">
      <summary>试图用指定的数据缓冲区以异步方式将 Internet 控制消息协议 (ICMP) 回显消息发送到指定计算机，并从该计算机接收对应的 ICMP 回显回复消息。此重载使您可以为操作指定一个超时值。</summary>
      <param name="hostNameOrAddress">一个 <see cref="T:System.String" />，它标识作为 ICMP 回送消息目标的计算机。为此参数指定的值可以是主机名，也可以是以字符串形式表示的 IP 地址。</param>
      <param name="timeout">一个 <see cref="T:System.Int32" /> 值，指定（发送回送消息后）等待 ICMP 回送答复消息的最大毫秒数。</param>
      <param name="buffer">一个 <see cref="T:System.Byte" /> 数组，它包含要与 ICMP 回送消息一起发送并在 ICMP 回送应答消息中返回的数据。该数组包含的字节数不能超过 65,500 个字节。</param>
      <param name="userToken">一个对象，此对象将被传递给异步操作完成后所调用的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostNameOrAddress" /> 为 null 或是一个空字符串 ("")。- 或 -<paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 小于零。</exception>
      <exception cref="T:System.InvalidOperationException">对 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> 的调用正在进行。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="hostNameOrAddress" /> 是一个 IPv6 地址，并且本地计算机运行的操作系统的版本低于 Windows 2000。</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">发送或接收 ICMP 消息时引发异常。请参见内部异常，以确切地了解所引发的异常。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="hostNameOrAddress" /> 未能解析为有效的 IP 地址。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffer" /> 的大小超过 65500 字节。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Object)">
      <summary>试图以异步方式向指定的计算机发送 Internet 控制消息协议 (ICMP) 回送消息，并从该计算机接收相应的 ICMP 回送答复消息。此重载使您可以为操作指定一个超时值。</summary>
      <param name="hostNameOrAddress">一个 <see cref="T:System.String" />，它标识作为 ICMP 回送消息目标的计算机。为此参数指定的值可以是主机名，也可以是以字符串形式表示的 IP 地址。</param>
      <param name="timeout">一个 <see cref="T:System.Int32" /> 值，指定（发送回送消息后）等待 ICMP 回送答复消息的最大毫秒数。</param>
      <param name="userToken">一个对象，此对象将被传递给异步操作完成后所调用的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostNameOrAddress" /> 为 null 或是一个空字符串 ("")。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 小于零。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> 调用正在进行中。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="hostNameOrAddress" /> 是一个 IPv6 地址，并且本地计算机运行的操作系统的版本低于 Windows 2000。</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">发送或接收 ICMP 消息时引发异常。请参见内部异常，以确切地了解所引发的异常。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="hostNameOrAddress" /> 未能解析为有效的 IP 地址。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Object)">
      <summary>试图以异步方式向指定的计算机发送 Internet 控制消息协议 (ICMP) 回送消息，并从该计算机接收相应的 ICMP 回送答复消息。</summary>
      <param name="hostNameOrAddress">一个 <see cref="T:System.String" />，它标识作为 ICMP 回送消息目标的计算机。为此参数指定的值可以是主机名，也可以是以字符串形式表示的 IP 地址。</param>
      <param name="userToken">一个对象，此对象将被传递给异步操作完成后所调用的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostNameOrAddress" /> 为 null 或是一个空字符串 ("")。</exception>
      <exception cref="T:System.InvalidOperationException">对 <see cref="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Object)" /> 方法的调用正在进行中。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="address" /> 是一个 IPv6 地址，并且本地计算机运行的操作系统的版本低于 Windows 2000。</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">发送或接收 ICMP 消息时引发异常。请参见内部异常，以确切地了解所引发的异常。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="hostNameOrAddress" /> 未能解析为有效的 IP 地址。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.SocketPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendAsyncCancel">
      <summary>取消所有挂起的发送 Internet 控制消息协议 (ICMP) 回送消息并接收相应 ICMP 回送答复消息的异步请求。</summary>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.System#IDisposable#Dispose">
      <summary>释放由 <see cref="T:System.Net.NetworkInformation.Ping" /> 类的实例使用的所有资源。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.PingCompletedEventArgs">
      <summary>为 <see cref="E:System.Net.NetworkInformation.Ping.PingCompleted" /> 事件提供数据。</summary>
    </member>
    <member name="P:System.Net.NetworkInformation.PingCompletedEventArgs.Reply">
      <summary>获取包含数据的对象，该数据描述发送 Internet 控制消息协议 (ICMP) 回送请求消息并接受相应的 ICMP 回送答复消息的尝试。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.PingReply" /> 对象，描述 ICMP 回送请求结果。</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.PingCompletedEventHandler">
      <summary>表示将要处理 <see cref="T:System.Net.NetworkInformation.Ping" /> 对象的 <see cref="E:System.Net.NetworkInformation.Ping.PingCompleted" /> 事件的方法。</summary>
      <param name="sender">
        <see cref="E:System.Net.NetworkInformation.Ping.PingCompleted" /> 事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Net.NetworkInformation.PingCompletedEventArgs" /> 对象。</param>
    </member>
    <member name="T:System.Net.NetworkInformation.PingException">
      <summary>当 <see cref="Overload:System.Net.NetworkInformation.Ping.Send" /> 或 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> 方法调用的方法引发异常时引发的异常。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.PingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Net.NetworkInformation.PingException" /> 类的新实例。 </summary>
      <param name="serializationInfo">保存序列化对象数据的对象。 </param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它指定有关此序列化的源或目标的上下文信息。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.PingException.#ctor(System.String)">
      <summary>使用指定的消息初始化 <see cref="T:System.Net.NetworkInformation.PingException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.PingException.#ctor(System.String,System.Exception)">
      <summary>使用指定的消息和内部异常初始化 <see cref="T:System.Net.NetworkInformation.PingException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。</param>
      <param name="innerException">导致当前异常的异常。</param>
    </member>
    <member name="T:System.Net.NetworkInformation.PingOptions">
      <summary>用于控制如何传输 <see cref="T:System.Net.NetworkInformation.Ping" /> 数据包。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.PingOptions.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.PingOptions" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.PingOptions.#ctor(System.Int32,System.Boolean)">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.PingOptions" /> 类的新实例，并设置生存时间和分段值。</summary>
      <param name="ttl">一个大于零的 <see cref="T:System.Int32" /> 值，指定 <see cref="T:System.Net.NetworkInformation.Ping" /> 数据包可被转发的次数。</param>
      <param name="dontFragment">
如果为 true，则禁止将发送到远程主机的数据分段；否则为 false。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ttl " /> 小于或等于零。</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.PingOptions.DontFragment">
      <summary>获取或设置 <see cref="T:System.Boolean" /> 值，该值控制发送到远程主机的数据的分段。</summary>
      <returns>
如果不能在多个数据包中发送数据，则为 true；否则为 false。默认为 false。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.PingOptions.Ttl">
      <summary>获取或设置在丢弃 <see cref="T:System.Net.NetworkInformation.Ping" /> 数据之前可以转发该数据的路由节点数。</summary>
      <returns>一个 <see cref="T:System.Int32" /> 值，指定 <see cref="T:System.Net.NetworkInformation.Ping" /> 数据包可被转发的次数。默认值为 128。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">为 set 操作指定的值小于或等于零。</exception>
    </member>
    <member name="T:System.Net.NetworkInformation.PingReply">
      <summary>提供有关 <see cref="Overload:System.Net.NetworkInformation.Ping.Send" /> 或 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> 操作的状态及产生的数据的信息。</summary>
    </member>
    <member name="P:System.Net.NetworkInformation.PingReply.Address">
      <summary>获取发送 Internet 控制消息协议 (ICMP) 回送答复的主机地址。</summary>
      <returns>包含 ICMP 回送消息目标的 <see cref="T:System.Net.IPAddress" />。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.PingReply.Buffer">
      <summary>获取 Internet 控制消息协议 (ICMP) 回送答复消息中收到的数据缓冲区。</summary>
      <returns>包含 ICMP 回送答复消息中收到的数据的 <see cref="T:System.Byte" /> 数组，如果没有收到答复，则为空数组。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.PingReply.Options">
      <summary>获取用于将答复传输到 Internet 控制消息协议 (ICMP) 回送请求的选项。</summary>
      <returns>如果 <see cref="P:System.Net.NetworkInformation.PingReply.Status" /> 是 <see cref="F:System.Net.NetworkInformation.IPStatus.Success" />，则为一个包含生存时间 (TTL) 和用于传输答复的分段指令的 <see cref="T:System.Net.NetworkInformation.PingOptions" /> 对象；否则为 null。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.PingReply.RoundtripTime">
      <summary>获取发送 Internet 控制消息协议 (ICMP) 回送请求并接收相应 ICMP 回送答复消息所用的毫秒数。</summary>
      <returns>
        <see cref="T:System.Int64" />，指定来回行程时间（以毫秒为单位）。 </returns>
    </member>
    <member name="P:System.Net.NetworkInformation.PingReply.Status">
      <summary>获取发送 Internet 控制消息协议 (ICMP) 回送请求并接收相应 ICMP 回送答复消息的尝试的状态。</summary>
      <returns>指示请求结果的 <see cref="T:System.Net.NetworkInformation.IPStatus" /> 值。</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.PrefixOrigin">
      <summary>指定 IP 地址网络前缀是如何定位的。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.PrefixOrigin.Other">
      <summary>前缀是使用未指定的源定位的。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.PrefixOrigin.Manual">
      <summary>前缀是手动配置的。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.PrefixOrigin.WellKnown">
      <summary>前缀是已知的前缀。已知前缀在标准跟踪请求注释 (RFC) 文档中指定并由 Internet 编号分配管理机构 (Iana) 或地址注册表分配。这样的前缀是为特殊用途保留的。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.PrefixOrigin.Dhcp">
      <summary>前缀是由动态主机配置协议 (DHCP) 服务器提供的。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.PrefixOrigin.RouterAdvertisement">
      <summary>前缀是通过路由器广播提供的。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.SuffixOrigin">
      <summary>指定如何定位 IP 地址主机后缀。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.SuffixOrigin.Other">
      <summary>后缀是用未指定的源定位的。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.SuffixOrigin.Manual">
      <summary>后缀是手动配置的。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.SuffixOrigin.WellKnown">
      <summary>后缀是已知后缀。已知后缀在标准跟踪请求注释 (RFC) 文档中指定并由 Internet 编号分配管理机构 (Iana) 或地址注册表分配。这样的后缀是为特殊用途保留的。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.SuffixOrigin.OriginDhcp">
      <summary>后缀是由动态主机配置协议 (DHCP) 服务器提供的。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.SuffixOrigin.LinkLayerAddress">
      <summary>后缀是链接本地后缀。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.SuffixOrigin.Random">
      <summary>后缀是随机分配的。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.TcpConnectionInformation">
      <summary>提供有关本地计算机上的传输控制协议 (TCP) 连接的信息。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.TcpConnectionInformation.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.TcpConnectionInformation" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpConnectionInformation.LocalEndPoint">
      <summary>获取传输控制协议 (TCP) 连接的本地终结点。</summary>
      <returns>包含本地计算机上的 IP 地址和端口的 <see cref="T:System.Net.IPEndPoint" /> 实例。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpConnectionInformation.RemoteEndPoint">
      <summary>获取传输控制协议 (TCP) 连接的远程终结点。</summary>
      <returns>包含远程计算机上的 IP 地址和端口的 <see cref="T:System.Net.IPEndPoint" /> 实例。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpConnectionInformation.State">
      <summary>获取此传输控制协议 (TCP) 连接的状态。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.TcpState" /> 枚举值之一。</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.TcpState">
      <summary>指定传输控制协议 (TCP) 连接的状态。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.TcpState.Unknown">
      <summary>TCP 连接状态是未知的。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.TcpState.Closed">
      <summary>TCP 连接处于关闭状态。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.TcpState.Listen">
      <summary>TCP 连接的本地终结点正在侦听来自任何远程终结点的连接请求。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.TcpState.SynSent">
      <summary>TCP 连接的本地终结点已向远程终结点发送一个设置了同步 (SYN) 控制位的段标头并且正在等待匹配的连接请求。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.TcpState.SynReceived">
      <summary>TCP 连接的本地终结点已发送并收到连接请求并且正在等待确认。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.TcpState.Established">
      <summary>TCP 握手完成。已建立连接，可以发送数据。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.TcpState.FinWait1">
      <summary>TCP 连接的本地终结点正在等待来自远程终结点的连接终止请求或对先前发送的连接终止请求的确认。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.TcpState.FinWait2">
      <summary>TCP 连接的本地终结点正在等待来自远程终结点的连接终止请求。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.TcpState.CloseWait">
      <summary>TCP 连接的本地终结点正在等待来自本地用户的连接终止请求。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.TcpState.Closing">
      <summary>TCP 连接的本地终结点正在等待对先前发送的连接终止请求的确认。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.TcpState.LastAck">
      <summary>TCP 连接的本地终结点正在等待对先前发送的连接终止请求的最终确认。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.TcpState.TimeWait">
      <summary>TCP 连接的本地终结点正在等待足够的时间后传递，以确保远程终结点收到了它的连接终止请求确认。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.TcpState.DeleteTcb">
      <summary>正在删除 TCP 连接的传输控制缓冲区 (TCB)。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.TcpStatistics">
      <summary>提供传输控制协议 (TCP) 统计数据。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.TcpStatistics.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.TcpStatistics" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.ConnectionsAccepted">
      <summary>获取接受的传输控制协议 (TCP) 连接请求数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定接受的 TCP 连接请求的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.ConnectionsInitiated">
      <summary>获取由客户端发出的传输控制协议 (TCP) 连接请求数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定由客户端启动的 TCP 连接的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.CumulativeConnections">
      <summary>指定建立的传输控制协议 (TCP) 连接的总数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定建立的连接的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.CurrentConnections">
      <summary>获取当前传输控制协议 (TCP) 连接数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定当前 TCP 连接的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.ErrorsReceived">
      <summary>获取收到的传输控制协议 (TCP) 错误数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定收到的 TCP 错误的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.FailedConnectionAttempts">
      <summary>获取失败的传输控制协议 (TCP) 连接尝试数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定失败的 TCP 连接尝试的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.MaximumConnections">
      <summary>获取支持的传输控制协议 (TCP) 连接的最大数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定可支持的 TCP 连接的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.MaximumTransmissionTimeout">
      <summary>获取传输控制协议 (TCP) 段的最大重新传输超时值。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定 TCP 实现允许的重新传输超时值的最大毫秒数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.MinimumTransmissionTimeout">
      <summary>获取传输控制协议 (TCP) 段的最小重新传输超时值。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定 TCP 实现允许的重新传输超时值的最小毫秒数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.ResetConnections">
      <summary>获取传输控制协议 (TCP) 连接收到的 RST 数据包数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定重置 TCP 连接的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.ResetsSent">
      <summary>获取发送时设置了重置标志的传输控制协议 (TCP) 段数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定发送时设置了重置标志的 TCP 段的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.SegmentsReceived">
      <summary>获取收到的传输控制协议 (TCP) 段数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定收到的 TCP 段的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.SegmentsResent">
      <summary>获取重新发送的传输控制协议 (TCP) 段数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定重新传输的 TCP 段的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.SegmentsSent">
      <summary>获取发送的传输控制协议 (TCP) 段数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定发送的 TCP 段的总数。</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.UdpStatistics">
      <summary>提供用户数据报协议 (UDP) 统计数据。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.UdpStatistics.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.UdpStatistics" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Net.NetworkInformation.UdpStatistics.DatagramsReceived">
      <summary>获取已接收的用户数据报协议 (UDP) 数据报的数量。</summary>
      <returns>指定已发送到 UDP 用户的数据报总数的 <see cref="T:System.Int64" /> 值。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.UdpStatistics.DatagramsSent">
      <summary>获取已发送的用户数据报协议 (UDP) 数据报的数量。</summary>
      <returns>指定已发送的数据报总数的 <see cref="T:System.Int64" /> 值。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.UdpStatistics.IncomingDatagramsDiscarded">
      <summary>获取已收到但因端口错误而丢弃的用户数据报协议 (UDP) 数据报的数量。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定接收到的但由于目标端口上没有侦听应用程序而被丢弃的 UDP 数据报的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.UdpStatistics.IncomingDatagramsWithErrors">
      <summary>获取已收到但因错误端口信息以外的错误而丢弃的用户数据报协议 (UDP) 数据报的数量。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，指定接收到的但由于目标端口上缺少应用程序以外的其他原因而无法传递的 UDP 数据报的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.UdpStatistics.UdpListeners">
      <summary>获取侦听用户数据报协议 (UDP) 数据报的本地终结点的数量。</summary>
      <returns>指定正在侦听 UDP 数据报的套接字总数的 <see cref="T:System.Int64" /> 值。</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.UnicastIPAddressInformation">
      <summary>提供有关网络接口的单播地址的信息。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.UnicastIPAddressInformation.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Net.NetworkInformation.UnicastIPAddressInformation.AddressPreferredLifetime">
      <summary>获取此地址作为首选地址的剩余秒数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，它指定此地址保持首选的剩余秒数。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此属性在运行早于 Windows XP 的操作系统的计算机上无效。 </exception>
    </member>
    <member name="P:System.Net.NetworkInformation.UnicastIPAddressInformation.AddressValidLifetime">
      <summary>获取此地址保持有效的剩余秒数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，它指定此地址保持已分配的剩余秒数。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此属性在运行早于 Windows XP 的操作系统的计算机上无效。 </exception>
    </member>
    <member name="P:System.Net.NetworkInformation.UnicastIPAddressInformation.DhcpLeaseLifetime">
      <summary>指定此 IP 地址的动态主机配置协议 (DHCP) 租约的剩余时间量。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，包含计算机在必须释放 <see cref="T:System.Net.IPAddress" /> 实例之前剩余的秒数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.UnicastIPAddressInformation.DuplicateAddressDetectionState">
      <summary>获取一个值，该值指示重复地址检测算法的状态。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.DuplicateAddressDetectionState" /> 值之一，指示在确定此 IP 地址的唯一性的过程中，该算法的进度。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此属性在运行早于 Windows XP 的操作系统的计算机上无效。 </exception>
    </member>
    <member name="P:System.Net.NetworkInformation.UnicastIPAddressInformation.IPv4Mask">
      <summary>获取 IPv4 掩码。</summary>
      <returns>包含 IPv4 掩码的 <see cref="T:System.Net.IPAddress" /> 对象。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.UnicastIPAddressInformation.PrefixOrigin">
      <summary>获取一个值，该值标识单播 Internet 协议 (IP) 地址前缀的源。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.PrefixOrigin" /> 值之一，标识前缀信息是如何获取的。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此属性在运行早于 Windows XP 的操作系统的计算机上无效。 </exception>
    </member>
    <member name="P:System.Net.NetworkInformation.UnicastIPAddressInformation.SuffixOrigin">
      <summary>获取一个值，该值标识单播 Internet 协议 (IP) 地址后缀的源。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.SuffixOrigin" /> 值之一，标识后缀信息是如何获取的。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此属性在运行早于 Windows XP 的操作系统的计算机上无效。 </exception>
    </member>
    <member name="T:System.Net.NetworkInformation.UnicastIPAddressInformationCollection">
      <summary>存储一组 <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation" /> 类型。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformationCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.Add(System.Net.NetworkInformation.UnicastIPAddressInformation)">
      <summary>由于该集合不支持此操作，因此引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="address">要添加到集合中的对象。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.Clear">
      <summary>由于该集合不支持此操作，因此引发 <see cref="T:System.NotSupportedException" />。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.Contains(System.Net.NetworkInformation.UnicastIPAddressInformation)">
      <summary>检查该集合是否包含指定的 <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation" /> 对象。</summary>
      <returns>
            如果该集合中存在 <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation" /> 对象，则为 true；否则为 false。</returns>
      <param name="address">要在该集合中搜索的 <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation" /> 对象。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.CopyTo(System.Net.NetworkInformation.UnicastIPAddressInformation[],System.Int32)">
      <summary>将该集合中的元素复制到类型为 <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation" /> 的一维数组中。</summary>
      <param name="array">接收该集合副本的一维数组。</param>
      <param name="offset">
        <paramref name="array" /> 中从零开始的索引，在此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 -<paramref name="offset" /> 等于或大于 <paramref name="array" /> 的长度。- 或 -此 <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformationCollection" /> 中的元素数大于从 <paramref name="offset" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</exception>
      <exception cref="T:System.InvalidCastException">该 <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformationCollection" /> 中的元素不能自动被强制转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.Count">
      <summary>获取该集合中 <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation" /> 类型的数目。</summary>
      <returns>
        <see cref="T:System.Int32" /> 值，该值包含该集合中 <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation" /> 类型的数目。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.GetEnumerator">
      <summary>返回一个可用于循环访问此集合的对象。</summary>
      <returns>实现 <see cref="T:System.Collections.IEnumerator" /> 接口并提供对此集合中 <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation" /> 类型的访问的对象。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.IsReadOnly">
      <summary>获取一个值，该值指示对该集合的访问是否为只读。</summary>
      <returns>
            在所有情况下均为 true。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.Item(System.Int32)">
      <summary>获取集合中指定索引位置处的 <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation" /> 实例。</summary>
      <returns>指定索引位置的 <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation" />。</returns>
      <param name="index">元素的索引（索引从零开始）。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.Remove(System.Net.NetworkInformation.UnicastIPAddressInformation)">
      <summary>引发 <see cref="T:System.NotSupportedException" />，因为该集合是只读的，不能移除其中的元素。</summary>
      <returns>总是引发 <see cref="T:System.NotSupportedException" />。</returns>
      <param name="address">要移除的对象。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个可用于循环访问此集合的对象。</summary>
      <returns>实现 <see cref="T:System.Collections.IEnumerator" /> 接口并提供对此集合中 <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation" /> 类型的访问的对象。</returns>
    </member>
    <member name="T:System.Net.Security.AuthenticatedStream">
      <summary>提供通过流传递凭据的方法，以及为客户端/服务器应用程序请求或执行身份验证的方法。</summary>
    </member>
    <member name="M:System.Net.Security.AuthenticatedStream.#ctor(System.IO.Stream,System.Boolean)">
      <summary>初始化 <see cref="T:System.Net.Security.AuthenticatedStream" /> 类的新实例。 </summary>
      <param name="innerStream">
        <see cref="T:System.IO.Stream" /> 对象，<see cref="T:System.Net.Security.AuthenticatedStream" /> 使用此对象发送和接收数据。</param>
      <param name="leaveInnerStreamOpen">
        <see cref="T:System.Boolean" />，指示关闭此 <see cref="T:System.Net.Security.AuthenticatedStream" /> 对象时是否同时关闭 <paramref name="innerStream" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="innerStream" /> 为 null。- 或 -<paramref name="innerStream" /> 等于 <see cref="F:System.IO.Stream.Null" />。</exception>
    </member>
    <member name="M:System.Net.Security.AuthenticatedStream.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Net.Security.AuthenticatedStream" /> 占用的非托管资源，还可以另外再释放托管资源。 </summary>
      <param name="disposing">
为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。 </param>
    </member>
    <member name="P:System.Net.Security.AuthenticatedStream.InnerStream">
      <summary>获取此 <see cref="T:System.Net.Security.AuthenticatedStream" /> 用来发送和接收数据的流。</summary>
      <returns>一个 <see cref="T:System.IO.Stream" /> 对象。</returns>
    </member>
    <member name="P:System.Net.Security.AuthenticatedStream.IsAuthenticated">
      <summary>获取一个 <see cref="T:System.Boolean" /> 值，该值指示身份验证是否成功。</summary>
      <returns>
如果身份验证成功，则为 true；否则为 false。 </returns>
    </member>
    <member name="P:System.Net.Security.AuthenticatedStream.IsEncrypted">
      <summary>获取一个 <see cref="T:System.Boolean" /> 值，该值指示使用此 <see cref="T:System.Net.Security.AuthenticatedStream" /> 发送的数据是否加密。</summary>
      <returns>
如果在通过网络传输数据前将其加密，并在数据到达远程终结点后将其解密，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.Security.AuthenticatedStream.IsMutuallyAuthenticated">
      <summary>获取一个 <see cref="T:System.Boolean" /> 值，该值指示服务器和客户端是否均已进行身份验证。</summary>
      <returns>
如果客户端和服务器都已经过身份验证，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.Security.AuthenticatedStream.IsServer">
      <summary>获取一个 <see cref="T:System.Boolean" /> 值，该值指示连接的本地端是否已作为服务器经过了身份验证。</summary>
      <returns>
如果本地终结点作为经过身份验证的客户端/服务器连接的服务器端进行了身份验证，则为 true；如果本地终结点作为客户端进行了身份验证，则为 false。</returns>
    </member>
    <member name="P:System.Net.Security.AuthenticatedStream.IsSigned">
      <summary>获取一个 <see cref="T:System.Boolean" /> 值，该值指示使用此流发送的数据是否进行签名。</summary>
      <returns>
如果在传输数据前对其进行签名，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen">
      <summary>获取此 <see cref="T:System.Net.Security.AuthenticatedStream" /> 用来发送和接收数据的流是否保持打开。</summary>
      <returns>
如果内部流一直保持打开，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Net.Security.AuthenticationLevel">
      <summary>指定使用 <see cref="T:System.Net.WebRequest" /> 类和派生类请求资源时，客户端对身份验证和模拟的要求。</summary>
    </member>
    <member name="F:System.Net.Security.AuthenticationLevel.None">
      <summary>不要求对客户端和服务器进行身份验证。</summary>
    </member>
    <member name="F:System.Net.Security.AuthenticationLevel.MutualAuthRequested">
      <summary>应对客户端和服务器进行身份验证。如果未对服务器进行身份验证，请求不会失败。若要确定是否已进行相互身份验证，请检查 <see cref="P:System.Net.WebResponse.IsMutuallyAuthenticated" /> 属性的值。</summary>
    </member>
    <member name="F:System.Net.Security.AuthenticationLevel.MutualAuthRequired">
      <summary>应对客户端和服务器进行身份验证。如果服务器未进行身份验证，您的应用程序将收到一个 <see cref="T:System.IO.IOException" />，它具有一个指示相互身份验证已失败的 <see cref="T:System.Net.ProtocolViolationException" /> 内部异常</summary>
    </member>
    <member name="T:System.Net.Security.LocalCertificateSelectionCallback">
      <summary>选择用于身份验证的本地安全套接字层 (SSL) 证书。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 用于建立 SSL 连接。</returns>
      <param name="sender">一个对象，它包含此验证的状态信息。</param>
      <param name="targetHost">客户端指定的主机服务器。</param>
      <param name="localCertificates">
        <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 包含本地证书。</param>
      <param name="remoteCertificate">用于对远程方进行身份验证的证书。</param>
      <param name="acceptableIssuers">远程方可接受的证书颁发者的 <see cref="T:System.String" /> 数组。</param>
    </member>
    <member name="T:System.Net.Security.NegotiateStream">
      <summary>提供一个使用协商安全协议的流，以便对客户端/服务器通信中的客户端及服务器（可选）进行身份验证。</summary>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)">
      <summary>使用指定的 <see cref="T:System.IO.Stream" /> 初始化 <see cref="T:System.Net.Security.NegotiateStream" /> 类的新实例。</summary>
      <param name="innerStream">一个 <see cref="T:System.IO.Stream" /> 对象，<see cref="T:System.Net.Security.NegotiateStream" /> 使用此对象发送和接收数据。</param>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)">
      <summary>使用指定的 <see cref="T:System.IO.Stream" /> 和流封闭行为初始化 <see cref="T:System.Net.Security.NegotiateStream" /> 类的新实例。</summary>
      <param name="innerStream">一个 <see cref="T:System.IO.Stream" /> 对象，<see cref="T:System.Net.Security.NegotiateStream" /> 使用此对象发送和接收数据。</param>
      <param name="leaveInnerStreamOpen">
                如果为 true，表示关闭此 <see cref="T:System.Net.Security.NegotiateStream" /> 不影响 <paramref name="innerstream" />；若为 false，则表示关闭此 <see cref="T:System.Net.Security.NegotiateStream" /> 也会同时关闭 <paramref name="innerStream" />。有关更多信息，请参见备注部分。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="innerStream" /> 为 null。- 或 -<paramref name="innerStream" /> 等于 <see cref="F:System.IO.Stream.Null" />。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsClient">
      <summary>客户端调用此方法，以便对客户端/服务器连接中的客户端及服务器（可选）进行身份验证。</summary>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。您可以使用此对象尝试重新进行身份验证。</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。您可以使用此对象尝试重新进行身份验证。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">已进行了身份验证。- 或 -此流先前被用作服务器尝试进行身份验证。您不能将该流作为客户端尝试重新进行身份验证。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)">
      <summary>客户端调用此方法，以便对客户端/服务器连接中的客户端及服务器（可选）进行身份验证。身份验证过程使用指定的客户端凭据。</summary>
      <param name="credential">用于确定客户端身份的 <see cref="T:System.Net.NetworkCredential" />。</param>
      <param name="targetName">唯一标识要进行身份验证的服务器的服务主体名称 (SPN)。</param>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。您可以使用此对象尝试重新进行身份验证。</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。您可以使用此对象尝试重新进行身份验证。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">已进行了身份验证。- 或 -此流先前被用作服务器尝试进行身份验证。您不能将该流作为客户端尝试重新进行身份验证。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetName" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)">
      <summary>客户端调用此方法，以便对客户端/服务器连接中的客户端及服务器（可选）进行身份验证。身份验证过程使用指定的凭据和身份验证选项。</summary>
      <param name="credential">用于确定客户端身份的 <see cref="T:System.Net.NetworkCredential" />。</param>
      <param name="targetName">唯一标识要进行身份验证的服务器的服务主体名称 (SPN)。</param>
      <param name="requiredProtectionLevel">
        <see cref="T:System.Net.Security.ProtectionLevel" /> 值之一，指示流的安全服务。</param>
      <param name="allowedImpersonationLevel">
        <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值之一，指示服务器使用客户端凭据访问资源的方式。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="allowedImpersonationLevel" /> 不是有效值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetName" /> 为 null。</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。您可以使用此对象尝试重新进行身份验证。</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。您可以使用此对象尝试重新进行身份验证。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">已进行了身份验证。- 或 -此流先前被用作服务器尝试进行身份验证。您不能将该流作为客户端尝试重新进行身份验证。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsServer">
      <summary>服务器调用此方法，以便对客户端/服务器连接中的客户端及服务器（可选）进行身份验证。</summary>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。您可以使用此对象尝试重新进行身份验证。</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。您可以使用此对象尝试重新进行身份验证。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.NotSupportedException">不支持 Windows 95 和 Windows 98。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)">
      <summary>服务器调用此方法，以便对客户端/服务器连接中的客户端及服务器（可选）进行身份验证。身份验证过程使用指定的服务器凭据和身份验证选项。</summary>
      <param name="credential">用于确定服务器身份的 <see cref="T:System.Net.NetworkCredential" />。</param>
      <param name="requiredProtectionLevel">
        <see cref="T:System.Net.Security.ProtectionLevel" /> 值之一，指示流的安全服务。</param>
      <param name="requiredImpersonationLevel">
        <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值之一，指示服务器使用客户端凭据访问资源的方式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="credential" /> 为 null。</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。您可以使用此对象尝试重新进行身份验证。</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。您可以使用此对象尝试重新进行身份验证。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">已进行了身份验证。- 或 -此流先前被用作客户端尝试进行身份验证。您不能将该流作为服务器尝试重新进行身份验证。</exception>
      <exception cref="T:System.NotSupportedException">不支持 Windows 95 和 Windows 98。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="requiredImpersonationLevel" /> 必须为 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> 或 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)">
      <summary>客户端调用此方法开始一个异步操作，以对客户端/服务器连接中的客户端及服务器（可选）进行身份验证。此方法不会进入阻止状态。</summary>
      <returns>一个指示异步操作状态的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
      <param name="asyncCallback">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用身份验证完成时要调用的方法。</param>
      <param name="asyncState">一个用户定义对象，其中包含该操作的相关信息。操作完成时，此对象传递给了 <paramref name="asyncCallback" /> 委托。</param>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。您可以使用此对象尝试重新进行身份验证。</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。您可以使用此对象尝试重新进行身份验证。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">已进行了身份验证。- 或 -此流先前被用作服务器尝试进行身份验证。您不能将该流作为客户端尝试重新进行身份验证。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)">
      <summary>客户端调用此方法开始一个异步操作，以对客户端/服务器连接中的客户端及服务器（可选）进行身份验证。身份验证过程使用指定的凭据。此方法不会进入阻止状态。</summary>
      <returns>一个指示异步操作状态的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
      <param name="credential">用于确定客户端身份的 <see cref="T:System.Net.NetworkCredential" />。</param>
      <param name="targetName">唯一标识要进行身份验证的服务器的服务主体名称 (SPN)。</param>
      <param name="asyncCallback">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用身份验证完成时要调用的方法。</param>
      <param name="asyncState">一个用户定义对象，其中包含写操作的相关信息。操作完成时，此对象传递给了 <paramref name="asyncCallback" /> 委托。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="credential" /> 为 null。- 或 -<paramref name="targetName" /> 为 null。</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。您可以使用此对象尝试重新进行身份验证。</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。您可以使用此对象尝试重新进行身份验证。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">已进行了身份验证。- 或 -此流先前被用作服务器尝试进行身份验证。您不能将该流作为客户端尝试重新进行身份验证。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)">
      <summary>客户端调用此方法开始一个异步操作，以对客户端/服务器连接中的客户端及服务器（可选）进行身份验证。身份验证过程使用指定的凭据和身份验证选项。此方法不会进入阻止状态。</summary>
      <returns>一个指示异步操作状态的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
      <param name="credential">用于确定客户端身份的 <see cref="T:System.Net.NetworkCredential" />。</param>
      <param name="targetName">唯一标识要进行身份验证的服务器的服务主体名称 (SPN)。</param>
      <param name="requiredProtectionLevel">
        <see cref="T:System.Net.Security.ProtectionLevel" /> 值之一，指示流的安全服务。</param>
      <param name="allowedImpersonationLevel">
        <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值之一，指示服务器使用客户端凭据访问资源的方式。</param>
      <param name="asyncCallback">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用身份验证完成时要调用的方法。</param>
      <param name="asyncState">一个用户定义对象，其中包含写操作的相关信息。操作完成时，此对象传递给了 <paramref name="asyncCallback" /> 委托。</param>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)">
      <summary>服务器调用此方法开始一个异步操作，以对客户端/服务器连接中的客户端及服务器（可选）进行身份验证。此方法不会进入阻止状态。</summary>
      <returns>一个指示异步操作状态的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
      <param name="asyncCallback">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用身份验证完成时要调用的方法。</param>
      <param name="asyncState">一个用户定义对象，其中包含该操作的相关信息。操作完成时，此对象传递给了 <paramref name="asyncCallback" /> 委托。</param>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。您可以使用此对象尝试重新进行身份验证。</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。您可以使用此对象尝试重新进行身份验证。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.NotSupportedException">不支持 Windows 95 和 Windows 98。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)">
      <summary>服务器调用此方法开始一个异步操作，以对客户端/服务器连接中的客户端及服务器（可选）进行身份验证。身份验证过程使用指定的服务器凭据和身份验证选项。此方法不会进入阻止状态。</summary>
      <returns>一个指示异步操作状态的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
      <param name="credential">用于确定客户端身份的 <see cref="T:System.Net.NetworkCredential" />。</param>
      <param name="requiredProtectionLevel">
        <see cref="T:System.Net.Security.ProtectionLevel" /> 值之一，指示流的安全服务。</param>
      <param name="requiredImpersonationLevel">
        <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值之一，指示服务器使用客户端凭据访问资源的方式。</param>
      <param name="asyncCallback">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用身份验证完成时要调用的方法。</param>
      <param name="asyncState">一个用户定义对象，其中包含该操作的相关信息。操作完成时，此对象传递给了 <paramref name="asyncCallback" /> 委托。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="credential" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="requiredImpersonationLevel" /> 必须为 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> 或 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />。</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。您可以使用此对象尝试重新进行身份验证。</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。您可以使用此对象尝试重新进行身份验证。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">已进行了身份验证。- 或 -此流先前被用作客户端尝试进行身份验证。您不能将该流作为服务器尝试重新进行身份验证。</exception>
      <exception cref="T:System.NotSupportedException">不支持 Windows 95 和 Windows 98。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始一个异步读操作，此操作读取流中的数据并将其存储在指定的数组中。</summary>
      <returns>一个指示异步操作状态的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
      <param name="buffer">一个 <see cref="T:System.Byte" /> 数组，该数组接收从流中读取的字节。</param>
      <param name="offset">
        <paramref name="buffer" /> 中从零开始的位置，从此处开始存储从此流中读取的数据。</param>
      <param name="count">要从流中读取的最大字节数。</param>
      <param name="asyncCallback">
        <see cref="T:System.AsyncCallback" /> 委托，该委托引用读操作完成时要调用的方法。</param>
      <param name="asyncState">用户定义的对象，其中包含读操作的相关信息。操作完成时，此对象传递给了 <paramref name="asyncCallback" /> 委托。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffer" /> 小于 0。- 或 -<paramref name="offset" /> 大于 <paramref name="buffer" /> 的长度。- 或 -<paramref name="offset" /> 加上 <paramref name="count" /> 后大于 <paramref name="buffer" /> 的长度。</exception>
      <exception cref="T:System.IO.IOException">读操作失败。- 或 -使用了加密服务，但无法对数据进行解密。</exception>
      <exception cref="T:System.NotSupportedException">已存在一个正在执行的读操作。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">未进行身份验证。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始一个异步写操作，此操作将指定缓冲区中的 <see cref="T:System.Byte" /> 写入到流中。</summary>
      <returns>一个指示异步操作状态的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
      <param name="buffer">一个 <see cref="T:System.Byte" /> 数组，该数组提供要写入流中的字节。</param>
      <param name="offset">
        <paramref name=" buffer" /> 中从零开始的位置，从此处开始读取要写入流中的字节。</param>
      <param name="count">
        <see cref="T:System.Int32" /> 值，该值指定要从 <paramref name="buffer" /> 中读取的字节数。</param>
      <param name="asyncCallback">
        <see cref="T:System.AsyncCallback" /> 委托，它引用写操作完成时要调用的方法。</param>
      <param name="asyncState">一个用户定义对象，其中包含写操作的相关信息。操作完成时，此对象传递给了 <paramref name="asyncCallback" /> 委托。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset is less than 0" />.- 或 -<paramref name="offset" /> 大于 <paramref name="buffer" /> 的长度。- 或 -<paramref name="offset" /> 加上计数大于 <paramref name="buffer" /> 的长度。</exception>
      <exception cref="T:System.IO.IOException">写操作失败。- 或 -正在使用加密，但该数据无法进行加密。</exception>
      <exception cref="T:System.NotSupportedException">已存在一个正在执行的写操作。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">未进行身份验证。</exception>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.CanRead">
      <summary>获取一个 <see cref="T:System.Boolean" /> 值，该值指示基础流是否可读。</summary>
      <returns>
            如果已进行身份验证且基础流为可读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.CanSeek">
      <summary>获取一个 <see cref="T:System.Boolean" /> 值，该值指示基础流是否可查找。</summary>
      <returns>此属性总是返回 false。</returns>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.CanTimeout">
      <summary>获取一个 <see cref="T:System.Boolean" /> 值，该值指示基础流是否支持超时。</summary>
      <returns>
            如果基础流支持超时，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.CanWrite">
      <summary>获取一个 <see cref="T:System.Boolean" /> 值，该值指示基础流是否可写。</summary>
      <returns>
            如果已进行身份验证且基础流可写，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Net.Security.NegotiateStream" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">
                如果为 true，则释放托管资源和非托管资源；如果为 false，则仅释放非托管资源。</param>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)">
      <summary>结束通过调用 <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" /> 而启动的、正处于挂起状态的异步客户端身份验证操作。</summary>
      <param name="asyncResult">调用 <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" /> 后返回的 <see cref="T:System.IAsyncResult" /> 实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 并不是通过对 <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" /> 的调用创建的。</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。您可以使用此对象尝试重新进行身份验证。</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。您可以使用此对象尝试重新进行身份验证。</exception>
      <exception cref="T:System.InvalidOperationException">没有处于挂起状态的客户端身份验证要完成。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)">
      <summary>结束通过调用 <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" /> 而启动的、正处于挂起状态的异步客户端身份验证操作。</summary>
      <param name="asyncResult">调用 <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" /> 后返回的 <see cref="T:System.IAsyncResult" /> 实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 并不是通过对 <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" /> 的调用创建的。</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。您可以使用此对象尝试重新进行身份验证。</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。您可以使用此对象尝试重新进行身份验证。</exception>
      <exception cref="T:System.InvalidOperationException">没有处于挂起状态的身份验证要完成。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)">
      <summary>结束通过调用 <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 而启动的异步读操作。</summary>
      <returns>
        <see cref="T:System.Int32" /> 值，该值指定从基础流中读取的字节数。</returns>
      <param name="asyncResult">调用 <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 后返回的 <see cref="T:System.IAsyncResult" /> 实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">asyncResult 并不是通过调用 <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 而创建的。</exception>
      <exception cref="T:System.InvalidOperationException">没有处于挂起状态的读操作要完成。</exception>
      <exception cref="T:System.IO.IOException">读操作失败。</exception>
      <exception cref="T:System.InvalidOperationException">未进行身份验证。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)">
      <summary>结束通过调用 <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 而启动的异步写操作。</summary>
      <param name="asyncResult">调用 <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 后返回的 <see cref="T:System.IAsyncResult" /> 实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">asyncResult 并不是通过调用 <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 而创建的。</exception>
      <exception cref="T:System.InvalidOperationException">没有处于挂起状态的写操作要完成。</exception>
      <exception cref="T:System.IO.IOException">写操作失败。</exception>
      <exception cref="T:System.InvalidOperationException">未进行身份验证。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.Flush">
      <summary>导致所有缓冲数据都要写入基础设备。</summary>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.ImpersonationLevel">
      <summary>获取一个值，该值指示服务器使用客户端凭据的方法。</summary>
      <returns>
        <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值之一。</returns>
      <exception cref="T:System.InvalidOperationException">身份验证失败或没有进行身份验证。</exception>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.IsAuthenticated">
      <summary>获取一个 <see cref="T:System.Boolean" /> 值，该值指示身份验证是否成功。</summary>
      <returns>
            如果身份验证成功，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.IsEncrypted">
      <summary>获取一个 <see cref="T:System.Boolean" /> 值，该值指示此 <see cref="T:System.Net.Security.NegotiateStream" /> 是否使用数据加密。</summary>
      <returns>
            如果在通过网络传输数据前将其加密，并在数据到达远程终结点后将其解密，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated">
      <summary>获取一个 <see cref="T:System.Boolean" /> 值，该值指示服务器和客户端是否均已进行身份验证。</summary>
      <returns>
            如果服务器已进行身份验证，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.IsServer">
      <summary>获取一个 <see cref="T:System.Boolean" /> 值，该值指示此 <see cref="T:System.Net.Security.NegotiateStream" /> 使用的连接的本地端是否作为服务器进行了身份验证。</summary>
      <returns>
            如果本地终结点作为经过身份验证的连接的服务器端成功地经过了身份验证，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.IsSigned">
      <summary>获取一个 <see cref="T:System.Boolean" /> 值，该值指示使用此流发送的数据是否进行签名。</summary>
      <returns>
            如果在传输数据前对其进行签名，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.Length">
      <summary>获取基础流的长度。</summary>
      <returns>
        <see cref="T:System.Int64" />，指定基础流的长度。</returns>
      <exception cref="T:System.NotSupportedException">当基础流为 <see cref="T:System.Net.Sockets.NetworkStream" /> 时，不支持获取此属性的值。</exception>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.Position">
      <summary>获取或设置基础流中的当前位置。</summary>
      <returns>
        <see cref="T:System.Int64" />，指定基础流中的当前位置。</returns>
      <exception cref="T:System.NotSupportedException">不支持设置此属性。- 或 -当基础流为 <see cref="T:System.Net.Sockets.NetworkStream" /> 时，不支持获取此属性的值。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>读取此流中的数据并将其存储在指定的数组中。</summary>
      <returns>
        <see cref="T:System.Int32" /> 值，该值指定从基础流中读取的字节数。如果再也没有要读取的数据，将返回 0。</returns>
      <param name="buffer">一个 <see cref="T:System.Byte" /> 数组，该数组接收从流中读取的字节。</param>
      <param name="offset">
        <see cref="T:System.Int32" />，其中包含 <paramref name="buffer" /> 中从零开始的位置，从此处开始存储从流中读取的数据。</param>
      <param name="count">
        <see cref="T:System.Int32" />，包含要从流中读取的最大字节数。</param>
      <exception cref="T:System.IO.IOException">读操作失败。</exception>
      <exception cref="T:System.InvalidOperationException">未进行身份验证。</exception>
      <exception cref="T:System.NotSupportedException">已在进行 <see cref="M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)" /> 操作。</exception>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.ReadTimeout">
      <summary>获取或设置读操作等待数据的时间。</summary>
      <returns>
        <see cref="T:System.Int32" />，指定读操作失败前经过的时间。</returns>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.RemoteIdentity">
      <summary>获取有关共享此已验证身份的流的远程方的身份信息。</summary>
      <returns>
        <see cref="T:System.Security.Principal.IIdentity" /> 对象，介绍远程端点的标识。</returns>
      <exception cref="T:System.InvalidOperationException">身份验证失败或没有进行身份验证。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>总是引发 <see cref="T:System.NotSupportedException" />。</returns>
      <param name="offset">忽略此值。</param>
      <param name="origin">忽略此值。</param>
      <exception cref="T:System.NotSupportedException">在 <see cref="T:System.Net.Security.NegotiateStream" /> 上不支持查找。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.SetLength(System.Int64)">
      <summary>设置基础流的长度。</summary>
      <param name="value">
        <see cref="T:System.Int64" /> 值，该值指定流的长度。</param>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>使用指定的缓冲区和偏移将指定数目的 <see cref="T:System.Byte" /> 写入基础流。</summary>
      <param name="buffer">一个 <see cref="T:System.Byte" /> 数组，该数组提供要写入流中的字节。</param>
      <param name="offset">包含 <paramref name=" buffer" /> 中的从零开始的位置的 <see cref="T:System.Int32" />，将从该位置开始读取要写入到流中的字节。</param>
      <param name="count">
        <see cref="T:System.Int32" />，其中包含要从 <paramref name="buffer" /> 读取的字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset is less than 0" />.- 或 -<paramref name="offset" /> 大于 <paramref name="buffer" /> 的长度。- 或 -<paramref name="offset" /> 加上计数大于 <paramref name="buffer" /> 的长度。</exception>
      <exception cref="T:System.IO.IOException">写操作失败。- 或 -正在使用加密，但该数据无法进行加密。</exception>
      <exception cref="T:System.NotSupportedException">已存在一个正在执行的写操作。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">未进行身份验证。</exception>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.WriteTimeout">
      <summary>获取或设置写操作等待数据的时间。</summary>
      <returns>
        <see cref="T:System.Int32" />，指定写操作失败前经过的时间。</returns>
    </member>
    <member name="T:System.Net.Security.ProtectionLevel">
      <summary>指示为已验证流请求的安全服务。</summary>
    </member>
    <member name="F:System.Net.Security.ProtectionLevel.None">
      <summary>仅身份验证。</summary>
    </member>
    <member name="F:System.Net.Security.ProtectionLevel.Sign">
      <summary>对数据签名可帮助确保所传输数据的完整性。</summary>
    </member>
    <member name="F:System.Net.Security.ProtectionLevel.EncryptAndSign">
      <summary>对数据进行加密和签名可帮助确保所传输数据的保密性和完整性。</summary>
    </member>
    <member name="T:System.Net.Security.RemoteCertificateValidationCallback">
      <summary>验证用于身份验证的远程安全套接字层 (SSL) 证书。</summary>
      <returns>
        <see cref="T:System.Boolean" /> 值，它确定是否接受指定证书进行身份验证。</returns>
      <param name="sender">一个对象，它包含此验证的状态信息。</param>
      <param name="certificate">用于对远程方进行身份验证的证书。</param>
      <param name="chain">与远程证书关联的证书颁发机构链。</param>
      <param name="sslPolicyErrors">与远程证书关联的一个或多个错误。</param>
    </member>
    <member name="T:System.Net.Security.SslPolicyErrors">
      <summary>枚举安全套接字层 (SSL) 策略错误。</summary>
    </member>
    <member name="F:System.Net.Security.SslPolicyErrors.None">
      <summary>无 SSL 策略错误。</summary>
    </member>
    <member name="F:System.Net.Security.SslPolicyErrors.RemoteCertificateNotAvailable">
      <summary>证书不可用。</summary>
    </member>
    <member name="F:System.Net.Security.SslPolicyErrors.RemoteCertificateNameMismatch">
      <summary>证书名称不匹配。</summary>
    </member>
    <member name="F:System.Net.Security.SslPolicyErrors.RemoteCertificateChainErrors">
      <summary>
        <see cref="P:System.Security.Cryptography.X509Certificates.X509Chain.ChainStatus" /> 已返回非空数组。</summary>
    </member>
    <member name="T:System.Net.Security.SslStream">
      <summary>
                    提供一个用于客户端-服务器通信的流，此流使用安全套接字层 (SSL) 安全协议对服务器及客户端（可选）进行身份验证。
                </summary>
    </member>
    <member name="M:System.Net.Security.SslStream.#ctor(System.IO.Stream)">
      <summary>
                    使用指定的 <see cref="T:System.IO.Stream" /> 初始化 <see cref="T:System.Net.Security.SslStream" /> 类的新实例。
                </summary>
      <param name="innerStream">
        <see cref="T:System.IO.Stream" /> 对象，<see cref="T:System.Net.Security.SslStream" /> 使用此对象发送和接收数据。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="innerStream" /> 不可读。
                
                    - 或 -
                <paramref name="innerStream" /> 不可写。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="innerStream" /> 为 null。
                
                    - 或 -
                <paramref name="innerStream" /> 等于 <see cref="F:System.IO.Stream.Null" />。
                </exception>
    </member>
    <member name="M:System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean)">
      <summary>
                    使用指定的 <see cref="T:System.IO.Stream" /> 和流封闭行为初始化 <see cref="T:System.Net.Security.SslStream" /> 类的新实例。
                </summary>
      <param name="innerStream">
                    使用指定的 <see cref="T:System.IO.Stream" /> 和流封闭行为初始化 <see cref="T:System.Net.Security.SslStream" /> 类的新实例。
                </param>
      <param name="leaveInnerStreamOpen">
                    使用指定的 <see cref="T:System.IO.Stream" /> 和流封闭行为初始化 <see cref="T:System.Net.Security.SslStream" /> 类的新实例。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="innerStream" /> 不可读。
                
                    - 或 -
                <paramref name="innerStream" /> 不可写。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="innerStream" /> 为 null。
                
                    - 或 -
                <paramref name="innerStream" /> 等于 <see cref="F:System.IO.Stream.Null" />。
                </exception>
    </member>
    <member name="M:System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)">
      <summary>
                    使用指定的 <see cref="T:System.IO.Stream" />、流关闭行为和证书验证委托初始化 <see cref="T:System.Net.Security.SslStream" /> 类的新实例。
                </summary>
      <param name="innerStream">
                    使用指定的 <see cref="T:System.IO.Stream" /> 和流封闭行为初始化 <see cref="T:System.Net.Security.SslStream" /> 类的新实例。
                </param>
      <param name="leaveInnerStreamOpen">
                    使用指定的 <see cref="T:System.IO.Stream" /> 和流封闭行为初始化 <see cref="T:System.Net.Security.SslStream" /> 类的新实例。
                </param>
      <param name="userCertificateValidationCallback">
        <see cref="T:System.Net.Security.RemoteCertificateValidationCallback" /> 委托，负责验证远程方提供的证书。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="innerStream" /> 不可读。
                
                    - 或 -
                <paramref name="innerStream" /> 不可写。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="innerStream" /> 为 null。
                
                    - 或 -
                <paramref name="innerStream" /> 等于 <see cref="F:System.IO.Stream.Null" />。
                </exception>
    </member>
    <member name="M:System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback)">
      <summary>
                    使用指定的 <see cref="T:System.IO.Stream" />、流关闭行为、证书验证委托和证书选择委托初始化 <see cref="T:System.Net.Security.SslStream" /> 类的新实例。
                </summary>
      <param name="innerStream">
                    使用指定的 <see cref="T:System.IO.Stream" /> 和流封闭行为初始化 <see cref="T:System.Net.Security.SslStream" /> 类的新实例。
                </param>
      <param name="leaveInnerStreamOpen">
                    使用指定的 <see cref="T:System.IO.Stream" /> 和流封闭行为初始化 <see cref="T:System.Net.Security.SslStream" /> 类的新实例。
                </param>
      <param name="userCertificateValidationCallback">
        <see cref="T:System.Net.Security.RemoteCertificateValidationCallback" /> 委托，负责验证远程方提供的证书。
                </param>
      <param name="userCertificateSelectionCallback">
        <see cref="T:System.Net.Security.LocalCertificateSelectionCallback" /> 委托，负责选择用于身份验证的证书。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="innerStream" /> 不可读。
                
                    - 或 -
                <paramref name="innerStream" /> 不可写。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="innerStream" /> 为 null。
                
                    - 或 -
                <paramref name="innerStream" /> 等于 <see cref="F:System.IO.Stream.Null" />。
                </exception>
    </member>
    <member name="M:System.Net.Security.SslStream.AuthenticateAsClient(System.String)">
      <summary>
                    客户端调用此方法，以便对客户端-服务器连接中的服务器及客户端（可选）进行身份验证。
                </summary>
      <param name="targetHost">
                    共享此 <see cref="T:System.Net.Security.SslStream" /> 的服务器的名称。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetHost" /> 为 null。
                </exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">
身份验证失败，此对象处于不可用状态。
                </exception>
      <exception cref="T:System.InvalidOperationException">
已进行了身份验证。
                
                    - 或 -
                
                    此前已尝试过使用此 <see cref="T:System.Net.Security.SslStream" /> 进行服务器身份验证。
                
                    - 或 -
                
身份验证已在进行。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
此对象已关闭。
                </exception>
    </member>
    <member name="M:System.Net.Security.SslStream.AuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)">
      <summary>
                    客户端调用此方法，以便对客户端-服务器连接中的服务器及客户端（可选）进行身份验证。身份验证过程使用指定的证书集合和 SSL 协议。
                </summary>
      <param name="targetHost">
                    将共享此 <see cref="T:System.Net.Security.SslStream" /> 的服务器的名称。
                </param>
      <param name="clientCertificates">
                    包含客户端证书的 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />。
                </param>
      <param name="enabledSslProtocols">
                    代表用于身份验证的协议的 <see cref="T:System.Security.Authentication.SslProtocols" /> 值。
                </param>
      <param name="checkCertificateRevocation">
                    一个 <see cref="T:System.Boolean" /> 值，指定在身份验证过程中是否检查证书吊销列表。
                </param>
    </member>
    <member name="M:System.Net.Security.SslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>
                    服务器调用此方法，以便使用指定的证书对客户端-服务器连接中的服务器及客户端（可选）进行身份验证。
                </summary>
      <param name="serverCertificate">
                    用于对服务器进行身份验证的证书。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serverCertificate" /> 为 null。
                </exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">
身份验证失败，此对象处于不可用状态。
                </exception>
      <exception cref="T:System.InvalidOperationException">
已进行了身份验证。
                
                    - 或 -
                
                    此前已尝试过使用此 <see cref="T:System.Net.Security.SslStream" /> 进行客户端身份验证。
                
                    - 或 -
                
身份验证已在进行。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
此对象已关闭。
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                    Windows 95、Windows 98 或 Windows Millennium 不支持 <see cref="Overload:System.Net.Security.SslStream.AuthenticateAsServer" /> 方法。
                </exception>
    </member>
    <member name="M:System.Net.Security.SslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)">
      <summary>
由服务器调用以开始一个异步操作，该操作使用指定的证书、要求和安全协议对服务器和客户端（可选）进行身份验证。
                </summary>
      <param name="serverCertificate">
用于对服务器进行身份验证的 X509Certificate。
                </param>
      <param name="clientCertificateRequired">
                    一个 <see cref="T:System.Boolean" /> 值，指定客户端是否必须为身份验证提供证书。
                </param>
      <param name="enabledSslProtocols">
                    代表用于身份验证的协议的 <see cref="T:System.Security.Authentication.SslProtocols" /> 值。
                </param>
      <param name="checkCertificateRevocation">
                    一个 <see cref="T:System.Boolean" /> 值，指定在身份验证过程中是否检查证书吊销列表。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serverCertificate" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enabledSslProtocols" /> 不是有效的 <see cref="T:System.Security.Authentication.SslProtocols" /> 值。
                </exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">
身份验证失败，此对象处于不可用状态。
                </exception>
      <exception cref="T:System.InvalidOperationException">
已进行了身份验证。
                
                    - 或 -
                
                    此前已尝试过使用此 <see cref="T:System.Net.Security.SslStream" /> 进行客户端身份验证。
                
                    - 或 -
                
身份验证已在进行。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
此对象已关闭。
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                    Windows 95、Windows 98 或 Windows Millennium 不支持 <see cref="Overload:System.Net.Security.SslStream.AuthenticateAsServer" /> 方法。
                </exception>
    </member>
    <member name="M:System.Net.Security.SslStream.BeginAuthenticateAsClient(System.String,System.AsyncCallback,System.Object)">
      <summary>
                    客户端调用此方法，以便开始一个异步操作，对服务器及客户端（可选）进行身份验证。
                </summary>
      <returns>
                    一个指示异步操作状态的 <see cref="T:System.IAsyncResult" /> 对象。
                </returns>
      <param name="targetHost">
                    共享此 <see cref="T:System.Net.Security.SslStream" /> 的服务器的名称。
                </param>
      <param name="asyncCallback">
                    一个 <see cref="T:System.AsyncCallback" /> 委托，它引用身份验证完成时要调用的方法。
                </param>
      <param name="asyncState">
一个用户定义对象，其中包含该操作的相关信息。操作完成时，此对象被传递给 <paramref name="asyncCallback" /> 委托。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetHost" /> 为 null。
                </exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">
身份验证失败，此对象处于不可用状态。
                </exception>
      <exception cref="T:System.InvalidOperationException">
已进行了身份验证。
                
                    - 或 -
                
                    此前已尝试过使用此 <see cref="T:System.Net.Security.SslStream" /> 进行服务器身份验证。
                
                    - 或 -
                
身份验证已在进行。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
此对象已关闭。
                </exception>
    </member>
    <member name="M:System.Net.Security.SslStream.BeginAuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)">
      <summary>
                    客户端调用此方法，以便开始一个异步操作，使用指定的证书和安全协议对服务器及客户端（可选）进行身份验证。
                </summary>
      <returns>
                    一个指示异步操作状态的 <see cref="T:System.IAsyncResult" /> 对象。
                </returns>
      <param name="targetHost">
                    共享此 <see cref="T:System.Net.Security.SslStream" /> 的服务器的名称。
                </param>
      <param name="clientCertificates">
                    包含客户端证书的 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />。
                </param>
      <param name="enabledSslProtocols">
                    代表用于身份验证的协议的 <see cref="T:System.Security.Authentication.SslProtocols" /> 值。
                </param>
      <param name="checkCertificateRevocation">
                    一个 <see cref="T:System.Boolean" /> 值，指定在身份验证过程中是否检查证书吊销列表。
                </param>
      <param name="asyncCallback">
                    一个 <see cref="T:System.AsyncCallback" /> 委托，它引用身份验证完成时要调用的方法。
                </param>
      <param name="asyncState">
一个用户定义对象，其中包含该操作的相关信息。操作完成时，此对象被传递给 <paramref name="asyncCallback" /> 委托。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetHost" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enabledSslProtocols" /> 不是有效的 <see cref="T:System.Security.Authentication.SslProtocols" /> 值。
                </exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">
身份验证失败，此对象处于不可用状态。
                </exception>
      <exception cref="T:System.InvalidOperationException">
已进行了身份验证。
                
                    - 或 -
                
                    此前已尝试过使用此 <see cref="T:System.Net.Security.SslStream" /> 进行服务器身份验证。
                
                    - 或 -
                
身份验证已在进行。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
此对象已关闭。
                </exception>
    </member>
    <member name="M:System.Net.Security.SslStream.BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.AsyncCallback,System.Object)">
      <summary>
                    服务器调用此方法，以便开始一个异步操作，对客户端-服务器连接中的客户端及服务器（可选）进行身份验证。
                </summary>
      <returns>
                    一个指示异步操作状态的 <see cref="T:System.IAsyncResult" /> 对象。
                </returns>
      <param name="serverCertificate">
用于对服务器进行身份验证的 X509Certificate。
                </param>
      <param name="asyncCallback">
                    一个 <see cref="T:System.AsyncCallback" /> 委托，它引用身份验证完成时要调用的方法。
                </param>
      <param name="asyncState">
一个用户定义对象，其中包含该操作的相关信息。操作完成时，此对象被传递给 <paramref name="asyncCallback" /> 委托。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serverCertificate" /> 为 null。
                </exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">
身份验证失败，此对象处于不可用状态。
                </exception>
      <exception cref="T:System.InvalidOperationException">
已进行了身份验证。
                
                    - 或 -
                
                    此前已尝试过使用此 <see cref="T:System.Net.Security.SslStream" /> 进行客户端身份验证。
                
                    - 或 -
                
身份验证已在进行。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
此对象已关闭。
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                    Windows 95、Windows 98 或 Windows Millennium 不支持 <see cref="Overload:System.Net.Security.SslStream.BeginAuthenticateAsServer" /> 方法。
                </exception>
    </member>
    <member name="M:System.Net.Security.SslStream.BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)">
      <summary>
由服务器调用以开始一个异步操作，该操作使用指定的证书、要求和安全协议对服务器和客户端（可选）进行身份验证。
                </summary>
      <returns>
                    一个指示异步操作状态的 <see cref="T:System.IAsyncResult" /> 对象。
                </returns>
      <param name="serverCertificate">
用于对服务器进行身份验证的 X509Certificate。
                </param>
      <param name="clientCertificateRequired">
                    一个 <see cref="T:System.Boolean" /> 值，指定客户端是否必须为身份验证提供证书。
                </param>
      <param name="enabledSslProtocols">
                    代表用于身份验证的协议的 <see cref="T:System.Security.Authentication.SslProtocols" /> 值。
                </param>
      <param name="checkCertificateRevocation">
                    一个 <see cref="T:System.Boolean" /> 值，指定在身份验证过程中是否检查证书吊销列表。
                </param>
      <param name="asyncCallback">
                    一个 <see cref="T:System.AsyncCallback" /> 委托，它引用身份验证完成时要调用的方法。
                </param>
      <param name="asyncState">
一个用户定义对象，其中包含该操作的相关信息。操作完成时，此对象被传递给 <paramref name="asyncCallback" /> 委托。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serverCertificate" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enabledSslProtocols" /> 不是有效的 <see cref="T:System.Security.Authentication.SslProtocols" /> 值。
                </exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">
身份验证失败，此对象处于不可用状态。
                </exception>
      <exception cref="T:System.InvalidOperationException">
已进行了身份验证。
                
                    - 或 -
                
                    此前已尝试过使用此 <see cref="T:System.Net.Security.SslStream" /> 进行服务器身份验证。
                
                    - 或 -
                
身份验证已在进行。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
此对象已关闭。
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                    Windows 95、Windows 98 或 Windows Millennium 不支持 <see cref="Overload:System.Net.Security.SslStream.BeginAuthenticateAsServer" /> 方法。
                </exception>
    </member>
    <member name="M:System.Net.Security.SslStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>
                    开始一个异步读操作，此操作读取流中的数据并将其存储在指定的数组中。
                </summary>
      <returns>
                    一个指示异步操作状态的 <see cref="T:System.IAsyncResult" /> 对象。
                </returns>
      <param name="buffer">
                    一个 <see cref="T:System.Byte" /> 数组，该数组接收从流中读取的字节。
                </param>
      <param name="offset">
        <paramref name="buffer" /> 中从零开始的位置，从此处开始存储从此流中读取的数据。
                </param>
      <param name="count">
                    要从流中读取的最大字节数。
                </param>
      <param name="asyncCallback">
        <see cref="T:System.AsyncCallback" /> 委托，该委托引用读操作完成时要调用的方法。
                </param>
      <param name="asyncState">
                    一个用户定义的对象，其中包含读操作的相关信息。操作完成时，此对象被传递给 <paramref name="asyncCallback" /> 委托。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" />
        <paramref name="&lt;" />
        <paramref name="0" />。
                <paramref name="-or-" /><paramref name="offset" /> 大于 <paramref name="buffer" /> 的长度。
                
                    - 或 -
                <paramref name="offset" /> 与计数之和大于 <paramref name="buffer" /> 的长度。
                </exception>
      <exception cref="T:System.IO.IOException">
读操作失败。
                
                    - 或 -
                
                    使用了加密服务，但无法对数据进行解密。
                </exception>
      <exception cref="T:System.NotSupportedException">
                    已存在一个正在执行的读取操作。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
此对象已关闭。
                </exception>
      <exception cref="T:System.InvalidOperationException">
未进行身份验证。
                </exception>
    </member>
    <member name="M:System.Net.Security.SslStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>
                    开始一个异步写操作，此操作将指定缓冲区中的 <see cref="T:System.Byte" /> 写入到流中。
                </summary>
      <returns>
                    一个指示异步操作状态的 <see cref="T:System.IAsyncResult" /> 对象。
                </returns>
      <param name="buffer">
                    一个 <see cref="T:System.Byte" /> 数组，该数组提供要写入流中的字节。
                </param>
      <param name="offset">
        <paramref name="buffer" /> 中从零开始的位置，从此处开始读取要写入流中的字节。
                </param>
      <param name="count">
        <see cref="T:System.Int32" /> 值，该值指定要从 <paramref name="buffer" /> 中读取的字节数。
                </param>
      <param name="asyncCallback">
        <see cref="T:System.AsyncCallback" /> 委托，它引用写操作完成时要调用的方法。
                </param>
      <param name="asyncState">
                    一个用户定义的对象，其中包含写操作的相关信息。操作完成时，此对象被传递给 <paramref name="asyncCallback" /> 委托。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" />
        <paramref name="&lt;" />
        <paramref name="0" />。
                <paramref name="-or-" /><paramref name="offset" /> 大于 <paramref name="buffer" /> 的长度。
                
                    - 或 -
                <paramref name="offset" /> 与计数之和大于 <paramref name="buffer" /> 的长度。
                </exception>
      <exception cref="T:System.IO.IOException">
写操作失败。
                </exception>
      <exception cref="T:System.NotSupportedException">
已存在一个正在执行的写操作。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
此对象已关闭。
                </exception>
      <exception cref="T:System.InvalidOperationException">
未进行身份验证。
                </exception>
    </member>
    <member name="P:System.Net.Security.SslStream.CanRead">
      <summary>
                    获取一个 <see cref="T:System.Boolean" /> 值，该值指示基础流是否可读。
                </summary>
      <returns>
                    如果已进行身份验证且基础流可读，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Net.Security.SslStream.CanSeek">
      <summary>
                    获取一个 <see cref="T:System.Boolean" /> 值，该值指示基础流是否可查找。
                </summary>
      <returns>
                    该属性总是返回 false。
                </returns>
    </member>
    <member name="P:System.Net.Security.SslStream.CanTimeout">
      <summary>
                    获取一个 <see cref="T:System.Boolean" /> 值，该值指示基础流是否支持超时。
                </summary>
      <returns>
                    如果基础流支持超时，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Net.Security.SslStream.CanWrite">
      <summary>
                    获取一个 <see cref="T:System.Boolean" /> 值，该值指示基础流是否可写。
                </summary>
      <returns>
                    如果已进行身份验证且基础流可写，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Net.Security.SslStream.CheckCertRevocationStatus">
      <summary>
                    获取一个 <see cref="T:System.Boolean" /> 值，该值指示在证书验证过程中是否检查证书吊销列表。
                </summary>
      <returns>
                    如果检查证书吊销列表，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Net.Security.SslStream.CipherAlgorithm">
      <summary>
                    获取一个值，该值确定此 <see cref="T:System.Net.Security.SslStream" /> 使用的批量加密算法。
                </summary>
      <returns>
        <see cref="T:System.Security.Authentication.CipherAlgorithmType" /> 值。
                </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Net.Security.SslStream.CipherAlgorithm" /> 属性是在身份验证过程未完成时访问的或者身份验证过程失败。
                </exception>
    </member>
    <member name="P:System.Net.Security.SslStream.CipherStrength">
      <summary>
                    获取一个值，该值确定此 <see cref="T:System.Net.Security.SslStream" /> 使用的密码算法的强度。
                </summary>
      <returns>
        <see cref="T:System.Int32" /> 值，该值指定算法的强度（以位为单位）。
                </returns>
    </member>
    <member name="M:System.Net.Security.SslStream.Dispose(System.Boolean)">
      <summary>
                    释放由 <see cref="T:System.Net.Security.SslStream" /> 占用的非托管资源，还可以另外再释放托管资源。
                </summary>
      <param name="disposing">
                    为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。
                </param>
    </member>
    <member name="M:System.Net.Security.SslStream.EndAuthenticateAsClient(System.IAsyncResult)">
      <summary>
                    结束通过以前调用 <see cref="Overload:System.Net.Security.SslStream.BeginAuthenticateAsServer" /> 而启动的、处于挂起状态的异步服务器身份验证操作。
                </summary>
      <param name="asyncResult">
                    调用 <see cref="Overload:System.Net.Security.SslStream.BeginAuthenticateAsServer" /> 后返回的 <see cref="T:System.IAsyncResult" /> 实例。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 并不是通过对 <see cref="Overload:System.Net.Security.SslStream.BeginAuthenticateAsServer" /> 的调用创建的。
                </exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">
身份验证失败，此对象处于不可用状态。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    没有处于挂起状态的服务器身份验证要完成。
                </exception>
    </member>
    <member name="M:System.Net.Security.SslStream.EndAuthenticateAsServer(System.IAsyncResult)">
      <summary>
                    结束通过以前调用 <see cref="Overload:System.Net.Security.SslStream.BeginAuthenticateAsClient" /> 而启动的、处于挂起状态的异步客户端身份验证操作。
                </summary>
      <param name="asyncResult">
                    调用 <see cref="Overload:System.Net.Security.SslStream.BeginAuthenticateAsClient" /> 后返回的 <see cref="T:System.IAsyncResult" /> 实例。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 并不是通过对 <see cref="Overload:System.Net.Security.SslStream.BeginAuthenticateAsClient" /> 的调用创建的。
                </exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">
身份验证失败，此对象处于不可用状态。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    没有处于挂起状态的客户端身份验证要完成。
                </exception>
    </member>
    <member name="M:System.Net.Security.SslStream.EndRead(System.IAsyncResult)">
      <summary>
                    结束通过以前调用 <see cref="M:System.Net.Security.SslStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 而启动的异步读操作。
                </summary>
      <returns>
        <see cref="T:System.Int32" /> 值，该值指定从基础流中读取的字节数。
                </returns>
      <param name="asyncResult">
                    调用 <see cref="M:System.Net.Security.SslStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 后返回的 <see cref="T:System.IAsyncResult" /> 实例。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 并不是通过对 <see cref="M:System.Net.Security.SslStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 的调用创建的。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    没有处于挂起状态的读操作要完成。
                </exception>
      <exception cref="T:System.IO.IOException">
读操作失败。
                </exception>
      <exception cref="T:System.InvalidOperationException">
未进行身份验证。
                </exception>
    </member>
    <member name="M:System.Net.Security.SslStream.EndWrite(System.IAsyncResult)">
      <summary>
                    结束通过以前调用 <see cref="M:System.Net.Security.SslStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 而启动的异步写操作。
                </summary>
      <param name="asyncResult">
                    调用 <see cref="M:System.Net.Security.SslStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 后返回的 <see cref="T:System.IAsyncResult" /> 实例。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 并不是通过对 <see cref="M:System.Net.Security.SslStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 的调用创建的。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    没有处于挂起状态的写操作要完成。
                </exception>
      <exception cref="T:System.IO.IOException">
写操作失败。
                </exception>
      <exception cref="T:System.InvalidOperationException">
未进行身份验证。
                </exception>
    </member>
    <member name="M:System.Net.Security.SslStream.Flush">
      <summary>
                    导致所有缓冲数据都要写入基础设备。
                </summary>
    </member>
    <member name="P:System.Net.Security.SslStream.HashAlgorithm">
      <summary>
                    获取用于生成消息身份验证代码 (MAC) 的算法。
                </summary>
      <returns>
        <see cref="T:System.Security.Authentication.HashAlgorithmType" /> 值。
                </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Net.Security.SslStream.HashAlgorithm" /> 属性是在身份验证过程未完成时访问的或者身份验证过程失败。
                </exception>
    </member>
    <member name="P:System.Net.Security.SslStream.HashStrength">
      <summary>
                    获取一个值，该值标识此实例使用的哈希算法的强度。
                </summary>
      <returns>
                    一个 <see cref="T:System.Int32" /> 值，指定 <see cref="T:System.Security.Authentication.HashAlgorithmType" /> 算法的强度（以位为单位）。有效值为 128 或 160。
                </returns>
    </member>
    <member name="P:System.Net.Security.SslStream.IsAuthenticated">
      <summary>
                    获取一个 <see cref="T:System.Boolean" /> 值，该值指示身份验证是否成功。
                </summary>
      <returns>
                    如果身份验证成功，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Net.Security.SslStream.IsEncrypted">
      <summary>
                    获取一个 <see cref="T:System.Boolean" /> 值，该值指示此 <see cref="T:System.Net.Security.SslStream" /> 是否使用数据加密。
                </summary>
      <returns>
                    如果在通过网络传输数据前将其加密，并在数据到达远程终结点后将其解密，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Net.Security.SslStream.IsMutuallyAuthenticated">
      <summary>
                    获取一个 <see cref="T:System.Boolean" /> 值，该值指示服务器和客户端是否均已进行身份验证。
                </summary>
      <returns>
                    如果服务器已经过身份验证，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Net.Security.SslStream.IsServer">
      <summary>
                    获取一个 <see cref="T:System.Boolean" /> 值，该值指示此 <see cref="T:System.Net.Security.SslStream" /> 使用的连接的本地端是否作为服务器进行了身份验证。
                </summary>
      <returns>
                    如果本地终结点作为经过身份验证的连接的服务器端成功地进行了身份验证，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Net.Security.SslStream.IsSigned">
      <summary>
                    获取一个 <see cref="T:System.Boolean" /> 值，该值指示使用此流发送的数据是否进行签名。
                </summary>
      <returns>
                    如果在传输数据前对其签名，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Net.Security.SslStream.KeyExchangeAlgorithm">
      <summary>
                    获取此 <see cref="T:System.Net.Security.SslStream" /> 使用的密钥交换算法。
                </summary>
      <returns>
                    一个 <see cref="T:System.Security.Authentication.ExchangeAlgorithmType" /> 值。
                </returns>
    </member>
    <member name="P:System.Net.Security.SslStream.KeyExchangeStrength">
      <summary>
                    获取一个值，该值指示此实例使用的密钥交换算法的强度。
                </summary>
      <returns>
                    一个 <see cref="T:System.Int32" /> 值，指定 <see cref="T:System.Security.Authentication.ExchangeAlgorithmType" /> 算法的强度（以位为单位）。
                </returns>
    </member>
    <member name="P:System.Net.Security.SslStream.Length">
      <summary>
                    获取基础流的长度。
                </summary>
      <returns>
        <see cref="T:System.Int64" />。
                </returns>
      <exception cref="T:System.NotSupportedException">
                    当基础流为 <see cref="T:System.Net.Sockets.NetworkStream" /> 时，不支持获取此属性的值。
                </exception>
    </member>
    <member name="P:System.Net.Security.SslStream.LocalCertificate">
      <summary>
                    获取用于对本地终结点进行身份验证的证书。
                </summary>
      <returns>
                    一个 X509Certificate 对象，它表示为身份验证提供的证书；或者，如果没有提供证书，则为 null。
                </returns>
      <exception cref="T:System.InvalidOperationException">
身份验证失败或没有进行身份验证。
                </exception>
    </member>
    <member name="P:System.Net.Security.SslStream.Position">
      <summary>
                    获取或设置基础流中的当前位置。
                </summary>
      <returns>
        <see cref="T:System.Int64" />。
                </returns>
      <exception cref="T:System.NotSupportedException">
                    不支持设置此属性。
                
                    - 或 -
                
                    当基础流为 <see cref="T:System.Net.Sockets.NetworkStream" /> 时，不支持获取此属性的值。
                </exception>
    </member>
    <member name="M:System.Net.Security.SslStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
                    读取此流中的数据并将其存储在指定的数组中。
                </summary>
      <returns>
        <see cref="T:System.Int32" /> 值，该值指定读取的字节数。如果再也没有要读取的数据，将返回 0。
                </returns>
      <param name="buffer">
                    一个 <see cref="T:System.Byte" /> 数组，该数组接收从此流读取的字节。
                </param>
      <param name="offset">
        <see cref="T:System.Int32" />，它包含 <paramref name="buffer" /> 中从零开始的位置，从此处开始存储从此流读取的数据。
                </param>
      <param name="count">
        <see cref="T:System.Int32" />，包含要从此流读取的最大字节数。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" />
        <paramref name="&lt;" />
        <paramref name="0" />。
                <paramref name="-or-" /><paramref name="offset" /> 大于 <paramref name="buffer" /> 的长度。
                
                    - 或 -
                <paramref name="offset" /> 与计数之和大于 <paramref name="buffer" /> 的长度。
                </exception>
      <exception cref="T:System.IO.IOException">
                    读操作失败。检查内部异常（如果存在）以确定失败的原因。
                </exception>
      <exception cref="T:System.NotSupportedException">
                    已存在一个正在执行的读取操作。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
此对象已关闭。
                </exception>
      <exception cref="T:System.InvalidOperationException">
未进行身份验证。
                </exception>
    </member>
    <member name="P:System.Net.Security.SslStream.ReadTimeout">
      <summary>
                    获取或设置读操作等待数据的时间。
                </summary>
      <returns>
        <see cref="T:System.Int32" />，指定同步读操作失败前经过的时间。
                </returns>
    </member>
    <member name="P:System.Net.Security.SslStream.RemoteCertificate">
      <summary>
                    获取用于对远程终结点进行身份验证的证书。
                </summary>
      <returns>
                    一个 X509Certificate 对象，它表示为身份验证提供的证书；或者，如果没有提供证书，则为 null。
                </returns>
      <exception cref="T:System.InvalidOperationException">
身份验证失败或没有进行身份验证。
                </exception>
    </member>
    <member name="M:System.Net.Security.SslStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>
                    引发 <see cref="T:System.NotSupportedException" />。
                </summary>
      <returns>
                    总是引发 <see cref="T:System.NotSupportedException" />。
                </returns>
      <param name="offset">
忽略此值。
                </param>
      <param name="origin">
忽略此值。
                </param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Net.Security.SslStream" /> 对象不支持查找。
                </exception>
    </member>
    <member name="M:System.Net.Security.SslStream.SetLength(System.Int64)">
      <summary>
                    设置基础流的长度。
                </summary>
      <param name="value">
        <see cref="T:System.Int64" /> 值，该值指定流的长度。
                </param>
    </member>
    <member name="P:System.Net.Security.SslStream.SslProtocol">
      <summary>
                    获取一个值，该值指示用于对此连接进行身份验证的安全协议。
                </summary>
      <returns>
                    代表用于身份验证的协议的 <see cref="T:System.Security.Authentication.SslProtocols" /> 值。
                </returns>
    </member>
    <member name="M:System.Net.Security.SslStream.Write(System.Byte[])">
      <summary>
                    将指定的数据写入此流。
                </summary>
      <param name="buffer">
                    一个 <see cref="T:System.Byte" /> 数组，该数组提供要写入流中的字节。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。
                </exception>
      <exception cref="T:System.IO.IOException">
写操作失败。
                </exception>
      <exception cref="T:System.NotSupportedException">
已存在一个正在执行的写操作。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
此对象已关闭。
                </exception>
      <exception cref="T:System.InvalidOperationException">
未进行身份验证。
                </exception>
    </member>
    <member name="M:System.Net.Security.SslStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
                    使用指定的缓冲区和偏移将指定数目的 <see cref="T:System.Byte" /> 写入基础流。
                </summary>
      <param name="buffer">
                    一个 <see cref="T:System.Byte" /> 数组，该数组提供要写入流中的字节。
                </param>
      <param name="offset">
        <see cref="T:System.Int32" />，它包含 <paramref name="buffer" /> 中从零开始的位置，将从此位置开始读取要写入流中的字节。
                </param>
      <param name="count">
        <see cref="T:System.Int32" />，包含要从 <paramref name="buffer" /> 中读取的字节数。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" />
        <paramref name="&lt;" />
        <paramref name="0" />。
                <paramref name="-or-" /><paramref name="offset" /> 大于 <paramref name="buffer" /> 的长度。
                
                    - 或 -
                <paramref name="offset" /> 与计数之和大于 <paramref name="buffer" /> 的长度。
                </exception>
      <exception cref="T:System.IO.IOException">
写操作失败。
                </exception>
      <exception cref="T:System.NotSupportedException">
已存在一个正在执行的写操作。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
此对象已关闭。
                </exception>
      <exception cref="T:System.InvalidOperationException">
未进行身份验证。
                </exception>
    </member>
    <member name="P:System.Net.Security.SslStream.WriteTimeout">
      <summary>
                    获取或设置写操作等待数据的时间。
                </summary>
      <returns>
        <see cref="T:System.Int32" />，指定同步写操作失败前经过的时间。
                </returns>
    </member>
    <member name="T:System.Net.Sockets.AddressFamily">
      <summary>指定 <see cref="T:System.Net.Sockets.Socket" /> 类的实例可以使用的寻址方案。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Unknown">
      <summary>未知的地址族。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Unspecified">
      <summary>未指定的地址族。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Unix">
      <summary>Unix 本地到主机地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.InterNetwork">
      <summary>IP 版本 4 的地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.ImpLink">
      <summary>ARPANET IMP 地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Pup">
      <summary>PUP 协议的地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Chaos">
      <summary>MIT CHAOS 协议的地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.NS">
      <summary>Xerox NS 协议的地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Ipx">
      <summary>IPX 或 SPX 地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Iso">
      <summary>ISO 协议的地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Osi">
      <summary>OSI 协议的地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Ecma">
      <summary>欧洲计算机制造商协会 (ECMA) 地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.DataKit">
      <summary>Datakit 协议的地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Ccitt">
      <summary>CCITT 协议（如 X.25）的地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Sna">
      <summary>IBM SNA 地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.DecNet">
      <summary>DECnet 地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.DataLink">
      <summary>直接数据链接接口地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Lat">
      <summary>LAT 地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.HyperChannel">
      <summary>NSC Hyperchannel 地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.AppleTalk">
      <summary>AppleTalk 地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.NetBios">
      <summary>NetBios 地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.VoiceView">
      <summary>VoiceView 地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.FireFox">
      <summary>FireFox 地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Banyan">
      <summary>Banyan 地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Atm">
      <summary>本机 ATM 服务地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.InterNetworkV6">
      <summary>IP 版本 6 的地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Cluster">
      <summary>Microsoft 群集产品的地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Ieee12844">
      <summary>IEEE 1284.4 工作组地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Irda">
      <summary>IrDA 地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.NetworkDesigners">
      <summary>支持网络设计器 OSI 网关的协议的地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Max">
      <summary>MAX 地址。</summary>
    </member>
    <member name="T:System.Net.Sockets.IOControlCode">
      <summary>指定 <see cref="M:System.Net.Sockets.Socket.IOControl(System.Int32,System.Byte[],System.Byte[])" /> 方法支持的 IO 控制代码。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.AsyncIO">
      <summary>当数据等待接收时启用通知。此值等于 Winsock 2 FIOASYNC 常数。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.NonBlockingIO">
      <summary>控制套接字的阻止行为。如果使用此控制代码指定的参数为零，套接字将置于阻止模式下。如果参数不为零，套接字将置于非阻止模式下。此值等于 Winsock 2 FIONBIO 常数。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.DataToRead">
      <summary>返回可读取的字节数。此值等于 Winsock 2 FIONREAD 常数。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.OobDataRead">
      <summary>返回有关等待要接收的带外数据的信息。在流式套接字上使用此控制代码时，返回值指示可用的字节数。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.AssociateHandle">
      <summary>将此套接字与附带接口的指定句柄关联。有关其他详细信息，请参考 Winsock 2 参考或文档中特定附带接口的相应协议特定附录。建议使用组件对象模型 (COM) 代替此 IOCTL，以发现并跟踪套接字可能支持的其他接口。此控制代码是为了与某些系统保持向后兼容而提供的，在这些系统中，COM 不可用或由于某些其他原因而无法使用。此值等于 Winsock 2 SIO_ASSOCIATE_HANDLE 常数。 </summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.EnableCircularQueuing">
      <summary>当传入的消息队列已满时，将时间最久的已排队数据报替换为传入的数据报。此值等于 Winsock 2 SIO_ENABLE_CIRCULAR_QUEUEING 常数。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.Flush">
      <summary>放弃发送队列的内容。此值等于 Winsock 2 SIO_FLUSH 常数。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.GetBroadcastAddress">
      <summary>返回包含当前套接字地址族的广播地址的 SOCKADDR 结构。返回的地址可与 <see cref="Overload:System.Net.Sockets.Socket.SendTo" /> 方法一起使用。此值等于 Winsock 2 SIO_GET_BROADCAST_ADDRESS 常数。此值只能在用户数据报协议 (UDP) 套接字上使用。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.GetExtensionFunctionPointer">
      <summary>获取提供程序特定的函数，这类函数不是 Winsock 规范的一部分。它们使用其提供程序分配的 GUID 进行指定。此值等于 Winsock 2 SIO_GET_EXTENSION_FUNCTION_POINTER 常数。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.GetQos">
      <summary>检索与套接字关联的 QOS 结构。只有能提供 QOS 传输的平台（Windows Me、Windows 2000 和更高版本）才支持此控件。此值等于 Winsock 2 SIO_GET_QOS 常数。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.GetGroupQos">
      <summary>返回套接字组的服务质量 (QOS) 属性。此值保留供将来使用，并且等于 Winsock 2 SIO_GET_GROUP_QOS 常数。 </summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.MultipointLoopback">
      <summary>控制套接字发送的多路广播数据是否在套接字接收队列中显示为传入数据。此值等于 Winsock 2 SIO_MULTIPOINT_LOOPBACK 常数。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.MulticastScope">
      <summary>控制路由器可以转发多路广播数据包的次数，也称作生存时间 (TTL) 或跃点计数。此值等于 Winsock 2 SIO_MULTICAST_SCOPE 常数。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.SetQos">
      <summary>设置套接字的服务质量 (QOS) 属性。QOS 用于定义套接字的带宽要求。Windows Me、Windows 2000 及更高版本的操作系统支持此控制代码。此值等于 Winsock 2 SIO_SET_QOS 常数。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.SetGroupQos">
      <summary>设置套接字组的服务质量 (QOS) 属性。此值保留供将来使用，并且等于 Winsock 2 SIO_SET_GROUP_QOS 常数。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.TranslateHandle">
      <summary>返回附带接口上下文中有效的套接字的句柄。此值等于 Winsock 2 SIO_TRANSLATE_HANDLE 常数。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.RoutingInterfaceQuery">
      <summary>返回可用于连接到指定远程地址的接口地址。此值等于 Winsock 2 SIO_ROUTING_INTERFACE_QUERY 常数。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.RoutingInterfaceChange">
      <summary>当用于访问远程终结点的本地接口更改时启用接收通知。此值等于 Winsock 2 SIO_ROUTING_INTERFACE_CHANGE 常数。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.AddressListQuery">
      <summary>返回套接字可绑定到的本地接口列表。Windows 2000 及更高版本的操作系统支持此控制代码。此值等于 Winsock 2 SIO_ADDRESS_LIST_QUERY 常数。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.AddressListChange">
      <summary>当套接字协议族的本地接口列表更改时启用接收通知。Windows 2000 及更高版本的操作系统支持此控制代码。此值等于 Winsock 2 SIO_ADDRESS_LIST_CHANGE 常数。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.QueryTargetPnpHandle">
      <summary>检索基础提供程序的 SOCKET 句柄。此句柄可用于接收即插即用事件通知。Windows 2000 及更高版本的操作系统支持此控制代码。此值等于 Winsock 2 SIO_QUERY_TARGET_PNP_HANDLE 常数。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.NamespaceChange">
      <summary>控制套接字是否在命名空间查询无效时接收通知。Windows XP 及更高版本的操作系统支持此控制代码。此值等于 Winsock 2 SIO_NSP_NOTIFY_CHANGE 常数。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.AddressListSort">
      <summary>对 <see cref="F:System.Net.Sockets.IOControlCode.AddressListQuery" /> 字段返回的结构进行排序，并为 IPv6 地址添加范围 ID 信息。Windows XP 及更高版本的操作系统支持此控制代码。此值等于 Winsock 2 SIO_ADDRESS_LIST_SORT 常数。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.ReceiveAll">
      <summary>启用对网络上的所有 IPv4 数据包的接收。套接字必须有 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 地址族，套接字类型必须是 <see cref="F:System.Net.Sockets.SocketType.Raw" />，并且协议类型必须为 <see cref="F:System.Net.Sockets.ProtocolType.IP" />。当前用户必须属于本地计算机上的 Administrators 组，并且套接字必须绑定到特定端口。Windows 2000 及更高版本的操作系统支持此控制代码。此值等于 Winsock 2 SIO_RCVALL 常数。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.ReceiveAllMulticast">
      <summary>启用对网络上的所有多路广播 IPv4 数据包的接收。这些数据包的目标地址范围介于 224.0.0.0 到 239.255.255.255 之间。套接字必须有 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 地址族，套接字类型必须是 <see cref="F:System.Net.Sockets.SocketType.Raw" />，并且协议类型必须为 <see cref="F:System.Net.Sockets.ProtocolType.Udp" />。当前用户必须属于本地计算机上的 Administrators 组，并且套接字必须绑定到特定端口。Windows 2000 及更高版本的操作系统支持此控制代码。此值等于 Winsock 2 SIO_RCVALL_MCAST 常数。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.ReceiveAllIgmpMulticast">
      <summary>启用对网络上的所有 Internet 组管理协议 (IGMP) 数据包的接收。套接字必须有 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 地址族，套接字类型必须是 <see cref="F:System.Net.Sockets.SocketType.Raw" />，并且协议类型必须为 <see cref="F:System.Net.Sockets.ProtocolType.Igmp" />。当前用户必须属于本地计算机上的 Administrators 组，并且套接字必须绑定到特定端口。Windows 2000 及更高版本的操作系统支持此控制代码。此值等于 Winsock 2 SIO_RCVALL_IGMPMCAST 常数。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.KeepAliveValues">
      <summary>控制 TCP keep-alive 数据包的发送以及发送间隔。Windows 2000 及更高版本的操作系统支持此控制代码。有关附加信息，请参见 RFC 1122 的 4.2.3.6 节。此值等于 Winsock 2 SIO_KEEPALIVE_VALS 常数。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.AbsorbRouterAlert">
      <summary>此值等于 Winsock 2 SIO_ABSORB_RTRALERT 常数。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.UnicastInterface">
      <summary>设置用于输出的单播数据包的接口。此值等于 Winsock 2 SIO_UCAST_IF 常数。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.LimitBroadcasts">
      <summary>此值等于 Winsock 2 SIO_LIMIT_BROADCASTS 常数。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.BindToInterface">
      <summary>将套接字绑定到指定的接口索引。Windows 2000 及更高版本的操作系统支持此控制代码。此值等于 Winsock 2 SIO_INDEX_BIND 常数。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.MulticastInterface">
      <summary>设置用于输出的多路广播数据包的接口。该接口通过其索引进行标识。Windows 2000 及更高版本的操作系统支持此控制代码。此值等于 Winsock 2 SIO_INDEX_MCASTIF 常数。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.AddMulticastGroupOnInterface">
      <summary>使用按索引标识的接口联接多路广播组。Windows 2000 及更高版本的操作系统支持此控制代码。此值等于 Winsock 2 SIO_INDEX_ADD_MCAST 常数。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.DeleteMulticastGroupFromInterface">
      <summary>将套接字从多路广播组中移除。Windows 2000 及更高版本的操作系统支持此控制代码。此值等于 Winsock 2 SIO_INDEX_ADD_MCAST 常数。</summary>
    </member>
    <member name="T:System.Net.Sockets.IPPacketInformation">
      <summary>通过调用 <see cref="M:System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /> 或 <see cref="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /> 显示数据包信息。</summary>
    </member>
    <member name="P:System.Net.Sockets.IPPacketInformation.Address">
      <summary>获取调用 <see cref="M:System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /> 方法或 <see cref="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /> 方法后收到的数据包的来源信息。</summary>
      <returns>
        <see cref="T:System.Net.IPAddress" />，指示调用 <see cref="M:System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /> 方法或 <see cref="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /> 方法后收到的数据包的来源信息。如果从单播地址发送数据包，<see cref="P:System.Net.Sockets.IPPacketInformation.Address" /> 属性将返回发送方的 <see cref="T:System.Net.IPAddress" />；对于多路广播或广播数据包，<see cref="P:System.Net.Sockets.IPPacketInformation.Address" /> 属性将返回多路广播或广播 <see cref="T:System.Net.IPAddress" />。</returns>
    </member>
    <member name="M:System.Net.Sockets.IPPacketInformation.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <returns>
如果 <paramref name="comparand" /> 是 <see cref="T:System.Net.Sockets.IPPacketInformation" /> 的实例并且等于此实例的值，则为 true；否则为 false。</returns>
      <param name="comparand">与该实例进行比较的对象。</param>
    </member>
    <member name="M:System.Net.Sockets.IPPacketInformation.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>Int32 哈希代码。</returns>
    </member>
    <member name="P:System.Net.Sockets.IPPacketInformation.Interface">
      <summary>获取与调用 <see cref="M:System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /> 或 <see cref="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /> 关联的网络接口信息。</summary>
      <returns>
        <see cref="T:System.Int32" /> 值，表示网络接口的索引。可以将此索引和 <see cref="M:System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces" /> 结合使用，以获取有关相关接口的更多信息。</returns>
    </member>
    <member name="M:System.Net.Sockets.IPPacketInformation.op_Equality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)">
      <summary>测试两个指定的 <see cref="T:System.Net.Sockets.IPPacketInformation" /> 实例是否等效。</summary>
      <returns>
如果 <paramref name="packetInformation1" /> 和 <paramref name="packetInformation2" /> 相等，则为 true；否则为 false。</returns>
      <param name="packetInformation1">相等运算符左侧的 <see cref="T:System.Net.Sockets.IPPacketInformation" /> 实例。</param>
      <param name="packetInformation2">相等运算符右侧的 <see cref="T:System.Net.Sockets.IPPacketInformation" /> 实例。</param>
    </member>
    <member name="M:System.Net.Sockets.IPPacketInformation.op_Inequality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)">
      <summary>测试两个指定的 <see cref="T:System.Net.Sockets.IPPacketInformation" /> 实例是否不相等。</summary>
      <returns>
如果 <paramref name="packetInformation1" /> 和 <paramref name="packetInformation2" /> 不相等，则为 true；否则为 false。</returns>
      <param name="packetInformation1">不等运算符左侧的 <see cref="T:System.Net.Sockets.IPPacketInformation" /> 实例。</param>
      <param name="packetInformation2">不等运算符右侧的 <see cref="T:System.Net.Sockets.IPPacketInformation" /> 实例。</param>
    </member>
    <member name="T:System.Net.Sockets.IPv6MulticastOption">
      <summary>包含用于加入 IPv6 多路广播组的选项值。</summary>
    </member>
    <member name="M:System.Net.Sockets.IPv6MulticastOption.#ctor(System.Net.IPAddress)">
      <summary>为指定的 IP 多路广播组初始化 <see cref="T:System.Net.Sockets.IPv6MulticastOption" /> 类的新版本。</summary>
      <param name="group">多路广播组的 <see cref="T:System.Net.IPAddress" />。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="group" /> 为 null。 </exception>
    </member>
    <member name="M:System.Net.Sockets.IPv6MulticastOption.#ctor(System.Net.IPAddress,System.Int64)">
      <summary>使用指定的 IP 多路广播组和本地接口地址，初始化 <see cref="T:System.Net.Sockets.IPv6MulticastOption" /> 类的新实例。</summary>
      <param name="group">
        <see cref="T:System.Net.IPAddress" /> 组。 </param>
      <param name="ifindex">本地接口地址。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ifindex" /> 小于 0。- 或 - <paramref name="ifindex" /> 大于 0x00000000FFFFFFFF。 </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="group" /> 为 null。 </exception>
    </member>
    <member name="P:System.Net.Sockets.IPv6MulticastOption.Group">
      <summary>获取或设置多路广播组的 IP 地址。</summary>
      <returns>一个包含多路广播组 Internet 地址的 <see cref="T:System.Net.IPAddress" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="group" /> 为 null。 </exception>
    </member>
    <member name="P:System.Net.Sockets.IPv6MulticastOption.InterfaceIndex">
      <summary>获取或设置与多路广播组关联的接口索引。</summary>
      <returns>一个指定接口地址的 <see cref="T:System.UInt64" /> 值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">为设置操作指定的值小于 0 或大于 0x00000000FFFFFFFF。 </exception>
    </member>
    <member name="T:System.Net.Sockets.LingerOption">
      <summary>指定在调用 <see cref="M:System.Net.Sockets.TcpClient.Close" /> 之后如果仍有数据要发送，<see cref="T:System.Net.Sockets.Socket" /> 是否保持连接以及保持多长时间（如果保持连接）。</summary>
    </member>
    <member name="M:System.Net.Sockets.LingerOption.#ctor(System.Boolean,System.Int32)">
      <summary>初始化 <see cref="T:System.Net.Sockets.LingerOption" /> 类的新实例。</summary>
      <param name="enable">
如果调用 <see cref="M:System.Net.Sockets.Socket.Close" /> 方法后保持连接，则为 true；否则为 false。 </param>
      <param name="seconds">调用 <see cref="M:System.Net.Sockets.Socket.Close" /> 方法后保持连接的秒数。 </param>
    </member>
    <member name="P:System.Net.Sockets.LingerOption.Enabled">
      <summary>获取或设置一个值，指示 <see cref="T:System.Net.Sockets.Socket" /> 关闭后是否逗留。</summary>
      <returns>
如果 <see cref="T:System.Net.Sockets.Socket" /> 在调用 <see cref="M:System.Net.Sockets.Socket.Close" /> 之后将逗留，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.Net.Sockets.LingerOption.LingerTime">
      <summary>获取或设置在调用 <see cref="M:System.Net.Sockets.Socket.Close" /> 方法后仍有数据要发送的情况下将保持连接的时间量。</summary>
      <returns>调用 <see cref="M:System.Net.Sockets.Socket.Close" /> 后保持连接的时间量（以秒为单位）。</returns>
    </member>
    <member name="T:System.Net.Sockets.MulticastOption">
      <summary>包含用于联接和丢弃多路广播组的 <see cref="T:System.Net.IPAddress" /> 值。</summary>
    </member>
    <member name="M:System.Net.Sockets.MulticastOption.#ctor(System.Net.IPAddress)">
      <summary>为指定的 IP 多路广播组初始化 <see cref="T:System.Net.Sockets.MulticastOption" /> 类的新版本。</summary>
      <param name="group">多路广播组的 <see cref="T:System.Net.IPAddress" />。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="group" /> 为 null。 </exception>
    </member>
    <member name="M:System.Net.Sockets.MulticastOption.#ctor(System.Net.IPAddress,System.Int32)">
      <summary>使用指定的 IP 多路广播组地址和接口索引，初始化 <see cref="T:System.Net.Sockets.MulticastOption" /> 类的新实例。</summary>
      <param name="group">多路广播组的 <see cref="T:System.Net.IPAddress" />。</param>
      <param name="interfaceIndex">用于发送和接收多路广播数据包的接口的索引。</param>
    </member>
    <member name="M:System.Net.Sockets.MulticastOption.#ctor(System.Net.IPAddress,System.Net.IPAddress)">
      <summary>使用指定的 IP 多路广播组地址以及和网络接口相关联的本地 IP 地址来初始化 <see cref="T:System.Net.Sockets.MulticastOption" /> 类的新实例。</summary>
      <param name="group">
        <see cref="T:System.Net.IPAddress" /> 组。 </param>
      <param name="mcint">本地 <see cref="T:System.Net.IPAddress" />。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="group" /> 为 null。- 或 - <paramref name="mcint" /> 为 null。 </exception>
    </member>
    <member name="P:System.Net.Sockets.MulticastOption.Group">
      <summary>获取或设置多路广播组的 IP 地址。</summary>
      <returns>一个包含多路广播组 Internet 地址的 <see cref="T:System.Net.IPAddress" />。</returns>
    </member>
    <member name="P:System.Net.Sockets.MulticastOption.InterfaceIndex">
      <summary>获取或设置用于发送和接收多路广播数据包的接口的索引。 </summary>
      <returns>一个表示 <see cref="T:System.Net.NetworkInformation.NetworkInterface" /> 数组元素索引的整数。</returns>
    </member>
    <member name="P:System.Net.Sockets.MulticastOption.LocalAddress">
      <summary>获取或设置与多路广播组关联的本地地址。</summary>
      <returns>一个包含与多路广播组关联的本地地址的 <see cref="T:System.Net.IPAddress" />。</returns>
    </member>
    <member name="T:System.Net.Sockets.NetworkStream">
      <summary>
                    提供用于网络访问的基础数据流。
                </summary>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
      <summary>
                    为指定的 <see cref="T:System.Net.Sockets.Socket" /> 创建 <see cref="T:System.Net.Sockets.NetworkStream" /> 类的新实例。
                </summary>
      <param name="socket">
        <see cref="T:System.Net.Sockets.NetworkStream" /> 用来发送和接收数据的 <see cref="T:System.Net.Sockets.Socket" />。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="socket" /> 参数为 null。
                </exception>
      <exception cref="T:System.IO.IOException">
                    未连接 <paramref name="socket" /> 参数。
                
                    - 或 -
                <paramref name="socket" /> 参数的 <see cref="P:System.Net.Sockets.Socket.SocketType" /> 属性不为 <see cref="F:System.Net.Sockets.SocketType.Stream" />。
                
                    - 或 -
                <paramref name="socket" /> 参数处于非阻止状态。
                </exception>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
      <summary>
                    用指定的 <see cref="T:System.Net.Sockets.Socket" /> 所属权为指定的 <see cref="T:System.Net.Sockets.Socket" /> 初始化 <see cref="T:System.Net.Sockets.NetworkStream" /> 类的新实例。
                </summary>
      <param name="socket">
        <see cref="T:System.Net.Sockets.NetworkStream" /> 用来发送和接收数据的 <see cref="T:System.Net.Sockets.Socket" />。
                </param>
      <param name="ownsSocket">
                    设置为 true 可指示 <see cref="T:System.Net.Sockets.NetworkStream" /> 将拥有 <see cref="T:System.Net.Sockets.Socket" />；否则为 false。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="socket" /> 参数为 null。
                </exception>
      <exception cref="T:System.IO.IOException">
                    未连接 <paramref name="socket" /> 参数。
                
                    - 或 -
                <paramref name="socket" /> 参数的 <see cref="P:System.Net.Sockets.Socket.SocketType" /> 属性的值不为 <see cref="F:System.Net.Sockets.SocketType.Stream" />。
                
                    - 或 -
                <paramref name="socket" /> 参数处于非阻止状态。
                </exception>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
      <summary>
                    用指定的访问权限为指定的 <see cref="T:System.Net.Sockets.Socket" /> 创建 <see cref="T:System.Net.Sockets.NetworkStream" /> 类的新实例。
                </summary>
      <param name="socket">
        <see cref="T:System.Net.Sockets.NetworkStream" /> 用来发送和接收数据的 <see cref="T:System.Net.Sockets.Socket" />。
                </param>
      <param name="access">
        <see cref="T:System.IO.FileAccess" /> 值的按位组合，这些值用于指定向所提供的 <see cref="T:System.Net.Sockets.Socket" /> 上的 <see cref="T:System.Net.Sockets.NetworkStream" /> 授予的访问类型。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="socket" /> 参数为 null。
                </exception>
      <exception cref="T:System.IO.IOException">
                    未连接 <paramref name="socket" /> 参数。
                
                    - 或 -
                <paramref name="socket" /> 参数的 <see cref="P:System.Net.Sockets.Socket.SocketType" /> 属性不为 <see cref="F:System.Net.Sockets.SocketType.Stream" />。
                
                    - 或 -
                <paramref name="socket" /> 参数处于非阻止状态。
                </exception>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
      <summary>
                    用指定的访问权限和指定的 <see cref="T:System.Net.Sockets.Socket" /> 所属权为指定的 <see cref="T:System.Net.Sockets.Socket" /> 创建 <see cref="T:System.Net.Sockets.NetworkStream" /> 类的新实例。
                </summary>
      <param name="socket">
        <see cref="T:System.Net.Sockets.NetworkStream" /> 用来发送和接收数据的 <see cref="T:System.Net.Sockets.Socket" />。
                </param>
      <param name="access">
        <see cref="T:System.IO.FileAccess" /> 值的按位组合，这些值指定授予所提供的 <see cref="T:System.Net.Sockets.Socket" /> 上的 <see cref="T:System.Net.Sockets.NetworkStream" /> 的访问类型。
                </param>
      <param name="ownsSocket">
                    设置为 true 可指示 <see cref="T:System.Net.Sockets.NetworkStream" /> 将拥有 <see cref="T:System.Net.Sockets.Socket" />；否则为 false。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="socket" /> 参数为 null。
                </exception>
      <exception cref="T:System.IO.IOException">
                    未连接 <paramref name="socket" /> 参数。
                
                    - 或 -
                <paramref name="socket" /> 参数的 <see cref="P:System.Net.Sockets.Socket.SocketType" /> 属性不为 <see cref="F:System.Net.Sockets.SocketType.Stream" />。
                
                    - 或 -
                <paramref name="socket" /> 参数处于非阻止状态。
                </exception>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>
                    从 <see cref="T:System.Net.Sockets.NetworkStream" /> 开始异步读取。
                </summary>
      <returns>
                    表示异步调用的 <see cref="T:System.IAsyncResult" />。
                </returns>
      <param name="buffer">
                    类型 <see cref="T:System.Byte" /> 的数组，它是内存中用于存储从 <see cref="T:System.Net.Sockets.NetworkStream" /> 读取的数据的位置。
                </param>
      <param name="offset">
        <paramref name="buffer" /> 中开始存储数据的位置。
                </param>
      <param name="size">
                    要从 <see cref="T:System.Net.Sockets.NetworkStream" /> 中读取的字节数。
                </param>
      <param name="callback">
                    在 <see cref="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 完成时执行的 <see cref="T:System.AsyncCallback" /> 委托。
                </param>
      <param name="state">
                    包含用户定义的任何附加数据的对象。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 参数为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 参数小于 0。
                
                    - 或 -
                <paramref name="offset" /> 参数大于 <paramref name="buffer" /> 参数的长度。
                
                    - 或 -
                <paramref name="size" /> 小于 0。
                
                    - 或 -
                <paramref name="size" /> 大于 <paramref name="buffer" /> 的长度减去 <paramref name="offset" /> 参数的值。
                </exception>
      <exception cref="T:System.IO.IOException">
                    基础 <see cref="T:System.Net.Sockets.Socket" /> 被关闭。
                
                    - 或 -
                
                    从网络读取时出现错误。
                
                    - 或 -
                
                    访问套接字时出错。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.NetworkStream" /> 是关闭的。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>
                    开始向流异步写入。
                </summary>
      <returns>
                    表示异步调用的 <see cref="T:System.IAsyncResult" />。
                </returns>
      <param name="buffer">
                    类型 <see cref="T:System.Byte" /> 的数组，该数组包含要写入 <see cref="T:System.Net.Sockets.NetworkStream" /> 的数据。
                </param>
      <param name="offset">
        <paramref name="buffer" /> 中开始发送数据的位置。
                </param>
      <param name="size">
                    要写入 <see cref="T:System.Net.Sockets.NetworkStream" /> 的字节数。
                </param>
      <param name="callback">
                    在 <see cref="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 完成时执行的 <see cref="T:System.AsyncCallback" /> 委托。
                </param>
      <param name="state">
                    包含用户定义的任何附加数据的对象。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 参数为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 参数小于 0。
                
                    - 或 -
                <paramref name="offset" /> 参数大于 <paramref name="buffer" /> 的长度。
                
                    - 或 -
                <paramref name="size" /> 参数小于 0。
                
                    - 或 -
                <paramref name="size" /> 参数大于 <paramref name="buffer" /> 的长度减去 <paramref name="offset" /> 参数的值。
                </exception>
      <exception cref="T:System.IO.IOException">
                    基础 <see cref="T:System.Net.Sockets.Socket" /> 被关闭。
                
                    - 或 -
                
                    写入到网络时出现错误。
                
                    - 或 -
                
                    访问套接字时出错。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.NetworkStream" /> 是关闭的。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.CanRead">
      <summary>
                    获取一个值，该值指示 <see cref="T:System.Net.Sockets.NetworkStream" /> 是否支持读取。
                </summary>
      <returns>
                    如果可从该流读取数据，则为 true；否则为 false。默认值为 true。
                </returns>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.CanSeek">
      <summary>
                    获取一个值，该值指示流是否支持查找。当前不支持此属性，它始终返回 false。
                </summary>
      <returns>
                    所有情况下都为 false，指示 <see cref="T:System.Net.Sockets.NetworkStream" /> 不能在流中查找特定的位置。
                </returns>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.CanTimeout">
      <summary>
                    指示超时属性是否可用于 <see cref="T:System.Net.Sockets.NetworkStream" />。
                </summary>
      <returns>
                    在所有情况下均为 true。
                </returns>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.CanWrite">
      <summary>
                    获取一个值，该值指示 <see cref="T:System.Net.Sockets.NetworkStream" /> 是否支持写入。
                </summary>
      <returns>
                    如果数据可写入 <see cref="T:System.Net.Sockets.NetworkStream" />，则为 true；否则为 false。默认值为 true。
                </returns>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.Close(System.Int32)">
      <summary>
                    等待指定的时间以便发送数据之后，关闭 <see cref="T:System.Net.Sockets.NetworkStream" />。
                </summary>
      <param name="timeout">
                    一个 32 位有符号整数，用于指定在关闭前等待发送所有剩余数据的毫秒数。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 参数小于 -1。
                </exception>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.DataAvailable">
      <summary>
                    获取一个值，该值指示在要读取的 <see cref="T:System.Net.Sockets.NetworkStream" /> 上是否有可用的数据。
                </summary>
      <returns>
                    如果可以在流上读取数据，则为 true；否则为 false。
                </returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.NetworkStream" /> 是关闭的。
                </exception>
      <exception cref="T:System.IO.IOException">
                    基础 <see cref="T:System.Net.Sockets.Socket" /> 被关闭。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    请使用 <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> 属性获取特定的错误代码，并参考 MSDN 中的 Windows Sockets 版本 2 API 错误代码文档，以获取有关此错误的详细说明。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
      <summary>
                    释放由 <see cref="T:System.Net.Sockets.NetworkStream" /> 占用的非托管资源，还可以另外再释放托管资源。
                </summary>
      <param name="disposing">
                    如果为 true，则释放托管资源和非托管资源；如果为 false，则仅释放非托管资源。
                </param>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
      <summary>
                    处理异步读取的结束。
                </summary>
      <returns>
                    从 <see cref="T:System.Net.Sockets.NetworkStream" /> 中读取的字节数。
                </returns>
      <param name="asyncResult">
                    一个表示异步调用的 <see cref="T:System.IAsyncResult" />。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 参数为 null。
                </exception>
      <exception cref="T:System.IO.IOException">
                    基础 <see cref="T:System.Net.Sockets.Socket" /> 被关闭。
                
                    - 或 -
                
                    访问套接字时出错。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.NetworkStream" /> 是关闭的。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
      <summary>
                    处理异步写入的结束。
                </summary>
      <param name="asyncResult">
                    表示异步调用的 <see cref="T:System.IAsyncResult" />。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 参数为 null。
                </exception>
      <exception cref="T:System.IO.IOException">
                    基础 <see cref="T:System.Net.Sockets.Socket" /> 被关闭。
                
                    - 或 -
                
                    写入网络时发生错误。
                
                    - 或 -
                
                    访问套接字时出错。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.NetworkStream" /> 是关闭的。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.Finalize">
      <summary>
                    释放由 <see cref="T:System.Net.Sockets.NetworkStream" /> 使用的所有资源。
                </summary>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.Flush">
      <summary>
                    刷新流中的数据。保留此方法供将来使用。
                </summary>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.Length">
      <summary>
                    获取流上可用数据的长度。此属性当前不受支持，总是引发 <see cref="T:System.NotSupportedException" />。
                </summary>
      <returns>
                    流上可用数据的长度。
                </returns>
      <exception cref="T:System.NotSupportedException">
                    此属性的任何用法。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.Position">
      <summary>
                    获取或设置流中的当前位置。此属性当前不受支持，总是引发 <see cref="T:System.NotSupportedException" />。
                </summary>
      <returns>
                    流中的当前新位置。
                </returns>
      <exception cref="T:System.NotSupportedException">
                    此属性的任何用法。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
                    从 <see cref="T:System.Net.Sockets.NetworkStream" /> 读取数据。
                </summary>
      <returns>
                    从 <see cref="T:System.Net.Sockets.NetworkStream" /> 中读取的字节数。
                </returns>
      <param name="buffer">
                    类型 <see cref="T:System.Byte" /> 的数组，它是内存中用于存储从 <see cref="T:System.Net.Sockets.NetworkStream" /> 读取的数据的位置。
                </param>
      <param name="offset">
        <paramref name="buffer" /> 中开始将数据存储到的位置。
                </param>
      <param name="size">
                    要从 <see cref="T:System.Net.Sockets.NetworkStream" /> 中读取的字节数。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 参数为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 参数小于 0。
                
                    - 或 -
                <paramref name="offset" /> 参数大于 <paramref name="buffer" /> 的长度。
                
                    - 或 -
                <paramref name="size" /> 参数小于 0。
                
                    - 或 -
                <paramref name="size" /> 参数大于 <paramref name="buffer" /> 的长度减去 <paramref name="offset" /> 参数的值。
                
                    - 或 -
                
                    访问套接字时出错。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.IO.IOException">
                    基础 <see cref="T:System.Net.Sockets.Socket" /> 被关闭。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.NetworkStream" /> 是关闭的。
                
                    - 或 -
                
                    从网络读取时出现错误。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.Readable">
      <summary>
                    获取或设置一个值，该值指示 <see cref="T:System.Net.Sockets.NetworkStream" /> 是否可以读取。
                </summary>
      <returns>
                    如果 <see cref="T:System.Net.Sockets.NetworkStream" /> 可以读取，则为 true；否则为 false。默认值为 true。
                </returns>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.ReadTimeout">
      <summary>
                    获取或设置读取操作阻止等待数据的时间量。
                </summary>
      <returns>
        <see cref="T:System.Int32" /> 指定以毫秒为单位的时间量，表示读取操作失败前经过的时间。默认值 <see cref="F:System.Threading.Timeout.Infinite" /> 指定读取操作未超时。
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    指定的值小于或等于零，并且不为 <see cref="F:System.Threading.Timeout.Infinite" />。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>
                    将流的当前位置设置为给定值。此方法当前不受支持，总是引发 <see cref="T:System.NotSupportedException" />。
                </summary>
      <returns>
                    流中的位置。
                </returns>
      <param name="offset">
                    未使用此参数。
                </param>
      <param name="origin">
                    未使用此参数。
                </param>
      <exception cref="T:System.NotSupportedException">
                    此属性的任何用法。
                </exception>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.SetLength(System.Int64)">
      <summary>
                    设置流的长度。此方法始终引发 <see cref="T:System.NotSupportedException" />。
                </summary>
      <param name="value">
                    未使用此参数。
                </param>
      <exception cref="T:System.NotSupportedException">
                    此属性的任何用法。
                </exception>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.Socket">
      <summary>
                    获取基础 <see cref="T:System.Net.Sockets.Socket" />。
                </summary>
      <returns>
                    表示基础网络连接的 <see cref="T:System.Net.Sockets.Socket" />。
                </returns>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
                    将数据写入 <see cref="T:System.Net.Sockets.NetworkStream" />。
                </summary>
      <param name="buffer">
                    类型 <see cref="T:System.Byte" /> 的数组，该数组包含要写入 <see cref="T:System.Net.Sockets.NetworkStream" /> 的数据。
                </param>
      <param name="offset">
        <paramref name="buffer" /> 中开始写入数据的位置。
                </param>
      <param name="size">
                    要写入 <see cref="T:System.Net.Sockets.NetworkStream" /> 的字节数。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 参数为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 参数小于 0。
                
                    - 或 -
                <paramref name="offset" /> 参数大于 <paramref name="buffer" /> 的长度。
                
                    - 或 -
                <paramref name="size" /> 参数小于 0。
                
                    - 或 -
                <paramref name="size" /> 参数大于 <paramref name="buffer" /> 的长度减去 <paramref name="offset" /> 参数的值。
                </exception>
      <exception cref="T:System.IO.IOException">
                    写入到网络时出现错误。
                
                    - 或 -
                
                    访问套接字时出错。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.NetworkStream" /> 是关闭的。
                
                    - 或 -
                
                    从网络读取时出现错误。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.Writeable">
      <summary>
                    获取一个值，该值指示 <see cref="T:System.Net.Sockets.NetworkStream" /> 是否可写。
                </summary>
      <returns>
                    如果数据可写入该流，则为 true；否则，为 false。默认值为 true。
                </returns>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.WriteTimeout">
      <summary>
                    获取或设置写入操作阻止等待数据的时间量。
                </summary>
      <returns>
        <see cref="T:System.Int32" /> 指定以毫秒为单位的时间量，表示写入操作失败前经过的时间。默认值 <see cref="F:System.Threading.Timeout.Infinite" /> 指定写入操作未超时。
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    指定的值小于或等于零，并且不为 <see cref="F:System.Threading.Timeout.Infinite" />。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.Net.Sockets.ProtocolFamily">
      <summary>指定 <see cref="T:System.Net.Sockets.Socket" /> 类的实例可以使用的协议类型。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Unknown">
      <summary>未知协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Unspecified">
      <summary>未指定的协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Unix">
      <summary>Unix 本地到主机协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.InterNetwork">
      <summary>IP 版本 4 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.ImpLink">
      <summary>ARPANET IMP 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Pup">
      <summary>PUP 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Chaos">
      <summary>MIT CHAOS 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.NS">
      <summary>Xerox NS 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Ipx">
      <summary>IPX 或 SPX 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Iso">
      <summary>ISO 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Osi">
      <summary>OSI 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Ecma">
      <summary>欧洲计算机制造商协会 (ECMA) 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.DataKit">
      <summary>DataKit 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Ccitt">
      <summary>CCITT 协议，如 X.25。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Sna">
      <summary>IBM SNA 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.DecNet">
      <summary>DECNet 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.DataLink">
      <summary>直接数据链接协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Lat">
      <summary>LAT 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.HyperChannel">
      <summary>NSC HyperChannel 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.AppleTalk">
      <summary>AppleTalk 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.NetBios">
      <summary>NetBIOS 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.VoiceView">
      <summary>VoiceView 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.FireFox">
      <summary>FireFox 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Banyan">
      <summary>Banyan 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Atm">
      <summary>本机 ATM 服务协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.InterNetworkV6">
      <summary>IP 版本 6 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Cluster">
      <summary>Microsoft 群集产品协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Ieee12844">
      <summary>IEEE 1284.4 工作组协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Irda">
      <summary>IrDA 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.NetworkDesigners">
      <summary>支持网络设计器 OSI 网关的协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Max">
      <summary>MAX 协议。</summary>
    </member>
    <member name="T:System.Net.Sockets.ProtocolType">
      <summary>指定 <see cref="T:System.Net.Sockets.Socket" /> 类支持的协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IP">
      <summary>网际协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IPv6HopByHopOptions">
      <summary>IPv6 逐跳选项头。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Icmp">
      <summary>网际消息控制协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Igmp">
      <summary>网际组管理协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Ggp">
      <summary>网关到网关协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IPv4">
      <summary>Internet 协议版本 4。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Tcp">
      <summary>传输控制协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Pup">
      <summary>PARC 通用数据包协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Udp">
      <summary>用户数据报协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Idp">
      <summary>Internet 数据报协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IPv6">
      <summary>Internet 协议版本 6 (IPv6)。 </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IPv6RoutingHeader">
      <summary>IPv6 路由头。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IPv6FragmentHeader">
      <summary>IPv6 片段头。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IPSecEncapsulatingSecurityPayload">
      <summary>IPv6 封装式安全措施负载头。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IPSecAuthenticationHeader">
      <summary>IPv6 身份验证头。有关详细信息，请参见位于 http://www.ietf.org 中的 RFC 2292 的 2.2.1 节。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IcmpV6">
      <summary>用于 IPv6 的 Internet 控制消息协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IPv6NoNextHeader">
      <summary>IPv6 No Next 头。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IPv6DestinationOptions">
      <summary>IPv6 目标选项头。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.ND">
      <summary>网络磁盘协议（非正式）。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Raw">
      <summary>原始 IP 数据包协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Unspecified">
      <summary>未指定的协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Ipx">
      <summary>Internet 数据包交换协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Spx">
      <summary>顺序包交换协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.SpxII">
      <summary>顺序包交换协议第 2 版。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Unknown">
      <summary>未知协议。</summary>
    </member>
    <member name="T:System.Net.Sockets.SelectMode">
      <summary>为 <see cref="M:System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)" /> 方法定义轮询模式。</summary>
    </member>
    <member name="F:System.Net.Sockets.SelectMode.SelectRead">
      <summary>读状态模式。</summary>
    </member>
    <member name="F:System.Net.Sockets.SelectMode.SelectWrite">
      <summary>写状态模式。</summary>
    </member>
    <member name="F:System.Net.Sockets.SelectMode.SelectError">
      <summary>错误状态模式。</summary>
    </member>
    <member name="T:System.Net.Sockets.Socket">
      <summary>
                    实现 Berkeley 套接字接口。
                </summary>
    </member>
    <member name="M:System.Net.Sockets.Socket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
      <summary>
                    使用指定的地址族、套接字类型和协议初始化 <see cref="T:System.Net.Sockets.Socket" /> 类的新实例。
                </summary>
      <param name="addressFamily">
        <see cref="T:System.Net.Sockets.AddressFamily" /> 值之一。
                </param>
      <param name="socketType">
        <see cref="T:System.Net.Sockets.SocketType" /> 值之一。
                </param>
      <param name="protocolType">
        <see cref="T:System.Net.Sockets.ProtocolType" /> 值之一。
                </param>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="addressFamily" />、<paramref name="socketType" /> 和 <paramref name="protocolType" /> 的组合会导致无效套接字。
                </exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.#ctor(System.Net.Sockets.SocketInformation)">
      <summary>
                    使用 <see cref="M:System.Net.Sockets.Socket.DuplicateAndClose(System.Int32)" /> 返回的指定的值初始化 <see cref="T:System.Net.Sockets.Socket" /> 类的新实例。
                </summary>
      <param name="socketInformation">
        <see cref="M:System.Net.Sockets.Socket.DuplicateAndClose(System.Int32)" /> 返回的套接字信息。
                </param>
    </member>
    <member name="M:System.Net.Sockets.Socket.Accept">
      <summary>
                    为新建连接创建新的 <see cref="T:System.Net.Sockets.Socket" />。
                </summary>
      <returns>
                    新建连接的 <see cref="T:System.Net.Sockets.Socket" />。
                </returns>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    正在接受的套接字不会侦听连接。在调用 <see cref="M:System.Net.Sockets.Socket.Accept" /> 之前必须调用 <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> 和 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.Sockets.Socket.AddressFamily">
      <summary>
                    获取 <see cref="T:System.Net.Sockets.Socket" /> 的地址族。
                </summary>
      <returns>
        <see cref="T:System.Net.Sockets.AddressFamily" /> 值之一。
                </returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.Available">
      <summary>
                    获取已经从网络接收且可供读取的数据量。
                </summary>
      <returns>
                    从网络接收的、可供读取的数据的字节数。
                </returns>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)">
      <summary>
                    开始一个异步操作来接受一个传入的连接尝试。
                </summary>
      <returns>
                    一个 <see cref="T:System.IAsyncResult" />，它引用异步 <see cref="T:System.Net.Sockets.Socket" /> 创建。
                </returns>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。
                </param>
      <param name="state">
                    一个对象，它包含此请求的状态信息。
                </param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。
                </exception>
      <exception cref="T:System.NotSupportedException">
                    此方法需要 Windows NT。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    正在接受的套接字不会侦听连接。在调用 <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" /> 之前必须调用 <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> 和 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />。
                
                    - 或 -
                
                    已接受的套接字是绑定的。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="receiveSize" /> 小于 0。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginAccept(System.Int32,System.AsyncCallback,System.Object)">
      <summary>
                    开始异步操作以接受传入的连接尝试并接收客户端应用程序发送的第一个数据块。
                </summary>
      <returns>
                    一个 <see cref="T:System.IAsyncResult" />，它引用异步 <see cref="T:System.Net.Sockets.Socket" /> 创建。
                </returns>
      <param name="receiveSize">
                    要从发送方读取的字节数。
                </param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。
                </param>
      <param name="state">
                    一个对象，它包含此请求的状态信息。
                </param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。
                </exception>
      <exception cref="T:System.NotSupportedException">
                    此方法需要 Windows NT。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    正在接受的套接字不会侦听连接。在调用 <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" /> 之前必须调用 <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> 和 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />。
                
                    - 或 -
                
                    已接受的套接字是绑定的。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="receiveSize" /> 小于 0。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginAccept(System.Net.Sockets.Socket,System.Int32,System.AsyncCallback,System.Object)">
      <summary>
                    开始异步操作以接受从指定套接字传入的连接尝试并接收客户端应用程序发送的第一个数据块。
                </summary>
      <returns>
                    一个 <see cref="T:System.IAsyncResult" /> 对象，它引用异步 <see cref="T:System.Net.Sockets.Socket" /> 对象创建。
                </returns>
      <param name="acceptSocket">
                    接受的 <see cref="T:System.Net.Sockets.Socket" /> 对象。此值可以是 null。
                </param>
      <param name="receiveSize">
                    要接收的最大字节数。
                </param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。
                </param>
      <param name="state">
                    一个对象，它包含此请求的状态信息。
                </param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。
                </exception>
      <exception cref="T:System.NotSupportedException">
                    此方法需要 Windows NT。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    正在接受的套接字不会侦听连接。在调用 <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" /> 之前必须调用 <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> 和 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />。
                
                    - 或 -
                
                    已接受的套接字是绑定的。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="receiveSize" /> 小于 0。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)">
      <summary>
                    开始一个对远程主机连接的异步请求。
                </summary>
      <returns>
        <see cref="T:System.IAsyncResult" />，它引用异步连接。
                </returns>
      <param name="remoteEP">
        <see cref="T:System.Net.EndPoint" />，它表示远程主机。
                </param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。
                </param>
      <param name="state">
                    一个对象，它包含此请求的状态信息。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="remoteEP" /> 为 null。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                    调用堆栈上部的调用方无权执行所请求的操作。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.Socket" /> 为 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.SocketPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)">
      <summary>
                    开始一个对远程主机连接的异步请求。主机由 <see cref="T:System.Net.IPAddress" /> 和端口号指定。
                </summary>
      <returns>
        <see cref="T:System.IAsyncResult" />，它引用异步连接。
                </returns>
      <param name="address">
                    远程主机的 <see cref="T:System.Net.IPAddress" />。
                </param>
      <param name="port">
                    远程主机的端口号。
                </param>
      <param name="requestCallback">
                    一个 <see cref="T:System.AsyncCallback" /> 委托，它引用连接操作完成时要调用的方法。
                </param>
      <param name="state">
                    一个用户定义对象，其中包含连接操作的相关信息。操作完成时，此对象传递给了 <paramref name="requestCallback" /> 委托。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Net.Sockets.Socket" /> 不在套接字族中。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    此端口号无效。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> 的长度为零。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.Socket" /> 为 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.SocketPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginConnect(System.Net.IPAddress[],System.Int32,System.AsyncCallback,System.Object)">
      <summary>
                    开始一个对远程主机连接的异步请求。主机由 <see cref="T:System.Net.IPAddress" /> 数组和端口号指定。
                </summary>
      <returns>
        <see cref="T:System.IAsyncResult" />，它引用异步连接。
                </returns>
      <param name="addresses">
                    至少一个 <see cref="T:System.Net.IPAddress" />，指定远程主机。
                </param>
      <param name="port">
                    远程主机的端口号。
                </param>
      <param name="requestCallback">
                    一个 <see cref="T:System.AsyncCallback" /> 委托，它引用连接操作完成时要调用的方法。
                </param>
      <param name="state">
                    一个用户定义对象，其中包含连接操作的相关信息。操作完成时，此对象传递给了 <paramref name="requestCallback" /> 委托。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addresses" /> 为 null。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.NotSupportedException">
                    此方法对 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 的套接字有效。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    此端口号无效。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> 的长度为零。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.Socket" /> 为 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.SocketPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)">
      <summary>
                    开始一个对远程主机连接的异步请求。主机由主机名和端口号指定。
                </summary>
      <returns>
        <see cref="T:System.IAsyncResult" />，它引用异步连接。
                </returns>
      <param name="host">
                    远程主机的名称。
                </param>
      <param name="port">
                    远程主机的端口号。
                </param>
      <param name="requestCallback">
                    一个 <see cref="T:System.AsyncCallback" /> 委托，它引用连接操作完成时要调用的方法。
                </param>
      <param name="state">
                    一个用户定义对象，其中包含连接操作的相关信息。操作完成时，此对象传递给了 <paramref name="requestCallback" /> 委托。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="host" /> 为 null。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.NotSupportedException">
                    此方法对 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 系列中的套接字有效。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    此端口号无效。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.Socket" /> 为 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.SocketPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginDisconnect(System.Boolean,System.AsyncCallback,System.Object)">
      <summary>
                    开始异步请求从远程终结点断开连接。
                </summary>
      <returns>
                    一个 <see cref="T:System.IAsyncResult" /> 对象，它引用异步操作。
                </returns>
      <param name="reuseSocket">
                    如果关闭该连接后可以重用此套接字，则为 true；否则为 false。
                </param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。
                </param>
      <param name="state">
                    一个对象，它包含此请求的状态信息。
                </param>
      <exception cref="T:System.NotSupportedException">
                    操作系统为 Windows 2000 或更低版本，而此方法需要在 Windows XP 中使用。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
      <summary>
                    开始从连接的 <see cref="T:System.Net.Sockets.Socket" /> 中异步接收数据。
                </summary>
      <returns>
                    一个引用异步读取的 <see cref="T:System.IAsyncResult" />。
                </returns>
      <param name="buffer">
        <see cref="T:System.Byte" /> 类型的数组，它是存储接收到的数据的位置。
                </param>
      <param name="offset">
        <paramref name="buffer" /> 参数中存储所接收数据的位置，该位置从零开始计数。
                </param>
      <param name="size">
                    要接收的字节数。
                </param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。
                </param>
      <param name="callback">
                    一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。
                </param>
      <param name="state">
                    一个用户定义对象，其中包含接收操作的相关信息。操作完成时，此对象传递给了 <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> 委托。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 0。
                
                    - 或 -
                <paramref name="offset" /> 大于 <paramref name="buffer" /> 的长度。
                
                    - 或 -
                <paramref name="size" /> 小于 0。
                
                    - 或 -
                <paramref name="size" /> 大于 <paramref name="buffer" /> 的长度减去 <paramref name="offset" /> 参数的值。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)">
      <summary>
                    开始从连接的 <see cref="T:System.Net.Sockets.Socket" /> 中异步接收数据。
                </summary>
      <returns>
                    一个引用异步读取的 <see cref="T:System.IAsyncResult" />。
                </returns>
      <param name="buffer">
        <see cref="T:System.Byte" /> 类型的数组，它是存储接收到的数据的位置。
                </param>
      <param name="offset">
        <paramref name="buffer" /> 中存储所接收数据的位置。
                </param>
      <param name="size">
                    要接收的字节数。
                </param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。
                </param>
      <param name="errorCode">
                    一个 <see cref="T:System.Net.Sockets.SocketError" /> 对象，它存储套接字错误。
                </param>
      <param name="callback">
                    一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。
                </param>
      <param name="state">
                    一个用户定义对象，其中包含接收操作的相关信息。操作完成时，此对象传递给了 <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> 委托。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 0。
                
                    - 或 -
                <paramref name="offset" /> 大于 <paramref name="buffer" /> 的长度。
                
                    - 或 -
                <paramref name="size" /> 小于 0。
                
                    - 或 -
                <paramref name="size" /> 大于 <paramref name="buffer" /> 的长度减去 <paramref name="offset" /> 参数的值。
                </exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginReceive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
      <summary>
                    开始从连接的 <see cref="T:System.Net.Sockets.Socket" /> 中异步接收数据。
                </summary>
      <returns>
                    一个引用异步读取的 <see cref="T:System.IAsyncResult" />。
                </returns>
      <param name="buffers">
        <see cref="T:System.Byte" /> 类型的数组，它是存储接收到的数据的位置。
                </param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。
                </param>
      <param name="callback">
                    一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。
                </param>
      <param name="state">
                    一个用户定义对象，其中包含接收操作的相关信息。操作完成时，此对象传递给了 <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> 委托。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginReceive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)">
      <summary>
                    开始从连接的 <see cref="T:System.Net.Sockets.Socket" /> 中异步接收数据。
                </summary>
      <returns>
                    一个引用异步读取的 <see cref="T:System.IAsyncResult" />。
                </returns>
      <param name="buffers">
        <see cref="T:System.Byte" /> 类型的数组，它是存储接收到的数据的位置。
                </param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。
                </param>
      <param name="errorCode">
                    一个 <see cref="T:System.Net.Sockets.SocketError" /> 对象，它存储套接字错误。
                </param>
      <param name="callback">
                    一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。
                </param>
      <param name="state">
                    一个用户定义对象，其中包含接收操作的相关信息。操作完成时，此对象传递给了 <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> 委托。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)">
      <summary>
                    开始从指定网络设备中异步接收数据。
                </summary>
      <returns>
                    一个引用异步读取的 <see cref="T:System.IAsyncResult" />。
                </returns>
      <param name="buffer">
        <see cref="T:System.Byte" /> 类型的数组，它是存储接收到的数据的位置。
                </param>
      <param name="offset">
        <paramref name="buffer" /> 参数中存储数据的位置，该位置从零开始计数。
                </param>
      <param name="size">
                    要接收的字节数。
                </param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。
                </param>
      <param name="remoteEP">
                    一个 <see cref="T:System.Net.EndPoint" />，它表示数据的来源。
                </param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。
                </param>
      <param name="state">
                    一个对象，它包含此请求的状态信息。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。
                
                    - 或 -
                <paramref name="remoteEP" /> 为 null。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 0。
                
                    - 或 -
                <paramref name="offset" /> 大于 <paramref name="buffer" /> 的长度。
                
                    - 或 -
                <paramref name="size" /> 小于 0。
                
                    - 或 -
                <paramref name="size" /> 大于 <paramref name="buffer" /> 的长度减去 <paramref name="offset" /> 参数的值。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                    调用堆栈上部的调用方无权执行所请求的操作。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.SocketPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)">
      <summary>
                    开始使用指定的 <see cref="T:System.Net.Sockets.SocketFlags" /> 将指定字节数的数据异步接收到数据缓冲区的指定位置，然后存储终结点和数据包信息。
                </summary>
      <returns>
                    一个引用异步读取的 <see cref="T:System.IAsyncResult" />。
                </returns>
      <param name="buffer">
        <see cref="T:System.Byte" /> 类型的数组，它是存储接收到的数据的位置。
                </param>
      <param name="offset">
        <paramref name="buffer" /> 参数中存储数据的位置，该位置从零开始计数。
                </param>
      <param name="size">
                    要接收的字节数。
                </param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。
                </param>
      <param name="remoteEP">
                    一个 <see cref="T:System.Net.EndPoint" />，它表示数据的来源。
                </param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。
                </param>
      <param name="state">
                    一个对象，它包含此请求的状态信息。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。
                
                    - 或 -
                <paramref name="remoteEP" /> 为 null。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 0。
                
                    - 或 -
                <paramref name="offset" /> 大于 <paramref name="buffer" /> 的长度。
                
                    - 或 -
                <paramref name="size" /> 小于 0。
                
                    - 或 -
                <paramref name="size" /> 大于 <paramref name="buffer" /> 的长度减去 <paramref name="offset" /> 参数的值。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.NotSupportedException">
                    操作系统为 Windows 2000 或更低版本，而此方法需要在 Windows XP 中使用。
                </exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
      <summary>
                    将数据异步发送到连接的 <see cref="T:System.Net.Sockets.Socket" />。
                </summary>
      <returns>
                    引用异步发送的 <see cref="T:System.IAsyncResult" />。
                </returns>
      <param name="buffer">
        <see cref="T:System.Byte" /> 类型的数组，它包含要发送的数据。
                </param>
      <param name="offset">
        <paramref name="buffer" /> 参数中开始发送数据的位置，该位置从零开始计数。
                </param>
      <param name="size">
                    要发送的字节数。
                </param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。
                </param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。
                </param>
      <param name="state">
                    一个对象，它包含此请求的状态信息。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。请参见下面的备注部分。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 0。
                
                    - 或 -
                <paramref name="offset" /> 小于 <paramref name="buffer" /> 的长度。
                
                    - 或 -
                <paramref name="size" /> 小于 0。
                
                    - 或 -
                <paramref name="size" /> 大于 <paramref name="buffer" /> 的长度减去 <paramref name="offset" /> 参数的值。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)">
      <summary>
                    将数据异步发送到连接的 <see cref="T:System.Net.Sockets.Socket" />。
                </summary>
      <returns>
                    引用异步发送的 <see cref="T:System.IAsyncResult" />。
                </returns>
      <param name="buffer">
        <see cref="T:System.Byte" /> 类型的数组，它包含要发送的数据。
                </param>
      <param name="offset">
        <paramref name="buffer" /> 参数中开始发送数据的位置，该位置从零开始计数。
                </param>
      <param name="size">
                    要发送的字节数。
                </param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。
                </param>
      <param name="errorCode">
                    一个 <see cref="T:System.Net.Sockets.SocketError" /> 对象，它存储套接字错误。
                </param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。
                </param>
      <param name="state">
                    一个对象，它包含此请求的状态信息。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。请参见下面的备注部分。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 0。
                
                    - 或 -
                <paramref name="offset" /> 小于 <paramref name="buffer" /> 的长度。
                
                    - 或 -
                <paramref name="size" /> 小于 0。
                
                    - 或 -
                <paramref name="size" /> 大于 <paramref name="buffer" /> 的长度减去 <paramref name="offset" /> 参数的值。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginSend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
      <summary>
                    将数据异步发送到连接的 <see cref="T:System.Net.Sockets.Socket" />。
                </summary>
      <returns>
                    引用异步发送的 <see cref="T:System.IAsyncResult" />。
                </returns>
      <param name="buffers">
        <see cref="T:System.Byte" /> 类型的数组，它包含要发送的数据。
                </param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。
                </param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。
                </param>
      <param name="state">
                    一个对象，它包含此请求的状态信息。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffers" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffers" /> 为空。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。请参见下面的备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginSend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)">
      <summary>
                    将数据异步发送到连接的 <see cref="T:System.Net.Sockets.Socket" />。
                </summary>
      <returns>
                    引用异步发送的 <see cref="T:System.IAsyncResult" />。
                </returns>
      <param name="buffers">
        <see cref="T:System.Byte" /> 类型的数组，它包含要发送的数据。
                </param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。
                </param>
      <param name="errorCode">
                    一个 <see cref="T:System.Net.Sockets.SocketError" /> 对象，它存储套接字错误。
                </param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。
                </param>
      <param name="state">
                    一个对象，它包含此请求的状态信息。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffers" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffers" /> 为空。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。请参见下面的备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginSendFile(System.String,System.AsyncCallback,System.Object)">
      <summary>
                    使用 <see cref="F:System.Net.Sockets.TransmitFileOptions.UseDefaultWorkerThread" /> 标志，将文件 <paramref name="fileName" /> 发送到连接的 <see cref="T:System.Net.Sockets.Socket" /> 对象。
                </summary>
      <returns>
                    一个 <see cref="T:System.IAsyncResult" /> 对象，它表示异步发送。
                </returns>
      <param name="fileName">
                    一个字符串，它包含要发送的文件的路径和名称。此参数可以为 null。
                </param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。
                </param>
      <param name="state">
                    一个对象，它包含此请求的状态信息。
                </param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。
                </exception>
      <exception cref="T:System.NotSupportedException">
                    套接字未连接到远程主机。
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
                    未找到文件 <paramref name="fileName" />。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。请参见下面的备注部分。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginSendFile(System.String,System.Byte[],System.Byte[],System.Net.Sockets.TransmitFileOptions,System.AsyncCallback,System.Object)">
      <summary>
                    将文件和数据缓冲区异步发送到连接的 <see cref="T:System.Net.Sockets.Socket" /> 对象。
                </summary>
      <returns>
                    一个 <see cref="T:System.IAsyncResult" /> 对象，它表示异步操作。
                </returns>
      <param name="fileName">
                    一个字符串，它包含要发送的文件的路径和名称。此参数可以为 null。
                </param>
      <param name="preBuffer">
                    一个 <see cref="T:System.Byte" /> 数组，包含发送文件前要发送的数据。此参数可以为 null。
                </param>
      <param name="postBuffer">
                    一个 <see cref="T:System.Byte" /> 数组，包含发送文件后要发送的数据。此参数可以为 null。
                </param>
      <param name="flags">
        <see cref="T:System.Net.Sockets.TransmitFileOptions" /> 值的按位组合。
                </param>
      <param name="callback">
                    一个 <see cref="T:System.AsyncCallback" /> 委托，将在此操作完成时调用它。此参数可以为 null。
                </param>
      <param name="state">
                    一个用户定义的对象，它包含此请求的状态信息。此参数可以为 null。
                </param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。请参见下面的备注部分。
                </exception>
      <exception cref="T:System.NotSupportedException">
                    操作系统不是 Windows NT 或更高版本。
                
                    - 或 -
                
                    套接字未连接到远程主机。
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
                    未找到文件 <paramref name="fileName" />。
                </exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)">
      <summary>
                    向特定远程主机异步发送数据。
                </summary>
      <returns>
                    引用异步发送的 <see cref="T:System.IAsyncResult" />。
                </returns>
      <param name="buffer">
        <see cref="T:System.Byte" /> 类型的数组，它包含要发送的数据。
                </param>
      <param name="offset">
        <paramref name="buffer" /> 中的从其开始发送数据的、从零开始编排的位置。
                </param>
      <param name="size">
                    要发送的字节数。
                </param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。
                </param>
      <param name="remoteEP">
        <see cref="T:System.Net.EndPoint" />，表示远程设备。
                </param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。
                </param>
      <param name="state">
                    一个对象，它包含此请求的状态信息。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。
                
                    - 或 -
                <paramref name="remoteEP" /> 为 null。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 0。
                
                    - 或 -
                <paramref name="offset" /> 大于 <paramref name="buffer" /> 的长度。
                
                    - 或 -
                <paramref name="size" /> 小于 0。
                
                    - 或 -
                <paramref name="size" /> 大于 <paramref name="buffer" /> 的长度减去 <paramref name="offset" /> 参数的值。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                    调用堆栈上部的调用方无权执行所请求的操作。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.SocketPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)">
      <summary>
                    使 <see cref="T:System.Net.Sockets.Socket" /> 与一个本地终结点相关联。
                </summary>
      <param name="localEP">
                    要与 <see cref="T:System.Net.Sockets.Socket" /> 关联的本地 <see cref="T:System.Net.EndPoint" />。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localEP" /> 为 null。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                    调用堆栈上部的调用方无权执行所请求的操作。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.SocketPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.Sockets.Socket.Blocking">
      <summary>
                    获取或设置一个值，该值指示 <see cref="T:System.Net.Sockets.Socket" /> 是否处于阻止模式。
                </summary>
      <returns>
                    如果 <see cref="T:System.Net.Sockets.Socket" /> 将阻止，则为 true；否则为 false。默认值为 true。
                </returns>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.Close">
      <summary>
                    关闭 <see cref="T:System.Net.Sockets.Socket" /> 连接并释放所有关联的资源。
                </summary>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.Close(System.Int32)">
      <summary>
                    关闭 <see cref="T:System.Net.Sockets.Socket" /> 连接并释放所有关联的资源。
                </summary>
      <param name="timeout">
                    等待 <paramref name="timeout" /> 秒以发送所有剩余数据，然后关闭该套接字。
                </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)">
      <summary>
                    建立与远程主机的连接。
                </summary>
      <param name="remoteEP">
        <see cref="T:System.Net.EndPoint" />，表示远程设备。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="remoteEP" /> 为 null。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                    调用堆栈上部的调用方无权执行所请求的操作。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.Socket" /> 为 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.SocketPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.Connect(System.Net.IPAddress,System.Int32)">
      <summary>
                    建立与远程主机的连接。主机由 IP 地址和端口号指定。
                </summary>
      <param name="address">
                    远程主机的 IP 地址。
                </param>
      <param name="port">
                    远程主机的端口号。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    此端口号无效。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.NotSupportedException">
                    此方法对 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 系列中的套接字有效。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> 的长度为零。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.Socket" /> 为 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.SocketPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.Connect(System.Net.IPAddress[],System.Int32)">
      <summary>
                    建立与远程主机的连接。主机由 IP 地址的数组和端口号指定。
                </summary>
      <param name="addresses">
                    远程主机的 IP 地址。
                </param>
      <param name="port">
                    远程主机的端口号。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addresses" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    此端口号无效。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.NotSupportedException">
                    此方法对 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 系列中的套接字有效。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> 的长度为零。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.Socket" /> 为 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.SocketPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.Connect(System.String,System.Int32)">
      <summary>
                    建立与远程主机的连接。主机由主机名和端口号指定。
                </summary>
      <param name="host">
                    远程主机的名称。
                </param>
      <param name="port">
                    远程主机的端口号。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="host" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    此端口号无效。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.NotSupportedException">
                    此方法对 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 系列中的套接字有效。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.Socket" /> 为 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.SocketPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.Sockets.Socket.Connected">
      <summary>
                    获取一个值，该值指示 <see cref="T:System.Net.Sockets.Socket" /> 是在上次 <see cref="Overload:System.Net.Sockets.Socket.Send" /> 还是 <see cref="Overload:System.Net.Sockets.Socket.Receive" /> 操作时连接到远程主机。
                </summary>
      <returns>
                    如果 <see cref="T:System.Net.Sockets.Socket" /> 在最近操作时连接到远程资源，则为 true；否则为 false。
                </returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Disconnect(System.Boolean)">
      <summary>
                    关闭套接字连接并允许重用套接字。
                </summary>
      <param name="reuseSocket">
                    如果关闭当前连接后可以重用此套接字，则为 true；否则为 false。
                </param>
      <exception cref="T:System.PlatformNotSupportedException">
                    此方法需要 Windows 2000 或更低版本，否则将引发异常。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.Dispose(System.Boolean)">
      <summary>
                    释放由 <see cref="T:System.Net.Sockets.Socket" /> 使用的非托管资源，并可根据需要释放托管资源。
                </summary>
      <param name="disposing">
                    如果为 true，则释放托管资源和非托管资源；如果为 false，则仅释放非托管资源。
                </param>
    </member>
    <member name="P:System.Net.Sockets.Socket.DontFragment">
      <summary>
                    获取或设置 <see cref="T:System.Boolean" /> 值，该值指定 <see cref="T:System.Net.Sockets.Socket" /> 是否允许将 Internet 协议 (IP) 数据报分段。
                </summary>
      <returns>
                    如果 <see cref="T:System.Net.Sockets.Socket" /> 允许数据报分段，则为 true；否则为 false。默认值为 true。
                </returns>
      <exception cref="T:System.NotSupportedException">
                    只有对于在 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 族中的套接字，才可以设置此属性。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.DuplicateAndClose(System.Int32)">
      <summary>
                    重复目标进程的套接字引用，并关闭此进程的套接字。
                </summary>
      <returns>
                    要传递到目标进程的套接字引用。
                </returns>
      <param name="targetProcessId">
                    从中创建重复套接字引用的目标进程的 ID。
                </param>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="targetProcessID" /> 不是有效的进程 ID。
                
                    - 或 -
                
                    套接字引用的复制失败。
                </exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.EnableBroadcast">
      <summary>
                    获取或设置一个 <see cref="T:System.Boolean" /> 值，该值指定 <see cref="T:System.Net.Sockets.Socket" /> 是否可以发送或接收广播数据包。
                </summary>
      <returns>
                    如果 <see cref="T:System.Net.Sockets.Socket" /> 允许广播数据包，则为 true；否则为 false。默认值为 false。
                </returns>
      <exception cref="T:System.Net.Sockets.SocketException">
                    此选项仅对数据报套接字有效。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndAccept(System.Byte[]@,System.IAsyncResult)">
      <summary>
                    异步接受传入的连接尝试，并创建新的 <see cref="T:System.Net.Sockets.Socket" /> 对象来处理远程主机通信。此方法返回包含所传输的初始数据的缓冲区。
                </summary>
      <returns>
                    一个 <see cref="T:System.Net.Sockets.Socket" /> 对象，它处理与远程主机的通信。
                </returns>
      <param name="buffer">
                    包含所传输字节的类型 <see cref="T:System.Byte" /> 的数组。
                </param>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> 对象，它存储此异步操作的状态信息以及任何用户定义数据。
                </param>
      <exception cref="T:System.NotSupportedException">
                    此方法需要 Windows NT。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为空。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 并不是通过对 <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" /> 的调用创建的。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" /> 方法以前被调用过。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问 <see cref="T:System.Net.Sockets.Socket" /> 时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndAccept(System.Byte[]@,System.Int32@,System.IAsyncResult)">
      <summary>
                    异步接受传入的连接尝试，并创建新的 <see cref="T:System.Net.Sockets.Socket" /> 对象来处理远程主机通信。此方法返回一个缓冲区，其中包含初始数据和传输的字节数。
                </summary>
      <returns>
                    一个 <see cref="T:System.Net.Sockets.Socket" /> 对象，它处理与远程主机的通信。
                </returns>
      <param name="buffer">
                    包含所传输字节的类型 <see cref="T:System.Byte" /> 的数组。
                </param>
      <param name="bytesTransferred">
                    已传输的字节数。
                </param>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> 对象，它存储此异步操作的状态信息以及任何用户定义数据。
                </param>
      <exception cref="T:System.NotSupportedException">
                    此方法需要 Windows NT。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为空。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 并不是通过对 <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" /> 的调用创建的。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" /> 方法以前被调用过。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问 <see cref="T:System.Net.Sockets.Socket" /> 时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)">
      <summary>
                    异步接受传入的连接尝试，并创建新的 <see cref="T:System.Net.Sockets.Socket" /> 来处理远程主机通信。
                </summary>
      <returns>
                    一个 <see cref="T:System.Net.Sockets.Socket" />，它处理与远程主机的通信。
                </returns>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" />，它存储此异步操作的状态信息以及任何用户定义数据。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 并不是通过对 <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" /> 的调用创建的。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" /> 方法以前被调用过。
                </exception>
      <exception cref="T:System.NotSupportedException">
                    此方法需要 Windows NT。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)">
      <summary>
                    结束挂起的异步连接请求。
                </summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" />，它存储此异步操作的状态信息以及所有用户定义数据。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <see cref="M:System.Net.Sockets.Socket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)" /> 方法调用未返回 <paramref name="asyncResult" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    先前曾为异步连接调用过 <see cref="M:System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)" />。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndDisconnect(System.IAsyncResult)">
      <summary>
                    结束挂起的异步断开连接请求。
                </summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> 对象，它存储此异步操作的状态信息以及所有用户定义数据。
                </param>
      <exception cref="T:System.NotSupportedException">
                    操作系统为 Windows 2000 或更低版本，而此方法需要在 Windows XP 中使用。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <see cref="M:System.Net.Sockets.Socket.BeginDisconnect(System.Boolean,System.AsyncCallback,System.Object)" /> 方法调用未返回 <paramref name="asyncResult" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    先前曾为异步连接调用过 <see cref="M:System.Net.Sockets.Socket.EndDisconnect(System.IAsyncResult)" />。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.Net.WebException">
                    断开连接请求已超时。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)">
      <summary>
                    结束挂起的异步读取。
                </summary>
      <returns>
                    接收到的字节数。
                </returns>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" />，它存储此异步操作的状态信息以及所有用户定义数据。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <see cref="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> 方法调用未返回 <paramref name="asyncResult" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    先前曾为异步读取调用过 <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" />。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult,System.Net.Sockets.SocketError@)">
      <summary>
                    结束挂起的异步读取。
                </summary>
      <returns>
                    接收到的字节数。
                </returns>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" />，它存储此异步操作的状态信息以及所有用户定义数据。
                </param>
      <param name="errorCode">
                    一个 <see cref="T:System.Net.Sockets.SocketError" /> 对象，它存储套接字错误。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <see cref="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> 方法调用未返回 <paramref name="asyncResult" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    先前曾为异步读取调用过 <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" />。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)">
      <summary>
                    结束挂起的、从特定终结点进行异步读取。
                </summary>
      <returns>
                    如果成功，则返回已接收的字节数。如果不成功，则返回 0。
                </returns>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" />，它存储此异步操作的状态信息以及所有用户定义数据。
                </param>
      <param name="endPoint">
                    源 <see cref="T:System.Net.EndPoint" />。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <see cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" /> 方法调用未返回 <paramref name="asyncResult" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    先前曾为异步读取调用过 <see cref="M:System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)" />。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)">
      <summary>
                    结束挂起的、从特定终结点进行异步读取。此方法还显示有关数据包而不是 <see cref="M:System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)" /> 的更多信息。
                </summary>
      <returns>
                    如果成功，则返回已接收的字节数。如果不成功，则返回 0。
                </returns>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" />，它存储此异步操作的状态信息以及所有用户定义数据。
                </param>
      <param name="socketFlags">
                    所接收数据包的 <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。
                </param>
      <param name="endPoint">
                    源 <see cref="T:System.Net.EndPoint" />。
                </param>
      <param name="ipPacketInformation">
                    所接收数据包的 <see cref="T:System.Net.IPAddress" /> 和接口。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为null
                    - 或 -
                <paramref name="endPoint" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <see cref="M:System.Net.Sockets.Socket.BeginReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" /> 方法调用未返回 <paramref name="asyncResult" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    先前曾为异步读取调用过 <see cref="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" />。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)">
      <summary>
                    结束挂起的异步发送。
                </summary>
      <returns>
                    如果成功，则将返回向 <see cref="T:System.Net.Sockets.Socket" /> 发送的字节数；否则会返回无效 <see cref="T:System.Net.Sockets.Socket" /> 错误。
                </returns>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" />，它存储此异步操作的状态信息。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> 方法调用后未返回 <paramref name="asyncResult" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    先前为异步发送已调用过 <see cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" />。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult,System.Net.Sockets.SocketError@)">
      <summary>
                    结束挂起的异步发送。
                </summary>
      <returns>
                    如果成功，则将返回向 <see cref="T:System.Net.Sockets.Socket" /> 发送的字节数；否则会返回无效 <see cref="T:System.Net.Sockets.Socket" /> 错误。
                </returns>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" />，它存储此异步操作的状态信息。
                </param>
      <param name="errorCode">
                    一个 <see cref="T:System.Net.Sockets.SocketError" /> 对象，它存储套接字错误。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> 方法调用后未返回 <paramref name="asyncResult" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    先前为异步发送已调用过 <see cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" />。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndSendFile(System.IAsyncResult)">
      <summary>
                    结束文件的挂起异步发送。
                </summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> 对象，它存储此异步操作的状态信息。
                </param>
      <exception cref="T:System.NotSupportedException">
                    此方法需要 Windows NT。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为空。
                </exception>
      <exception cref="T:System.ArgumentException">
        <see cref="M:System.Net.Sockets.Socket.BeginSendFile(System.String,System.AsyncCallback,System.Object)" /> 方法调用未返回 <paramref name="asyncResult" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    先前曾为异步 <see cref="M:System.Net.Sockets.Socket.BeginSendFile(System.String,System.AsyncCallback,System.Object)" /> 调用过 <see cref="M:System.Net.Sockets.Socket.EndSendFile(System.IAsyncResult)" />。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。请参见下面的备注部分。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndSendTo(System.IAsyncResult)">
      <summary>
                    结束挂起的、向指定位置进行的异步发送。
                </summary>
      <returns>
                    如果成功，则返回已发送的字节数；否则会返回无效 <see cref="T:System.Net.Sockets.Socket" /> 错误。
                </returns>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" />，它存储此异步操作的状态信息以及所有用户定义数据。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <see cref="M:System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)" /> 方法调用未返回 <paramref name="asyncResult" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    先前为异步发送已调用过 <see cref="M:System.Net.Sockets.Socket.EndSendTo(System.IAsyncResult)" />。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.Sockets.Socket.ExclusiveAddressUse">
      <summary>
                    获取或设置 <see cref="T:System.Boolean" /> 值，该值指定 <see cref="T:System.Net.Sockets.Socket" /> 是否仅允许一个进程绑定到端口。
                </summary>
      <returns>
                    如果 <see cref="T:System.Net.Sockets.Socket" /> 仅允许一个套接字绑定到特定端口，则为 true；否则为 false。对于 Windows Server 2003 和 Windows XP Service Pack 2，默认值为 true，对于其他所有版本，默认值为 false。
                </returns>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    已为此 <see cref="T:System.Net.Sockets.Socket" /> 调用了 <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.Finalize">
      <summary>
        <see cref="T:System.Net.Sockets.Socket" /> 类使用的可用资源。
                </summary>
    </member>
    <member name="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)">
      <summary>
                    返回指定的 <see cref="T:System.Net.Sockets.Socket" /> 选项的值，表示为一个对象。
                </summary>
      <returns>
                    一个对象，表示选项的值。当将 <paramref name="optionName" /> 参数设置为 <see cref="F:System.Net.Sockets.SocketOptionName.Linger" /> 时，返回值为 <see cref="T:System.Net.Sockets.LingerOption" /> 类的一个实例。当将 <paramref name="optionName" /> 设置为 <see cref="F:System.Net.Sockets.SocketOptionName.AddMembership" /> 或 <see cref="F:System.Net.Sockets.SocketOptionName.DropMembership" /> 时，返回值为 <see cref="T:System.Net.Sockets.MulticastOption" /> 类的一个实例。当 <paramref name="optionName" /> 为其他任何值时，返回值为整数。
                </returns>
      <param name="optionLevel">
        <see cref="T:System.Net.Sockets.SocketOptionLevel" /> 值之一。
                </param>
      <param name="optionName">
        <see cref="T:System.Net.Sockets.SocketOptionName" /> 值之一。
                </param>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                
                    - 或 -
                <paramref name="optionName" /> 设置为不支持的值 <see cref="F:System.Net.Sockets.SocketOptionName.MaxConnections" />。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])">
      <summary>
                    返回指定的 <see cref="T:System.Net.Sockets.Socket" /> 选项设置，表示为字节数组。
                </summary>
      <param name="optionLevel">
        <see cref="T:System.Net.Sockets.SocketOptionLevel" /> 值之一。
                </param>
      <param name="optionName">
        <see cref="T:System.Net.Sockets.SocketOptionName" /> 值之一。
                </param>
      <param name="optionValue">
        <see cref="T:System.Byte" /> 类型的数组，用于接收选项设置。
                </param>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                
                    - 或 -
                
                    在 .NET Compact Framework 应用程序中，Windows CE 默认缓冲区的空间被设置为 32768 字节。通过调用 <see cref="Overload:System.Net.Sockets.Socket.SetSocketOption" />，可以更改每个套接字缓冲区的空间。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)">
      <summary>
                    返回数组中指定的 <see cref="T:System.Net.Sockets.Socket" /> 选项的值。
                </summary>
      <returns>
        <see cref="T:System.Byte" /> 类型的数组，它包含套接字选项的值。
                </returns>
      <param name="optionLevel">
        <see cref="T:System.Net.Sockets.SocketOptionLevel" /> 值之一。
                </param>
      <param name="optionName">
        <see cref="T:System.Net.Sockets.SocketOptionName" /> 值之一。
                </param>
      <param name="optionLength">
                    所需返回值的长度（以字节为单位）。
                </param>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                
                    - 或 -
                
                    在 .NET Compact Framework 应用程序中，Windows CE 默认缓冲区的空间被设置为 32768 字节。通过调用 <see cref="Overload:System.Net.Sockets.Socket.SetSocketOption" />，可以更改每个套接字缓冲区的空间。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.Sockets.Socket.Handle">
      <summary>
                    获取 <see cref="T:System.Net.Sockets.Socket" /> 的操作系统句柄。
                </summary>
      <returns>
                    一个 <see cref="T:System.IntPtr" />，它表示 <see cref="T:System.Net.Sockets.Socket" /> 的操作系统句柄。
                </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.IOControl(System.Int32,System.Byte[],System.Byte[])">
      <summary>
                    使用数字控制代码，为 <see cref="T:System.Net.Sockets.Socket" /> 设置低级操作模式。
                </summary>
      <returns>
        <paramref name="optionOutValue" /> 参数中的字节数。
                </returns>
      <param name="ioControlCode">
                    一个 <see cref="T:System.Int32" /> 值，该值指定要执行的操作的控制代码。
                </param>
      <param name="optionInValue">
                    一个 <see cref="T:System.Byte" /> 数组，它包含操作需要的输入数据。
                </param>
      <param name="optionOutValue">
                    一个 <see cref="T:System.Byte" /> 数组，它包含操作返回的输出数据。
                </param>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    试图不使用 <see cref="P:System.Net.Sockets.Socket.Blocking" /> 属性更改阻止模式。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                    调用堆栈中的调用方没有所需的权限。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.IOControl(System.Net.Sockets.IOControlCode,System.Byte[],System.Byte[])">
      <summary>
                    使用 <see cref="T:System.Net.Sockets.IOControlCode" /> 枚举指定控制代码，为 <see cref="T:System.Net.Sockets.Socket" /> 设置低级操作模式。
                </summary>
      <returns>
        <paramref name="optionOutValue" /> 参数中的字节数。
                </returns>
      <param name="ioControlCode">
                    一个 <see cref="T:System.Net.Sockets.IOControlCode" /> 值，它指定要执行的操作的控制代码。
                </param>
      <param name="optionInValue">
        <see cref="T:System.Byte" /> 类型的数组，包含操作要求的输入数据。
                </param>
      <param name="optionOutValue">
        <see cref="T:System.Byte" /> 类型的数组，包含由操作返回的输出数据。
                </param>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    试图不使用 <see cref="P:System.Net.Sockets.Socket.Blocking" /> 属性更改阻止模式。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.Sockets.Socket.IsBound">
      <summary>
                    获取一个值，该值指示 <see cref="T:System.Net.Sockets.Socket" /> 是否绑定到特定本地端口。
                </summary>
      <returns>
                    如果 <see cref="T:System.Net.Sockets.Socket" /> 绑定到本地端口，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.LingerState">
      <summary>
                    获取或设置一个值，该值指定 <see cref="T:System.Net.Sockets.Socket" /> 在尝试发送所有挂起数据时是否延迟关闭套接字。
                </summary>
      <returns>
                    一个 <see cref="T:System.Net.Sockets.LingerOption" />，它指定关闭套接字时如何逗留。
                </returns>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.Listen(System.Int32)">
      <summary>
                    将 <see cref="T:System.Net.Sockets.Socket" /> 置于侦听状态。
                </summary>
      <param name="backlog">
                    挂起连接队列的最大长度。
                </param>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.Sockets.Socket.LocalEndPoint">
      <summary>
                    获取本地终结点。
                </summary>
      <returns>
        <see cref="T:System.Net.Sockets.Socket" /> 当前用以进行通信的 <see cref="T:System.Net.EndPoint" />。
                </returns>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.Sockets.Socket.MulticastLoopback">
      <summary>
                    获取或设置一个值，该值指定传出的多路广播数据包是否传递到发送应用程序。
                </summary>
      <returns>
                    如果 <see cref="T:System.Net.Sockets.Socket" /> 接收传出的多路广播数据包，则为 true；否则为 false。
                </returns>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.Sockets.Socket.NoDelay">
      <summary>
                    获取或设置 <see cref="T:System.Boolean" /> 值，该值指定流 <see cref="T:System.Net.Sockets.Socket" /> 是否正在使用 Nagle 算法。
                </summary>
      <returns>
                    如果 <see cref="T:System.Net.Sockets.Socket" /> 使用 Nagle 算法，则为 false；否则为 true。默认值为 false。
                </returns>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问 <see cref="T:System.Net.Sockets.Socket" /> 时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.Sockets.Socket.OSSupportsIPv6">
      <summary>
                    指示基础操作系统和网络适配器是否支持 Internet 协议第 6 版 (IPv6)。
                </summary>
      <returns>
                    如果操作系统和网络适配器支持 IPv6 协议，则为 true；否则为 false。
                </returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)">
      <summary>
                    确定 <see cref="T:System.Net.Sockets.Socket" /> 的状态。
                </summary>
      <returns>
                    模式
                
                    返回值
                <see cref="F:System.Net.Sockets.SelectMode.SelectRead" />
                    如果已调用 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> 并且有挂起的连接，则为 true。
                
                    - 或 -
                
                    如果有数据可供读取，则为 true。
                
                    - 或 -
                
                    如果连接已关闭、重置或终止，则返回 true；
                
                    否则，返回 false。
                <see cref="F:System.Net.Sockets.SelectMode.SelectWrite" />
                    如果正在处理 <see cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" /> 并且连接已成功，则为 true；
                
                    - 或 -
                
                    如果可以发送数据，则返回 true；
                
                    否则，返回 false。
                <see cref="F:System.Net.Sockets.SelectMode.SelectError" />
                    如果正在处理不阻止的 <see cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />，并且连接已失败，则为 true；
                
                    - 或 -
                
                    如果 <see cref="F:System.Net.Sockets.SocketOptionName.OutOfBandInline" /> 未设置，并且带外数据可用，则为 true；
                
                    否则，返回 false。
                </returns>
      <param name="microSeconds">
                    等待响应的时间（以微秒为单位）。
                </param>
      <param name="mode">
        <see cref="T:System.Net.Sockets.SelectMode" /> 值之一。
                </param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="mode" /> 参数不是一个 <see cref="T:System.Net.Sockets.SelectMode" /> 值。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。请参见下面的备注。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.Sockets.Socket.ProtocolType">
      <summary>
                    获取 <see cref="T:System.Net.Sockets.Socket" /> 的协议类型。
                </summary>
      <returns>
        <see cref="T:System.Net.Sockets.ProtocolType" /> 值之一。
                </returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Receive(System.Byte[])">
      <summary>
                    从绑定的 <see cref="T:System.Net.Sockets.Socket" /> 套接字接收数据，将数据存入接收缓冲区。
                </summary>
      <returns>
                    接收到的字节数。
                </returns>
      <param name="buffer">
        <see cref="T:System.Byte" /> 类型的数组，它是存储接收到的数据的位置。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                    调用堆栈中的调用方没有所需的权限。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
      <summary>
                    使用指定的 <see cref="T:System.Net.Sockets.SocketFlags" />，从绑定的 <see cref="T:System.Net.Sockets.Socket" /> 接收指定的字节数，存入接收缓冲区的指定偏移量位置。
                </summary>
      <returns>
                    接收到的字节数。
                </returns>
      <param name="buffer">
        <see cref="T:System.Byte" /> 类型的数组，它是存储接收到的数据的位置。
                </param>
      <param name="offset">
        <paramref name="buffer" /> 中存储所接收数据的位置。
                </param>
      <param name="size">
                    要接收的字节数。
                </param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 0。
                
                    - 或 -
                <paramref name="offset" /> 大于 <paramref name="buffer" /> 的长度。
                
                    - 或 -
                <paramref name="size" /> 小于 0。
                
                    - 或 -
                <paramref name="size" /> 大于 <paramref name="buffer" /> 的长度减去 <paramref name="offset" /> 参数的值。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="socketFlags" /> 不是值的有效组合。
                
                    - 或 -
                
                    未设置 <see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> 属性。
                
                    - 或 -
                
                    访问 <see cref="T:System.Net.Sockets.Socket" /> 时发生操作系统错误。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                    调用堆栈中的调用方没有所需的权限。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)">
      <summary>
                    使用指定的 <see cref="T:System.Net.Sockets.SocketFlags" />，从绑定的 <see cref="T:System.Net.Sockets.Socket" /> 接收数据，将数据存入接收缓冲区。
                </summary>
      <returns>
                    接收到的字节数。
                </returns>
      <param name="buffer">
        <see cref="T:System.Byte" /> 类型的数组，它是存储接收到的数据的位置。
                </param>
      <param name="offset">
        <paramref name="buffer" /> 参数中存储所接收数据的位置。
                </param>
      <param name="size">
                    要接收的字节数。
                </param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。
                </param>
      <param name="errorCode">
                    一个 <see cref="T:System.Net.Sockets.SocketError" /> 对象，它存储套接字错误。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 0。
                
                    - 或 -
                <paramref name="offset" /> 大于 <paramref name="buffer" /> 的长度。
                
                    - 或 -
                <paramref name="size" /> 小于 0。
                
                    - 或 -
                <paramref name="size" /> 大于 <paramref name="buffer" /> 的长度减去 <paramref name="offset" /> 参数的值。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="socketFlags" /> 不是值的有效组合。
                
                    - 或 -
                
                    未设置 <see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> 属性。
                
                    - 或 -
                
                    访问 <see cref="T:System.Net.Sockets.Socket" /> 时发生操作系统错误。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                    调用堆栈中的调用方没有所需的权限。
                </exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)">
      <summary>
                    使用指定的 <see cref="T:System.Net.Sockets.SocketFlags" />，从绑定的 <see cref="T:System.Net.Sockets.Socket" /> 接收指定字节数的数据，并将数据存入接收缓冲区。
                </summary>
      <returns>
                    接收到的字节数。
                </returns>
      <param name="buffer">
        <see cref="T:System.Byte" /> 类型的数组，它是存储接收到的数据的位置。
                </param>
      <param name="size">
                    要接收的字节数。
                </param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="size" /> 超出了 <paramref name="buffer" /> 的大小。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                    调用堆栈中的调用方没有所需的权限。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Net.Sockets.SocketFlags)">
      <summary>
                    使用指定的 <see cref="T:System.Net.Sockets.SocketFlags" />，从绑定的 <see cref="T:System.Net.Sockets.Socket" /> 接收数据，将数据存入接收缓冲区。
                </summary>
      <returns>
                    接收到的字节数。
                </returns>
      <param name="buffer">
        <see cref="T:System.Byte" /> 类型的数组，它是存储接收到的数据的位置。
                </param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                    调用堆栈中的调用方没有所需的权限。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
      <summary>
                    从绑定的 <see cref="T:System.Net.Sockets.Socket" /> 接收数据，将数据存入接收缓冲区列表中。
                </summary>
      <returns>
                    接收到的字节数。
                </returns>
      <param name="buffers">
        <see cref="T:System.Byte" /> 类型的一个 <see cref="T:System.ArraySegment`1" /> 列表，包含接收的数据。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 参数为 null。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时出现错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)">
      <summary>
                    使用指定的 <see cref="T:System.Net.Sockets.SocketFlags" />，从绑定的 <see cref="T:System.Net.Sockets.Socket" /> 接收数据，将数据存入接收缓冲区列表中。
                </summary>
      <returns>
                    接收到的字节数。
                </returns>
      <param name="buffers">
        <see cref="T:System.Byte" /> 类型的一个 <see cref="T:System.ArraySegment`1" /> 列表，包含接收的数据。
                </param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffers" /> 为 null。
                
                    - 或 -
                <paramref name="buffers" />.Count 是零。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时出现错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)">
      <summary>
                    使用指定的 <see cref="T:System.Net.Sockets.SocketFlags" />，从绑定的 <see cref="T:System.Net.Sockets.Socket" /> 接收数据，将数据存入接收缓冲区列表中。
                </summary>
      <returns>
                    接收到的字节数。
                </returns>
      <param name="buffers">
        <see cref="T:System.Byte" /> 类型的一个 <see cref="T:System.ArraySegment`1" /> 列表，包含接收的数据。
                </param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。
                </param>
      <param name="errorCode">
                    一个 <see cref="T:System.Net.Sockets.SocketError" /> 对象，它存储套接字错误。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffers" /> 为 null。
                
                    - 或 -
                <paramref name="buffers" />.Count 是零。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时出现错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.ReceiveBufferSize">
      <summary>
                    获取或设置一个值，它指定 <see cref="T:System.Net.Sockets.Socket" /> 接收缓冲区的大小。
                </summary>
      <returns>
        <see cref="T:System.Int32" />，它包含接收缓冲区的大小（以字节为单位）。默认值为 8192。
                </returns>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    为设置操作指定的值小于 0。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)">
      <summary>
                    使用指定的 <see cref="T:System.Net.Sockets.SocketFlags" /> 将指定字节数的数据接收到数据缓冲区的指定位置并存储终结点。
                </summary>
      <returns>
                    接收到的字节数。
                </returns>
      <param name="buffer">
        <see cref="T:System.Byte" /> 类型的数组，它是存储接收到的数据的位置。
                </param>
      <param name="offset">
        <paramref name="buffer" /> 参数中存储所接收数据的位置。
                </param>
      <param name="size">
                    要接收的字节数。
                </param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。
                </param>
      <param name="remoteEP">
                    按引用传递的 <see cref="T:System.Net.EndPoint" />，表示远程服务器。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。
                
                    - 或 -
                <paramref name="remoteEP" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 0。
                
                    - 或 -
                <paramref name="offset" /> 大于 <paramref name="buffer" /> 的长度。
                
                    - 或 -
                <paramref name="size" /> 小于 0。
                
                    - 或 -
                <paramref name="size" /> 大于 <paramref name="buffer" /> 的长度减去偏移量参数的值。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="socketFlags" /> 不是值的有效组合。
                
                    - 或 -
                
                    未设置 <see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> 属性。
                
                    - 或 -
                
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.SocketPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)">
      <summary>
                    使用指定的 <see cref="T:System.Net.Sockets.SocketFlags" /> 将指定的字节数接收到数据缓冲区并存储终结点。
                </summary>
      <returns>
                    接收到的字节数。
                </returns>
      <param name="buffer">
        <see cref="T:System.Byte" /> 类型的数组，它是存储接收到的数据的位置。
                </param>
      <param name="size">
                    要接收的字节数。
                </param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。
                </param>
      <param name="remoteEP">
                    按引用传递的 <see cref="T:System.Net.EndPoint" />，表示远程服务器。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。
                
                    - 或 -
                <paramref name="remoteEP" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="size" /> 小于 0。
                
                    - 或 -
                <paramref name="size" /> 大于 <paramref name="buffer" /> 的长度。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="socketFlags" /> 不是值的有效组合。
                
                    - 或 -
                
                    未设置 <see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> 属性。
                
                    - 或 -
                
                    访问 <see cref="T:System.Net.Sockets.Socket" /> 时发生操作系统错误。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                    调用堆栈中的调用方没有所需的权限。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.SocketPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.EndPoint@)">
      <summary>
                    将数据报接收到数据缓冲区并存储终结点。
                </summary>
      <returns>
                    接收到的字节数。
                </returns>
      <param name="buffer">
        <see cref="T:System.Byte" /> 类型的数组，它是存储接收到的数据的位置。
                </param>
      <param name="remoteEP">
                    按引用传递的 <see cref="T:System.Net.EndPoint" />，表示远程服务器。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。
                
                    - 或 -
                <paramref name="remoteEP" /> 为 null。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                    调用堆栈中的调用方没有所需的权限。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.SocketPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint@)">
      <summary>
                    使用指定的 <see cref="T:System.Net.Sockets.SocketFlags" /> 将数据报接收到数据缓冲区并存储终结点。
                </summary>
      <returns>
                    接收到的字节数。
                </returns>
      <param name="buffer">
        <see cref="T:System.Byte" /> 类型的数组，它是存储接收到的数据的位置。
                </param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。
                </param>
      <param name="remoteEP">
                    按引用传递的 <see cref="T:System.Net.EndPoint" />，表示远程服务器。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。
                
                    - 或 -
                <paramref name="remoteEP" /> 为 null。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                    调用堆栈中的调用方没有所需的权限。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.SocketPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)">
      <summary>
                    使用指定的 <see cref="T:System.Net.Sockets.SocketFlags" /> 将指定字节数的数据接收到数据缓冲区的指定位置，然后存储终结点和数据包信息。
                </summary>
      <returns>
                    接收到的字节数。
                </returns>
      <param name="buffer">
        <see cref="T:System.Byte" /> 类型的数组，它是存储接收到的数据的位置。
                </param>
      <param name="offset">
        <paramref name="buffer" /> 参数中存储所接收数据的位置。
                </param>
      <param name="size">
                    要接收的字节数。
                </param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。
                </param>
      <param name="remoteEP">
                    按引用传递的 <see cref="T:System.Net.EndPoint" />，表示远程服务器。
                </param>
      <param name="ipPacketInformation">
        <see cref="T:System.Net.Sockets.IPPacketInformation" />，它保存地址和接口信息。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。
                
                    - 或 -
                <paramref name="remoteEP" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 0。
                
                    - 或 -
                <paramref name="offset" /> 大于 <paramref name="buffer" /> 的长度。
                
                    - 或 -
                <paramref name="size" /> 小于 0。
                
                    - 或 -
                <paramref name="size" /> 大于 <paramref name="buffer" /> 的长度减去偏移量参数的值。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="socketFlags" /> 不是值的有效组合。
                
                    - 或 -
                
                    未设置 <see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> 属性。
                
                    - 或 -
                
                    .NET Framework 运行在 AMD 64 位处理器上。
                
                    - 或 -
                
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.NotSupportedException">
                    操作系统为 Windows 2000 或更低版本，而此方法需要在 Windows XP 中使用。
                </exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.ReceiveTimeout">
      <summary>
                    获取或设置一个值，该值指定之后同步 <see cref="Overload:System.Net.Sockets.Socket.Receive" /> 调用将超时的时间长度。
                </summary>
      <returns>
                    超时值（以毫秒为单位）。默认值为 0，指示超时期限无限大。指定 -1 还会指示超时期限无限大。
                </returns>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    为设置操作指定的值小于 -1。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.Sockets.Socket.RemoteEndPoint">
      <summary>
                    获取远程终结点。
                </summary>
      <returns>
                    当前和 <see cref="T:System.Net.Sockets.Socket" /> 通信的 <see cref="T:System.Net.EndPoint" />。
                </returns>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.Select(System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Int32)">
      <summary>
                    确定一个或多个套接字的状态。
                </summary>
      <param name="checkRead">
                    要检查可读性的 <see cref="T:System.Net.Sockets.Socket" /> 实例的 <see cref="T:System.Collections.IList" />。
                </param>
      <param name="checkWrite">
                    一个 <see cref="T:System.Net.Sockets.Socket" /> 实例的 <see cref="T:System.Collections.IList" />，用于检查可写性。
                </param>
      <param name="checkError">
                    要检查错误的 <see cref="T:System.Net.Sockets.Socket" /> 实例的 <see cref="T:System.Collections.IList" />。
                </param>
      <param name="microSeconds">
                    超时值（以毫秒为单位）。A -1 值指示超时值为无限大。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="checkRead" /> 参数为 null 或空。
                
                    -并且-
                <paramref name="checkWrite" /> 参数为 null 或空。
                
                    -并且-
                <paramref name="checkError" /> 参数为 null 或空。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Send(System.Byte[])">
      <summary>
                    将数据发送到连接的 <see cref="T:System.Net.Sockets.Socket" />。
                </summary>
      <returns>
                    已发送到 <see cref="T:System.Net.Sockets.Socket" /> 的字节数。
                </returns>
      <param name="buffer">
        <see cref="T:System.Byte" /> 类型的数组，它包含要发送的数据。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
      <summary>
                    使用指定的 <see cref="T:System.Net.Sockets.SocketFlags" />，将指定字节数的数据发送到已连接的 <see cref="T:System.Net.Sockets.Socket" />（从指定的偏移量开始）。
                </summary>
      <returns>
                    已发送到 <see cref="T:System.Net.Sockets.Socket" /> 的字节数。
                </returns>
      <param name="buffer">
        <see cref="T:System.Byte" /> 类型的数组，它包含要发送的数据。
                </param>
      <param name="offset">
                    数据缓冲区中开始发送数据的位置。
                </param>
      <param name="size">
                    要发送的字节数。
                </param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 0。
                
                    - 或 -
                <paramref name="offset" /> 大于 <paramref name="buffer" /> 的长度。
                
                    - 或 -
                <paramref name="size" /> 小于 0。
                
                    - 或 -
                <paramref name="size" /> 大于 <paramref name="buffer" /> 的长度减去 <paramref name="offset" /> 参数的值。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="socketFlags" /> 不是值的有效组合。
                
                    - 或 -
                
                    访问 <see cref="T:System.Net.Sockets.Socket" /> 时发生操作系统错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)">
      <summary>
                    从指定的偏移量开始使用指定的 <see cref="T:System.Net.Sockets.SocketFlags" /> 将指定字节数的数据发送到连接的 <see cref="T:System.Net.Sockets.Socket" />。
                </summary>
      <returns>
                    已发送到 <see cref="T:System.Net.Sockets.Socket" /> 的字节数。
                </returns>
      <param name="buffer">
        <see cref="T:System.Byte" /> 类型的数组，它包含要发送的数据。
                </param>
      <param name="offset">
                    数据缓冲区中开始发送数据的位置。
                </param>
      <param name="size">
                    要发送的字节数。
                </param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。
                </param>
      <param name="errorCode">
                    一个 <see cref="T:System.Net.Sockets.SocketError" /> 对象，它存储套接字错误。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 0。
                
                    - 或 -
                <paramref name="offset" /> 大于 <paramref name="buffer" /> 的长度。
                
                    - 或 -
                <paramref name="size" /> 小于 0。
                
                    - 或 -
                <paramref name="size" /> 大于 <paramref name="buffer" /> 的长度减去 <paramref name="offset" /> 参数的值。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="socketFlags" /> 不是值的有效组合。
                
                    - 或 -
                
                    访问 <see cref="T:System.Net.Sockets.Socket" /> 时发生操作系统错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)">
      <summary>
                    使用指定的 <see cref="T:System.Net.Sockets.SocketFlags" />，将指定字节数的数据发送到已连接的 <see cref="T:System.Net.Sockets.Socket" />。
                </summary>
      <returns>
                    已发送到 <see cref="T:System.Net.Sockets.Socket" /> 的字节数。
                </returns>
      <param name="buffer">
        <see cref="T:System.Byte" /> 类型的数组，它包含要发送的数据。
                </param>
      <param name="size">
                    要发送的字节数。
                </param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="size" /> 小于 0 或超过缓冲区的大小。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="socketFlags" /> 不是值的有效组合。
                
                    - 或 -
                
                    访问套接字时发生操作系统错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Net.Sockets.SocketFlags)">
      <summary>
                    使用指定的 <see cref="T:System.Net.Sockets.SocketFlags" /> 将数据发送到连接的 <see cref="T:System.Net.Sockets.Socket" />。
                </summary>
      <returns>
                    已发送到 <see cref="T:System.Net.Sockets.Socket" /> 的字节数。
                </returns>
      <param name="buffer">
        <see cref="T:System.Byte" /> 类型的数组，它包含要发送的数据。
                </param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
      <summary>
                    将列表中的一组缓冲区发送到连接的 <see cref="T:System.Net.Sockets.Socket" />。
                </summary>
      <returns>
                    已发送到 <see cref="T:System.Net.Sockets.Socket" /> 的字节数。
                </returns>
      <param name="buffers">
        <see cref="T:System.Byte" /> 类型的 <see cref="T:System.ArraySegment`1" /> 的列表，它包含要发送的数据。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffers" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffers" /> 为空。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。请参见下面的备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)">
      <summary>
                    使用指定的 <see cref="T:System.Net.Sockets.SocketFlags" />，将列表中的一组缓冲区发送到连接的 <see cref="T:System.Net.Sockets.Socket" />。
                </summary>
      <returns>
                    已发送到 <see cref="T:System.Net.Sockets.Socket" /> 的字节数。
                </returns>
      <param name="buffers">
        <see cref="T:System.Byte" /> 类型的 <see cref="T:System.ArraySegment`1" /> 的列表，它包含要发送的数据。
                </param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffers" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffers" /> 为空。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)">
      <summary>
                    使用指定的 <see cref="T:System.Net.Sockets.SocketFlags" />，将列表中的一组缓冲区发送到连接的 <see cref="T:System.Net.Sockets.Socket" />。
                </summary>
      <returns>
                    已发送到 <see cref="T:System.Net.Sockets.Socket" /> 的字节数。
                </returns>
      <param name="buffers">
        <see cref="T:System.Byte" /> 类型的 <see cref="T:System.ArraySegment`1" /> 的列表，它包含要发送的数据。
                </param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。
                </param>
      <param name="errorCode">
                    一个 <see cref="T:System.Net.Sockets.SocketError" /> 对象，它存储套接字错误。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffers" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffers" /> 为空。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.SendBufferSize">
      <summary>
                    获取或设置一个值，该值指定 <see cref="T:System.Net.Sockets.Socket" /> 发送缓冲区的大小。
                </summary>
      <returns>
        <see cref="T:System.Int32" />，它包含发送缓冲区的大小（以字节为单位）。默认值为 8192。
                </returns>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    为设置操作指定的值小于 0。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendFile(System.String)">
      <summary>
                    使用 <see cref="F:System.Net.Sockets.TransmitFileOptions.UseDefaultWorkerThread" /> 传输标志，将文件 <paramref name="fileName" /> 发送到连接的 <see cref="T:System.Net.Sockets.Socket" /> 对象。
                </summary>
      <param name="fileName">
                    一个 <see cref="T:System.String" />，它包含要发送的文件的路径和名称。此参数可以为 null。
                </param>
      <exception cref="T:System.NotSupportedException">
                    套接字未连接到远程主机。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.Socket" /> 对象不处于阻止模式，无法接受此同步调用。
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
                    未找到文件 <paramref name="fileName" />。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendFile(System.String,System.Byte[],System.Byte[],System.Net.Sockets.TransmitFileOptions)">
      <summary>
                    使用指定的 <see cref="T:System.Net.Sockets.TransmitFileOptions" /> 值，将文件 <paramref name="fileName" /> 和数据缓冲区发送到连接的 <see cref="T:System.Net.Sockets.Socket" /> 对象。
                </summary>
      <param name="fileName">
                    一个 <see cref="T:System.String" />，它包含要发送的文件的路径和名称。此参数可以为 null。
                </param>
      <param name="preBuffer">
                    一个 <see cref="T:System.Byte" /> 数组，包含发送文件前要发送的数据。此参数可以为 null。
                </param>
      <param name="postBuffer">
                    一个 <see cref="T:System.Byte" /> 数组，包含发送文件后要发送的数据。此参数可以为 null。
                </param>
      <param name="flags">
                    一个或多个 <see cref="T:System.Net.Sockets.TransmitFileOptions" /> 值。
                </param>
      <exception cref="T:System.NotSupportedException">
                    操作系统不是 Windows NT 或更高版本。
                
                    - 或 -
                
                    套接字未连接到远程主机。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.Socket" /> 对象不处于阻止模式，无法接受此同步调用。
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
                    未找到文件 <paramref name="fileName" />。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.SendTimeout">
      <summary>
                    获取或设置一个值，该值指定之后同步 <see cref="Overload:System.Net.Sockets.Socket.Send" /> 调用将超时的时间长度。
                </summary>
      <returns>
                    超时值（以毫秒为单位）。如果将该属性设置为 1 到 499 之间的值，该值将被更改为 500。默认值为 0，指示超时期限无限大。指定 -1 还会指示超时期限无限大。
                </returns>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    为设置操作指定的值小于 -1。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)">
      <summary>
                    使用指定的 <see cref="T:System.Net.Sockets.SocketFlags" />，将指定字节数的数据发送到指定终结点（从缓冲区中的指定位置开始）。
                </summary>
      <returns>
                    已发送的字节数。
                </returns>
      <param name="buffer">
        <see cref="T:System.Byte" /> 类型的数组，它包含要发送的数据。
                </param>
      <param name="offset">
                    数据缓冲区中开始发送数据的位置。
                </param>
      <param name="size">
                    要发送的字节数。
                </param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。
                </param>
      <param name="remoteEP">
        <see cref="T:System.Net.EndPoint" />，它表示数据的目标位置。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。
                
                    - 或 -
                <paramref name="remoteEP" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 0。
                
                    - 或 -
                <paramref name="offset" /> 大于 <paramref name="buffer" /> 的长度。
                
                    - 或 -
                <paramref name="size" /> 小于 0。
                
                    - 或 -
                <paramref name="size" /> 大于 <paramref name="buffer" /> 的长度减去 <paramref name="offset" /> 参数的值。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="socketFlags" /> 不是值的有效组合。
                
                    - 或 -
                
                    访问 <see cref="T:System.Net.Sockets.Socket" /> 时发生操作系统错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                    调用堆栈中的调用方没有所需的权限。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.SocketPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)">
      <summary>
                    使用指定的 <see cref="T:System.Net.Sockets.SocketFlags" />，将指定字节数的数据发送到指定的终结点。
                </summary>
      <returns>
                    已发送的字节数。
                </returns>
      <param name="buffer">
        <see cref="T:System.Byte" /> 类型的数组，它包含要发送的数据。
                </param>
      <param name="size">
                    要发送的字节数。
                </param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。
                </param>
      <param name="remoteEP">
        <see cref="T:System.Net.EndPoint" />，它表示数据的目标位置。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。
                
                    - 或 -
                <paramref name="remoteEP" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    指定的 <paramref name="size" /> 超出 <paramref name="buffer" /> 的大小。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.SocketPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.EndPoint)">
      <summary>
                    将数据发送到指定的终结点。
                </summary>
      <returns>
                    已发送的字节数。
                </returns>
      <param name="buffer">
        <see cref="T:System.Byte" /> 类型的数组，它包含要发送的数据。
                </param>
      <param name="remoteEP">
        <see cref="T:System.Net.EndPoint" />，它表示数据的目标位置。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。
                
                    - 或 -
                <paramref name="remoteEP" /> 为 null。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.SocketPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint)">
      <summary>
                    使用指定的 <see cref="T:System.Net.Sockets.SocketFlags" />，将数据发送到特定的终结点。
                </summary>
      <returns>
                    已发送的字节数。
                </returns>
      <param name="buffer">
        <see cref="T:System.Byte" /> 类型的数组，它包含要发送的数据。
                </param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。
                </param>
      <param name="remoteEP">
        <see cref="T:System.Net.EndPoint" />，它表示数据的目标位置。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。
                
                    - 或 -
                <paramref name="remoteEP" /> 为 null。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.SocketPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Boolean)">
      <summary>
                    将指定的 <see cref="T:System.Net.Sockets.Socket" /> 选项设置为指定的 <see cref="T:System.Boolean" /> 值。
                </summary>
      <param name="optionLevel">
        <see cref="T:System.Net.Sockets.SocketOptionLevel" /> 值之一。
                </param>
      <param name="optionName">
        <see cref="T:System.Net.Sockets.SocketOptionName" /> 值之一。
                </param>
      <param name="optionValue">
                    选项的值，表示为 <see cref="T:System.Boolean" />。
                </param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])">
      <summary>
                    将指定的 <see cref="T:System.Net.Sockets.Socket" /> 选项设置为指定的值，表示为字节数组。
                </summary>
      <param name="optionLevel">
        <see cref="T:System.Net.Sockets.SocketOptionLevel" /> 值之一。
                </param>
      <param name="optionName">
        <see cref="T:System.Net.Sockets.SocketOptionName" /> 值之一。
                </param>
      <param name="optionValue">
        <see cref="T:System.Byte" /> 类型的数组，表示选项值。
                </param>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)">
      <summary>
                    将指定的 <see cref="T:System.Net.Sockets.Socket" /> 选项设置为指定的整数值。
                </summary>
      <param name="optionLevel">
        <see cref="T:System.Net.Sockets.SocketOptionLevel" /> 值之一。
                </param>
      <param name="optionName">
        <see cref="T:System.Net.Sockets.SocketOptionName" /> 值之一。
                </param>
      <param name="optionValue">
                    该选项的值。
                </param>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Object)">
      <summary>
                    将指定的 <see cref="T:System.Net.Sockets.Socket" /> 选项设置为指定值，表示为对象。
                </summary>
      <param name="optionLevel">
        <see cref="T:System.Net.Sockets.SocketOptionLevel" /> 值之一。
                </param>
      <param name="optionName">
        <see cref="T:System.Net.Sockets.SocketOptionName" /> 值之一。
                </param>
      <param name="optionValue">
                    一个 <see cref="T:System.Net.Sockets.LingerOption" /> 或 <see cref="T:System.Net.Sockets.MulticastOption" />，它包含该选项的值。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="optionValue" /> 为 null。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)">
      <summary>
                    禁用某 <see cref="T:System.Net.Sockets.Socket" /> 上的发送和接收。
                </summary>
      <param name="how">
        <see cref="T:System.Net.Sockets.SocketShutdown" /> 值之一，它指定不再允许执行的操作。
                </param>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.Sockets.Socket.SocketType">
      <summary>
                    获取 <see cref="T:System.Net.Sockets.Socket" /> 的类型。
                </summary>
      <returns>
        <see cref="T:System.Net.Sockets.SocketType" /> 值之一。
                </returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.SupportsIPv4">
      <summary>
                    获取一个值，该值指示在当前主机上 IPv4 支持是否可用并且已启用。
                </summary>
      <returns>
                    如果当前主机支持 IPv4 协议，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.SupportsIPv6">
      <summary>
                    获取一个值，该值指示 Framework 对某些已过时的 <see cref="T:System.Net.Dns" /> 成员是否支持 IPv6。
                </summary>
      <returns>
                    如果 Framework 对某些已过时的 <see cref="T:System.Net.Dns" /> 方法支持 IPv6，则为 true；否则为 false。
                </returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.System#IDisposable#Dispose">
      <summary>
                    释放由 <see cref="T:System.Net.Sockets.Socket" /> 使用的所有资源。
                </summary>
    </member>
    <member name="P:System.Net.Sockets.Socket.Ttl">
      <summary>
                    获取或设置一个值，指定 <see cref="T:System.Net.Sockets.Socket" /> 发送的 Internet 协议 (IP) 数据包的生存时间 (TTL) 值。
                </summary>
      <returns>
                    TTL 值。
                </returns>
      <exception cref="T:System.NotSupportedException">
                    只有对于在 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 族中的套接字，才可以设置此属性。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.Sockets.Socket.UseOnlyOverlappedIO">
      <summary>
                    指定套接字是否应仅使用重叠 I/O 模式。
                </summary>
      <returns>
                    如果 <see cref="T:System.Net.Sockets.Socket" /> 仅使用重叠 I/O，则为 true；否则为 false。默认值为 false。
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    套接字已绑定到完成端口。
                </exception>
    </member>
    <member name="T:System.Net.Sockets.SocketError">
      <summary>定义 <see cref="T:System.Net.Sockets.Socket" /> 类的错误代码。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.Success">
      <summary>
        <see cref="T:System.Net.Sockets.Socket" /> 操作成功。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.SocketError">
      <summary>发生了未指定的 <see cref="T:System.Net.Sockets.Socket" /> 错误。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.Interrupted">
      <summary>已取消阻止 <see cref="T:System.Net.Sockets.Socket" /> 调用的操作。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.AccessDenied">
      <summary>已试图通过被其访问权限禁止的方式访问 <see cref="T:System.Net.Sockets.Socket" />。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.Fault">
      <summary>基础套接字提供程序检测到无效的指针地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.InvalidArgument">
      <summary>给 <see cref="T:System.Net.Sockets.Socket" /> 成员提供了一个无效参数。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.TooManyOpenSockets">
      <summary>基础套接字提供程序中打开的套接字太多。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.WouldBlock">
      <summary>对非阻止性套接字的操作不能立即完成。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.InProgress">
      <summary>阻止操作正在进行中。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.AlreadyInProgress">
      <summary>非阻止性 <see cref="T:System.Net.Sockets.Socket" /> 已有一个操作正在进行中。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NotSocket">
      <summary>对非套接字尝试 <see cref="T:System.Net.Sockets.Socket" /> 操作。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.DestinationAddressRequired">
      <summary>在对 <see cref="T:System.Net.Sockets.Socket" /> 的操作中省略了必需的地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.MessageSize">
      <summary>数据报太长。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ProtocolType">
      <summary>此 <see cref="T:System.Net.Sockets.Socket" /> 的协议类型不正确。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ProtocolOption">
      <summary>对 <see cref="T:System.Net.Sockets.Socket" /> 使用了未知、无效或不受支持的选项或级别。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ProtocolNotSupported">
      <summary>未实现或未配置协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.SocketNotSupported">
      <summary>在此地址族中不存在对指定的套接字类型的支持。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.OperationNotSupported">
      <summary>协议族不支持地址族。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ProtocolFamilyNotSupported">
      <summary>未实现或未配置协议族。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.AddressFamilyNotSupported">
      <summary>不支持指定的地址族。如果指定了 IPv6 地址族而未在本地计算机上安装 IPv6 堆栈，则会返回此错误。如果指定了 IPv4 地址族而未在本地计算机上安装 IPv4 堆栈，则会返回此错误。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.AddressAlreadyInUse">
      <summary>通常，只允许使用地址一次。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.AddressNotAvailable">
      <summary>选定的 IP 地址在此上下文中无效。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NetworkDown">
      <summary>网络不可用。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NetworkUnreachable">
      <summary>不存在到远程主机的路由。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NetworkReset">
      <summary>应用程序试图在已超时的连接上设置 <see cref="F:System.Net.Sockets.SocketOptionName.KeepAlive" />。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ConnectionAborted">
      <summary>此连接由 .NET Framework 或基础套接字提供程序中止。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ConnectionReset">
      <summary>此连接由远程对等计算机重置。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NoBufferSpaceAvailable">
      <summary>没有可用于 <see cref="T:System.Net.Sockets.Socket" /> 操作的可用缓冲区空间。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.IsConnected">
      <summary>
        <see cref="T:System.Net.Sockets.Socket" /> 已连接。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NotConnected">
      <summary>应用程序试图发送或接收数据，但是 <see cref="T:System.Net.Sockets.Socket" /> 未连接。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.Shutdown">
      <summary>发送或接收数据的请求未得到允许，因为 <see cref="T:System.Net.Sockets.Socket" /> 已被关闭。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.TimedOut">
      <summary>连接尝试超时，或者连接的主机没有响应。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ConnectionRefused">
      <summary>远程主机正在主动拒绝连接。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.HostDown">
      <summary>由于远程主机被关闭，操作失败。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.HostUnreachable">
      <summary>没有到指定主机的网络路由。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ProcessLimit">
      <summary>正在使用基础套接字提供程序的进程过多。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.SystemNotReady">
      <summary>网络子系统不可用。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.VersionNotSupported">
      <summary>基础套接字提供程序的版本超出范围。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NotInitialized">
      <summary>尚未初始化基础套接字提供程序。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.Disconnecting">
      <summary>正常关机正在进行中。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.TypeNotFound">
      <summary>未找到指定的类。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.HostNotFound">
      <summary>无法识别这种主机。该名称不是正式的主机名或别名。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.TryAgain">
      <summary>无法解析主机名。请稍后重试。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NoRecovery">
      <summary>错误不可恢复或找不到请求的数据库。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NoData">
      <summary>在名称服务器上找不到请求的名称或 IP 地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.IOPending">
      <summary>应用程序已启动一个无法立即完成的重叠操作。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.OperationAborted">
      <summary>由于 <see cref="T:System.Net.Sockets.Socket" /> 已关闭，重叠的操作被中止。</summary>
    </member>
    <member name="T:System.Net.Sockets.SocketException">
      <summary>
                    发生套接字错误时引发的异常。
                </summary>
    </member>
    <member name="M:System.Net.Sockets.SocketException.#ctor">
      <summary>
                    用最后一个操作系统错误代码初始化 <see cref="T:System.Net.Sockets.SocketException" /> 类的新实例。
                </summary>
    </member>
    <member name="M:System.Net.Sockets.SocketException.#ctor(System.Int32)">
      <summary>
                    用指定的错误代码初始化 <see cref="T:System.Net.Sockets.SocketException" /> 类的新实例。
                </summary>
      <param name="errorCode">
                    指示发生的错误的错误代码。
                </param>
    </member>
    <member name="M:System.Net.Sockets.SocketException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                    从 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的指定实例初始化 <see cref="T:System.Net.Sockets.SocketException" /> 类的新实例。
                </summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例，包含序列化新的 <see cref="T:System.Net.Sockets.SocketException" /> 实例所需的信息。
                </param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，包含与新的 <see cref="T:System.Net.Sockets.SocketException" /> 实例关联的序列化流的源。
                </param>
    </member>
    <member name="P:System.Net.Sockets.SocketException.ErrorCode">
      <summary>
获取与此异常关联的错误代码。
                </summary>
      <returns>
与此异常关联的整数错误代码。
                </returns>
    </member>
    <member name="P:System.Net.Sockets.SocketException.SocketErrorCode">
      <summary>
获取与此异常关联的错误代码。
                </summary>
      <returns>
与此异常关联的整数错误代码。
                </returns>
    </member>
    <member name="T:System.Net.Sockets.SocketFlags">
      <summary>指定套接字的发送和接收行为。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.None">
      <summary>不对此调用使用标志。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.OutOfBand">
      <summary>处理带外数据。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.Peek">
      <summary>查看传入的消息。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.DontRoute">
      <summary>不使用路由表发送。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.MaxIOVectorLength">
      <summary>为发送和接收数据的 WSABUF 结构数量提供标准值。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.Truncated">
      <summary>该消息太大，无法放入指定的缓冲区，因而被截断。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.ControlDataTruncated">
      <summary>指示控件数据不适合内部 64-KB 缓冲区，并且已被截断。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.Broadcast">
      <summary>指示广播数据包。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.Multicast">
      <summary>指示多路广播数据包。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.Partial">
      <summary>消息的部分发送或接收。</summary>
    </member>
    <member name="T:System.Net.Sockets.SocketInformation">
      <summary>对复制 <see cref="T:System.Net.Sockets.Socket" /> 时所需的信息进行封装。</summary>
    </member>
    <member name="P:System.Net.Sockets.SocketInformation.Options">
      <summary>获取或设置 <see cref="T:System.Net.Sockets.Socket" /> 的选项。</summary>
      <returns>一个 <see cref="T:System.Net.Sockets.SocketInformationOptions" /> 实例。</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketInformation.ProtocolInformation">
      <summary>获取或设置 <see cref="T:System.Net.Sockets.Socket" /> 的协议信息。</summary>
      <returns>
        <see cref="T:System.Byte" /> 类型数组。</returns>
    </member>
    <member name="T:System.Net.Sockets.SocketInformationOptions">
      <summary>描述 <see cref="T:System.Net.Sockets.Socket" /> 的状态。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketInformationOptions.NonBlocking">
      <summary>
        <see cref="T:System.Net.Sockets.Socket" /> 为非阻塞。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketInformationOptions.Connected">
      <summary>
        <see cref="T:System.Net.Sockets.Socket" /> 已连接。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketInformationOptions.Listening">
      <summary>
        <see cref="T:System.Net.Sockets.Socket" /> 正在侦听新连接。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketInformationOptions.UseOnlyOverlappedIO">
      <summary>
        <see cref="T:System.Net.Sockets.Socket" /> 使用重叠 I/O。</summary>
    </member>
    <member name="T:System.Net.Sockets.SocketOptionLevel">
      <summary>为 <see cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" /> 和 <see cref="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)" /> 方法定义套接字选项级别。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionLevel.Socket">
      <summary>
        <see cref="T:System.Net.Sockets.Socket" /> 选项适用于所有套接字。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionLevel.IP">
      <summary>
        <see cref="T:System.Net.Sockets.Socket" /> 选项仅适用于 IP 套接字。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionLevel.IPv6">
      <summary>
        <see cref="T:System.Net.Sockets.Socket" /> 选项仅适用于 IPv6 套接字。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionLevel.Tcp">
      <summary>
        <see cref="T:System.Net.Sockets.Socket" /> 选项仅适用于 TCP 套接字。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionLevel.Udp">
      <summary>
        <see cref="T:System.Net.Sockets.Socket" /> 选项仅适用于 UDP 套接字。</summary>
    </member>
    <member name="T:System.Net.Sockets.SocketOptionName">
      <summary>定义配置选项名称。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.Debug">
      <summary>记录调试信息。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.AcceptConnection">
      <summary>套接字正在侦听。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.ReuseAddress">
      <summary>允许将套接字绑定到已在使用中的地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.KeepAlive">
      <summary>使用 keep-alive。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.DontRoute">
      <summary>不路由，将数据包直接发送到接口地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.Broadcast">
      <summary>允许在套接字上发送广播消息。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.UseLoopback">
      <summary>可能时避开硬件。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.Linger">
      <summary>如果存在未发送的数据，则在关闭时逗留。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.OutOfBandInline">
      <summary>接收正常数据流中的带外数据。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.DontLinger">
      <summary>完全关闭套接字，不做逗留。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.ExclusiveAddressUse">
      <summary>使套接字能够为独占访问进行绑定。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.SendBuffer">
      <summary>指定为发送保留的每个套接字缓冲区空间的总量。这与最大消息大小或 TCP 窗口的大小无关。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.ReceiveBuffer">
      <summary>指定为接收保留的每个套接字缓冲区空间的总量。这与最大消息大小或 TCP 窗口的大小无关。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.SendLowWater">
      <summary>为 <see cref="Overload:System.Net.Sockets.Socket.Send" /> 操作指定低水印。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.ReceiveLowWater">
      <summary>为 <see cref="Overload:System.Net.Sockets.Socket.Receive" /> 操作指定低水印。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.SendTimeout">
      <summary>发送超时。此选项只适用于同步方法，它对异步方法（如 <see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> 方法）无效。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.ReceiveTimeout">
      <summary>接收超时。此选项只适用于同步方法，它对异步方法（如 <see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> 方法）无效。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.Error">
      <summary>获取错误状态并清除。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.Type">
      <summary>获取套接字类型。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.MaxConnections">
      <summary>不受支持；如果使用，将引发 <see cref="T:System.Net.Sockets.SocketException" />。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.IPOptions">
      <summary>指定要插入到输出数据报中的 IP 选项。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.HeaderIncluded">
      <summary>指示应用程序为输出数据报提供 IP 头。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.TypeOfService">
      <summary>更改服务字段的 IP 头类型。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.IpTimeToLive">
      <summary>设置 IP 头生存时间字段。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.MulticastInterface">
      <summary>为输出的多路广播数据包设置接口。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.MulticastTimeToLive">
      <summary>IP 多路广播生存时间。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.MulticastLoopback">
      <summary>IP 多路广播环回。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.AddMembership">
      <summary>添加一个 IP 组成员。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.DropMembership">
      <summary>放置一个 IP 组成员。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.DontFragment">
      <summary>不对 IP 数据报进行分段。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.AddSourceMembership">
      <summary>联接源组。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.DropSourceMembership">
      <summary>放置一个源组。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.BlockSource">
      <summary>阻止源中的数据。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.UnblockSource">
      <summary>取消阻止先前被阻止的源。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.PacketInformation">
      <summary>返回有关接收到的数据包的信息。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.HopLimit">
      <summary>指定 Internet 协议版本 6 (IPv6) 数据包的最大路由器跃点数目。这类似于 Internet 协议版本 4 的生存时间 (TTL)。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.NoDelay">
      <summary>为发送合并禁用 Nagle 算法。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.BsdUrgent">
      <summary>使用 RFC-1222 中定义的紧急数据。此选项只能设置一次，而且设置以后就不能关闭。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.Expedited">
      <summary>使用 RFC-1222 中定义的加急数据。此选项只能设置一次，而且设置以后就无法关闭。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.NoChecksum">
      <summary>发送校验和设置为零的 UDP 数据报。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.ChecksumCoverage">
      <summary>设置或获取 UDP 校验和覆盖。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.UpdateAcceptContext">
      <summary>使用现有套接字的属性更新已接受套接字的属性。这等效于使用 Winsock2 SO_UPDATE_ACCEPT_CONTEXT 套接字选项，并且仅在面向连接的套接字上受支持。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.UpdateConnectContext">
      <summary>使用现有套接字的属性更新已连接套接字的属性。这等效于使用 Winsock2 SO_UPDATE_CONNECT_CONTEXT 套接字选项，并且仅在面向连接的套接字上受支持。</summary>
    </member>
    <member name="T:System.Net.Sockets.SocketShutdown">
      <summary>定义 <see cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" /> 方法使用的常量。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketShutdown.Receive">
      <summary>禁用接收的 <see cref="T:System.Net.Sockets.Socket" />。此字段为常数。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketShutdown.Send">
      <summary>禁用发送的 <see cref="T:System.Net.Sockets.Socket" />。此字段为常数。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketShutdown.Both">
      <summary>为发送和接收禁用 <see cref="T:System.Net.Sockets.Socket" />。此字段为常数。</summary>
    </member>
    <member name="T:System.Net.Sockets.SocketType">
      <summary>指定 <see cref="T:System.Net.Sockets.Socket" /> 类的实例表示的套接字类型。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketType.Stream">
      <summary>支持可靠、双向、基于连接的字节流，而不重复数据，也不保留边界。此类型的 Socket 与单个对方主机进行通信，并且在通信开始之前需要远程主机连接。<see cref="F:System.Net.Sockets.SocketType.Stream" /> 使用传输控制协议 (<see cref="F:System.Net.Sockets.ProtocolType.Tcp" />) <see cref="T:System.Net.Sockets.ProtocolType" /> 和 InterNetwork<see cref="T:System.Net.Sockets.AddressFamily" />。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketType.Dgram">
      <summary>支持数据报，即最大长度固定（通常很小）的无连接、不可靠消息。消息可能会丢失或重复并可能在到达时不按顺序排列。<see cref="F:System.Net.Sockets.SocketType.Dgram" /> 类型的 <see cref="T:System.Net.Sockets.Socket" /> 在发送和接收数据之前不需要任何连接，并且可以与多个对方主机进行通信。<see cref="F:System.Net.Sockets.SocketType.Dgram" /> 使用数据报协议 (<see cref="F:System.Net.Sockets.ProtocolType.Udp" />) 和 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /><see cref="T:System.Net.Sockets.AddressFamily" />。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketType.Raw">
      <summary>支持对基础传输协议的访问。通过使用 <see cref="T:System.Net.Sockets.SocketType" /><see cref="F:System.Net.Sockets.SocketType.Raw" />，可以使用 Internet 控制消息协议 (<see cref="F:System.Net.Sockets.ProtocolType.Icmp" />) 和 Internet 组管理协议 (<see cref="F:System.Net.Sockets.ProtocolType.Igmp" />) 这样的协议来进行通信。在发送时，您的应用程序必须提供完整的 IP 标头。所接收的数据报在返回时会保持其 IP 标头和选项不变。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketType.Rdm">
      <summary>支持无连接、面向消息、以可靠方式发送的消息，并保留数据中的消息边界。RDM（以可靠方式发送的消息）消息会依次到达，不会重复。此外，如果消息丢失，将会通知发送方。如果使用 <see cref="F:System.Net.Sockets.SocketType.Rdm" /> 初始化 Socket，则在发送和接收数据之前无需建立远程主机连接。利用 <see cref="F:System.Net.Sockets.SocketType.Rdm" />，您可以与多个对方主机进行通信。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketType.Seqpacket">
      <summary>在网络上提供排序字节流的面向连接且可靠的双向传输。<see cref="F:System.Net.Sockets.SocketType.Seqpacket" /> 不重复数据，它在数据流中保留边界。<see cref="F:System.Net.Sockets.SocketType.Seqpacket" /> 类型的 Socket 与单个对方主机通信，并且在通信开始之前需要建立远程主机连接。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketType.Unknown">
      <summary>指定未知的 Socket 类型。</summary>
    </member>
    <member name="T:System.Net.Sockets.TcpClient">
      <summary>
                    为 TCP 网络服务提供客户端连接。
                </summary>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.#ctor">
      <summary>
                    初始化 <see cref="T:System.Net.Sockets.TcpClient" /> 类的新实例。
                </summary>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.#ctor(System.Net.IPEndPoint)">
      <summary>
                    初始化 <see cref="T:System.Net.Sockets.TcpClient" /> 类的新实例，并将其绑定到指定的本地终结点。
                </summary>
      <param name="localEP">
                    要将 TCP <see cref="T:System.Net.Sockets.Socket" /> 绑定到的 <see cref="T:System.Net.IPEndPoint" />。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localEP" /> 参数为 null。
                </exception>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.#ctor(System.Net.Sockets.AddressFamily)">
      <summary>
                    使用指定的族初始化 <see cref="T:System.Net.Sockets.TcpClient" /> 类的新实例。
                </summary>
      <param name="family">
                    IP 协议的 <see cref="P:System.Net.IPAddress.AddressFamily" />。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="family" /> 参数不等于 AddressFamily.InterNetwork
                
                    - 或 -
                <paramref name="family" /> 参数不等于 AddressFamily.InterNetworkV6
                </exception>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.#ctor(System.String,System.Int32)">
      <summary>
                    初始化 <see cref="T:System.Net.Sockets.TcpClient" /> 类的新实例并连接到指定主机上的指定端口。
                </summary>
      <param name="hostname">
要连接到的远程主机的 DNS 名。
                </param>
      <param name="port">
要连接到的远程主机的端口号。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostname" /> 参数为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 参数不在 <see cref="F:System.Net.IPEndPoint.MinPort" /> 和 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 之间。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
访问套接字时出错。有关更多信息，请参见备注部分。
                </exception>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.Active">
      <summary>
                    获取或设置一个值，该值指示是否已建立连接。
                </summary>
      <returns>
                    如果已建立连接，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.Available">
      <summary>
                    获取已经从网络接收且可供读取的数据量。
                </summary>
      <returns>
                    从网络接收的、可供读取的数据的字节数。
                </returns>
      <exception cref="T:System.Net.Sockets.SocketException">
试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)">
      <summary>
                    开始一个对远程主机连接的异步请求。远程主机由 <see cref="T:System.Net.IPAddress" /> 和端口号 (<see cref="T:System.Int32" />) 指定。
                </summary>
      <returns>
                    一个 <see cref="T:System.IAsyncResult" /> 对象，它引用异步连接。
                </returns>
      <param name="address">
                    远程主机的 <see cref="T:System.Net.IPAddress" />。
                </param>
      <param name="port">
远程主机的端口号。
                </param>
      <param name="requestCallback">
                    一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。
                </param>
      <param name="state">
一个用户定义对象，其中包含连接操作的相关信息。当操作完成时，此对象会被传递给 <paramref name="requestCallback" /> 委托。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.Security.SecurityException">
调用堆栈上部的调用方无权执行所请求的操作。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
此端口号无效。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.SocketPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.BeginConnect(System.Net.IPAddress[],System.Int32,System.AsyncCallback,System.Object)">
      <summary>
                    开始一个对远程主机连接的异步请求。远程主机由 <see cref="T:System.Net.IPAddress" /> 数组和端口号 (<see cref="T:System.Int32" />) 指定。
                </summary>
      <returns>
                    一个 <see cref="T:System.IAsyncResult" /> 对象，它引用异步连接。
                </returns>
      <param name="addresses">
                    至少一个指定远程主机的 <see cref="T:System.Net.IPAddress" />。
                </param>
      <param name="port">
                    远程主机的端口号。
                </param>
      <param name="requestCallback">
                    一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。
                </param>
      <param name="state">
一个用户定义对象，其中包含连接操作的相关信息。当操作完成时，此对象会被传递给 <paramref name="requestCallback" /> 委托。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addresses" /> 参数为 null。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.Security.SecurityException">
调用堆栈上部的调用方无权执行所请求的操作。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
此端口号无效。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.SocketPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)">
      <summary>
                    开始一个对远程主机连接的异步请求。远程主机由主机名 (<see cref="T:System.String" />) 和端口号 (<see cref="T:System.Int32" />) 指定。
                </summary>
      <returns>
                    一个 <see cref="T:System.IAsyncResult" /> 对象，它引用异步连接。
                </returns>
      <param name="host">
                    远程主机的名称。
                </param>
      <param name="port">
远程主机的端口号。
                </param>
      <param name="requestCallback">
                    一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。
                </param>
      <param name="state">
一个用户定义对象，其中包含连接操作的相关信息。当操作完成时，此对象会被传递给 <paramref name="requestCallback" /> 委托。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="host" /> 参数为 null。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.Security.SecurityException">
调用堆栈上部的调用方无权执行所请求的操作。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
此端口号无效。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.SocketPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.Client">
      <summary>
                    获取或设置基础 <see cref="T:System.Net.Sockets.Socket" />。
                </summary>
      <returns>
                    基础网络 <see cref="T:System.Net.Sockets.Socket" />。
                </returns>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.Close">
      <summary>
                    释放此 <see cref="T:System.Net.Sockets.TcpClient" /> 实例，而不关闭基础连接。
                </summary>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.Connect(System.Net.IPAddress,System.Int32)">
      <summary>
                    使用指定的 IP 地址和端口号将客户端连接到 TCP 主机。
                </summary>
      <param name="address">
                    您打算连接到的主机的 <see cref="T:System.Net.IPAddress" />。
                </param>
      <param name="port">
要连接到的端口号。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 不在 <see cref="F:System.Net.IPEndPoint.MinPort" /> 和 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 之间。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
访问套接字时出错。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.TcpClient" /> 被关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.SocketPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.Connect(System.Net.IPAddress[],System.Int32)">
      <summary>
                    使用指定的 IP 地址和端口号将客户端连接到远程 TCP 主机。
                </summary>
      <param name="ipAddresses">
                    要连接到的主机的 <see cref="T:System.Net.IPAddress" /> 数组。
                </param>
      <param name="port">
要连接到的端口号。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ipAddresses" /> 参数为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
此端口号无效。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.Security.SecurityException">
调用堆栈上部的调用方无权执行所请求的操作。
                </exception>
      <exception cref="T:System.NotSupportedException">
                    此方法对于使用 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 标志或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 标志的套接字有效。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.SocketPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.Connect(System.Net.IPEndPoint)">
      <summary>
                    使用指定的远程网络终结点将客户端连接到远程 TCP 主机。
                </summary>
      <param name="remoteEP">
                    您打算连接到的 <see cref="T:System.Net.IPEndPoint" />。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="remoteEp" /> 参数为 null。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
访问套接字时出错。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.TcpClient" /> 是关闭的。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.SocketPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)">
      <summary>
                    将客户端连接到指定主机上的指定端口。
                </summary>
      <param name="hostname">
要连接到的远程主机的 DNS 名。
                </param>
      <param name="port">
要连接到的远程主机的端口号。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostname" /> 参数为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 参数不在 <see cref="F:System.Net.IPEndPoint.MinPort" /> 和 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 之间。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
访问套接字时出错。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.TcpClient" /> 被关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.SocketPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.Connected">
      <summary>
                    获取一个值，该值指示 <see cref="T:System.Net.Sockets.TcpClient" /> 的基础 <see cref="T:System.Net.Sockets.Socket" /> 是否已连接到远程主机。
                </summary>
      <returns>
                    如果 <see cref="P:System.Net.Sockets.TcpClient.Client" /> 套接字与截止到最近的操作时的远程资源连接，则为 true；否则为 false。
                </returns>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.Dispose(System.Boolean)">
      <summary>
                    释放由 <see cref="T:System.Net.Sockets.TcpClient" /> 占用的非托管资源，还可以另外再释放托管资源。
                </summary>
      <param name="disposing">
                    设置为 true 可释放托管资源和非托管资源；设置为 false 只能释放非托管资源。
                </param>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.EndConnect(System.IAsyncResult)">
      <summary>
                    异步接受传入的连接尝试。
                </summary>
      <param name="asyncResult">
                    对 <see cref="Overload:System.Net.Sockets.TcpClient.BeginConnect" /> 的调用所返回的 <see cref="T:System.IAsyncResult" /> 对象。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 参数为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                    调用 <see cref="Overload:System.Net.Sockets.TcpClient.BeginConnect" /> 方法后，未返回 <paramref name="asyncResult" /> 参数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    异步连接时，曾调用过 <see cref="M:System.Net.Sockets.TcpClient.EndConnect(System.IAsyncResult)" /> 方法。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问 <see cref="T:System.Net.Sockets.Socket" /> 时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    已关闭基础 <see cref="T:System.Net.Sockets.Socket" />。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.ExclusiveAddressUse">
      <summary>
                    获取或设置 <see cref="T:System.Boolean" /> 值，该值指定 <see cref="T:System.Net.Sockets.TcpClient" /> 是否只允许一个客户端使用端口。
                </summary>
      <returns>
                    如果 <see cref="T:System.Net.Sockets.TcpClient" /> 只允许一个客户端使用特定端口，则为 true；否则为 false。在 Windows Server 2003、Windows XP Service Pack 2 及更高版本中，默认为 true；在所有其他版本中，默认为 false。
                </returns>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问基础套接字时发生错误。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    已关闭基础 <see cref="T:System.Net.Sockets.Socket" />。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.Finalize">
      <summary>
        <see cref="T:System.Net.Sockets.TcpClient" /> 类使用的可用资源。
                </summary>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.GetStream">
      <summary>
                    返回用于发送和接收数据的 <see cref="T:System.Net.Sockets.NetworkStream" />。
                </summary>
      <returns>
                    基础 <see cref="T:System.Net.Sockets.NetworkStream" />。
                </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.TcpClient" /> 未连接到远程主机。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.TcpClient" /> 已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.LingerState">
      <summary>
                    获取或设置有关套接字逗留时间的信息。
                </summary>
      <returns>
        <see cref="T:System.Net.Sockets.LingerOption" />。默认情况下，禁用逗留。
                </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.NoDelay">
      <summary>
                    获取或设置一个值，该值在发送或接收缓冲区未满时禁用延迟。
                </summary>
      <returns>
                    如果禁用延迟，则为 true；否则为 false。默认值为 false。
                </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.ReceiveBufferSize">
      <summary>
                    获取或设置接收缓冲区的大小。
                </summary>
      <returns>
                    接收缓冲区的大小（以字节为单位）。默认值为 8192 个字节。
                </returns>
      <exception cref="T:System.Net.Sockets.SocketException">
                    设置缓冲区大小时发生错误。
                
                    - 或 -
                
                    在 .NET Compact Framework 应用程序中，无法设置此属性。有关解决方法，请参见“备注”中的“平台说明”。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.ReceiveTimeout">
      <summary>
                    获取或设置在初始化一个读取操作以后 <see cref="T:System.Net.Sockets.TcpClient" /> 等待接收数据的时间量。
                </summary>
      <returns>
                    连接的超时值（以毫秒为单位）。默认值为 0。
                </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.SendBufferSize">
      <summary>
                    获取或设置发送缓冲区的大小。
                </summary>
      <returns>
                    发送缓冲区的大小（以字节为单位）。默认值为 8192 个字节。
                </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.SendTimeout">
      <summary>
                    获取或设置 <see cref="T:System.Net.Sockets.TcpClient" /> 等待发送操作成功完成的时间量。
                </summary>
      <returns>
                    发送超时值（以毫秒为单位）。默认值为 0。
                </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.System#IDisposable#Dispose">
      <summary>
                    释放由 <see cref="T:System.Net.Sockets.TcpClient" /> 使用的所有资源。
                </summary>
    </member>
    <member name="T:System.Net.Sockets.TcpListener">
      <summary>
                    从 TCP 网络客户端侦听连接。
                </summary>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
      <summary>
                    初始化在指定端口上侦听的 <see cref="T:System.Net.Sockets.TcpListener" /> 类的新实例。
                </summary>
      <param name="port">
用来侦听传入的连接尝试的端口。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 不在 <see cref="F:System.Net.IPEndPoint.MinPort" /> 和 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 之间。
                </exception>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
      <summary>
                    初始化 <see cref="T:System.Net.Sockets.TcpListener" /> 类的新实例，该类在指定的本地 IP 地址和端口号上侦听是否有传入的连接尝试。
                </summary>
      <param name="localaddr">
                    一个 <see cref="T:System.Net.IPAddress" />，它表示本地 IP 地址。
                </param>
      <param name="port">
用来侦听传入的连接尝试的端口。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localaddr" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 不在 <see cref="F:System.Net.IPEndPoint.MinPort" /> 和 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 之间。
                </exception>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
      <summary>
                    使用指定的本地终结点初始化 <see cref="T:System.Net.Sockets.TcpListener" /> 类的新实例。
                </summary>
      <param name="localEP">
                    一个 <see cref="T:System.Net.IPEndPoint" />，它表示将侦听器 <see cref="T:System.Net.Sockets.Socket" /> 绑定到的本地终结点。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localEP" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.AcceptSocket">
      <summary>
                    接受挂起的连接请求。
                </summary>
      <returns>
                    用于发送和接收数据的 <see cref="T:System.Net.Sockets.Socket" />。
                </returns>
      <exception cref="T:System.InvalidOperationException">
尚未通过调用 <see cref="M:System.Net.Sockets.TcpListener.Start" /> 来启动该侦听器。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
      <summary>
接受挂起的连接请求
                </summary>
      <returns>
                    用于发送和接收数据的 <see cref="T:System.Net.Sockets.TcpClient" />。
                </returns>
      <exception cref="T:System.InvalidOperationException">
尚未通过调用 <see cref="M:System.Net.Sockets.TcpListener.Start" /> 来启动该侦听器。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
使用 <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> 属性获取指定的错误代码。获取此代码后，可以参考 MSDN 中的 Windows Sockets 第 2 版 API 错误代码文档，获取有关错误的详细说明。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.Sockets.TcpListener.Active">
      <summary>
                    获取一个值，该值指示 <see cref="T:System.Net.Sockets.TcpListener" /> 是否正主动侦听客户端连接。
                </summary>
      <returns>
                    如果 <see cref="T:System.Net.Sockets.TcpListener" /> 正主动侦听，则为 true；否则为 false。
                </returns>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
      <summary>
开始一个异步操作来接受一个传入的连接尝试。
                </summary>
      <returns>
                    一个 <see cref="T:System.IAsyncResult" />，它引用 <see cref="T:System.Net.Sockets.Socket" /> 的异步创建。
                </returns>
      <param name="callback">
                    一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。
                </param>
      <param name="state">
一个用户定义对象，其中包含接收操作的相关信息。当操作完成时，此对象会被传递给 <paramref name="callback" /> 委托。
                </param>
      <exception cref="T:System.Net.Sockets.SocketException">
试图访问套接字时出现错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
      <summary>
开始一个异步操作来接受一个传入的连接尝试。
                </summary>
      <returns>
                    一个 <see cref="T:System.IAsyncResult" />，它引用 <see cref="T:System.Net.Sockets.TcpClient" /> 的异步创建。
                </returns>
      <param name="callback">
                    一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。
                </param>
      <param name="state">
一个用户定义对象，其中包含接收操作的相关信息。当操作完成时，此对象会被传递给 <paramref name="callback" /> 委托。
                </param>
      <exception cref="T:System.Net.Sockets.SocketException">
试图访问套接字时出现错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
      <summary>
                    异步接受传入的连接尝试，并创建新的 <see cref="T:System.Net.Sockets.Socket" /> 来处理远程主机通信。
                </summary>
      <returns>
        <see cref="T:System.Net.Sockets.Socket" />。
                </returns>
      <param name="asyncResult">
        <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /> 方法调用返回 <see cref="T:System.IAsyncResult" />。
                </param>
      <exception cref="T:System.ObjectDisposedException">
                    已关闭基础 <see cref="T:System.Net.Sockets.Socket" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 参数为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                    调用 <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /> 方法后，未创建 <paramref name="asyncResult" /> 参数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" /> 方法以前被调用过。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问 <see cref="T:System.Net.Sockets.Socket" /> 时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
      <summary>
                    异步接受传入的连接尝试，并创建新的 <see cref="T:System.Net.Sockets.TcpClient" /> 来处理远程主机通信。
                </summary>
      <returns>
        <see cref="T:System.Net.Sockets.TcpClient" />。
                </returns>
      <param name="asyncResult">
        <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" /> 方法调用返回 <see cref="T:System.IAsyncResult" />。
                </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
      <summary>
                    获取或设置一个 <see cref="T:System.Boolean" /> 值，该值指定 <see cref="T:System.Net.Sockets.TcpListener" /> 是否只允许一个基础套接字来侦听特定端口。
                </summary>
      <returns>
                    如果 <see cref="T:System.Net.Sockets.TcpListener" /> 只允许一个 <see cref="T:System.Net.Sockets.TcpListener" /> 来侦听特定端口，则为 true；否则为 false。. 在 Windows Server 2003、Windows XP Service Pack 2 及更高版本中，默认为 true；在所有其他版本中，默认为 false。
                </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.TcpListener" /> 已经启动。调用 <see cref="M:System.Net.Sockets.TcpListener.Stop" /> 方法，然后设置 <see cref="P:System.Net.Sockets.Socket.ExclusiveAddressUse" /> 属性。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问基础套接字时发生错误。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    已关闭基础 <see cref="T:System.Net.Sockets.Socket" />。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.Sockets.TcpListener.LocalEndpoint">
      <summary>
                    获取当前 <see cref="T:System.Net.Sockets.TcpListener" /> 的基础 <see cref="T:System.Net.EndPoint" />。
                </summary>
      <returns>
        <see cref="T:System.Net.Sockets.Socket" /> 绑定到的 <see cref="T:System.Net.EndPoint" />。
                </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.Pending">
      <summary>
                    确定是否有挂起的连接请求。
                </summary>
      <returns>
                    如果连接正挂起，则为 true；否则为 false。
                </returns>
      <exception cref="T:System.InvalidOperationException">
尚未通过调用 <see cref="M:System.Net.Sockets.TcpListener.Start" /> 来启动该侦听器。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.Sockets.TcpListener.Server">
      <summary>
                    获取基础网络 <see cref="T:System.Net.Sockets.Socket" />。
                </summary>
      <returns>
                    基础 <see cref="T:System.Net.Sockets.Socket" />。
                </returns>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.Start">
      <summary>
开始侦听传入的连接请求。
                </summary>
      <exception cref="T:System.Net.Sockets.SocketException">
使用 <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> 属性获取指定的错误代码。获取此代码后，可以参考 MSDN 中的 Windows Sockets 第 2 版 API 错误代码文档，获取有关错误的详细说明。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.SocketPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
      <summary>
                    启动对具有最大挂起连接数的传入连接请求的侦听。
                </summary>
      <param name="backlog">
                    挂起连接队列的最大长度。
                </param>
      <exception cref="T:System.Net.Sockets.SocketException">
                    访问套接字时出错。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="backlog" /> 参数小于零或超出允许的最大连接数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    基础 <see cref="T:System.Net.Sockets.Socket" /> 为空。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.SocketPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.Stop">
      <summary>
                    关闭侦听器。
                </summary>
      <exception cref="T:System.Net.Sockets.SocketException">
使用 <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> 属性获取指定的错误代码。获取此代码后，可以参考 MSDN 中的 Windows Sockets 第 2 版 API 错误代码文档，获取有关错误的详细说明。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="T:System.Net.Sockets.TransmitFileOptions">
      <summary>
        <see cref="T:System.Net.Sockets.TransmitFileOptions" /> 枚举定义文件传输请求中使用的值。</summary>
    </member>
    <member name="F:System.Net.Sockets.TransmitFileOptions.UseDefaultWorkerThread">
      <summary>使用默认线程处理长文件传输请求。</summary>
    </member>
    <member name="F:System.Net.Sockets.TransmitFileOptions.Disconnect">
      <summary>所有要传输的数据文件完成排队后，启动传输层断开连接。如果与 <see cref="F:System.Net.Sockets.TransmitFileOptions.ReuseSocket" /> 一起使用，这些标志将在完成文件传输后使套接字返回到断开连接的可重用状态。</summary>
    </member>
    <member name="F:System.Net.Sockets.TransmitFileOptions.ReuseSocket">
      <summary>完成请求后，可以重用套接字句柄。此标志仅在同时指定了 <see cref="F:System.Net.Sockets.TransmitFileOptions.Disconnect" /> 时才有效。如果与 <see cref="F:System.Net.Sockets.TransmitFileOptions.Disconnect" /> 一起使用，这些标志将在完成文件传输后使套接字返回到断开连接的可重用状态。</summary>
    </member>
    <member name="F:System.Net.Sockets.TransmitFileOptions.WriteBehind">
      <summary>立即完成文件传输请求，而不挂起。如果指定了此标志并且文件传输成功，则表明系统已接受数据，但远端并不一定识别该数据。请勿将此标志与 <see cref="F:System.Net.Sockets.TransmitFileOptions.Disconnect" /> 和 <see cref="F:System.Net.Sockets.TransmitFileOptions.ReuseSocket" /> 标志一起使用。</summary>
    </member>
    <member name="F:System.Net.Sockets.TransmitFileOptions.UseSystemThread">
      <summary>使用系统线程处理长文件传输请求。</summary>
    </member>
    <member name="F:System.Net.Sockets.TransmitFileOptions.UseKernelApc">
      <summary>使用内核异步过程调用 (APC) 而不是辅助线程来处理长文件传输请求。长请求定义为要求从文件或缓存中进行多次读取的请求，因此请求取决于文件的大小和发送数据包的指定长度。</summary>
    </member>
    <member name="T:System.Net.Sockets.UdpClient">
      <summary>提供用户数据报 (UDP) 网络服务。</summary>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.#ctor">
      <summary>初始化 <see cref="T:System.Net.Sockets.UdpClient" /> 类的新实例。</summary>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。有关更多信息，请参见备注部分。</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:System.Net.Sockets.UdpClient" /> 类的新实例，并将它绑定到所提供的本地端口号。</summary>
      <param name="port">要从其进行通信的本地端口号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 参数大于 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 或小于 <see cref="F:System.Net.IPEndPoint.MinPort" />。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。有关更多信息，请参见备注部分。</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)">
      <summary>初始化 <see cref="T:System.Net.Sockets.UdpClient" /> 类的新实例，并将它绑定到所提供的本地端口号。</summary>
      <param name="port">用来侦听传入的连接尝试的端口。</param>
      <param name="family">
        <see cref="T:System.Net.Sockets.AddressFamily" /> 值之一，它指定套接字的寻址方案。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="family" /> 不是 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 大于 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 或小于 <see cref="F:System.Net.IPEndPoint.MinPort" />。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。有关更多信息，请参见备注部分。</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)">
      <summary>初始化 <see cref="T:System.Net.Sockets.UdpClient" /> 类的新实例，并将其绑定到指定的本地终结点。</summary>
      <param name="localEP">一个 <see cref="T:System.Net.IPEndPoint" />，表示将 UDP 连接绑定到的本地终结点。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localEP" /> 为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。有关更多信息，请参见备注部分。</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)">
      <summary>初始化 <see cref="T:System.Net.Sockets.UdpClient" /> 类的新实例。</summary>
      <param name="family">
        <see cref="T:System.Net.Sockets.AddressFamily" /> 值之一，它指定套接字的寻址方案。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="family" /> 不是 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。有关更多信息，请参见备注部分。</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)">
      <summary>初始化 <see cref="T:System.Net.Sockets.UdpClient" /> 类的新实例，并建立默认远程主机。</summary>
      <param name="hostname">要连接到的远程 DNS 主机的名称。</param>
      <param name="port">要连接到的远程端口号。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostname" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 不在 <see cref="F:System.Net.IPEndPoint.MinPort" /> 和 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 之间。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。有关更多信息，请参见备注部分。</exception>
    </member>
    <member name="P:System.Net.Sockets.UdpClient.Active">
      <summary>获取或设置一个值，该值指示是否已建立默认远程主机。</summary>
      <returns>
            如果连接处于活动状态，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.Sockets.UdpClient.Available">
      <summary>获取从网络接收的可读取的数据量。</summary>
      <returns>从网络接收的数据字节数。</returns>
      <exception cref="T:System.Net.Sockets.SocketException">试图访问套接字时出现错误。有关更多信息，请参见备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)">
      <summary>从远程主机异步接收数据报。</summary>
      <returns>一个 <see cref="T:System.IAsyncResult" /> 对象，它引用异步接收。</returns>
      <param name="requestCallback">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</param>
      <param name="state">一个用户定义对象，其中包含接收操作的相关信息。当操作完成时，此对象会被传递给 <paramref name="requestCallback" /> 委托。</param>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)">
      <summary>将数据报异步发送到远程主机。先前已通过调用 <see cref="Overload:System.Net.Sockets.UdpClient.Connect" /> 指定目标。</summary>
      <returns>引用异步发送的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
      <param name="datagram">一个 <see cref="T:System.Byte" /> 数组，它包含要发送的数据。</param>
      <param name="bytes">要发送的字节数。</param>
      <param name="requestCallback">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</param>
      <param name="state">一个用户定义对象，其中包含该发送操作的信息。当操作完成时，此对象会被传递给 <paramref name="requestCallback" /> 委托。</param>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)">
      <summary>将数据报异步发送到目标。目标由 <see cref="T:System.Net.EndPoint" /> 指定。</summary>
      <returns>引用异步发送的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
      <param name="datagram">一个 <see cref="T:System.Byte" /> 数组，它包含要发送的数据。</param>
      <param name="bytes">要发送的字节数。</param>
      <param name="endPoint">
        <see cref="T:System.Net.EndPoint" />，它表示数据的目标位置。</param>
      <param name="requestCallback">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</param>
      <param name="state">一个用户定义对象，其中包含该发送操作的信息。当操作完成时，此对象会被传递给 <paramref name="requestCallback" /> 委托。</param>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)">
      <summary>将数据报异步发送到目标。目标由主机名和端口号指定。</summary>
      <returns>引用异步发送的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
      <param name="datagram">一个 <see cref="T:System.Byte" /> 数组，它包含要发送的数据。</param>
      <param name="bytes">要发送的字节数。</param>
      <param name="hostname">目标主机。</param>
      <param name="port">目标端口号。</param>
      <param name="requestCallback">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</param>
      <param name="state">一个用户定义对象，其中包含该发送操作的信息。当操作完成时，此对象会被传递给 <paramref name="requestCallback" /> 委托。</param>
    </member>
    <member name="P:System.Net.Sockets.UdpClient.Client">
      <summary>获取或设置基础网络 <see cref="T:System.Net.Sockets.Socket" />。</summary>
      <returns>基础网络 <see cref="T:System.Net.Sockets.Socket" />。</returns>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Close">
      <summary>关闭 UDP 连接。</summary>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。有关更多信息，请参见备注部分。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)">
      <summary>使用指定的 IP 地址和端口号建立默认远程主机。</summary>
      <param name="addr">要将数据发送到的远程主机的 <see cref="T:System.Net.IPAddress" />。</param>
      <param name="port">要将数据发送到的端口号。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.UdpClient" /> 被关闭。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addr" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 不在 <see cref="F:System.Net.IPEndPoint.MinPort" /> 和 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 之间。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。有关更多信息，请参见备注部分。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.SocketPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)">
      <summary>使用指定的网络终结点建立默认远程主机。</summary>
      <param name="endPoint">一个 <see cref="T:System.Net.IPEndPoint" />，它指定要将数据发送到的网络终结点。</param>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。有关更多信息，请参见备注部分。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="endPoint" /> 为 null。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.UdpClient" /> 是关闭的。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.SocketPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)">
      <summary>使用指定的主机名和端口号建立默认远程主机。</summary>
      <param name="hostname">要将数据发送到的远程主机的 DNS 名。</param>
      <param name="port">要将数据发送到的远程主机上的端口号。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.UdpClient" /> 是关闭的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 不在 <see cref="F:System.Net.IPEndPoint.MinPort" /> 和 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 之间。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。有关更多信息，请参见备注部分。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.SocketPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Net.Sockets.UdpClient" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">
                为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。</param>
    </member>
    <member name="P:System.Net.Sockets.UdpClient.DontFragment">
      <summary>获取或设置 <see cref="T:System.Boolean" /> 值，指定 <see cref="T:System.Net.Sockets.UdpClient" /> 是否允许对 Internet 协议 (IP) 数据报进行分段。</summary>
      <returns>
            如果 <see cref="T:System.Net.Sockets.UdpClient" /> 允许数据报分段，则为 true；否则为 false。默认为 true。</returns>
      <exception cref="T:System.NotSupportedException">只能为使用 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 标志或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 标志的套接字设置该属性。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)">
      <summary>退出多路广播组。</summary>
      <param name="multicastAddr">要退出的多路广播组的 <see cref="T:System.Net.IPAddress" />。</param>
      <exception cref="T:System.ObjectDisposedException">已关闭基础 <see cref="T:System.Net.Sockets.Socket" />。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。有关更多信息，请参见备注部分。</exception>
      <exception cref="T:System.ArgumentException">IP 地址与定义套接字的寻址方案所用的 <see cref="T:System.Net.Sockets.AddressFamily" /> 值不兼容。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="multicastAddr" /> 为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)">
      <summary>退出多路广播组。</summary>
      <param name="multicastAddr">要退出的多路广播组的 <see cref="T:System.Net.IPAddress" />。</param>
      <param name="ifindex">要退出的多路广播组的本地地址。</param>
      <exception cref="T:System.ObjectDisposedException">已关闭基础 <see cref="T:System.Net.Sockets.Socket" />。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。有关更多信息，请参见备注部分。</exception>
      <exception cref="T:System.ArgumentException">IP 地址与定义套接字的寻址方案所用的 <see cref="T:System.Net.Sockets.AddressFamily" /> 值不兼容。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="multicastAddr" /> 为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.Sockets.UdpClient.EnableBroadcast">
      <summary>获取或设置 <see cref="T:System.Boolean" /> 值，指定 <see cref="T:System.Net.Sockets.UdpClient" /> 是否可以发送或接收广播数据包。</summary>
      <returns>
            如果 <see cref="T:System.Net.Sockets.UdpClient" /> 允许广播数据包，则为 true；否则为 false。默认为 false。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)">
      <summary>结束挂起的异步接收。</summary>
      <returns>如果成功，则返回已接收的字节数。如果不成功，则此方法返回 0。</returns>
      <param name="asyncResult">调用 <see cref="M:System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)" /> 后返回的 <see cref="T:System.IAsyncResult" /> 对象。</param>
      <param name="remoteEP">指定的远程终结点。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="M:System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)" /> 方法调用后未返回 <paramref name="asyncResult" />。</exception>
      <exception cref="T:System.InvalidOperationException">
                先前曾为异步读取调用过 <see cref="M:System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)" />。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">试图访问基础 <see cref="T:System.Net.Sockets.Socket" /> 时发生错误。有关更多信息，请参见备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">已关闭基础 <see cref="T:System.Net.Sockets.Socket" />。</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)">
      <summary>结束挂起的异步发送。</summary>
      <returns>如果成功，则为已发送到 <see cref="T:System.Net.Sockets.UdpClient" /> 的字节数。</returns>
      <param name="asyncResult">调用 <see cref="Overload:System.Net.Sockets.UdpClient.BeginSend" /> 后返回的 <see cref="T:System.IAsyncResult" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> 方法调用后未返回 <paramref name="asyncResult" />。</exception>
      <exception cref="T:System.InvalidOperationException">
                先前曾为异步读取调用过 <see cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" />。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">试图访问基础套接字时发生错误。有关更多信息，请参见备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">已关闭基础 <see cref="T:System.Net.Sockets.Socket" />。</exception>
    </member>
    <member name="P:System.Net.Sockets.UdpClient.ExclusiveAddressUse">
      <summary>获取或设置 <see cref="T:System.Boolean" /> 值，指定 <see cref="T:System.Net.Sockets.UdpClient" /> 是否只允许一个客户端使用端口。</summary>
      <returns>
            如果 <see cref="T:System.Net.Sockets.UdpClient" /> 只允许一个客户端使用特定端口，则为 true；否则为 false。在 Windows Server 2003、Windows XP Service Pack 2 及更高版本中，默认为 true；在所有其他版本中，默认为 false。</returns>
      <exception cref="T:System.Net.Sockets.SocketException">试图访问基础套接字时发生错误。</exception>
      <exception cref="T:System.ObjectDisposedException">已关闭基础 <see cref="T:System.Net.Sockets.Socket" />。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)">
      <summary>将 <see cref="T:System.Net.Sockets.UdpClient" /> 添加到多路广播组。</summary>
      <param name="ifindex">本地地址。</param>
      <param name="multicastAddr">要联接的组的多路广播 <see cref="T:System.Net.IPAddress" />。</param>
      <exception cref="T:System.ObjectDisposedException">已关闭基础 <see cref="T:System.Net.Sockets.Socket" />。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。有关更多信息，请参见备注部分。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)">
      <summary>将 <see cref="T:System.Net.Sockets.UdpClient" /> 添加到多路广播组。</summary>
      <param name="multicastAddr">要联接的组的多路广播 <see cref="T:System.Net.IPAddress" />。</param>
      <exception cref="T:System.ObjectDisposedException">已关闭基础 <see cref="T:System.Net.Sockets.Socket" />。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。有关更多信息，请参见备注部分。</exception>
      <exception cref="T:System.ArgumentException">IP 地址与定义套接字的寻址方案所用的 <see cref="T:System.Net.Sockets.AddressFamily" /> 值不兼容。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)">
      <summary>将指定的生存时间 (TTL) 与 <see cref="T:System.Net.Sockets.UdpClient" /> 一起添加到多路广播组。</summary>
      <param name="multicastAddr">要联接的多路广播组的 <see cref="T:System.Net.IPAddress" />。</param>
      <param name="timeToLive">生存时间 (TTL)，以路由器跳数为单位。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所提供的 TTL 不在 0 和 255 之间</exception>
      <exception cref="T:System.ObjectDisposedException">已关闭基础 <see cref="T:System.Net.Sockets.Socket" />。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。有关更多信息，请参见备注部分。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="multicastAddr" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">IP 地址与定义套接字的寻址方案所用的 <see cref="T:System.Net.Sockets.AddressFamily" /> 值不兼容。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)">
      <summary>将 <see cref="T:System.Net.Sockets.UdpClient" /> 添加到多路广播组。</summary>
      <param name="multicastAddr">要联接的组的多路广播 <see cref="T:System.Net.IPAddress" />。</param>
      <param name="localAddress">本地 <see cref="T:System.Net.IPAddress" />。</param>
      <exception cref="T:System.ObjectDisposedException">已关闭基础 <see cref="T:System.Net.Sockets.Socket" />。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。有关更多信息，请参见备注部分。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Net.Sockets.UdpClient.MulticastLoopback">
      <summary>获取或设置 <see cref="T:System.Boolean" /> 值，指定是否将输出多路广播数据包传递给发送应用程序。</summary>
      <returns>
            如果 <see cref="T:System.Net.Sockets.UdpClient" /> 接收输出多路广播数据包，则为 true；否则为 false。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)">
      <summary>返回已由远程主机发送的 UDP 数据报。</summary>
      <returns>一个类型为 <see cref="T:System.Byte" /> 的数组，它包含数据报数据。</returns>
      <param name="remoteEP">一个 <see cref="T:System.Net.IPEndPoint" />，它表示从其发送数据的远程主机。</param>
      <exception cref="T:System.ObjectDisposedException">已关闭基础 <see cref="T:System.Net.Sockets.Socket" />。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。有关更多信息，请参见备注部分。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.SocketPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)">
      <summary>将 UDP 数据报发送到远程主机。</summary>
      <returns>已发送的字节数。</returns>
      <param name="dgram">
        <see cref="T:System.Byte" /> 类型的数组，它指定您打算以字节数组形式发送的 UDP 数据报。</param>
      <param name="bytes">数据报中的字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dgram" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.UdpClient" /> 已经建立了默认远程主机。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.UdpClient" /> 是关闭的。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。有关更多信息，请参见备注部分。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)">
      <summary>将 UDP 数据报发送到位于指定远程终结点的主机。</summary>
      <returns>已发送的字节数。</returns>
      <param name="dgram">
        <see cref="T:System.Byte" /> 类型的数组，它指定您打算发送的 UDP 数据报，表示为字节数组。</param>
      <param name="bytes">数据报中的字节数。</param>
      <param name="endPoint">一个 <see cref="T:System.Net.IPEndPoint" />，它表示要将数据报发送到的主机和端口。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dgram" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.UdpClient" /> 已建立默认远程主机。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.UdpClient" /> 被关闭。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。有关更多信息，请参见备注部分。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)">
      <summary>将 UDP 数据报发送到指定的远程主机上的指定端口。</summary>
      <returns>已发送的字节数。</returns>
      <param name="dgram">
        <see cref="T:System.Byte" /> 类型的数组，它指定您打算以字节数组形式发送的 UDP 数据报。</param>
      <param name="bytes">数据报中的字节数。</param>
      <param name="hostname">要将数据报发送到的远程主机的名称。</param>
      <param name="port">要与其进行通信的远程端口号。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dgram" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.UdpClient" /> 已经建立了默认远程主机。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.UdpClient" /> 是关闭的。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。有关更多信息，请参见备注部分。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.System#IDisposable#Dispose">
      <summary>释放由 <see cref="T:System.Net.Sockets.UdpClient" /> 使用的所有资源。</summary>
    </member>
    <member name="P:System.Net.Sockets.UdpClient.Ttl">
      <summary>获取或设置一个值，指定由 <see cref="T:System.Net.Sockets.UdpClient" /> 发送的 Internet 协议 (IP) 数据包的生存时间 (TTL)。</summary>
      <returns>TTL 值。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="T:System.Net.Sockets.SendPacketsElement">
      <summary>表示 <see cref="T:System.Net.Sockets.SendPacketsElement" /> 数组中的一个元素。</summary>
    </member>
    <member name="M:System.Net.Sockets.SendPacketsElement.#ctor(System.Byte[])">
      <summary>使用指定的缓冲区初始化 <see cref="T:System.Net.Sockets.SendPacketsElement" /> 类的新实例。</summary>
      <param name="buffer">一个字节数组，包含用 <see cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> 方法发送的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 参数不能为 null</exception>
    </member>
    <member name="M:System.Net.Sockets.SendPacketsElement.#ctor(System.Byte[],System.Int32,System.Int32)">
      <summary>使用指定的缓冲区、缓冲区偏移量和计数初始化 <see cref="T:System.Net.Sockets.SendPacketsElement" /> 类的新实例。</summary>
      <param name="buffer">一个字节数组，包含用 <see cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> 方法发送的数据。</param>
      <param name="offset">以字节为单位表示的偏移量，该偏移量是指 <paramref name="buffer" /> 的起始位置与 <paramref name="buffer" /> 中开始发送 <paramref name="buffer" /> 参数中指定数据的位置之间的偏移。</param>
      <param name="count">从 <paramref name="offset" /> 参数开始发送的字节数。如果 <paramref name="count" /> 为零，则不发送任何字节。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 参数不能为 null</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 和 <paramref name="count" /> 参数必须大于或等于零。<paramref name="offset" /> 和 <paramref name="count" /> 必须小于缓冲区的大小</exception>
    </member>
    <member name="M:System.Net.Sockets.SendPacketsElement.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <summary>使用指定的缓冲区、缓冲区偏移量和计数，以及一个用于将此元素与从套接字层到传输层的单一发送请求中的下一个元素进行合并的选项，来初始化 <see cref="T:System.Net.Sockets.SendPacketsElement" /> 类的新实例。</summary>
      <param name="buffer">一个字节数组，包含用 <see cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> 方法发送的数据。</param>
      <param name="offset">以字节为单位表示的偏移量，该偏移量是指 <paramref name="buffer" /> 的起始位置与 <paramref name="buffer" /> 中开始发送 <paramref name="buffer" /> 参数中指定数据的位置之间的偏移。</param>
      <param name="count">从 <paramref name="offset" /> 参数开始发送的字节数。如果 <paramref name="count" /> 为零，则不发送任何字节。</param>
      <param name="endOfPacket">一个布尔值，该值指定此元素不应当与从套接字层到传输层的单一发送请求中的下一个元素合并。此标志用于精细控制数据报或面向消息的套接字中每个消息的内容。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 参数不能为 null</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 和 <paramref name="count" /> 参数必须大于或等于零。<paramref name="offset" /> 和 <paramref name="count" /> 必须小于缓冲区的大小</exception>
    </member>
    <member name="M:System.Net.Sockets.SendPacketsElement.#ctor(System.String)">
      <summary>使用指定的文件初始化 <see cref="T:System.Net.Sockets.SendPacketsElement" /> 类的新实例。</summary>
      <param name="filepath">要用 <see cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> 方法传输的文件的文件名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filepath" /> 参数不能为 null</exception>
    </member>
    <member name="M:System.Net.Sockets.SendPacketsElement.#ctor(System.String,System.Int32,System.Int32)">
      <summary>使用指定的文件名路径、偏移量和计数初始化 <see cref="T:System.Net.Sockets.SendPacketsElement" /> 类的新实例。</summary>
      <param name="filepath">要用 <see cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> 方法传输的文件的文件名。</param>
      <param name="offset">以字节为单位表示的偏移量，该偏移量是指文件的起始位置与文件中开始发送 <paramref name="filepath" /> 参数中指定文件的位置之间的偏移。</param>
      <param name="count">从 <paramref name="offset" /> 参数开始发送的字节数。如果 <paramref name="count" /> 为零，则发送整个文件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filepath" /> 参数不能为 null</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 和 <paramref name="count" /> 参数必须大于或等于零。<paramref name="offset" /> 和 <paramref name="count" /> 必须小于 <paramref name="filepath" /> 参数表示的文件的大小。</exception>
    </member>
    <member name="M:System.Net.Sockets.SendPacketsElement.#ctor(System.String,System.Int32,System.Int32,System.Boolean)">
      <summary>使用指定的文件名路径、缓冲区偏移量和计数，以及一个用于将此元素与从套接字层到传输层的单一发送请求中的下一个元素进行合并的选项，来初始化 <see cref="T:System.Net.Sockets.SendPacketsElement" /> 类的新实例。</summary>
      <param name="filepath">要用 <see cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> 方法传输的文件的文件名。</param>
      <param name="offset">以字节为单位表示的偏移量，该偏移量是指文件的起始位置与文件中开始发送 <paramref name="filepath" /> 参数中指定文件的位置之间的偏移。</param>
      <param name="count">从 <paramref name="offset" /> 参数开始发送的字节数。如果 <paramref name="count" /> 为零，则发送整个文件。</param>
      <param name="endOfPacket">一个布尔值，该值指定此元素不应当与从套接字层到传输层的单一发送请求中的下一个元素合并。此标志用于精细控制数据报或面向消息的套接字中每个消息的内容。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filepath" /> 参数不能为 null</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 和 <paramref name="count" /> 参数必须大于或等于零。<paramref name="offset" /> 和 <paramref name="count" /> 必须小于 <paramref name="filepath" /> 参数表示的文件的大小。</exception>
    </member>
    <member name="P:System.Net.Sockets.SendPacketsElement.Buffer">
      <summary>获取在 <see cref="T:System.Net.Sockets.SendPacketsElement" /> 类使用 <paramref name="buffer" /> 参数初始化的情况下发送的缓冲区。</summary>
      <returns>在使用 <paramref name="buffer" /> 参数初始化 <see cref="T:System.Net.Sockets.SendPacketsElement" /> 类的情况下发送的字节缓冲区。</returns>
    </member>
    <member name="P:System.Net.Sockets.SendPacketsElement.Count">
      <summary>获取要发送的字节的计数。</summary>
      <returns>在 <see cref="T:System.Net.Sockets.SendPacketsElement" /> 类使用 <paramref name="count" /> 参数初始化的情况下发送的字节计数。</returns>
    </member>
    <member name="P:System.Net.Sockets.SendPacketsElement.EndOfPacket">
      <summary>获取一个布尔值，该值指示此元素是否不应当与从套接字层到传输层的单一发送请求中的下一个元素合并。</summary>
      <returns>一个布尔值，该值指示此元素是否不应当与单一发送请求中的下一个元素合并。</returns>
    </member>
    <member name="P:System.Net.Sockets.SendPacketsElement.FilePath">
      <summary>获取在 <see cref="T:System.Net.Sockets.SendPacketsElement" /> 类使用 <paramref name="filepath" /> 参数初始化的情况下发送的文件的文件名。</summary>
      <returns>在 <see cref="T:System.Net.Sockets.SendPacketsElement" /> 类使用 <paramref name="filepath" /> 参数初始化的情况下发送的文件的文件名。</returns>
    </member>
    <member name="P:System.Net.Sockets.SendPacketsElement.Offset">
      <summary>获取以字节为单位表示的偏移量，该偏移量是指数据缓冲区或文件的起始位置与该缓冲区或文件中开始发送数据的位置之间的偏移。</summary>
      <returns>以字节为单位表示的偏移量，该偏移量是指数据缓冲区或文件的起始位置与该缓冲区或文件中开始发送数据的位置之间的偏移。</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>
                    开始一个异步操作来接受一个传入的连接尝试。
                </summary>
      <returns>
                    如果 I/O 操作挂起，将返回 true。操作完成时，将引发 <paramref name="context" /> 参数的 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 事件。
                
                    如果 I/O 操作同步完成，将返回 false。将不会引发 <paramref name="context" /> 参数的 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 事件，并且可能在方法调用返回后立即检查作为参数传递的 <paramref name="context" /> 对象以检索操作的结果。
                </returns>
      <param name="e">
                    要用于此异步套接字操作的 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 对象。
                </param>
      <exception cref="T:System.ArgumentException">
                    参数无效。如果所提供的缓冲区不够大，将会发生此异常。缓冲区必须至少为 2 * (sizeof(SOCKADDR_STORAGE + 16) 字节。
                
                    如果指定了多个缓冲区，即 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> 属性不为 null，也会发生此异常。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    参数超出范围。如果 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" /> 小于 0，将会发生此异常。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    请求了无效操作。如果接收方 <see cref="T:System.Net.Sockets.Socket" /> 未侦听连接或者绑定了接受的套接字，将发生此异常。
                <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> 和 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> 方法必须先于 <see cref="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> 方法调用。
                
                    如果套接字已连接或使用指定的 <paramref name="context" /> 参数的套接字操作已经在进行中，也会发生此异常。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.NotSupportedException">
                    此方法需要 Windows XP 或更高版本。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>
                    开始一个对远程主机连接的异步请求。
                </summary>
      <returns>
                    如果 I/O 操作挂起，将返回 true。操作完成时，将引发 <paramref name="context" /> 参数的 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 事件。
                
                    如果 I/O 操作同步完成，将返回 false。在这种情况下，将不会引发 <paramref name="context" /> 参数的 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 事件，并且可能在方法调用返回后立即检查作为参数传递的 <paramref name="context" /> 对象以检索操作的结果。
                </returns>
      <param name="e">
                    要用于此异步套接字操作的 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 对象。
                </param>
      <exception cref="T:System.ArgumentException">
                    参数无效。如果指定了多个缓冲区，即 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> 属性不为 null，将会发生此异常。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> 不能为 null。
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.Socket" /> 正在侦听或使用指定的 <paramref name="context" /> 参数的套接字操作已经在进行中。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
      <exception cref="T:System.NotSupportedException">
                    此方法需要 Windows XP 或更高版本。如果本地终结点和 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> 不是相同的地址族，也会发生此异常。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                    调用堆栈上部的调用方无权执行所请求的操作。
                </exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>
                    开始异步请求从远程终结点断开连接。
                </summary>
      <returns>
                    如果 I/O 操作挂起，将返回 true。操作完成时，将引发 <paramref name="context" /> 参数的 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 事件。
                
                    如果 I/O 操作同步完成，将返回 false。在这种情况下，将不会引发 <paramref name="context" /> 参数的 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 事件，并且可能在方法调用返回后立即检查作为参数传递的 <paramref name="context" /> 对象以检索操作的结果。
                </returns>
      <param name="e">
                    要用于此异步套接字操作的 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 对象。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 参数不能为 null。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    使用指定的 <paramref name="context" /> 参数的套接字操作已经在进行中。
                </exception>
      <exception cref="T:System.NotSupportedException">
                    此方法需要 Windows XP 或更高版本。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。
                </exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>
                    开始一个异步请求以便从连接的 <see cref="T:System.Net.Sockets.Socket" /> 对象中接收数据。
                </summary>
      <returns>
                    如果 I/O 操作挂起，将返回 true。操作完成时，将引发 <paramref name="context" /> 参数的 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 事件。
                
                    如果 I/O 操作同步完成，将返回 false。在这种情况下，将不会引发 <paramref name="context" /> 参数的 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 事件，并且可能在方法调用返回后立即检查作为参数传递的 <paramref name="context" /> 对象以检索操作的结果。
                </returns>
      <param name="e">
                    要用于此异步套接字操作的 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 对象。
                </param>
      <exception cref="T:System.ArgumentException">
                    参数无效。<paramref name="context" /> 参数的 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> 或 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> 属性必须引用有效的缓冲区。可以设置这两个属性中的某一个，但不能同时设置这两个属性。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    使用指定的 <paramref name="context" /> 参数的套接字操作已经在进行中。
                </exception>
      <exception cref="T:System.NotSupportedException">
                    此方法需要 Windows XP 或更高版本。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。有关更多信息，请参见备注部分。
                </exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>
                    开始从指定网络设备中异步接收数据。
                </summary>
      <returns>
                    如果 I/O 操作挂起，将返回 true。操作完成时，将引发 <paramref name="context" /> 参数的 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 事件。
                
                    如果 I/O 操作同步完成，将返回 false。在这种情况下，将不会引发 <paramref name="context" /> 参数的 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 事件，并且可能在方法调用返回后立即检查作为参数传递的 <paramref name="context" /> 对象以检索操作的结果。
                </returns>
      <param name="e">
                    要用于此异步套接字操作的 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 对象。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> 不能为 null。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    使用指定的 <paramref name="context" /> 参数的套接字操作已经在进行中。
                </exception>
      <exception cref="T:System.NotSupportedException">
                    此方法需要 Windows XP 或更高版本。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。
                </exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>
                    开始使用指定的 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags" /> 将指定字节数的数据异步接收到数据缓冲区的指定位置，并存储终结点和数据包信息。
                </summary>
      <returns>
                    如果 I/O 操作挂起，将返回 true。操作完成时，将引发 <paramref name="context" /> 参数的 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 事件。
                
                    如果 I/O 操作同步完成，将返回 false。在这种情况下，将不会引发 <paramref name="context" /> 参数的 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 事件，并且可能在方法调用返回后立即检查作为参数传递的 <paramref name="context" /> 对象以检索操作的结果。
                </returns>
      <param name="e">
                    要用于此异步套接字操作的 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 对象。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> 不能为 null。
                </exception>
      <exception cref="T:System.NotSupportedException">
                    此方法需要 Windows XP 或更高版本。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    试图访问套接字时发生错误。
                </exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>
                    将数据异步发送到连接的 <see cref="T:System.Net.Sockets.Socket" /> 对象。
                </summary>
      <returns>
                    如果 I/O 操作挂起，将返回 true。操作完成时，将引发 <paramref name="context" /> 参数的 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 事件。
                
                    如果 I/O 操作同步完成，将返回 false。在这种情况下，将不会引发 <paramref name="context" /> 参数的 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 事件，并且可能在方法调用返回后立即检查作为参数传递的 <paramref name="context" /> 对象以检索操作的结果。
                </returns>
      <param name="e">
                    要用于此异步套接字操作的 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 对象。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="context" /> 参数的 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> 或 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> 属性必须引用有效的缓冲区。可以设置这两个属性中的某一个，但不能同时设置这两个属性。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    使用指定的 <paramref name="context" /> 参数的套接字操作已经在进行中。
                </exception>
      <exception cref="T:System.NotSupportedException">
                    此方法需要 Windows XP 或更高版本。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <see cref="T:System.Net.Sockets.Socket" /> 尚未连接或者尚未通过 <see cref="M:System.Net.Sockets.Socket.Accept" />、<see cref="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> 或 <see cref="Overload:System.Net.Sockets.Socket.BeginAccept" /> 方法获得。
                </exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>
                    将文件集合或者内存中的数据缓冲区以异步方法发送给连接的 <see cref="T:System.Net.Sockets.Socket" /> 对象。
                </summary>
      <returns>
                    如果 I/O 操作挂起，将返回 true。操作完成时，将引发 <paramref name="context" /> 参数的 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 事件。
                
                    如果 I/O 操作同步完成，将返回 false。在这种情况下，将不会引发 <paramref name="context" /> 参数的 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 事件，并且可能在方法调用返回后立即检查作为参数传递的 <paramref name="context" /> 对象以检索操作的结果。
                </returns>
      <param name="e">
                    要用于此异步套接字操作的 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 对象。
                </param>
      <exception cref="T:System.IO.FileNotFoundException">
                    未找到在 <see cref="P:System.Net.Sockets.SendPacketsElement.FilePath" /> 属性中指定的文件。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    使用指定的 <paramref name="context" /> 参数的套接字操作已经在进行中。
                </exception>
      <exception cref="T:System.NotSupportedException">
                    此方法需要 Windows XP 或更高版本。如果 <see cref="T:System.Net.Sockets.Socket" /> 未连接到远程主机，也会发生此异常。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    使用的是无连接 <see cref="T:System.Net.Sockets.Socket" />，并且所发送的文件超过了基础传输的最大数据包大小。
                </exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>
                    向特定远程主机异步发送数据。
                </summary>
      <returns>
                    如果 I/O 操作挂起，将返回 true。操作完成时，将引发 <paramref name="context" /> 参数的 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 事件。
                
                    如果 I/O 操作同步完成，将返回 false。在这种情况下，将不会引发 <paramref name="context" /> 参数的 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 事件，并且可能在方法调用返回后立即检查作为参数传递的 <paramref name="context" /> 对象以检索操作的结果。
                </returns>
      <param name="e">
                    要用于此异步套接字操作的 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 对象。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> 不能为 null。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    使用指定的 <paramref name="context" /> 参数的套接字操作已经在进行中。
                </exception>
      <exception cref="T:System.NotSupportedException">
                    此方法需要 Windows XP 或更高版本。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    指定的协议是面向连接的，但 <see cref="T:System.Net.Sockets.Socket" /> 尚未连接。
                </exception>
    </member>
    <member name="T:System.Net.Sockets.SocketAsyncEventArgs">
      <summary>
                    表示异步套接字操作。
                </summary>
    </member>
    <member name="M:System.Net.Sockets.SocketAsyncEventArgs.#ctor">
      <summary>
                    创建一个空的 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 实例。
                </summary>
      <exception cref="T:System.NotSupportedException">
                    该平台不受支持。
                </exception>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket">
      <summary>
                    获取或设置要使用的套接字或创建用于接受与异步套接字方法的连接的套接字。
                </summary>
      <returns>
                    要使用的 <see cref="T:System.Net.Sockets.Socket" /> 或者创建用于接受与异步套接字方法的连接的套接字。
                </returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer">
      <summary>
                    获取要用于异步套接字方法的数据缓冲区。
                </summary>
      <returns>
                    一个 <see cref="T:System.Byte" /> 数组，表示要用于异步套接字方法的数据缓冲区。
                </returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList">
      <summary>
                    获取或设置一个要用于异步套接字方法的数据缓冲区数组。
                </summary>
      <returns>
                    一个 <see cref="T:System.Collections.IList" />，表示要用于异步套接字方法的数据缓冲区数组。
                </returns>
      <exception cref="T:System.ArgumentException">
                    存在不明确的缓冲区，这些缓冲区是在 set 操作上指定的。如果传递 null 以外的值，并且 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> 属性也不为 null，将发生此异常。
                </exception>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.BytesTransferred">
      <summary>
                    获取在套接字操作中传输的字节数。
                </summary>
      <returns>
                    一个 <see cref="T:System.Int32" />，包含在套接字操作中传输的字节数。
                </returns>
    </member>
    <member name="E:System.Net.Sockets.SocketAsyncEventArgs.Completed">
      <summary>
                    用于完成异步操作的事件。
                </summary>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.Count">
      <summary>
                    获取可在异步操作中发送或接收的最大数据量（以字节为单位）。
                </summary>
      <returns>
                    一个 <see cref="T:System.Int32" />，包含可发送或接收的最大数据量（以字节为单位）。
                </returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.DisconnectReuseSocket">
      <summary>
                    获取或设置一个值，该值指定套接字能否在断开操作之后重用。
                </summary>
      <returns>
                    一个 <see cref="T:System.Boolean" />，指定套接字能否在断开操作之后重用。
                </returns>
    </member>
    <member name="M:System.Net.Sockets.SocketAsyncEventArgs.Dispose">
      <summary>
                    释放由 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 实例使用的非托管资源，并可选择释放托管资源。
                </summary>
    </member>
    <member name="M:System.Net.Sockets.SocketAsyncEventArgs.Finalize">
      <summary>
        <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 类使用的可用资源。
                </summary>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.LastOperation">
      <summary>
                    获取最近使用此上下文对象执行的套接字操作类型。
                </summary>
      <returns>
                    一个 <see cref="T:System.Net.Sockets.SocketAsyncOperation" /> 实例，指示最近使用此上下文对象执行的套接字操作类型。
                </returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.Offset">
      <summary>
                    获取 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> 属性引用的数据缓冲区的偏移量（以字节为单位）。
                </summary>
      <returns>
                    一个 <see cref="T:System.Int32" />，包含 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> 属性引用的数据缓冲区的偏移量（以字节为单位）。
                </returns>
    </member>
    <member name="M:System.Net.Sockets.SocketAsyncEventArgs.OnCompleted(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>
                    表示异步操作完成时调用的方法。
                </summary>
      <param name="e">
                    终止的事件。
                </param>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.ReceiveMessageFromPacketInfo">
      <summary>
                    获取接收的数据包的 IP 地址和接口。
                </summary>
      <returns>
                    一个 <see cref="T:System.Net.Sockets.IPPacketInformation" /> 实例，包含接收的数据包的 IP 地址和接口。
                </returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint">
      <summary>
                    获取或设置异步操作的远程 IP 终结点。
                </summary>
      <returns>
                    一个 <see cref="T:System.Net.EndPoint" />，表示异步操作的远程 IP 终结点。
                </returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements">
      <summary>
                    获取或设置要为 <see cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> 方法使用的异步操作发送的缓冲区数组。
                </summary>
      <returns>
                    表示要发送的缓冲区数组的 <see cref="T:System.Net.Sockets.SendPacketsElement" /> 对象数组。
                </returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsFlags">
      <summary>
                    为 <see cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> 方法使用的异步操作获取或设置 <see cref="T:System.Net.Sockets.TransmitFileOptions" /> 值的按位组合。
                </summary>
      <returns>
                    一个 <see cref="T:System.Net.Sockets.TransmitFileOptions" />，包含用于异步操作的值的按位组合。
                </returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsSendSize">
      <summary>
                    获取或设置发送操作中使用的数据块的大小（以字节为单位）。
                </summary>
      <returns>
                    一个 <see cref="T:System.Int32" />，包含在发送操作中使用的数据块的大小（以字节为单位）。
                </returns>
    </member>
    <member name="M:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Byte[],System.Int32,System.Int32)">
      <summary>
设置要用于异步套接字方法的数据缓冲区。
                </summary>
      <param name="buffer">
                    要用于异步套接字方法的数据缓冲区。
                </param>
      <param name="offset">
数据缓冲区中操作开始位置处的偏移量，以字节为单位。
                </param>
      <param name="count">
可在缓冲区中发送或接收的最大数据量（以字节为单位）。
                </param>
      <exception cref="T:System.ArgumentException">
指定的缓冲区不明确。如果 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> 属性不为 null，<see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> 属性也不为 null，将发生此异常。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
参数超出范围。如果 <paramref name="offset" /> 参数小于零或大于 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> 属性中的数组长度，将发生此异常。如果 <paramref name="count" /> 参数小于零或大于 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> 属性中的数组长度减去 <paramref name="offset" /> 参数的值，也会发生此异常。
                </exception>
    </member>
    <member name="M:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Int32,System.Int32)">
      <summary>
设置要用于异步套接字方法的数据缓冲区。
                </summary>
      <param name="offset">
数据缓冲区中操作开始位置处的偏移量，以字节为单位。
                </param>
      <param name="count">
可在缓冲区中发送或接收的最大数据量（以字节为单位）。
                </param>
      <exception cref="T:System.ArgumentException">
指定的缓冲区不明确。如果 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> 属性不为 null，<see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> 属性也不为 null，将发生此异常。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
参数超出范围。如果 <paramref name="offset" /> 参数小于零或大于 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> 属性中的数组长度，将发生此异常。如果 <paramref name="count" /> 参数小于零或大于 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> 属性中的数组长度减去 <paramref name="offset" /> 参数的值，也会发生此异常。
                </exception>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.SocketError">
      <summary>
                    获取或设置异步套接字操作的结果。
                </summary>
      <returns>
                    一个 <see cref="T:System.Net.Sockets.SocketError" />，表示异步套接字操作的结果。
                </returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags">
      <summary>
                    获取异步套接字操作的结果或设置异步操作的行为。
                </summary>
      <returns>
                    一个 <see cref="T:System.Net.Sockets.SocketFlags" />，表示异步套接字操作的结果。
                </returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.UserToken">
      <summary>
                    获取或设置与此异步套接字操作关联的用户或应用程序对象。
                </summary>
      <returns>
                    一个对象，表示与此异步套接字操作关联的用户或应用程序对象。
                </returns>
    </member>
    <member name="T:System.Net.Sockets.SocketAsyncOperation">
      <summary>最近使用此上下文对象执行的异步套接字操作的类型。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.None">
      <summary>没有套接字操作。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.Accept">
      <summary>一个套接字 Accept 操作。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.Connect">
      <summary>一个套接字 Connect 操作。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.Disconnect">
      <summary>一个套接字 Disconnect 操作。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.Receive">
      <summary>一个套接字 Receive 操作。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.ReceiveFrom">
      <summary>一个套接字 ReceiveFrom 操作。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.ReceiveMessageFrom">
      <summary>一个套接字 ReceiveMessageFrom 操作。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.Send">
      <summary>一个套接字 Send 操作。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.SendPackets">
      <summary>一个套接字 SendPackets 操作。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.SendTo">
      <summary>一个套接字 SendTo 操作。</summary>
    </member>
    <member name="P:System.Net.Sockets.SocketException.Message">
      <summary>
                    获取与此异常相关联的错误消息。
                </summary>
      <returns>
包含错误消息的字符串。
                </returns>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.Close">
      <summary>
                    关闭 <see cref="T:System.Net.Sockets.NetworkStream" />。
                </summary>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.System#IDisposable#Dispose">
      <summary>
                    释放由 <see cref="T:System.Net.Sockets.NetworkStream" /> 使用的所有资源。
                </summary>
    </member>
    <member name="M:System.Net.Sockets.Socket.GetHashCode"></member>
    <member name="M:System.Net.Sockets.TcpListener.Finalize">
      <summary>
        <see cref="T:System.Net.Sockets.TcpListener" /> 类使用的可用资源。
                </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultParameterValueAttribute">
      <summary>当从支持默认参数的语言执行调用时，设置参数的默认值。无法继承此类。 </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultParameterValueAttribute.#ctor(System.Object)">
      <summary>用参数的默认值初始化 <see cref="T:System.Runtime.InteropServices.DefaultParameterValueAttribute" /> 类的新实例。</summary>
      <param name="value">表示参数默认值的对象。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultParameterValueAttribute.Value">
      <summary>获取参数的默认值。</summary>
      <returns>表示参数默认值的对象。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.HandleCollector">
      <summary>跟踪未处理的句柄，并在达到指定阈值时强制执行垃圾回收。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32)">
      <summary>使用一个名称以及一个阈值（在达到该值时开始执行句柄回收）初始化 <see cref="T:System.Runtime.InteropServices.HandleCollector" /> 类的新实例。 </summary>
      <param name="name">回收器的名称。此参数允许您为跟踪句柄类型的回收器分别命名。</param>
      <param name="initialThreshold">指定何时开始执行回收的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="initialThreshold" /> 参数小于 0。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32,System.Int32)">
      <summary>使用一个名称、一个指定何时开始执行句柄回收的阈值，以及一个指定必须进行句柄回收的阈值初始化 <see cref="T:System.Runtime.InteropServices.HandleCollector" /> 类的新实例。 </summary>
      <param name="name">回收器的名称。此参数允许您为跟踪句柄类型的回收器分别命名。</param>
      <param name="initialThreshold">指定何时开始执行回收的值。</param>
      <param name="maximumThreshold">指定必须开始进行回收的值。此值应设置为可用句柄的最大数量。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="initialThreshold" /> 参数小于 0。- 或 -<paramref name="maximumThreshold" /> 参数小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="maximumThreshold" /> 参数小于 <paramref name="initialThreshold" /> 参数。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.Add">
      <summary>增加当前句柄计数。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Runtime.InteropServices.HandleCollector.Count" /> 属性小于 0。</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.Count">
      <summary>获取回收的句柄的数量。</summary>
      <returns>回收的句柄的数量。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.InitialThreshold">
      <summary>获取一个值，该值指定了何时开始执行回收。</summary>
      <returns>指定何时开始执行回收的值。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.MaximumThreshold">
      <summary>获取指定必须开始进行回收的值。</summary>
      <returns>指定必须开始进行回收的值。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.Name">
      <summary>获取 <see cref="T:System.Runtime.InteropServices.HandleCollector" /> 对象的名称。</summary>
      <returns>此 <see cref="P:System.Runtime.InteropServices.HandleCollector.Name" /> 属性允许您为跟踪句柄类型的回收器分别命名。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.Remove">
      <summary>减少当前句柄计数。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Runtime.InteropServices.HandleCollector.Count" /> 属性小于 0。</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.StandardOleMarshalObject">
      <summary>用标准 OLE STA 封送拆收器替换标准公共语言运行库 (CLR) 自由线程封送拆收器。 </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.StandardOleMarshalObject.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.StandardOleMarshalObject" /> 类的新实例。 </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ADVF">
      <summary>在设置通知接收器或缓存与对象的连接时指定请求的行为。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_NODATA">
      <summary>对于数据通知连接（<see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)" /> 或 <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" />），此标志请求数据对象在它调用 <see cref="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 时不要发送数据。 </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_PRIMEFIRST">
      <summary>请求对象在对 <see cref="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 进行初始调用（对于数据或视图通知连接）或更新缓存（对于缓存连接）之前不要等待数据或视图更改。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_ONLYONCE">
      <summary>请求对象在删除连接前只进行一次更改通知或缓存更新。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_DATAONSTOP">
      <summary>对于数据通知连接，请确保数据的可访问性。 </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_NOHANDLER">
      <summary>
        <see cref="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN" /> 的同义词，该词更为常用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN">
      <summary>此值由执行对象绘制的 DLL 对象应用程序和对象处理程序使用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_ONSAVE">
      <summary>对于缓存连接，此标志只在保存包含缓存的对象时更新缓存的表示形式。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DATADIR">
      <summary>在 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" /> 方法的 <paramref name="dwDirection" /> 参数中指定数据流的方向。这将确定生成的枚举数可以枚举的格式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DATADIR.DATADIR_GET">
      <summary>请求 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" /> 为可在 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 中指定的格式提供枚举数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DATADIR.DATADIR_SET">
      <summary>请求 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" /> 为可在 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" /> 中指定的格式提供枚举数。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DVASPECT">
      <summary>在绘制或获取数据时指定对象所需的数据或视图方位。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_CONTENT">
      <summary>对象的表示形式，它使该对象在容器内显示为嵌入的对象。通常为复合文档对象指定此值。该演示可提供给屏幕或打印机。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_THUMBNAIL">
      <summary>对象的缩略图表示形式，使对象可在浏览工具中显示。该缩略图大约为 120 x 120 像素、16 色（推荐）、独立于设备的位图，该位图可能包含在图元文件中。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_ICON">
      <summary>对象的图标表示形式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_DOCPRINT">
      <summary>对象在屏幕上的表示形式，与使用“文件”菜单上的“打印”命令在打印机上打印出的效果相同。该描述数据可以表示页序列。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FORMATETC">
      <summary>表示通用剪贴板格式。 </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.cfFormat">
      <summary>指定有意义的特殊剪贴板格式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect">
      <summary>指定一个 <see cref="T:System.Runtime.InteropServices.ComTypes.DVASPECT" /> 枚举常数，用以确定呈现中应包含多少详细信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex">
      <summary>在必须跨页边界拆分数据时指定方位的部分。 </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.ptd">
      <summary>指定指向 DVTARGETDEVICE 结构的指针，该结构中包含有关该数据所构成的目标设备的信息。 </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed">
      <summary>指定一个 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 枚举常数，该常数指示用于传输对象数据的存储介质的类型。 </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IAdviseSink">
      <summary>提供 IAdviseSink 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnClose">
      <summary>向所有已注册的通知接收器通知以下情况：对象已从运行状态更改为加载状态。此方法由服务器调用。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>向当前已注册通知接收器的所有数据对象通知以下情况：对象中的数据已更改。</summary>
      <param name="format">一个由引用传递的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />，它描述调用数据对象的格式、目标设备、呈现和存储信息。</param>
      <param name="stgmedium">一个由引用传递的 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />，它为调用数据对象定义存储介质（共用内存、磁盘文件、存储对象、流对象、图形设备接口 (GDI) 对象或未定义介质）和该介质的所属权。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnRename(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>向所有已注册的通知接收器通知以下情况：对象已重命名。此方法由服务器调用。</summary>
      <param name="moniker">一个指针，它指向对象的新的、完整的名字对象上的 IMoniker 接口。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnSave">
      <summary>向所有已注册的通知接收器通知以下情况：对象已保存。此方法由服务器调用。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnViewChange(System.Int32,System.Int32)">
      <summary>向对象的已注册通知接收器通知以下情况：其视图已更改。此方法由服务器调用。</summary>
      <param name="aspect">对象的方位或视图。包含一个从 <see cref="T:System.Runtime.InteropServices.ComTypes.DVASPECT" /> 枚举中提取的值。</param>
      <param name="index">已更改的视图部分。当前，只有 -1 有效。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDataObject">
      <summary>提供 IDataObject 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)">
      <summary>在数据对象和通知接收器之间创建连接。此方法由对象进行调用，该对象支持通知接收器并使通知接收器能收到有关对象数据中的更改的通知。</summary>
      <returns>此方法支持 E_INVALIDARG、E_UNEXPECTED 和 E_OUTOFMEMORY 等标准返回值，以及下面的值： 值说明S_OK已创建通知连接。E_NOTIMPL此方法未在数据对象上实现。DV_E_LINDEX<see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" /> 有一个无效值；当前，只支持 -1。DV_E_FORMATETC<paramref name="pFormatetc" /> 参数有一个无效值。OLE_E_ADVISENOTSUPPORTED该数据对象不支持更改通知。</returns>
      <param name="pFormatetc"> 由引用传递的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构，它定义以后的通知将使用的格式、目标设备、方面和介质。</param>
      <param name="advf">一个 <see cref="T:System.Runtime.InteropServices.ComTypes.ADVF" /> 值，它指定用于控制通知连接的一组标志。</param>
      <param name="adviseSink">指向将接收更改通知的通知接收器上的 <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink" /> 接口的指针。</param>
      <param name="connection">此方法返回时，包含指向标识此连接的 DWORD 标记的指针。以后可以使用此标记来删除通知连接，方法是将该标记发送至 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)" />。如果此值为零，则未建立连接。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)">
      <summary>销毁以前建立的通知连接。</summary>
      <param name="connection">指定要移除的连接的 DWORD 标记。使用最初建立连接时 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)" /> 返回的值。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumDAdvise(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary>创建可用于对当前的通知连接进行枚举的对象。</summary>
      <returns>此方法支持标准返回值 E_OUTOFMEMORY 以及下面的值：值说明S_OK枚举数对象已成功实例化或没有连接。OLE_E_ADVISENOTSUPPORTED此对象不支持通知。</returns>
      <param name="enumAdvise">此方法返回时，包含 <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA" />，它接收指向新枚举数对象的接口指针。如果该实现将 <paramref name="enumAdvise" /> 设置为 null，则此时没有到通知接收器的连接。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)">
      <summary>创建一个用于枚举数据对象的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构的对象。这些结构用于对 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 或 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" /> 的调用中。 </summary>
      <returns>此方法支持 E_INVALIDARG 和 E_OUTOFMEMORY 等标准返回值，以及下面的值：值说明S_OK已成功创建枚举数对象。E_NOTIMPL由 <paramref name="direction" /> 参数指定的方向不受支持。OLE_S_USEREGOLE 枚举注册表中的格式的请求。</returns>
      <param name="direction">指定数据方向的 <see cref="T:System.Runtime.InteropServices.ComTypes.DATADIR" /> 值之一。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary>提供一个在逻辑上与更复杂的结构等效的标准 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构。使用此方法可以确定两个不同的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构是否将返回相同的数据，从而无需重复呈现。</summary>
      <returns>此方法支持 E_INVALIDARG、E_UNEXPECTED 和 E_OUTOFMEMORY 等标准返回值，以及下面的值：值说明S_OK返回的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构与传递的结构不同。DATA_S_SAMEFORMATETC<see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构都相同，并且在 <paramref name="formatOut" /> 参数中返回 null。DV_E_LINDEX<see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" /> 有一个无效值；当前，只支持 -1。DV_E_FORMATETC<paramref name="pFormatetc" /> 参数有一个无效值。OLE_E_NOTRUNNING应用程序未运行。</returns>
      <param name="formatIn">由引用传递的、指向 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构的指针，该结构定义调用方在后续调用（如 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />）中检索数据时将要使用的格式、介质和目标设备。在此情况下，<see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 成员并无意义，应将其忽略。</param>
      <param name="formatOut">此方法返回时，包含指向 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构的指针（该结构中包含可能用于特定呈现的最常规信息），使其规范地等效于 <paramref name="formatetIn" />。调用方必须分配此结构，并且 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)" /> 方法必须填充数据。为了在后续调用（如 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />）中检索数据，调用方将使用提供的 <paramref name="formatOut" /> 值，除非提供的值为 null。如果方法返回 DATA_S_SAMEFORMATETC，则此值为 null。在此情况下，<see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 成员并无意义，应将其忽略。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>从源数据对象中获取数据。数据使用者调用的 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 方法将呈现指定的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构中描述的数据，并通过指定的 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 结构传输该数据。然后，调用方对释放 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 结构的责任进行假定。</summary>
      <param name="format">由引用传递的、指向 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构的指针，该结构定义传递数据时将使用的格式、介质和目标设备。使用布尔型 OR 运算符可以指定多个介质，从而允许方法在指定的介质中做出最佳选择。</param>
      <param name="medium">此方法返回时，包含一个指向 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 结构的指针，该结构通过其 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed" /> 成员指示包含返回数据的存储介质，并通过其 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员的值指示释放介质的责任。如果 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 为 null，则介质接收方负责释放介质；否则，<see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 指向相应对象上的 IUnknown 接口，以便调用其 Release 方法。介质必须由 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 进行分配和填充。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>从源数据对象中获取数据。数据使用者调用的此方法与 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 方法的区别在于调用方必须分配并释放指定的存储介质。</summary>
      <param name="format">由引用传递的、指向 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构的指针，该结构定义传递数据时将使用的格式、介质和目标设备。<see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 中只能指定一个介质，并且只有下列 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 值有效：<see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE" />、<see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM" />、<see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL" /> 或 <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE" />。</param>
      <param name="medium">由引用传递的 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />，它定义包含正在传输的数据的存储介质。介质必须由调用方分配并由 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 填充。调用方还必须释放介质。此方法的实现必须始终为此参数指向的 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 结构的 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员提供一个 null 值。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.QueryGetData(System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary>确定数据对象是否能够呈现 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构中所描述的数据。尝试执行粘贴或删除操作的对象可以在调用 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 来获取操作是否成功的指示之前调用此方法。</summary>
      <returns>此方法支持 E_INVALIDARG、E_UNEXPECTED 和 E_OUTOFMEMORY 等标准返回值，以及下面的值：值说明S_OK对 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 的后续调用可能会成功。DV_E_LINDEX<see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" /> 的无效值；当前，只支持 -1。DV_E_FORMATETC<paramref name="pFormatetc" /> 参数的无效值。DV_E_TYMED<see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed" /> 的无效值。DV_E_DVASPECT<see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect" /> 的无效值。OLE_E_NOTRUNNING应用程序未运行。</returns>
      <param name="format">由引用传递的、指向 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构的指针，该结构定义要用于查询的格式、介质和目标设备。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)">
      <summary>将数据传输至实现此方法的对象。此方法由包含数据源的对象调用。</summary>
      <param name="formatIn">由引用传递的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构，该结构定义数据对象在解释存储介质中包含的数据时所使用的格式。</param>
      <param name="medium">由引用传递的 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 结构，该结构定义其中正在传递数据的存储介质。</param>
      <param name="release">true 指定调用的数据对象，该对象实现 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" />，并在调用返回后拥有存储介质。这意味着数据对象在使用介质后必须通过调用 ReleaseStgMedium 函数来释放介质。false 指定调用方保留存储介质的所属权，调用的数据对象只能在调用期间使用存储介质。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC">
      <summary>提供 IEnumFORMATETC 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Clone(System.Runtime.InteropServices.ComTypes.IEnumFORMATETC@)">
      <summary>创建与当前枚举数包含相同枚举状态的一个新枚举数。</summary>
      <param name="newEnum">此方法返回时，包含对该新创建的枚举数的引用。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Next(System.Int32,System.Runtime.InteropServices.ComTypes.FORMATETC[],System.Int32[])">
      <summary>检索枚举序列中指定数目的项。</summary>
      <returns>
如果 <paramref name="pceltFetched" /> 参数与 <paramref name="celt" /> 参数相等，则为 S_OK；否则为 S_FALSE。</returns>
      <param name="celt">要在 <paramref name="rgelt" /> 中返回的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 引用的数目。</param>
      <param name="rgelt">此方法返回时，包含对枚举的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 引用的引用。该参数未经初始化即被传递。</param>
      <param name="pceltFetched">此方法返回时，包含对 <paramref name="rgelt" /> 中枚举的实际引用数的引用。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Reset">
      <summary>将枚举序列重置到开始处。</summary>
      <returns>具有值 S_OK 的 HRESULT。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Skip(System.Int32)">
      <summary>跳过枚举序列中指定数目的项。</summary>
      <returns>
如果跳过的元素数目与 <paramref name="celt" /> 参数相等，则为 S_OK；否则为 S_FALSE。</returns>
      <param name="celt">枚举中要跳过的元素数目。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA">
      <summary>提供 IEnumSTATDATA 接口的托管定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Clone(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary>创建与当前枚举数包含相同枚举状态的一个新枚举数。</summary>
      <param name="newEnum">此方法返回时，包含对该新创建的枚举数的引用。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Next(System.Int32,System.Runtime.InteropServices.ComTypes.STATDATA[],System.Int32[])">
      <summary>检索枚举序列中指定数目的项。</summary>
      <returns>
如果 <paramref name="pceltFetched" /> 参数与 <paramref name="celt" /> 参数相等，则为 S_OK；否则为 S_FALSE。</returns>
      <param name="celt">要在 <paramref name="rgelt" /> 中返回的 <see cref="T:System.Runtime.InteropServices.ComTypes.STATDATA" /> 引用的数目。</param>
      <param name="rgelt">此方法返回时，包含对枚举的 <see cref="T:System.Runtime.InteropServices.ComTypes.STATDATA" /> 引用的引用。该参数未经初始化即被传递。</param>
      <param name="pceltFetched">此参数返回时，包含对 <paramref name="rgelt" /> 中枚举的实际引用数的引用。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Reset">
      <summary>将枚举序列重置到开始处。</summary>
      <returns>具有值 S_OK 的 HRESULT。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Skip(System.Int32)">
      <summary>跳过枚举序列中指定数目的项。</summary>
      <returns>
如果跳过的元素数目与 <paramref name="celt" /> 参数相等，则为 S_OK；否则为 S_FALSE。</returns>
      <param name="celt">枚举中要跳过的元素数目。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STATDATA">
      <summary>提供 STATDATA 结构的托管定义。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.advf">
      <summary>表示用于确定何时向通知接收器通知数据更改的 <see cref="T:System.Runtime.InteropServices.ComTypes.ADVF" /> 枚举值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.advSink">
      <summary>表示将接收更改通知的 <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink" /> 接口。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.connection">
      <summary>表示唯一标识通知连接的标记。此标记由设置通知连接的方法返回。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.formatetc">
      <summary>表示对通知接收器有意义的数据的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构。通知接收器将接收对 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构所指定数据的更改通知。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM">
      <summary>提供 STGMEDIUM 结构的托管定义。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease">
      <summary>表示指向接口实例的指针，该指针允许发送进程控制当接收进程调用 ReleaseStgMedium 函数时释放存储的方式。如果 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 为 null，则 ReleaseStgMedium 使用默认过程来释放存储；否则 ReleaseStgMedium 将使用指定的 IUnknown 接口。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed">
      <summary>指定存储介质的类型。封送和取消封送例程使用此值来确定所使用的联合成员。此值必须是 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 枚举的元素之一。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.unionmember">
      <summary>表示接收进程可用于访问正在传输的数据的句柄、字符串或接口。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYMED">
      <summary>提供 TYMED 结构的托管定义。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL">
      <summary>该存储介质是全局内存句柄 (HGLOBAL)。使用 GMEM_SHARE 标志分配全局句柄。如果 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员为 null，目标进程应使用 GlobalFree 释放内存。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE">
      <summary>该存储介质是由路径标识的磁盘文件。如果 STGMEDIUM<see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员为 null，目标进程应使用 OpenFile 删除文件。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM">
      <summary>该存储介质是由 IStream 指针标识的流对象。使用 ISequentialStream::Read 读取数据。如果 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员不为 null，则目标进程应使用 IStream::Release 释放流组件。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE">
      <summary>该存储介质是由 IStorage 指针标识的存储组件。数据位于此 IStorage 实例所包含的流和存储中。如果 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员不为 null，则目标进程应使用 IStorage::Release 释放存储组件。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_GDI">
      <summary>该存储介质是图形设备接口 (GDI) 组件 (HBITMAP)。如果 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员为 null，目标进程应使用 DeleteObject 删除位图。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_MFPICT">
      <summary>该存储介质是图元文件 (HMETAFILE)。使用 Windows 或 WIN32 函数来访问该图元文件的数据。如果 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员为 null，目标进程应使用 DeleteMetaFile 删除位图。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ENHMF">
      <summary>该存储介质是增强型图元文件。如果 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员为 null，目标进程应使用 DeleteEnhMetaFile 删除位图。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_NULL">
      <summary>当前没有传递任何数据。</summary>
    </member>
    <member name="T:System.Security.AccessControl.SemaphoreAccessRule">
      <summary>表示一组允许或拒绝用户或组进行访问的权限。无法继承此类。</summary>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)">
      <summary>初始化 <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> 类的新实例，指定此规则应用到的用户或组、访问权限以及是否允许或拒绝指定的访问权限。</summary>
      <param name="identity">此规则应用到的用户或组。必须为 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 类型，或可以转换为 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 类型的类型，如 <see cref="T:System.Security.Principal.NTAccount" />。</param>
      <param name="eventRights">
        <see cref="T:System.Security.AccessControl.SemaphoreRights" /> 值的按位组合，它指定允许或拒绝的权限。</param>
      <param name="type">
        <see cref="T:System.Security.AccessControl.AccessControlType" /> 值之一，用于指定是允许还是拒绝相应权限。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="eventRights" /> 指定了一个无效值。- 或 -<paramref name="type" /> 指定了一个无效值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identity" /> 为 null。 - 或 -<paramref name="eventRights" /> 是零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="identity" /> 既不属于类型 <see cref="T:System.Security.Principal.SecurityIdentifier" />，也不属于可以转换为 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 类型的类型（如 <see cref="T:System.Security.Principal.NTAccount" />）。</exception>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreAccessRule.#ctor(System.String,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)">
      <summary>初始化 <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> 类的新实例，指定应用此规则的用户或组的名称、访问权限以及是否允许或拒绝指定的访问权限。</summary>
      <param name="identity">应用此规则的用户或组的名称。</param>
      <param name="eventRights">
        <see cref="T:System.Security.AccessControl.SemaphoreRights" /> 值的按位组合，它指定允许或拒绝的权限。</param>
      <param name="type">
        <see cref="T:System.Security.AccessControl.AccessControlType" /> 值之一，用于指定是允许还是拒绝相应权限。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="eventRights" /> 指定了一个无效值。- 或 -<paramref name="type" /> 指定了一个无效值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="eventRights" /> 是零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="identity" /> 为 null。- 或 -<paramref name="identity" /> 是零长度字符串。- 或 -<paramref name="identity" /> 的长度超过 512 个字符。</exception>
    </member>
    <member name="P:System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights">
      <summary>获取访问规则允许或拒绝的权限。</summary>
      <returns>
        <see cref="T:System.Security.AccessControl.SemaphoreRights" /> 值的按位组合，它指示访问规则允许或拒绝的权限。</returns>
    </member>
    <member name="T:System.Security.AccessControl.SemaphoreAuditRule">
      <summary>表示要为用户或组审核的一组访问权限。无法继承此类。</summary>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreAuditRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AuditFlags)">
      <summary>初始化 <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" /> 类的新实例，指定要审核的用户或组，要审核的权限，以及是否审核成功和（或）失败。</summary>
      <param name="identity">此规则应用到的用户或组。必须为 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 类型，或可以转换为 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 类型的类型，如 <see cref="T:System.Security.Principal.NTAccount" />。</param>
      <param name="eventRights">
        <see cref="T:System.Security.AccessControl.SemaphoreRights" /> 值的按位组合，它指定要审核的访问类型。</param>
      <param name="flags">
        <see cref="T:System.Security.AccessControl.AuditFlags" /> 值的按位组合，它指定审核是成功、失败还是包括这两种情况。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="eventRights" /> 指定了一个无效值。- 或 -<paramref name="flags" /> 指定了一个无效值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identity" /> 为 null。 - 或 -<paramref name="eventRights" /> 是零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="identity" /> 既不属于类型 <see cref="T:System.Security.Principal.SecurityIdentifier" />，也不属于可以转换为 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 类型的类型（如 <see cref="T:System.Security.Principal.NTAccount" />）。</exception>
    </member>
    <member name="P:System.Security.AccessControl.SemaphoreAuditRule.SemaphoreRights">
      <summary>获取受此审核规则影响的访问权限。</summary>
      <returns>
        <see cref="T:System.Security.AccessControl.SemaphoreRights" /> 值的按位组合，它指示受此审核规则影响的权限。</returns>
    </member>
    <member name="T:System.Security.AccessControl.SemaphoreRights">
      <summary>指定可应用于命名的系统信号量对象的访问控制权限。</summary>
    </member>
    <member name="F:System.Security.AccessControl.SemaphoreRights.Modify">
      <summary>释放命名的信号量的权限。</summary>
    </member>
    <member name="F:System.Security.AccessControl.SemaphoreRights.Delete">
      <summary>删除命名的信号量的权限。</summary>
    </member>
    <member name="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions">
      <summary>打开并复制命名的信号量的访问规则和审核规则的权限。</summary>
    </member>
    <member name="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions">
      <summary>更改与某个命名的信号量关联的安全性和审核规则的权限。</summary>
    </member>
    <member name="F:System.Security.AccessControl.SemaphoreRights.TakeOwnership">
      <summary>更改命名的信号量的所有者的权限。</summary>
    </member>
    <member name="F:System.Security.AccessControl.SemaphoreRights.Synchronize">
      <summary>在命名的信号量上进行等待的权限。</summary>
    </member>
    <member name="F:System.Security.AccessControl.SemaphoreRights.FullControl">
      <summary>对某个命名的信号量进行完全控制以及修改其访问规则和审核规则的权限。</summary>
    </member>
    <member name="T:System.Security.AccessControl.SemaphoreSecurity">
      <summary>表示命名的信号量的 Windows 访问控制安全性。无法继承此类。</summary>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> 类的新实例。</summary>
      <exception cref="T:System.NotSupportedException">Windows 98 或 Windows Millennium Edition 不支持此类。</exception>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)">
      <summary>使用来自具有指定名称的系统信号量的访问控制安全性规则的指定部分来初始化 <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> 类的新实例。</summary>
      <param name="name">要检索其访问控制安全性规则的系统信号量的名称。</param>
      <param name="includeSections">指定要检索的部分的 <see cref="T:System.Security.AccessControl.AccessControlSections" /> 标志的组合。</param>
      <exception cref="T:System.NotSupportedException">Windows 98 或 Windows Millennium Edition 不支持此类。</exception>
    </member>
    <member name="P:System.Security.AccessControl.SemaphoreSecurity.AccessRightType">
      <summary>获取 <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> 类用于表示访问规则的枚举。</summary>
      <returns>一个 <see cref="T:System.Type" /> 对象，表示 <see cref="T:System.Security.AccessControl.SemaphoreRights" /> 枚举。</returns>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
      <summary>使用指定的访问权限、访问控制和标志为指定用户创建新的访问控制规则。</summary>
      <returns>一个 <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> 对象，表示指定用户的指定权限。</returns>
      <param name="identityReference">一个 <see cref="T:System.Security.Principal.IdentityReference" />，用于标识此规则应用到的用户或组。</param>
      <param name="accessMask">
        <see cref="T:System.Security.AccessControl.SemaphoreRights" /> 值的按位组合，用于指定允许或拒绝的访问权限，该组合将被强制转换为整数。</param>
      <param name="isInherited">这对于命名的信号量没有意义，因为这些信号量没有层次结构。</param>
      <param name="inheritanceFlags">这对于命名的信号量没有意义，因为这些信号量没有层次结构。</param>
      <param name="propagationFlags">这对于命名的信号量没有意义，因为这些信号量没有层次结构。</param>
      <param name="type">
        <see cref="T:System.Security.AccessControl.AccessControlType" /> 值之一，用于指定是允许还是拒绝相应权限。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="accessMask" />、<paramref name="inheritanceFlags" />、<paramref name="propagationFlags" /> 或 <paramref name="type" /> 指定了一个无效值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identityReference" /> 为 null。 - 或 -<paramref name="accessMask" /> 是零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="identityReference" /> 既不属于类型 <see cref="T:System.Security.Principal.SecurityIdentifier" />，也不属于可以转换为 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 类型的类型（如 <see cref="T:System.Security.Principal.NTAccount" />）。</exception>
    </member>
    <member name="P:System.Security.AccessControl.SemaphoreSecurity.AccessRuleType">
      <summary>获取 <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> 类用于表示访问规则的类型。</summary>
      <returns>一个 <see cref="T:System.Type" /> 对象，表示 <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> 类。</returns>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.AddAccessRule(System.Security.AccessControl.SemaphoreAccessRule)">
      <summary>搜索可以将新规则与之合并的匹配规则。如果未找到任何规则，则添加新规则。</summary>
      <param name="rule">要添加的访问控制规则。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rule" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.AddAuditRule(System.Security.AccessControl.SemaphoreAuditRule)">
      <summary>搜索可以将新规则与之合并的审核规则。如果未找到任何规则，则添加新规则。</summary>
      <param name="rule">要添加的审核规则。由此规则指定的用户来决定搜索。</param>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
      <summary>新建审核规则，指定规则应用到的用户、要审核的访问权限以及触发审核规则的结果。</summary>
      <returns>一个 <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" /> 对象，表示指定用户的指定审核规则。该方法的返回类型是基类 <see cref="T:System.Security.AccessControl.AuditRule" />，但可以安全地将返回值强制转换为派生类。</returns>
      <param name="identityReference">一个 <see cref="T:System.Security.Principal.IdentityReference" />，用于标识此规则应用到的用户或组。</param>
      <param name="accessMask">
        <see cref="T:System.Security.AccessControl.SemaphoreRights" /> 值的按位组合，用于指定要审核的访问权限，该组合将被强制转换为整数。</param>
      <param name="isInherited">这对于命名的等待句柄没有意义，因为这些句柄没有层次结构。</param>
      <param name="inheritanceFlags">这对于命名的等待句柄没有意义，因为这些句柄没有层次结构。</param>
      <param name="propagationFlags">这对于命名的等待句柄没有意义，因为这些句柄没有层次结构。</param>
      <param name="flags">
        <see cref="T:System.Security.AccessControl.AuditFlags" /> 值的按位组合，它指定审核成功的访问、失败的访问还是对这两种情况都进行审核。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="accessMask" />、<paramref name="inheritanceFlags" />、<paramref name="propagationFlags" /> 或 <paramref name="flags" /> 指定了一个无效值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identityReference" /> 为 null。 - 或 -<paramref name="accessMask" /> 是零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="identityReference" /> 既不属于类型 <see cref="T:System.Security.Principal.SecurityIdentifier" />，也不属于可以转换为 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 类型的类型（如 <see cref="T:System.Security.Principal.NTAccount" />）。</exception>
    </member>
    <member name="P:System.Security.AccessControl.SemaphoreSecurity.AuditRuleType">
      <summary>获取 <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> 类用于表示审核规则的类型。</summary>
      <returns>一个 <see cref="T:System.Type" /> 对象，表示 <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" /> 类。</returns>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule(System.Security.AccessControl.SemaphoreAccessRule)">
      <summary>搜索如下的访问控制规则：与指定的访问规则具有相同的用户和 <see cref="T:System.Security.AccessControl.AccessControlType" />（允许或拒绝），并具有兼容的继承和传播标志；如果找到，则从中移除指定访问规则中包含的权限。</summary>
      <returns>
如果找到一个兼容规则，则为 true；否则为 false。</returns>
      <param name="rule">指定要搜索的用户和 <see cref="T:System.Security.AccessControl.AccessControlType" /> 的 <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" />，以及匹配规则（如果找到）必须兼容的一组继承和传播标志。指定要从兼容规则移除的权限（如果找到）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rule" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll(System.Security.AccessControl.SemaphoreAccessRule)">
      <summary>搜索与指定的规则具有相同用户和 <see cref="T:System.Security.AccessControl.AccessControlType" />（允许或拒绝）的所有访问控制规则，如果找到则将其移除。</summary>
      <param name="rule">一个 <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" />，指定要搜索的用户和 <see cref="T:System.Security.AccessControl.AccessControlType" />。此规则指定的任何权限都被忽略。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rule" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.SemaphoreAccessRule)">
      <summary>搜索与指定的规则完全匹配的访问控制规则，如果找到则将其移除。</summary>
      <param name="rule">要移除的 <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rule" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRule(System.Security.AccessControl.SemaphoreAuditRule)">
      <summary>搜索以下的审核控制规则：与指定的规则具有相同的用户，并具有兼容的继承和传播标志；如果找到兼容规则，则从中移除指定的规则中包含的权限。</summary>
      <returns>
如果找到一个兼容规则，则为 true；否则为 false。</returns>
      <param name="rule">一个 <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" />，指定要搜索的用户以及匹配规则（如果找到）必须兼容的一组继承和传播标志。指定要从兼容规则移除的权限（如果找到）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rule" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRuleAll(System.Security.AccessControl.SemaphoreAuditRule)">
      <summary>搜索与指定的规则具有相同用户的所有审核规则；如果找到，则移除这些规则。</summary>
      <param name="rule">指定要搜索的用户的 <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" />。此规则指定的任何权限都被忽略。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rule" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.SemaphoreAuditRule)">
      <summary>搜索与指定的规则完全匹配的审核规则；如果找到，则移除这些规则。</summary>
      <param name="rule">要移除的 <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rule" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.ResetAccessRule(System.Security.AccessControl.SemaphoreAccessRule)">
      <summary>不论 <see cref="T:System.Security.AccessControl.AccessControlType" /> 如何，移除与指定的规则具有相同用户的所有访问控制规则，然后添加指定的规则。</summary>
      <param name="rule">要添加的 <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" />。由该规则指定的用户确定在添加该规则之前要移除的规则。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rule" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.SetAccessRule(System.Security.AccessControl.SemaphoreAccessRule)">
      <summary>移除与指定的规则具有相同用户和 <see cref="T:System.Security.AccessControl.AccessControlType" />（允许或拒绝）的所有控制规则，然后添加指定的规则。</summary>
      <param name="rule">要添加的 <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" />。由该规则的用户和 <see cref="T:System.Security.AccessControl.AccessControlType" /> 确定在添加此规则之前要移除的规则。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rule" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.SetAuditRule(System.Security.AccessControl.SemaphoreAuditRule)">
      <summary>不论 <see cref="T:System.Security.AccessControl.AuditFlags" /> 的值如何，移除与指定的规则具有相同用户的所有审核规则，然后添加指定的规则。</summary>
      <param name="rule">要添加的 <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" />。由该规则指定的用户确定在添加该规则之前要移除的规则。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rule" /> 为 null。</exception>
    </member>
    <member name="T:System.Security.Authentication.AuthenticationException">
      <summary>当身份验证流的身份验证失败时引发的异常。</summary>
    </member>
    <member name="M:System.Security.Authentication.AuthenticationException.#ctor">
      <summary>不使用任何消息初始化 <see cref="T:System.Security.Authentication.AuthenticationException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Authentication.AuthenticationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的指定实例初始化 <see cref="T:System.Security.Authentication.AuthenticationException" /> 类的新实例。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例，包含反序列化新的 <see cref="T:System.Security.Authentication.AuthenticationException" /> 实例所需的信息。 </param>
      <param name="streamingContext">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 实例。 </param>
    </member>
    <member name="M:System.Security.Authentication.AuthenticationException.#ctor(System.String)">
      <summary>用指定的消息初始化 <see cref="T:System.Security.Authentication.AuthenticationException" /> 类的新实例。</summary>
      <param name="message">描述身份验证失败的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.Security.Authentication.AuthenticationException.#ctor(System.String,System.Exception)">
      <summary>使用指定的消息和内部异常初始化 <see cref="T:System.Security.Authentication.AuthenticationException" /> 类的新实例。</summary>
      <param name="message">描述身份验证失败的 <see cref="T:System.String" />。</param>
      <param name="innerException">导致当前异常的 <see cref="T:System.Exception" />。</param>
    </member>
    <member name="T:System.Security.Authentication.CipherAlgorithmType">
      <summary>为 <see cref="T:System.Net.Security.SslStream" /> 类定义可能的密码算法。</summary>
    </member>
    <member name="F:System.Security.Authentication.CipherAlgorithmType.None">
      <summary>未使用加密算法。</summary>
    </member>
    <member name="F:System.Security.Authentication.CipherAlgorithmType.Rc2">
      <summary>Rivest 代码 2 (RC2) 算法。</summary>
    </member>
    <member name="F:System.Security.Authentication.CipherAlgorithmType.Rc4">
      <summary>Rivest 代码 4 (RC4) 算法。</summary>
    </member>
    <member name="F:System.Security.Authentication.CipherAlgorithmType.Des">
      <summary>数据加密标准 (DES) 算法。</summary>
    </member>
    <member name="F:System.Security.Authentication.CipherAlgorithmType.TripleDes">
      <summary>三重数据加密标准 (3DES) 算法。</summary>
    </member>
    <member name="F:System.Security.Authentication.CipherAlgorithmType.Aes">
      <summary>高级加密标准 (AES) 算法。</summary>
    </member>
    <member name="F:System.Security.Authentication.CipherAlgorithmType.Aes128">
      <summary>具有 128 位密钥的高级加密标准 (AES) 算法。</summary>
    </member>
    <member name="F:System.Security.Authentication.CipherAlgorithmType.Aes192">
      <summary>具有 192 位密钥的高级加密标准 (AES) 算法。</summary>
    </member>
    <member name="F:System.Security.Authentication.CipherAlgorithmType.Aes256">
      <summary>具有 256 位密钥的高级加密标准 (AES) 算法。</summary>
    </member>
    <member name="T:System.Security.Authentication.ExchangeAlgorithmType">
      <summary>指定算法，该算法用于创建客户端和服务器的共享密钥。</summary>
    </member>
    <member name="F:System.Security.Authentication.ExchangeAlgorithmType.None">
      <summary>未使用密钥交换算法。</summary>
    </member>
    <member name="F:System.Security.Authentication.ExchangeAlgorithmType.RsaSign">
      <summary>RSA 公钥签名算法。</summary>
    </member>
    <member name="F:System.Security.Authentication.ExchangeAlgorithmType.RsaKeyX">
      <summary>RSA 公钥交换算法。</summary>
    </member>
    <member name="F:System.Security.Authentication.ExchangeAlgorithmType.DiffieHellman">
      <summary>Diffie Hellman 短周期密钥交换算法。</summary>
    </member>
    <member name="T:System.Security.Authentication.HashAlgorithmType">
      <summary>指定用于生成消息身份验证代码 (MAC) 的算法。</summary>
    </member>
    <member name="F:System.Security.Authentication.HashAlgorithmType.None">
      <summary>未使用哈希算法。</summary>
    </member>
    <member name="F:System.Security.Authentication.HashAlgorithmType.Md5">
      <summary>消息摘要 5 (MD5) 哈希算法。</summary>
    </member>
    <member name="F:System.Security.Authentication.HashAlgorithmType.Sha1">
      <summary>安全哈希算法 (SHA1)。</summary>
    </member>
    <member name="T:System.Security.Authentication.InvalidCredentialException">
      <summary>当身份验证流的身份验证失败并且不能重试时引发的异常。</summary>
    </member>
    <member name="M:System.Security.Authentication.InvalidCredentialException.#ctor">
      <summary>不使用任何消息初始化 <see cref="T:System.Security.Authentication.InvalidCredentialException" /> 类的新实例。 </summary>
    </member>
    <member name="M:System.Security.Authentication.InvalidCredentialException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的指定实例初始化 <see cref="T:System.Security.Authentication.InvalidCredentialException" /> 类的新实例。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例，包含反序列化新的 <see cref="T:System.Security.Authentication.InvalidCredentialException" /> 实例所需的信息。 </param>
      <param name="streamingContext">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 实例。 </param>
    </member>
    <member name="M:System.Security.Authentication.InvalidCredentialException.#ctor(System.String)">
      <summary>用指定的消息初始化 <see cref="T:System.Security.Authentication.InvalidCredentialException" /> 类的新实例。</summary>
      <param name="message">描述身份验证失败的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.Security.Authentication.InvalidCredentialException.#ctor(System.String,System.Exception)">
      <summary>使用指定的消息和内部异常初始化 <see cref="T:System.Security.Authentication.InvalidCredentialException" /> 类的新实例。</summary>
      <param name="message">描述身份验证失败的 <see cref="T:System.String" />。</param>
      <param name="innerException">导致当前异常的 <see cref="T:System.Exception" />。</param>
    </member>
    <member name="T:System.Security.Authentication.SslProtocols">
      <summary>定义 <see cref="T:System.Security.Authentication.SslProtocols" /> 的可能版本。</summary>
    </member>
    <member name="F:System.Security.Authentication.SslProtocols.None">
      <summary>未指定 SSL 协议。</summary>
    </member>
    <member name="F:System.Security.Authentication.SslProtocols.Ssl2">
      <summary>指定 SSL 2.0 协议。SSL 2.0 已由 TLS 协议取代，之所以仍然提供这个方法，只是为了向后兼容。</summary>
    </member>
    <member name="F:System.Security.Authentication.SslProtocols.Ssl3">
      <summary>指定 SSL 3.0 协议。SSL 3.0 已由 TLS 协议取代，之所以仍然提供这个方法，只是为了向后兼容。</summary>
    </member>
    <member name="F:System.Security.Authentication.SslProtocols.Tls">
      <summary>指定 TLS 1.0 安全协议。TLS 协议在 IETF RFC 2246 中定义。</summary>
    </member>
    <member name="F:System.Security.Authentication.SslProtocols.Default">
      <summary>指定安全通信可接受安全套接字层 (SSL) 3.0 或传输层安全 (TLS) 1.0</summary>
    </member>
    <member name="T:System.Security.Cryptography.AsnEncodedData">
      <summary>表示 Abstract Syntax Notation One (ASN.1) 编码数据。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedData.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedData.#ctor(System.Byte[])">
      <summary>使用一个字节数组初始化 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 类的新实例。</summary>
      <param name="rawData">一个包含 Abstract Syntax Notation One (ASN.1) 编码数据的字节数组。</param>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedData.#ctor(System.Security.Cryptography.AsnEncodedData)">
      <summary>使用 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 类的一个实例初始化 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 类的新实例。</summary>
      <param name="asnEncodedData">
        <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 类的实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asnEncodedData" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedData.#ctor(System.Security.Cryptography.Oid,System.Byte[])">
      <summary>使用一个 <see cref="T:System.Security.Cryptography.Oid" /> 对象和一个字节数组初始化 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 类的新实例。</summary>
      <param name="oid">一个 <see cref="T:System.Security.Cryptography.Oid" /> 对象。</param>
      <param name="rawData">一个包含 Abstract Syntax Notation One (ASN.1) 编码数据的字节数组。</param>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedData.#ctor(System.String,System.Byte[])">
      <summary>使用一个字节数组初始化 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 类的新实例。</summary>
      <param name="oid">一个表示 <see cref="T:System.Security.Cryptography.Oid" /> 信息的字符串。</param>
      <param name="rawData">一个包含 Abstract Syntax Notation One (ASN.1) 编码数据的字节数组。</param>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedData.CopyFrom(System.Security.Cryptography.AsnEncodedData)">
      <summary>从 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象复制信息。</summary>
      <param name="asnEncodedData">新对象基于的 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asnEncodedData " /> 为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedData.Format(System.Boolean)">
      <summary>将 Abstract Syntax Notation One (ASN.1) 编码数据的格式化版本作为字符串返回。</summary>
      <returns>一个表示 Abstract Syntax Notation One (ASN.1) 编码数据的格式化字符串。</returns>
      <param name="multiLine">
如果返回字符串应包含回车，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.Security.Cryptography.AsnEncodedData.Oid">
      <summary>获取或设置 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象的 <see cref="T:System.Security.Cryptography.Oid" /> 值。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.Oid" /> 对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AsnEncodedData.RawData">
      <summary>获取或设置以字节数组表示的 Abstract Syntax Notation One (ASN.1) 编码数据。</summary>
      <returns>一个表示 Abstract Syntax Notation One (ASN.1) 编码数据的字节数组。</returns>
      <exception cref="T:System.ArgumentNullException">该值为 null。</exception>
    </member>
    <member name="T:System.Security.Cryptography.AsnEncodedDataCollection">
      <summary>表示 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象的集合。无法继承此类。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedDataCollection.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedDataCollection.#ctor(System.Security.Cryptography.AsnEncodedData)">
      <summary>初始化 <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection" /> 类的新实例，并将 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象添加到集合中。</summary>
      <param name="asnEncodedData">要添加到集合的 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象。</param>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedDataCollection.Add(System.Security.Cryptography.AsnEncodedData)">
      <summary>将 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象添加到 <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection" /> 对象中。</summary>
      <returns>添加的 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象的索引。</returns>
      <param name="asnEncodedData">要添加到集合的 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asnEncodedData" /> 为 null。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">两个 OID 都不为 null，且这两个 OID 不一致。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">其中一个 OID 为 null，这两个 OID 不一致。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedDataCollection.CopyTo(System.Security.Cryptography.AsnEncodedData[],System.Int32)">
      <summary>将 <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection" /> 对象复制到一个数组中。</summary>
      <param name="array">要将 <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection" /> 对象复制到其中的数组。</param>
      <param name="index">复制操作的起始位置。</param>
    </member>
    <member name="P:System.Security.Cryptography.AsnEncodedDataCollection.Count">
      <summary>获取集合中 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象的数目。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象的数目。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedDataCollection.GetEnumerator">
      <summary>返回一个 <see cref="T:System.Security.Cryptography.AsnEncodedDataEnumerator" /> 对象，该对象可用于定位 <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.AsnEncodedDataEnumerator" /> 对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AsnEncodedDataCollection.IsSynchronized">
      <summary>获取一个值，该值指示对 <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection" /> 对象的访问是否是线程安全的。</summary>
      <returns>
            在所有情况下均为 false。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AsnEncodedDataCollection.Item(System.Int32)">
      <summary>获取 <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection" /> 对象中的 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象。</returns>
      <param name="index">集合中的位置。</param>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedDataCollection.Remove(System.Security.Cryptography.AsnEncodedData)">
      <summary>从 <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection" /> 对象中移除 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象。</summary>
      <param name="asnEncodedData">要移除的 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asnEncodedData" /> 为 null。</exception>
    </member>
    <member name="P:System.Security.Cryptography.AsnEncodedDataCollection.SyncRoot">
      <summary>获取一个对象，该对象可用于同步对 <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection" /> 对象的访问。</summary>
      <returns>一个对象，用于同步对 <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection" /> 对象的访问。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedDataCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>将 <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection" /> 对象复制到一个数组中。</summary>
      <param name="array">要将 <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection" /> 对象复制到其中的数组。</param>
      <param name="index">复制操作的起始位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维数组，不受此方法支持。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 的长度无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 的长度超出范围。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedDataCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个 <see cref="T:System.Security.Cryptography.AsnEncodedDataEnumerator" /> 对象，该对象可用于定位 <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection" /> 对象。</summary>
      <returns>可用于定位集合的 <see cref="T:System.Security.Cryptography.AsnEncodedDataEnumerator" /> 对象。</returns>
    </member>
    <member name="T:System.Security.Cryptography.AsnEncodedDataEnumerator">
      <summary>提供在 <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection" /> 对象中导航的能力。无法继承此类。</summary>
    </member>
    <member name="P:System.Security.Cryptography.AsnEncodedDataEnumerator.Current">
      <summary>在 <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection" /> 对象中获取当前 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象。</summary>
      <returns>集合中当前的 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedDataEnumerator.MoveNext">
      <summary>前移到 <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection" /> 对象中的下一个 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象。</summary>
      <returns>
            如果枚举数成功前移到下一个元素，则为 true；如果枚举数已超过集合末尾，则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedDataEnumerator.Reset">
      <summary>将枚举数设置到它的初始位置。</summary>
      <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。</exception>
    </member>
    <member name="P:System.Security.Cryptography.AsnEncodedDataEnumerator.System#Collections#IEnumerator#Current">
      <summary>在 <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection" /> 对象中获取当前 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象。</summary>
      <returns>当前的 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象。</returns>
    </member>
    <member name="T:System.Security.Cryptography.Oid">
      <summary>表示加密对象标识符。无法继承此类。</summary>
    </member>
    <member name="M:System.Security.Cryptography.Oid.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.Oid" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.Oid.#ctor(System.Security.Cryptography.Oid)">
      <summary>使用指定的 <see cref="T:System.Security.Cryptography.Oid" /> 对象初始化 <see cref="T:System.Security.Cryptography.Oid" /> 类的新实例。</summary>
      <param name="oid">用于创建新对象标识符的对象标识符信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oid " /> 为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.Oid.#ctor(System.String)">
      <summary>使用 <see cref="T:System.Security.Cryptography.Oid" /> 对象的字符串值初始化 <see cref="T:System.Security.Cryptography.Oid" /> 类的新实例。</summary>
      <param name="oid">对象标识符。</param>
    </member>
    <member name="M:System.Security.Cryptography.Oid.#ctor(System.String,System.String)">
      <summary>使用指定的值和友好名称初始化 <see cref="T:System.Security.Cryptography.Oid" /> 类的新实例。</summary>
      <param name="value">标识符的圆点分隔的数字。</param>
      <param name="friendlyName">标识符的友好名称。</param>
    </member>
    <member name="P:System.Security.Cryptography.Oid.FriendlyName">
      <summary>获取或设置标识符的友好名称。</summary>
      <returns>标识符的友好名称。</returns>
    </member>
    <member name="P:System.Security.Cryptography.Oid.Value">
      <summary>获取或设置标识符的圆点分隔的数字。</summary>
      <returns>标识符的圆点分隔的数字。</returns>
    </member>
    <member name="T:System.Security.Cryptography.OidCollection">
      <summary>表示 <see cref="T:System.Security.Cryptography.Oid" /> 对象的集合。无法继承此类。</summary>
    </member>
    <member name="M:System.Security.Cryptography.OidCollection.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.OidCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.OidCollection.Add(System.Security.Cryptography.Oid)">
      <summary>将 <see cref="T:System.Security.Cryptography.Oid" /> 对象添加到 <see cref="T:System.Security.Cryptography.OidCollection" /> 对象中。</summary>
      <returns>添加的 <see cref="T:System.Security.Cryptography.Oid" /> 对象的索引。</returns>
      <param name="oid">要添加到集合的 <see cref="T:System.Security.Cryptography.Oid" /> 对象。</param>
    </member>
    <member name="M:System.Security.Cryptography.OidCollection.CopyTo(System.Security.Cryptography.Oid[],System.Int32)">
      <summary>将 <see cref="T:System.Security.Cryptography.OidCollection" /> 对象复制到一个数组中。</summary>
      <param name="array">将 <see cref="T:System.Security.Cryptography.OidCollection" /> 对象复制到其中的数组。</param>
      <param name="index">复制操作的起始位置。</param>
    </member>
    <member name="P:System.Security.Cryptography.OidCollection.Count">
      <summary>获取集合中 <see cref="T:System.Security.Cryptography.Oid" /> 对象的数目。</summary>
      <returns>集合中 <see cref="T:System.Security.Cryptography.Oid" /> 对象的数目。</returns>
    </member>
    <member name="M:System.Security.Cryptography.OidCollection.GetEnumerator">
      <summary>返回一个 <see cref="T:System.Security.Cryptography.OidEnumerator" /> 对象，该对象可用于定位 <see cref="T:System.Security.Cryptography.OidCollection" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.OidEnumerator" /> 对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.OidCollection.IsSynchronized">
      <summary>获取一个值，该值指示对 <see cref="T:System.Security.Cryptography.OidCollection" /> 对象的访问是否是线程安全的。</summary>
      <returns>
            在所有情况下均为 false。</returns>
    </member>
    <member name="P:System.Security.Cryptography.OidCollection.Item(System.Int32)">
      <summary>从 <see cref="T:System.Security.Cryptography.OidCollection" /> 对象获取 <see cref="T:System.Security.Cryptography.Oid" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.Oid" /> 对象。</returns>
      <param name="index">
        <see cref="T:System.Security.Cryptography.Oid" /> 对象在集合中的位置。</param>
    </member>
    <member name="P:System.Security.Cryptography.OidCollection.Item(System.String)">
      <summary>获取第一个 <see cref="T:System.Security.Cryptography.Oid" /> 对象，该对象包含与 <see cref="T:System.Security.Cryptography.OidCollection" /> 对象中指定的字符串值相匹配的 <see cref="P:System.Security.Cryptography.Oid.Value" /> 属性的值或 <see cref="P:System.Security.Cryptography.Oid.FriendlyName" /> 属性的值。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.Oid" /> 对象。</returns>
      <param name="oid">一个字符串，表示 <see cref="P:System.Security.Cryptography.Oid.Value" /> 属性或 <see cref="P:System.Security.Cryptography.Oid.FriendlyName" /> 属性。</param>
    </member>
    <member name="P:System.Security.Cryptography.OidCollection.SyncRoot">
      <summary>获取一个对象，该对象可用于同步对 <see cref="T:System.Security.Cryptography.OidCollection" /> 对象的访问。</summary>
      <returns>一个对象，该对象可用于同步对 <see cref="T:System.Security.Cryptography.OidCollection" /> 对象的访问。</returns>
    </member>
    <member name="M:System.Security.Cryptography.OidCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>将 <see cref="T:System.Security.Cryptography.OidCollection" /> 对象复制到一个数组中。</summary>
      <param name="array">
        <see cref="T:System.Security.Cryptography.OidCollection" /> 对象将复制到该数组中。</param>
      <param name="index">复制操作的起始位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 不能为多维数组。- 或 -<paramref name="array" /> 的长度是无效偏移量长度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 的值超出范围。</exception>
    </member>
    <member name="M:System.Security.Cryptography.OidCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个 <see cref="T:System.Security.Cryptography.OidEnumerator" /> 对象，该对象可用于定位 <see cref="T:System.Security.Cryptography.OidCollection" /> 对象。</summary>
      <returns>可用于定位集合的 <see cref="T:System.Security.Cryptography.OidEnumerator" /> 对象。</returns>
    </member>
    <member name="T:System.Security.Cryptography.OidEnumerator">
      <summary>提供在 <see cref="T:System.Security.Cryptography.OidCollection" /> 对象中导航的能力。无法继承此类。</summary>
    </member>
    <member name="P:System.Security.Cryptography.OidEnumerator.Current">
      <summary>在 <see cref="T:System.Security.Cryptography.OidCollection" /> 对象中获取当前 <see cref="T:System.Security.Cryptography.Oid" /> 对象。</summary>
      <returns>集合中当前的 <see cref="T:System.Security.Cryptography.Oid" /> 对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.OidEnumerator.MoveNext">
      <summary>前移到 <see cref="T:System.Security.Cryptography.OidCollection" /> 对象中的下一个 <see cref="T:System.Security.Cryptography.Oid" /> 对象。</summary>
      <returns>
            如果枚举数成功前移到下一个元素，则为 true；如果枚举数已超过集合末尾，则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。</exception>
    </member>
    <member name="M:System.Security.Cryptography.OidEnumerator.Reset">
      <summary>将枚举数设置到它的初始位置。</summary>
      <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。</exception>
    </member>
    <member name="P:System.Security.Cryptography.OidEnumerator.System#Collections#IEnumerator#Current">
      <summary>在 <see cref="T:System.Security.Cryptography.OidCollection" /> 对象中获取当前 <see cref="T:System.Security.Cryptography.Oid" /> 对象。</summary>
      <returns>当前的 <see cref="T:System.Security.Cryptography.Oid" /> 对象。</returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.OpenFlags">
      <summary>指定打开 X.509 证书存储区的方式。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.OpenFlags.ReadOnly">
      <summary>以只读方式打开 X.509 证书存储区。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.OpenFlags.ReadWrite">
      <summary>以读写方式打开 X.509 证书存储区。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.OpenFlags.MaxAllowed">
      <summary>以允许最高级访问的方式打开 X.509 证书存储区。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.OpenFlags.OpenExistingOnly">
      <summary>仅打开现有存储区。如果不存在任何存储区，<see cref="M:System.Security.Cryptography.X509Certificates.X509Store.Open(System.Security.Cryptography.X509Certificates.OpenFlags)" /> 方法不会创建新的存储区。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.OpenFlags.IncludeArchived">
      <summary>打开 X.509 证书存储区并添加存档证书。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.PublicKey">
      <summary>表示证书的公钥信息。无法继承此类。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.PublicKey.#ctor(System.Security.Cryptography.Oid,System.Security.Cryptography.AsnEncodedData,System.Security.Cryptography.AsnEncodedData)">
      <summary>使用公钥的对象标识符 (OID) 对象、公钥参数的 ASN.1 编码表示形式以及公钥值的 ASN.1 编码表示形式初始化 <see cref="T:System.Security.Cryptography.X509Certificates.PublicKey" /> 类的新实例。 </summary>
      <param name="oid">表示公钥的对象标识符 (OID) 对象。</param>
      <param name="parameters">公钥参数的 ASN.1 编码表示形式。</param>
      <param name="keyValue">公钥值的 ASN.1 编码表示形式。</param>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.PublicKey.EncodedKeyValue">
      <summary>获取公钥值的 ASN.1 编码表示形式。</summary>
      <returns>公钥值的 ASN.1 编码表示形式。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.PublicKey.EncodedParameters">
      <summary>获取公钥参数的 ASN.1 编码表示形式。</summary>
      <returns>公钥参数的 ASN.1 编码表示形式。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.PublicKey.Key">
      <summary>获取表示公钥的 <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" /> 或 <see cref="T:System.Security.Cryptography.DSACryptoServiceProvider" /> 对象。</summary>
      <returns>表示公钥的 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 对象。</returns>
      <exception cref="T:System.NotSupportedException">该密钥算法不受支持。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.PublicKey.Oid">
      <summary>获取公钥的对象标识符 (OID) 对象。</summary>
      <returns>公钥的对象标识符 (OID) 对象。</returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.StoreLocation">
      <summary>指定 X.509 证书存储区的位置。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser">
      <summary>当前用户使用的 X.509 证书存储区。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine">
      <summary>分配给本地计算机的 X.509 证书存储区。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.StoreName">
      <summary>指定要打开的 X.509 证书存储区的名称。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.StoreName.AddressBook">
      <summary>其他用户的 X.509 证书存储区。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.StoreName.AuthRoot">
      <summary>第三方证书颁发机构 (CA) 的 X.509 证书存储区。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.StoreName.CertificateAuthority">
      <summary>中间证书颁发机构 (CA) 的 X.509 证书存储区。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.StoreName.Disallowed">
      <summary>吊销的证书的 X.509 证书存储区。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.StoreName.My">
      <summary>个人证书的 X.509 证书存储区。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.StoreName.Root">
      <summary>受信任的根证书颁发机构 (CA) 的 X.509 证书存储区。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.StoreName.TrustedPeople">
      <summary>直接受信任的人和资源的 X.509 证书存储区。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.StoreName.TrustedPublisher">
      <summary>直接受信任的发行者的 X.509 证书存储区。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName">
      <summary>表示 X509 证书的识别名。无法继承此类。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X500DistinguishedName.#ctor(System.Byte[])">
      <summary>使用指定字节数组中的信息初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName" /> 类的新实例。</summary>
      <param name="encodedDistinguishedName">一个包含识别名信息的字节数组。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X500DistinguishedName.#ctor(System.Security.Cryptography.AsnEncodedData)">
      <summary>使用指定的 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName" /> 类的新实例。</summary>
      <param name="encodedDistinguishedName">一个表示识别名的 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X500DistinguishedName.#ctor(System.Security.Cryptography.X509Certificates.X500DistinguishedName)">
      <summary>使用指定的 <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName" /> 对象初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName" /> 类的新实例。</summary>
      <param name="distinguishedName">一个 <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName" /> 对象。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X500DistinguishedName.#ctor(System.String)">
      <summary>使用指定字符串中的信息初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName" /> 类的新实例。</summary>
      <param name="distinguishedName">一个表示识别名的字符串。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X500DistinguishedName.#ctor(System.String,System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags)">
      <summary>使用指定的字符串和 <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags" /> 标志初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName" /> 类的新实例。</summary>
      <param name="distinguishedName">一个表示识别名的字符串。</param>
      <param name="flag">一个 <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName" /> 对象，指定识别名的特征。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X500DistinguishedName.Decode(System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags)">
      <summary>使用由 <paramref name="flag" /> 参数指定的特征对识别名进行解码。</summary>
      <returns>解码的识别名。</returns>
      <param name="flag">一个指定 <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName" /> 对象特征的标志。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">证书名称无效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X500DistinguishedName.Format(System.Boolean)">
      <summary>返回 X500 识别名的格式化版本，以便打印或输出到文本窗口或控制台。</summary>
      <returns>一个表示 X500 识别名的格式化字符串。</returns>
      <param name="multiLine">
如果返回字符串应包含回车，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X500DistinguishedName.Name">
      <summary>从 X500 证书获取逗号分隔的识别名。</summary>
      <returns>X509 证书的逗号分隔的识别名。</returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags">
      <summary>指定 X.500 标识名的特性。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags.None">
      <summary>标识名没有特殊特性。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags.Reversed">
      <summary>反转标识名。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags.UseSemicolons">
      <summary>标识名使用分号。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags.DoNotUsePlusSign">
      <summary>标识名不使用加号。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags.DoNotUseQuotes">
      <summary>标识名不使用引号。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags.UseCommas">
      <summary>标识名使用逗号。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags.UseNewLines">
      <summary>标识名使用新行字符。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags.UseUTF8Encoding">
      <summary>标识名使用 UTF8 编码。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags.UseT61Encoding">
      <summary>标识名使用 T61 编码。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags.ForceUTF8Encoding">
      <summary>标识名使用 UTF8 编码。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension">
      <summary>定义对证书设置的约束。无法继承此类。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.#ctor(System.Boolean,System.Boolean,System.Int32,System.Boolean)">
      <summary>初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension" /> 类的新实例。参数指定以下值：指示证书是否为证书颁发机构 (CA) 证书的值；指示证书对其允许的路径级别数是否有限制、证书路径允许的级别数的值；指示扩展是否重要的值。  </summary>
      <param name="certificateAuthority">
如果证书为证书颁发机构 (CA) 证书，则为 true；否则为 false。</param>
      <param name="hasPathLengthConstraint">
如果证书对其允许的路径级别数有限制，则为 true；否则为 false。</param>
      <param name="pathLengthConstraint">证书路径允许的级别数。</param>
      <param name="critical">
如果扩展是必不可少的，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.#ctor(System.Security.Cryptography.AsnEncodedData,System.Boolean)">
      <summary>使用 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象和一个标识扩展是否重要的值初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension" /> 类的新实例。 </summary>
      <param name="encodedBasicConstraints">用于创建扩展的编码数据。</param>
      <param name="critical">
如果扩展是必不可少的，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.CertificateAuthority">
      <summary>获取一个值，该值指示证书是否为证书颁发机构 (CA) 证书。</summary>
      <returns>
如果证书为证书颁发机构 (CA) 证书，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.CopyFrom(System.Security.Cryptography.AsnEncodedData)">
      <summary>使用 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension" /> 类的新实例。</summary>
      <param name="asnEncodedData">用于创建扩展的编码数据。</param>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.HasPathLengthConstraint">
      <summary>获取一个值，该值指示证书对其允许的路径级别数是否有限制。</summary>
      <returns>
如果证书对其允许的路径级别数有限制，则为 true；否则为 false。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">扩展无法解码。 </exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.PathLengthConstraint">
      <summary>获取证书路径允许的级别数。</summary>
      <returns>一个整数，指示证书路径允许的级别数。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">扩展无法解码。 </exception>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509Certificate2">
      <summary>表示 X.509 证书。无法继承此类。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[])">
      <summary>使用来自字节数组的信息初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 类的新实例。</summary>
      <param name="rawData">包含 X.509 证书数据的字节数组。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">发生了与证书有关的错误。例如：证书文件不存在。证书无效。证书的密码不正确。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Security.SecureString)">
      <summary>使用一个字节数组和一个密码初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 类的新实例。</summary>
      <param name="rawData">包含 X.509 证书数据的字节数组。</param>
      <param name="password">访问 X.509 证书数据所需的密码。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">发生了与证书有关的错误。例如：证书文件不存在。证书无效。证书的密码不正确。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
      <summary>使用一个字节数组、一个密码和一个密钥存储标志初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 类的新实例。</summary>
      <param name="rawData">包含 X.509 证书数据的字节数组。</param>
      <param name="password">访问 X.509 证书数据所需的密码。</param>
      <param name="keyStorageFlags">
        <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" /> 值之一，控制在何处导入私钥以及如何导入私钥。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">发生了与证书有关的错误。例如：证书文件不存在。证书无效。证书的密码不正确。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String)">
      <summary>使用一个字节数组和一个密码初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 类的新实例。</summary>
      <param name="rawData">包含 X.509 证书数据的字节数组。</param>
      <param name="password">访问 X.509 证书数据所需的密码。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">发生了与证书有关的错误。例如：证书文件不存在。证书无效。证书的密码不正确。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
      <summary>使用一个字节数组、一个密码和一个密钥存储标志初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 类的新实例。</summary>
      <param name="rawData">包含 X.509 证书数据的字节数组。</param>
      <param name="password">访问 X.509 证书数据所需的密码。</param>
      <param name="keyStorageFlags">
        <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" /> 值之一。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">发生了与证书有关的错误。例如：证书文件不存在。证书无效。证书的密码不正确。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.IntPtr)">
      <summary>使用非托管句柄初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 类的新实例。</summary>
      <param name="handle">一个指向非托管代码中的证书上下文的指针。C 结构称为 PCCERT_CONTEXT。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">发生了与证书有关的错误。例如：证书文件不存在。证书无效。证书的密码不正确。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>使用 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 对象初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 类的新实例。</summary>
      <param name="certificate">一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 对象。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">发生了与证书有关的错误。例如：证书文件不存在。证书无效。证书的密码不正确。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String)">
      <summary>使用证书文件名初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 类的新实例。</summary>
      <param name="fileName">一个证书文件的名称。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">发生了与证书有关的错误。例如：证书文件不存在。证书无效。证书的密码不正确。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.Security.SecureString)">
      <summary>使用一个证书文件名和一个密码初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 类的新实例。</summary>
      <param name="fileName">一个证书文件的名称。</param>
      <param name="password">访问 X.509 证书数据所需的密码。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">发生了与证书有关的错误。例如：证书文件不存在。证书无效。证书的密码不正确。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
      <summary>使用一个证书文件名、一个密码和一个密钥存储标志初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 类的新实例。</summary>
      <param name="fileName">一个证书文件的名称。</param>
      <param name="password">访问 X.509 证书数据所需的密码。</param>
      <param name="keyStorageFlags">
        <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" /> 值之一，控制在何处导入私钥以及如何导入私钥。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">发生了与证书有关的错误。例如：证书文件不存在。证书无效。证书的密码不正确。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String)">
      <summary>使用一个证书文件名和一个用于访问该证书的密码初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 类的新实例。</summary>
      <param name="fileName">一个证书文件的名称。</param>
      <param name="password">访问 X.509 证书数据所需的密码。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">发生了与证书有关的错误。例如：证书文件不存在。证书无效。证书的密码不正确。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
      <summary>使用一个证书文件名、一个用于访问该证书的密码和一个密钥存储标志初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 类的新实例。</summary>
      <param name="fileName">一个证书文件的名称。</param>
      <param name="password">访问 X.509 证书数据所需的密码。</param>
      <param name="keyStorageFlags">
        <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" /> 值之一。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">发生了与证书有关的错误。例如：证书文件不存在。证书无效。证书的密码不正确。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.Archived">
      <summary>获取或设置一个指示是否存档 X.509 证书的值。</summary>
      <returns>
            如果存档该证书，则为 true；如果不存档该证书，则为 false。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">该证书不可读。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions">
      <summary>获取 <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" /> 对象的集合。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" /> 对象。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">该证书不可读。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName">
      <summary>获取或设置证书的关联别名。</summary>
      <returns>证书的友好名称。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">该证书不可读。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.Byte[])">
      <summary>指示字节数组中所包含的证书类型。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509ContentType" /> 对象。</returns>
      <param name="rawData">包含 X.509 证书数据的字节数组。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="rawData" /> 的长度为零或为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.String)">
      <summary>指示文件中所包含的证书类型。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509ContentType" /> 对象。</returns>
      <param name="fileName">一个证书文件的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType,System.Boolean)">
      <summary>从证书中获取主题和颁发者名称。</summary>
      <returns>证书的名称。</returns>
      <param name="nameType">该主题的 <see cref="T:System.Security.Cryptography.X509Certificates.X509NameType" /> 值。</param>
      <param name="forIssuer">
                如果包含颁发者名称，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey">
      <summary>获取一个值，该值指示 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象是否包含私钥。</summary>
      <returns>
            如果 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象包含私钥，则为 true；否则为 false。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">证书上下文无效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[])">
      <summary>使用字节数组中的数据填充 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象。</summary>
      <param name="rawData">包含 X.509 证书数据的字节数组。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
      <summary>使用一个字节数组中的数据、一个密码和一个密钥存储标志填充 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象。</summary>
      <param name="rawData">包含 X.509 证书数据的字节数组。</param>
      <param name="password">访问 X.509 证书数据所需的密码。</param>
      <param name="keyStorageFlags">
        <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" /> 值之一，控制在何处导入私钥以及如何导入私钥。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
      <summary>使用一个字节数组中的数据、一个密码和用于确定如何导入私钥的标志填充 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象。</summary>
      <param name="rawData">包含 X.509 证书数据的字节数组。</param>
      <param name="password">访问 X.509 证书数据所需的密码。</param>
      <param name="keyStorageFlags">
        <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" /> 值之一，用于控制在何处导入私钥以及如何导入私钥。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String)">
      <summary>使用证书文件中的信息填充 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象。</summary>
      <param name="fileName">证书的名称。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
      <summary>使用一个证书文件中的信息，一个密码和一个密钥存储标志填充 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象。</summary>
      <param name="fileName">一个证书文件的名称。</param>
      <param name="password">访问 X.509 证书数据所需的密码。</param>
      <param name="keyStorageFlags">
        <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" /> 值之一，控制在何处导入私钥以及如何导入私钥。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
      <summary>使用一个证书文件中的信息、一个密码和一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" /> 值填充 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象。</summary>
      <param name="fileName">一个证书文件的名称。</param>
      <param name="password">访问 X.509 证书数据所需的密码。</param>
      <param name="keyStorageFlags">
        <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" /> 值之一，用于控制在何处导入私钥以及如何导入私钥。</param>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName">
      <summary>获取证书颁发者的可分辨名称。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName" /> 对象，包含证书颁发者的名称。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">证书上下文无效。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter">
      <summary>获取本地时间中的一个日期，在该日期后证书不再有效。</summary>
      <returns>一个表示证书的到期日期的 <see cref="T:System.DateTime" /> 对象。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">该证书不可读。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore">
      <summary>获取证书生效的本地时间中的日期。</summary>
      <returns>一个表示证书生效日期的 <see cref="T:System.DateTime" /> 对象。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">该证书不可读。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey">
      <summary>获取或设置 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 对象，该对象表示与证书关联的私钥。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 对象，表示 RSA 或 DSA 加密服务提供程序。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密钥值不是 RSA 或 DSA 密钥，或者密钥不可读。</exception>
      <exception cref="T:System.ArgumentNullException">为此属性设置的值为 null。</exception>
      <exception cref="T:System.NotSupportedException">此私钥的密钥算法不受支持。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">X.509 密钥不匹配。</exception>
      <exception cref="T:System.ArgumentException">加密服务提供程序密钥为 null。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey">
      <summary>获取一个与证书相关联的 <see cref="P:System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey" /> 对象。</summary>
      <returns>一个 <see cref="P:System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey" /> 对象。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密钥值不是 RSA 或 DSA 密钥，或者密钥不可读。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.RawData">
      <summary>获取证书的原始数据。</summary>
      <returns>字节数组形式的证书原始数据。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.Reset">
      <summary>重置 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象的状态。</summary>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber">
      <summary>获取证书的序列号。</summary>
      <returns>证书的序列号。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm">
      <summary>获取用于创建证书签名的算法。</summary>
      <returns>返回签名算法的对象标识符 (<see cref="T:System.Security.Cryptography.Oid" />)。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">该证书不可读。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName">
      <summary>获取证书的主题可分辨名称。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName" /> 对象，用于表示证书主题的名称。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">证书上下文无效。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint">
      <summary>获取证书的指纹。</summary>
      <returns>证书的指纹。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.ToString">
      <summary>以文本格式显示 X.509 证书。</summary>
      <returns>证书信息。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.ToString(System.Boolean)">
      <summary>以文本格式显示 X.509 证书。</summary>
      <returns>证书信息。</returns>
      <param name="verbose">
                为 true 则显示公钥、私钥、扩展等；为 false 则显示类似于 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 类的信息，包括指纹、序列号、主题和颁发者名称等。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.Verify">
      <summary>使用基本验证策略执行 X.509 链验证。</summary>
      <returns>
            如果验证成功，则为 true；如果验证失败，则为 false。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">该证书不可读。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.Version">
      <summary>获取证书的 X.509 格式版本。</summary>
      <returns>证书格式。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">该证书不可读。</exception>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection">
      <summary>表示 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象的集合。无法继承此类。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.#ctor">
      <summary>不使用任何 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 信息初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>使用 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 类的新实例。</summary>
      <param name="certificate">
        <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象，集合从该对象开始。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2[])">
      <summary>使用 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象的数组初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 类的新实例。</summary>
      <param name="certificates">
        <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象的数组。 </param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2Collection)">
      <summary>使用指定的证书集合初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 类的新实例。</summary>
      <param name="certificates">一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象。 </param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Add(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>将对象添加到 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 的结尾处。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 索引，已在此处添加了 <paramref name="certificate" />。</returns>
      <param name="certificate">表示为 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象的 X.509 证书。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 为 null。 </exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.AddRange(System.Security.Cryptography.X509Certificates.X509Certificate2[])">
      <summary>将数组中的多个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象添加到 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象。</summary>
      <param name="certificates">
        <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象的数组。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificates" /> 为 null。 </exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.AddRange(System.Security.Cryptography.X509Certificates.X509Certificate2Collection)">
      <summary>将 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象中的多个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象添加到另一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象。</summary>
      <param name="certificates">一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificates" /> 为 null。 </exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Contains(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>确定 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象是否包含特定证书。</summary>
      <returns>
如果 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 包含指定的 <paramref name="certificate" />，则为 true；否则为 false。</returns>
      <param name="certificate">要在集合中定位的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 为 null。 </exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Export(System.Security.Cryptography.X509Certificates.X509ContentType)">
      <summary>将 X.509 证书信息导出到字节数组中。</summary>
      <returns>字节数组中的 X.509 证书信息。</returns>
      <param name="contentType">受支持的 <see cref="T:System.Security.Cryptography.X509Certificates.X509ContentType" /> 对象。 </param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.String)">
      <summary>使用密码将 X.509 证书信息导出到字节数组中。</summary>
      <returns>字节数组中的 X.509 证书信息。</returns>
      <param name="contentType">受支持的 <see cref="T:System.Security.Cryptography.X509Certificates.X509ContentType" /> 对象。 </param>
      <param name="password">用于保护字节数组的字符串。 </param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">证书不可读，内容无效，或证书要求密码，但提供的密码不正确因而未能导出私钥。 </exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)">
      <summary>使用 <see cref="T:System.Security.Cryptography.X509Certificates.X509FindType" /> 枚举和 <paramref name="findValue" /> 对象所指定的搜索条件搜索 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象。</returns>
      <param name="findType">
        <see cref="T:System.Security.Cryptography.X509Certificates.X509FindType" /> 值之一。 </param>
      <param name="findValue">作为对象的搜索条件。 </param>
      <param name="validOnly">
如果仅允许从搜索中返回有效的证书，则为 true；否则为 false。 </param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="findType" /> 无效。 </exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.GetEnumerator">
      <summary>返回可循环访问 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象的枚举数。</summary>
      <returns>可循环访问 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator" /> 对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Import(System.Byte[])">
      <summary>将字节数组形式的证书导入到 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象。</summary>
      <param name="rawData">包含 X.509 证书数据的字节数组。 </param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Import(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
      <summary>将需要密码才能访问的、字节数组形式的证书导入到 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象。</summary>
      <param name="rawData">包含 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象的数据的字节数组。 </param>
      <param name="password">访问证书信息所需的密码。 </param>
      <param name="keyStorageFlags">控制私钥导入方式和导入位置的 <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" /> 值之一。 </param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Import(System.String)">
      <summary>将证书文件导入到 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象。</summary>
      <param name="fileName">包含证书信息的文件的名称。 </param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Import(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
      <summary>将要求密码的证书文件导入到 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象。</summary>
      <param name="fileName">包含证书信息的文件的名称。 </param>
      <param name="password">访问证书信息所需的密码。 </param>
      <param name="keyStorageFlags">控制私钥导入方式和导入位置的 <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" /> 值之一。 </param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Insert(System.Int32,System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>将对象插入到 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象的指定索引位置。</summary>
      <param name="index">从零开始的索引，在该处插入 <paramref name="certificate" />。 </param>
      <param name="certificate">要插入的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。- 或 - <paramref name="index" /> 大于 <see cref="P:System.Collections.CollectionBase.Count" /> 属性。 </exception>
      <exception cref="T:System.NotSupportedException">集合为只读。- 或 - 该集合的大小是固定的。 </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 为 null。 </exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Item(System.Int32)">
      <summary>获取或设置指定索引处的元素。</summary>
      <returns>指定索引处的元素。</returns>
      <param name="index">要获得或设置的元素从零开始的索引。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。- 或 - <paramref name="index" /> 等于或大于 <see cref="P:System.Collections.CollectionBase.Count" /> 属性。 </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="index" /> 为 null。 </exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Remove(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>从 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象中移除证书的第一个匹配项。</summary>
      <param name="certificate">要从 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象中移除的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 为 null。 </exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.RemoveRange(System.Security.Cryptography.X509Certificates.X509Certificate2[])">
      <summary>从 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象中移除数组中的多个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象。</summary>
      <param name="certificates">
        <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象的数组。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificates" /> 为 null。 </exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.RemoveRange(System.Security.Cryptography.X509Certificates.X509Certificate2Collection)">
      <summary>从 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象中移除另一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象中的多个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象。</summary>
      <param name="certificates">一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificates" /> 为 null。 </exception>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator">
      <summary>支持在 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象上进行简单迭代。无法继承此类。</summary>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator.Current">
      <summary>获取 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象中的当前元素。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象中的当前元素。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在该集合的第一个元素之前或最后一个元素之后。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator.MoveNext">
      <summary>将枚举数前移到 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象中的下一个元素。</summary>
      <returns>
            如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator.Reset">
      <summary>将枚举数设置为其初始位置，该位置位于 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象中第一个元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator.System#Collections#IEnumerator#Current">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.IEnumerator.Current" />。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象中的当前元素。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在该集合的第一个元素之前或最后一个元素之后。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator.System#Collections#IEnumerator#MoveNext">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IEnumerator.MoveNext" />。</summary>
      <returns>
            如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator.System#Collections#IEnumerator#Reset">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IEnumerator.Reset" />。</summary>
      <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。</exception>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection">
      <summary>定义存储 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 对象的集合。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate[])">
      <summary>从 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 对象数组初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 类的新实例。</summary>
      <param name="value">用来初始化新对象的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 对象数组。 </param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.#ctor(System.Security.Cryptography.X509Certificates.X509CertificateCollection)">
      <summary>从其他 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 类的新实例。</summary>
      <param name="value">用于初始化新对象的 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />。 </param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.Add(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>将具有指定值的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 添加到当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />。</summary>
      <returns>当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 中插入新的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 处的索引。</returns>
      <param name="value">要添加到当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" />。 </param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.AddRange(System.Security.Cryptography.X509Certificates.X509Certificate[])">
      <summary>将 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 类型数组的元素复制到当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 的结尾。</summary>
      <param name="value">包含要添加到当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 的对象的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 类型的数组。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 null。 </exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.AddRange(System.Security.Cryptography.X509Certificates.X509CertificateCollection)">
      <summary>将指定的 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 的元素复制到当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 的结尾。</summary>
      <param name="value">
        <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />，包含要添加到集合的对象。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 null。 </exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.Contains(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>获取一个值，该值指示当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 是否包含指定的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" />。</summary>
      <returns>
如果 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 包含在此集合中，则为 true；否则为 false。</returns>
      <param name="value">要定位的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" />。 </param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.CopyTo(System.Security.Cryptography.X509Certificates.X509Certificate[],System.Int32)">
      <summary>将当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 中的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 值复制到一维 <see cref="T:System.Array" /> 实例的指定索引处。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，是从 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 复制的值的目标。 </param>
      <param name="index">
        <paramref name="array" /> 中要开始复制的索引。 </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 参数是多维的。- 或 - <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 中的元素数目大于 <paramref name="arrayIndex" /> 和 <paramref name="array" /> 结尾之间的可用空间。 </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 参数小于 <paramref name="array" /> 参数的下限。 </exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.GetEnumerator">
      <summary>返回可循环访问 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 的枚举数。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 的子元素的枚举数，可用于循环访问该集合。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.GetHashCode">
      <summary>生成基于包含在当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 中的所有值的哈希值。</summary>
      <returns>基于包含在当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 中的所有值的哈希值。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.IndexOf(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>返回当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 中的指定 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 的索引。</summary>
      <returns>如果找到，则为由 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 中的 <paramref name="value" /> 参数指定的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 的索引；否则为 -1。</returns>
      <param name="value">要定位的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" />。 </param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.Insert(System.Int32,System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>将 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 插入当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 中的指定索引位置。</summary>
      <param name="index">应插入 <paramref name="value" /> 处的从零开始的索引。 </param>
      <param name="value">要插入的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" />。 </param>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509CertificateCollection.Item(System.Int32)">
      <summary>获取或设置当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 的指定索引处的项。</summary>
      <returns>当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 的指定索引处的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" />。</returns>
      <param name="index">要在当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 中定位的项的从零开始的索引。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数不在集合的索引的有效范围内。 </exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.Remove(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>从当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 中移除特定的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" />。</summary>
      <param name="value">要从当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 中移除的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" />。 </param>
      <exception cref="T:System.ArgumentException">由 <paramref name="value" /> 参数指定的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 未在当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 中找到。 </exception>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator">
      <summary>枚举 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 中的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 对象。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator.#ctor(System.Security.Cryptography.X509Certificates.X509CertificateCollection)">
      <summary>为指定的 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator" /> 类的新实例。</summary>
      <param name="mappings">要枚举的 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />。</param>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator.Current">
      <summary>获取 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 中的当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" />。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 中的当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" />。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在该集合的第一个元素之前或最后一个元素之后。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator.MoveNext">
      <summary>将枚举数推进到集合的下一个元素。</summary>
      <returns>
            如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">集合在实例化枚举数后发生了修改。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator.Reset">
      <summary>将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">实例化枚举数之后修改了集合。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator.System#Collections#IEnumerator#Current">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.IEnumerator.Current" />。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 对象中的当前 X.509 证书对象。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在该集合的第一个元素之前或最后一个元素之后。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator.System#Collections#IEnumerator#MoveNext">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IEnumerator.MoveNext" />。</summary>
      <returns>
            如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">集合在实例化枚举数后发生了修改。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator.System#Collections#IEnumerator#Reset">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IEnumerator.Reset" />。</summary>
      <exception cref="T:System.InvalidOperationException">集合在实例化枚举数后发生了修改。</exception>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509Chain">
      <summary>表示 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 证书的链生成引擎。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Chain.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Chain.#ctor(System.Boolean)">
      <summary>通过指定一个值指示是否应使用计算机上下文，初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain" /> 类的新实例。</summary>
      <param name="useMachineContext">
                如果为 true，则使用计算机上下文；如果为 false，则使用当前用户上下文。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Chain.#ctor(System.IntPtr)">
      <summary>使用 X.509 链的 <see cref="T:System.IntPtr" /> 句柄初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain" /> 类的新实例。</summary>
      <param name="chainContext">X.509 链的 <see cref="T:System.IntPtr" /> 句柄。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chainContext" /> 参数为 null。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="chainContext" /> 参数指向了无效的上下文。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Chain.Build(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>使用 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainPolicy" /> 所指定的策略生成 X.509 链。</summary>
      <returns>
            如果 X.509 证书有效，则为 true；否则为 false。</returns>
      <param name="certificate">一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="certificate" /> 不是有效的证书，或者为 null。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="certificate" /> 不可读。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Chain.ChainContext">
      <summary>获取 X.509 链的句柄。</summary>
      <returns>X.509 链的 <see cref="T:System.IntPtr" /> 句柄。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Chain.ChainElements">
      <summary>获取 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElement" /> 对象的集合。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection" /> 对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Chain.ChainPolicy">
      <summary>获取或设置生成 X.509 证书链时要使用的 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainPolicy" />。</summary>
      <returns>与此 X.509 链关联的 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainPolicy" /> 对象。</returns>
      <exception cref="T:System.ArgumentNullException">为此属性设置的值为 null。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Chain.ChainStatus">
      <summary>获取 <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain" /> 对象中每个元素的状态。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainStatus" /> 对象的数组。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Chain.Create">
      <summary>查询 CryptoConfig 文件中定义的映射后，创建一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain" /> 对象，并将链映射到该映射。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain" /> 对象。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Chain.Reset">
      <summary>清除当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain" /> 对象。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509ChainElement">
      <summary>表示 X.509 链的一个元素。</summary>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainElement.Certificate">
      <summary>在特定链元素处获取 X.509 证书。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainElement.ChainElementStatus">
      <summary>获取链中的当前 X.509 证书的错误状态。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainStatus" /> 对象的数组。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainElement.Information">
      <summary>从非托管证书链结构中获取其他错误信息。</summary>
      <returns>一个字符串，表示 Crypto API 中非托管 CERT_CHAIN_ELEMENT 结构的 pwszExtendedErrorInfo 成员。</returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection">
      <summary>表示 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElement" /> 对象的集合。无法继承此类。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ChainElementCollection.CopyTo(System.Security.Cryptography.X509Certificates.X509ChainElement[],System.Int32)">
      <summary>从指定的索引开始，将 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection" /> 对象复制到数组中。</summary>
      <param name="array">
        <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElement" /> 对象的数组。</param>
      <param name="index">一个整数，表示索引值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的 <paramref name="index" /> 小于零，或者大于等于数组的长度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 加上当前计数大于数组的长度。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainElementCollection.Count">
      <summary>获取集合中的元素数。</summary>
      <returns>一个整数，表示集合中的元素数。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ChainElementCollection.GetEnumerator">
      <summary>获取可用于在链元素集合中定位的 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementEnumerator" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementEnumerator" /> 对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainElementCollection.IsSynchronized">
      <summary>获取一个值，该值指示链元素的集合是否已同步。</summary>
      <returns>始终返回 false。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainElementCollection.Item(System.Int32)">
      <summary>获取位于指定索引位置的 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElement" /> 对象。</returns>
      <param name="index">一个整数值。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 大于或等于集合的长度。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainElementCollection.SyncRoot">
      <summary>获取一个对象，该对象可用于同步对 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection" /> 对象的访问。</summary>
      <returns>对当前对象的指针引用。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ChainElementCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从指定的索引开始，将 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection" /> 对象复制到数组中。</summary>
      <param name="array">要向其复制 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection" /> 对象的数组。</param>
      <param name="index">开始复制的 <paramref name="array" /> 索引位置。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的 <paramref name="index" /> 小于零，或者大于等于数组的长度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 加上当前计数大于数组的长度。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ChainElementCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>获取可用于在链元素集合中定位的 <see cref="T:System.Collections.IEnumerator" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerator" /> 对象。</returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509ChainElementEnumerator">
      <summary>支持在 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection" /> 上进行简单迭代。无法继承此类。</summary>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainElementEnumerator.Current">
      <summary>获取 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection" /> 中的当前元素。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection" /> 中的当前元素。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在该集合的第一个元素之前或最后一个元素之后。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ChainElementEnumerator.MoveNext">
      <summary>将枚举数推进到 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection" /> 中的下一个元素。</summary>
      <returns>
            如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ChainElementEnumerator.Reset">
      <summary>将枚举数设置到其初始位置，该位置位于 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection" /> 中第一个元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainElementEnumerator.System#Collections#IEnumerator#Current">
      <summary>获取 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection" /> 中的当前元素。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection" /> 中的当前元素。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在该集合的第一个元素之前或最后一个元素之后。</exception>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509ChainPolicy">
      <summary>表示在生成 X509 证书链时要应用的链策略。无法继承此类。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ChainPolicy.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainPolicy" /> 类的新实例。 </summary>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainPolicy.ApplicationPolicy">
      <summary>获取一个对象标识符 (OID) 集合，这些对象标识符指定证书支持的应用程序策略或增强型密钥用法 (EKU)。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.OidCollection" /> 对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainPolicy.CertificatePolicy">
      <summary>获取一个对象标识符 (OID) 集合，这些对象标识符指定证书支持的证书策略。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.OidCollection" /> 对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainPolicy.ExtraStore">
      <summary>表示验证证书链时可由链引擎搜索的其他证书集合。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ChainPolicy.Reset">
      <summary>将 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainPolicy" /> 成员重置为其默认值。</summary>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainPolicy.RevocationFlag">
      <summary>获取或设置 X509 吊销标志的值。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509RevocationFlag" /> 对象。</returns>
      <exception cref="T:System.ArgumentException">提供的 <see cref="T:System.Security.Cryptography.X509Certificates.X509RevocationFlag" /> 值不是有效标志。 </exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainPolicy.RevocationMode">
      <summary>获取或设置 X509 证书吊销模式的值。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509RevocationMode" /> 对象。</returns>
      <exception cref="T:System.ArgumentException">提供的 <see cref="T:System.Security.Cryptography.X509Certificates.X509RevocationMode" /> 值不是有效标志。 </exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainPolicy.UrlRetrievalTimeout">
      <summary>获取联机吊销验证或下载证书吊销列表 (CRL) 期间所用的时间长度。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" /> 对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainPolicy.VerificationFlags">
      <summary>获取证书的验证标志。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X509VerificationFlags" /> 枚举中的一个值。</returns>
      <exception cref="T:System.ArgumentException">提供的 <see cref="T:System.Security.Cryptography.X509Certificates.X509VerificationFlags" /> 值不是有效标志。<see cref="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.NoFlag" /> 为默认值。 </exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainPolicy.VerificationTime">
      <summary>用本地时间表示的验证证书的时间。</summary>
      <returns>一个 <see cref="T:System.DateTime" /> 对象。</returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509ChainStatus">
      <summary>提供一个用于存储 X509 链状态和错误信息的简单结构。</summary>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainStatus.Status">
      <summary>指定 X509 链的状态。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags" /> 值。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainStatus.StatusInformation">
      <summary>指定对 <see cref="P:System.Security.Cryptography.X509Certificates.X509Chain.ChainStatus" /> 值的描述。</summary>
      <returns>可本地化的字符串。</returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags">
      <summary>定义 X509 链的状态。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NoError">
      <summary>指定 X509 链没有错误。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NotTimeValid">
      <summary>指定由于存在一个无效的时间值（如一个指示证书已过期的时间值），因此 X509 链无效。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NotTimeNested">
      <summary>指定 CA（证书颁发机构）证书与已颁发的证书的有效期限不配套。例如，CA 证书的有效期限是从 1 月 1 日到 12 月 1 日，而已颁发的证书的有效期限是从 1 月 2 日到 12 月 2 日，这就表示有效期限是不配套的。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.Revoked">
      <summary>指定由于有一个证书已被吊销，因此 X509 链无效。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NotSignatureValid">
      <summary>指定由于证书签名无效，因此 X509 链无效。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NotValidForUsage">
      <summary>指定密钥用法无效。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.UntrustedRoot">
      <summary>指定由于根证书不可信任，因此 X509 链无效。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.RevocationStatusUnknown">
      <summary>指定无法确定证书是否已被吊销。这可能是由于证书吊销列表 (CRL) 处于脱机状态或不可用造成的。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.Cyclic">
      <summary>指定无法生成 X509 链。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.InvalidExtension">
      <summary>指定由于扩展无效，因此 X509 链无效。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.InvalidPolicyConstraints">
      <summary>指定由于策略约束无效，因此 X509 链无效。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.InvalidBasicConstraints">
      <summary>指定由于基本约束无效，因此 X509 链无效。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.InvalidNameConstraints">
      <summary>指定由于名称约束无效，因此 X509 链无效。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.HasNotSupportedNameConstraint">
      <summary>指定证书没有受支持的名称常数或有一个不受支持的名称常数。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.HasNotDefinedNameConstraint">
      <summary>指定证书具有一个未定义的名称常数。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.HasNotPermittedNameConstraint">
      <summary>指定证书具有不允许的名称约束。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.HasExcludedNameConstraint">
      <summary>指定由于证书已排除名称约束，因此 X509 链无效。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.PartialChain">
      <summary>指定无法生成一直到根证书的 X509 链。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.CtlNotTimeValid">
      <summary>指定由于存在无效的时间值（如指示 CTL 已过期的时间值），因此证书信任列表 (CTL) 无效。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.CtlNotSignatureValid">
      <summary>指定证书信任列表 (CTL) 包含一个无效签名。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.CtlNotValidForUsage">
      <summary>指定证书信任列表 (CTL) 对此用途无效。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.OfflineRevocation">
      <summary>指定 X509 链依赖的联机证书吊销列表 (CRL) 当前为脱机状态。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NoIssuanceChainPolicy">
      <summary>指定在证书中没有证书策略扩展。如果某个组策略已指定所有证书必须具有一个证书策略，则会发生此错误。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension">
      <summary>定义对象标识符 (OID) 的集合，该集合指示使用密钥的应用程序。无法继承此类。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension.#ctor(System.Security.Cryptography.AsnEncodedData,System.Boolean)">
      <summary>使用 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象和一个标识扩展是否重要的值初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension" /> 类的新实例。</summary>
      <param name="encodedEnhancedKeyUsages">用于创建扩展的编码数据。</param>
      <param name="critical">
如果扩展是必不可少的，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension.#ctor(System.Security.Cryptography.OidCollection,System.Boolean)">
      <summary>使用 <see cref="T:System.Security.Cryptography.OidCollection" /> 和一个标识扩展是否重要的值来初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension" /> 类的新实例。 </summary>
      <param name="enhancedKeyUsages">
        <see cref="T:System.Security.Cryptography.OidCollection" /> 集合。 </param>
      <param name="critical">
如果扩展是必不可少的，则为 true；否则为 false。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">指定的 <see cref="T:System.Security.Cryptography.OidCollection" /> 包含一个或多个损坏的值。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension.CopyFrom(System.Security.Cryptography.AsnEncodedData)">
      <summary>使用 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension" /> 类的新实例。</summary>
      <param name="asnEncodedData">用于创建扩展的编码数据。</param>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension.EnhancedKeyUsages">
      <summary>获取对象标识符 (OID) 的集合，该集合指示使用密钥的应用程序。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.OidCollection" /> 对象，指示使用密钥的应用程序。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509Extension">
      <summary>表示一个 X509 扩展。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Extension.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Extension.#ctor(System.Security.Cryptography.AsnEncodedData,System.Boolean)">
      <summary>初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" /> 类的新实例。</summary>
      <param name="encodedExtension">用于创建扩展的已编码数据。</param>
      <param name="critical">
                如果扩展是必不可少的，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Extension.#ctor(System.Security.Cryptography.Oid,System.Byte[],System.Boolean)">
      <summary>初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" /> 类的新实例。</summary>
      <param name="oid">用于标识扩展的对象标识符。</param>
      <param name="rawData">用于创建扩展的编码数据。</param>
      <param name="critical">
                如果扩展是必不可少的，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oid" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="oid" /> 为空字符串 ("")。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Extension.#ctor(System.String,System.Byte[],System.Boolean)">
      <summary>初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" /> 类的新实例。</summary>
      <param name="oid">表示对象标识符的字符串。</param>
      <param name="rawData">用于创建扩展的编码数据。</param>
      <param name="critical">
                如果扩展是必不可少的，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Extension.CopyFrom(System.Security.Cryptography.AsnEncodedData)">
      <summary>复制指定 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象的扩展属性。</summary>
      <param name="asnEncodedData">要复制的 <see cref="T:System.Security.Cryptography.AsnEncodedData" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asnEncodedData" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asnEncodedData" /> 没有有效的 X.509 扩展。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Extension.Critical">
      <summary>获取一个指示扩展是否必不可少的布尔值。</summary>
      <returns>
            如果扩展是必不可少的，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection">
      <summary>表示 <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" /> 对象的集合。无法继承此类。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ExtensionCollection.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ExtensionCollection.Add(System.Security.Cryptography.X509Certificates.X509Extension)">
      <summary>将 <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" /> 对象添加到 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" /> 对象中。</summary>
      <returns>添加 <paramref name="extension" /> 参数的位置处的索引。</returns>
      <param name="extension">要添加到 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" /> 对象中的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="extension" /> 参数的值为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ExtensionCollection.CopyTo(System.Security.Cryptography.X509Certificates.X509Extension[],System.Int32)">
      <summary>从指定的索引开始，将集合复制到数组。</summary>
      <param name="array">
        <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" /> 对象的数组。</param>
      <param name="index">数组中开始复制的位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 为零长度字符串或包含无效值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="index" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 指定一个不在数组范围中的值。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ExtensionCollection.Count">
      <summary>获取 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" /> 对象中 <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" /> 对象的数目。</summary>
      <returns>一个整数，表示 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" /> 对象中 <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" /> 对象的数目。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ExtensionCollection.GetEnumerator">
      <summary>返回可循环访问 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" /> 对象的枚举数。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionEnumerator" /> 对象，用于循环访问 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" /> 对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ExtensionCollection.IsSynchronized">
      <summary>获取一个值，该值指示是否保证该集合为线程安全的。</summary>
      <returns>
            如果集合是线程安全的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ExtensionCollection.Item(System.Int32)">
      <summary>获取位于指定索引位置的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" /> 对象。</returns>
      <param name="index">要检索的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" /> 对象的位置。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 等于或大于 array 的长度。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ExtensionCollection.Item(System.String)">
      <summary>获取值或友好名称由对象标识符 (OID) 指定的第一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" /> 对象。</returns>
      <param name="oid">要检索的扩展的对象标识符 (OID)。</param>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ExtensionCollection.SyncRoot">
      <summary>获取一个对象，该对象可用于同步对 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" /> 对象的访问。</summary>
      <returns>一个对象，它可用于同步对 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" /> 对象的访问。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ExtensionCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从指定的索引开始，将集合复制到数组。</summary>
      <param name="array">
        <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" /> 对象的数组。</param>
      <param name="index">数组中开始复制的位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 为零长度字符串或包含无效值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="index" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 指定一个不在数组范围中的值。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ExtensionCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回可循环访问 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" /> 对象的枚举数。</summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerator" /> 对象，用于循环访问 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" /> 对象。</returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509ExtensionEnumerator">
      <summary>支持在 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" /> 上进行简单迭代。无法继承此类。</summary>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ExtensionEnumerator.Current">
      <summary>获取 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" /> 中的当前元素。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" /> 中的当前元素。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在该集合的第一个元素之前或最后一个元素之后。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ExtensionEnumerator.MoveNext">
      <summary>将枚举数推进到 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" /> 中的下一个元素。</summary>
      <returns>
            如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ExtensionEnumerator.Reset">
      <summary>将枚举数设置到其初始位置，该位置位于 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" /> 中第一个元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ExtensionEnumerator.System#Collections#IEnumerator#Current">
      <summary>从集合中获取一个对象。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" /> 中的当前元素。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在该集合的第一个元素之前或最后一个元素之后。</exception>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509FindType">
      <summary>指定通过 <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 方法搜索的值的类型。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByThumbprint">
      <summary>
        <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 方法的 <paramref name="findValue" /> 参数必须是一个字符串，该字符串表示证书的指纹。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectName">
      <summary>
        <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 方法的 <paramref name="findValue" /> 参数必须是一个字符串，该字符串表示证书的主题名称。与使用 <see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectDistinguishedName" /> 枚举值相比，这是一种不太具体的搜索方式。通过使用 <see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectName" /> 值，<see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 方法将使用提供的值执行不区分大小写的字符串比较。例如，如果将“MyCert”传递给 <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 方法，该方法将查找主题名称中包含该字符串的所有证书，而不考虑其他主题值。按可分辨名称搜索的精确性较高。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectDistinguishedName">
      <summary>
        <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 方法的 <paramref name="findValue" /> 参数必须是一个字符串，该字符串表示证书的主题可分辨名称。与使用 <see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectName" /> 枚举值相比，这是一种更为具体的搜索方式。通过使用 <see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectDistinguishedName" /> 值，Find 方法将对整个可分辨名称执行不区分大小写的字符串比较。按主题名称搜索的精确性较低。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByIssuerName">
      <summary>
        <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 方法的 <paramref name="findValue" /> 参数必须是一个字符串，该字符串表示证书颁发者的名称。与使用 <see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByIssuerDistinguishedName" /> 枚举值相比，这是一种不太具体的搜索方式。通过使用 <see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByIssuerName" /> 值，<see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 方法将使用提供的值执行不区分大小写的字符串比较。例如，如果将“MyCA”传递给 <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 方法，该方法将查找颁发者名称中包含该字符串的所有证书，而不管其是否包含其他颁发者值。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByIssuerDistinguishedName">
      <summary>
        <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 方法的 <paramref name="findValue" /> 参数必须是一个字符串，该字符串表示证书的颁发者可分辨名称。与使用 <see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByIssuerName" /> 枚举值相比，这是一种更为具体的搜索方式。通过使用 <see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByIssuerDistinguishedName" /> 值，<see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 方法将对整个可分辨名称执行不区分大小写的字符串比较。按颁发者名称搜索的精确性较低。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindBySerialNumber">
      <summary>
        <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 的 <paramref name="findValue" /> 参数必须是一个字符串，该字符串表示由 UI 显示的证书的序列号。该序列号的顺序必须颠倒，因为它是一个整数。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByTimeValid">
      <summary>
        <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 的 <paramref name="findValue" /> 参数必须是一个以当地时间表示的 <see cref="T:System.DateTime" /> 值，如 <see cref="P:System.DateTime.Now" />。注意，使用 <see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByTimeValid" />、<see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByTimeNotYetValid" /> 和 <see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByTimeExpired" /> 返回的证书联合应表示查询集合中的所有证书。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByTimeNotYetValid">
      <summary>
        <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 的 <paramref name="findValue" /> 参数必须是一个以当地时间表示的 <see cref="T:System.DateTime" /> 值，如 <see cref="P:System.DateTime.Now" />。注意，使用 <see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByTimeValid" />、<see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByTimeNotYetValid" /> 和 <see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByTimeExpired" /> 返回的证书联合应表示查询集合中的所有证书。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByTimeExpired">
      <summary>
        <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 的 <paramref name="findValue" /> 参数必须是一个以当地时间表示的 <see cref="T:System.DateTime" /> 值，如 <see cref="P:System.DateTime.Now" />。注意，使用 <see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByTimeValid" />、<see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByTimeNotYetValid" /> 和 <see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByTimeExpired" /> 返回的证书联合应表示查询集合中的所有证书。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByTemplateName">
      <summary>
        <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 的 <paramref name="findValue" /> 参数必须是一个字符串，该字符串表示证书的模板名，如“ClientAuth”。模板名为 X509 3 版扩展名，指定证书的使用。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByApplicationPolicy">
      <summary>
        <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 的 <paramref name="findValue" /> 参数必须是一个字符串，该字符串表示证书的应用程序策略友好名称或对象标识符 (<see cref="T:System.Security.Cryptography.Oid" />)。例如，可以使用“加密文件系统”或“1.3.6.1.4.1.311.10.3.4”。注意，对于将要本地化的应用程序，由于友好名称经过本地化处理，因此必须使用 OID。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByCertificatePolicy">
      <summary>
        <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 的 <paramref name="findValue" /> 参数必须是一个字符串，该字符串表示证书策略的友好名称或对象标识符 (<see cref="T:System.Security.Cryptography.Oid" />)。最佳做法是使用 OID，如“1.3.6.1.4.1.311.10.3.4”。注意，对于将要本地化的应用程序，由于友好名称经过本地化处理，因此必须使用 OID。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByExtension">
      <summary>
        <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 的 <paramref name="findValue" /> 参数必须是一个字符串，该字符串描述要查找的扩展名。对象标识符 (OID) 常用于指示 <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 方法搜索扩展名与 OID 值相匹配的所有证书。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByKeyUsage">
      <summary>
        <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 的 <paramref name="findValue" /> 参数必须是一个表示密钥用法的字符串或一个表示位掩码（包含所有请求的密钥用法）的整数。对于字符串值，一次只能指定一种密钥用法，但是可以按级联序列使用 <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 方法以使请求用法交叉。例如，可以将 <paramref name="findValue" /> 参数设置为“KeyEncipherment”或整数（0x30 指示“KeyEncipherment”和“DataEncipherment”）。还可以使用 <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags" /> 枚举的值。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectKeyIdentifier">
      <summary>
        <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 的 <paramref name="findValue" /> 参数必须是一个字符串，该字符串用十六进制值表示主题密钥标识符，如 UI 中显示的“F3E815D45E83B8477B9284113C64EF208E897112”。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509IncludeOption">
      <summary>指定 X.509 数据应包括 X.509 证书链的哪些内容。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509IncludeOption.None">
      <summary>不包括任何 X.509 链信息。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509IncludeOption.ExcludeRoot">
      <summary>包括根证书外的整个 X.509 链。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509IncludeOption.EndCertOnly">
      <summary>X.509 链信息中仅包括最终证书。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509IncludeOption.WholeChain">
      <summary>包括整个 X.509 链。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension">
      <summary>定义 X.509 证书中所包含的密钥的用法。无法继承此类。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension.#ctor(System.Security.Cryptography.AsnEncodedData,System.Boolean)">
      <summary>使用 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象和一个标识扩展是否重要的值初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension" /> 类的新实例。 </summary>
      <param name="encodedKeyUsage">用于创建扩展的编码数据。</param>
      <param name="critical">
如果扩展是必不可少的，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension.#ctor(System.Security.Cryptography.X509Certificates.X509KeyUsageFlags,System.Boolean)">
      <summary>使用指定的 <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags" /> 值和一个标识扩展是否重要的值初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension" /> 类的新实例。 </summary>
      <param name="keyUsages">
        <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags" /> 值之一，说明如何使用密钥。</param>
      <param name="critical">
如果扩展是必不可少的，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension.CopyFrom(System.Security.Cryptography.AsnEncodedData)">
      <summary>使用 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension" /> 类的新实例。 </summary>
      <param name="asnEncodedData">用于创建扩展的编码数据。</param>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension.KeyUsages">
      <summary>获取与证书关联的密钥用法标志。</summary>
      <returns>
        <see cref="P:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension.KeyUsages" /> 值之一。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">扩展无法解码。 </exception>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags">
      <summary>定义证书密钥的使用方法。如果不定义此值，则密钥可用于任何目的。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags.None">
      <summary>无密钥使用参数。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags.EncipherOnly">
      <summary>密钥只能用于加密。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags.CrlSign">
      <summary>密钥可用于签署证书吊销列表 (CRL)。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags.KeyCertSign">
      <summary>密钥可用于签署证书。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags.KeyAgreement">
      <summary>密钥可用于确定密钥协议，如使用 Diffie-Hellman 密钥协议算法创建的密钥。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags.DataEncipherment">
      <summary>密钥可用于数据加密。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags.KeyEncipherment">
      <summary>密钥可用于密钥加密。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags.NonRepudiation">
      <summary>密钥可用于身份验证。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags.DigitalSignature">
      <summary>密钥可用作数字签名。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags.DecipherOnly">
      <summary>密钥只能用于解密。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509NameType">
      <summary>指定 X509 证书包含的名称类型。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509NameType.SimpleName">
      <summary>X509 证书的使用者或颁发者的简单名称。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509NameType.EmailName">
      <summary>与 X509 证书关联的使用者或颁发者的电子邮件地址。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509NameType.UpnName">
      <summary>X509 证书的使用者或颁发者的 UPN 名称。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509NameType.DnsName">
      <summary>与 X509 证书的使用者或颁发者的备用名称相关联的 DNS 名称。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509NameType.DnsFromAlternativeName">
      <summary>与 X.509 证书的使用者或颁发者的备用名称相关联的 DNS 名称。此值等效于 <see cref="F:System.Security.Cryptography.X509Certificates.X509NameType.DnsName" /> 值。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509NameType.UrlName">
      <summary>与 X509 证书的使用者或颁发者的备用名称相关联的 URL 地址。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509RevocationFlag">
      <summary>指定应对链中的哪些 X509 证书进行吊销检查。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509RevocationFlag.EndCertificateOnly">
      <summary>仅对最终证书进行吊销检查。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509RevocationFlag.EntireChain">
      <summary>对整个证书链进行吊销检查。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509RevocationFlag.ExcludeRoot">
      <summary>对除根证书之外的整个链进行吊销检查。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509RevocationMode">
      <summary>指定用于 X509 证书吊销检查的模式。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509RevocationMode.NoCheck">
      <summary>不对此证书执行吊销检查。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509RevocationMode.Online">
      <summary>使用联机的证书吊销列表 (CRL) 进行吊销检查。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509RevocationMode.Offline">
      <summary>使用缓存的证书吊销列表 (CRL) 进行吊销检查。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509Store">
      <summary>表示 X.509 存储区，该存储区是保留和管理证书的物理存储区。无法继承此类。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.#ctor">
      <summary>使用当前用户存储区的个人证书初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Store" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.#ctor(System.IntPtr)">
      <summary>使用 HCERTSTORE 存储区的 Intptr 句柄初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Store" /> 类的新实例。</summary>
      <param name="storeHandle">HCERTSTORE 存储区的 <see cref="T:System.IntPtr" /> 句柄。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="storeHandle" /> 参数为 null。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="storeHandle" /> 参数指向无效上下文。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.#ctor(System.Security.Cryptography.X509Certificates.StoreLocation)">
      <summary>使用指定的 <see cref="T:System.Security.Cryptography.X509Certificates.StoreLocation" /> 值初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Store" /> 类的新实例。</summary>
      <param name="storeLocation">
        <see cref="T:System.Security.Cryptography.X509Certificates.StoreLocation" /> 值之一。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.#ctor(System.Security.Cryptography.X509Certificates.StoreName)">
      <summary>使用指定的 <see cref="T:System.Security.Cryptography.X509Certificates.StoreName" /> 值初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Store" /> 类的新实例。</summary>
      <param name="storeName">
        <see cref="T:System.Security.Cryptography.X509Certificates.StoreName" /> 值之一。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.#ctor(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation)">
      <summary>使用指定的 <see cref="T:System.Security.Cryptography.X509Certificates.StoreName" /> 和 <see cref="T:System.Security.Cryptography.X509Certificates.StoreLocation" /> 值初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Store" /> 类的新实例。</summary>
      <param name="storeName">
        <see cref="T:System.Security.Cryptography.X509Certificates.StoreName" /> 值之一。</param>
      <param name="storeLocation">
        <see cref="T:System.Security.Cryptography.X509Certificates.StoreLocation" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="storeLocation" /> 不是有效位置或者 <paramref name="storeName" /> 不是有效名称。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.#ctor(System.String)">
      <summary>使用指定的存储区名称初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Store" /> 类的新实例。</summary>
      <param name="storeName">一个表示存储区名称的字符串值。有关更多信息，请参见 <see cref="T:System.Security.Cryptography.X509Certificates.StoreName" />。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.#ctor(System.String,System.Security.Cryptography.X509Certificates.StoreLocation)">
      <summary>使用一个字符串初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Store" /> 类的新实例，该字符串表示 <see cref="T:System.Security.Cryptography.X509Certificates.StoreName" /> 枚举中的一个值和 <see cref="T:System.Security.Cryptography.X509Certificates.StoreLocation" /> 枚举中的一个值。</summary>
      <param name="storeName">一个字符串，表示 <see cref="T:System.Security.Cryptography.X509Certificates.StoreName" /> 枚举中的值。</param>
      <param name="storeLocation">
        <see cref="T:System.Security.Cryptography.X509Certificates.StoreLocation" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="storeLocation" /> 包含无效值。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.Add(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>将证书添加到 X.509 证书存储区。</summary>
      <param name="certificate">一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 为 null。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">无法将证书添加到存储区。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.AddRange(System.Security.Cryptography.X509Certificates.X509Certificate2Collection)">
      <summary>将证书集合添加到 X.509 证书存储区。</summary>
      <param name="certificates">一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificates" /> 为 null。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Store.Certificates">
      <summary>返回位于 X.509 证书存储区中的证书集合。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.Close">
      <summary>关闭 X.509 证书存储区。</summary>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Store.Location">
      <summary>获取 X.509 证书存储区的位置。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.StoreLocation" /> 值之一。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Store.Name">
      <summary>获取 X.509 证书存储区的名称。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.StoreName" /> 值之一。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.Open(System.Security.Cryptography.X509Certificates.OpenFlags)">
      <summary>打开 X.509 证书存储区或创建新存储区，具体取决于 <see cref="T:System.Security.Cryptography.X509Certificates.OpenFlags" /> 标志设置。</summary>
      <param name="flags">
        <see cref="T:System.Security.Cryptography.X509Certificates.OpenFlags" /> 值之一。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">该证书不可读。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <exception cref="T:System.ArgumentException">存储区包含无效值。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.Remove(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>从 X.509 证书存储区移除证书。</summary>
      <param name="certificate">要移除的证书。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 为 null。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.RemoveRange(System.Security.Cryptography.X509Certificates.X509Certificate2Collection)">
      <summary>从 X.509 证书存储区移除一系列证书。</summary>
      <param name="certificates">要移除的一系列证书。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificates" /> 为 null。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Store.StoreHandle">
      <summary>获取 HCERTSTORE 存储区的 <see cref="T:System.IntPtr" /> 句柄。 </summary>
      <returns>HCERTSTORE 存储区的 <see cref="T:System.IntPtr" /> 句柄。</returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension">
      <summary>定义一个标识证书的主题密钥标识符 (SKI) 的字符串。无法继承此类。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.#ctor(System.Byte[],System.Boolean)">
      <summary>使用一个字节数组和一个标识扩展是否重要的值初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension" /> 类的新实例。</summary>
      <param name="subjectKeyIdentifier">一个字节数组，表示要用来创建扩展的数据。</param>
      <param name="critical">
如果扩展是必不可少的，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.#ctor(System.Security.Cryptography.AsnEncodedData,System.Boolean)">
      <summary>使用编码数据和一个标识扩展是否重要的值初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension" /> 类的新实例。</summary>
      <param name="encodedSubjectKeyIdentifier">要用来创建扩展的 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象。</param>
      <param name="critical">
如果扩展是必不可少的，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.#ctor(System.Security.Cryptography.X509Certificates.PublicKey,System.Boolean)">
      <summary>使用一个公钥和一个标识扩展是否重要的值初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension" /> 类的新实例。</summary>
      <param name="key">要从其创建主题密钥标识符 (SKI) 的 <see cref="T:System.Security.Cryptography.X509Certificates.PublicKey" /> 对象。 </param>
      <param name="critical">
如果扩展是必不可少的，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.#ctor(System.Security.Cryptography.X509Certificates.PublicKey,System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm,System.Boolean)">
      <summary>使用一个公钥、一个哈希算法标识符和一个指示扩展是否重要的值初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension" /> 类的新实例。 </summary>
      <param name="key">要从其创建主题密钥标识符 (SKI) 的 <see cref="T:System.Security.Cryptography.X509Certificates.PublicKey" /> 对象。</param>
      <param name="algorithm">
        <see cref="T:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm" /> 值之一，标识要使用哪一个哈希算法。</param>
      <param name="critical">
如果扩展是必不可少的，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.#ctor(System.String,System.Boolean)">
      <summary>使用一个字符串和一个标识扩展是否重要的值初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension" /> 类的新实例。</summary>
      <param name="subjectKeyIdentifier">一个以十六进制格式编码的字符串，表示证书的主题密钥标识符 (SKI)。</param>
      <param name="critical">
如果扩展是必不可少的，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.CopyFrom(System.Security.Cryptography.AsnEncodedData)">
      <summary>通过从编码数据复制信息创建 <see cref="T:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension" /> 类的新实例。</summary>
      <param name="asnEncodedData">要用来创建扩展的 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象。</param>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.SubjectKeyIdentifier">
      <summary>获取一个表示证书的主题密钥标识符 (SKI) 的字符串。</summary>
      <returns>一个以十六进制格式编码的字符串，表示主题密钥标识符 (SKI)。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">扩展无法解码。 </exception>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm">
      <summary>定义用于 <see cref="T:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension" /> 类的哈希算法类型。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm.Sha1">
      <summary>SKI 由公钥值（不包括标记、长度和未使用位数）的 160 位 SHA-1 哈希组成。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm.ShortSha1">
      <summary>SKI 由具有值 0100 的四位类型字段组成，后跟公钥值（不包括标记、长度和未使用字符串位数）的 SHA-1 哈希的 60 位最低有效位</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm.CapiSha1">
      <summary>主题密钥标识符 (SKI) 由编码公钥（包括标记、长度和未使用位数）的 160 位 SHA-1 哈希组成。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509VerificationFlags">
      <summary>指定在哪些情况下应在 X509 链中进行证书验证。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.NoFlag">
      <summary>不包含任何与验证相关的标志。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.IgnoreNotTimeValid">
      <summary>确定证书验证时，忽略链中因已过期或尚未生效而无效的证书。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.IgnoreCtlNotTimeValid">
      <summary>确定证书验证时，忽略由于 CTL 已过期等原因导致证书信任列表 (CTL) 无效的情况。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.IgnoreNotTimeNested">
      <summary>证书验证时，忽略 CA（证书颁发机构）证书和所颁发证书的有效期不重叠的情况。例如，CA 证书的有效期限是从 1 月 1 日到 12 月 1 日，而已颁发的证书的有效期限是从 1 月 2 日到 12 月 2 日，这就表示有效期限是不配套的。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.IgnoreInvalidBasicConstraints">
      <summary>确定证书验证时，忽略基本约束无效的情况。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.AllowUnknownCertificateAuthority">
      <summary>忽略由于证书颁发机构 (CA) 未知而无法对链进行验证的情况。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.IgnoreWrongUsage">
      <summary>确定证书验证时，忽略证书不是为当前使用而颁发的情况。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.IgnoreInvalidName">
      <summary>确定证书验证时，忽略证书具有无效名称的情况。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.IgnoreInvalidPolicy">
      <summary>确定证书验证时，忽略证书具有无效策略的情况。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.IgnoreEndRevocationUnknown">
      <summary>确定证书验证时，忽略最终证书（用户证书）吊销未知的情况。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.IgnoreCtlSignerRevocationUnknown">
      <summary>确定证书验证时，忽略证书信任列表 (CTL) 签名者吊销未知的情况。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.IgnoreCertificateAuthorityRevocationUnknown">
      <summary>确定证书验证时，忽略证书颁发机构吊销未知的情况。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.IgnoreRootRevocationUnknown">
      <summary>确定证书验证时，忽略根吊销未知的情况。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.AllFlags">
      <summary>包含所有与验证相关的标志。</summary>
    </member>
    <member name="T:System.Security.Permissions.ResourcePermissionBase">
      <summary>允许控制代码访问安全权限。</summary>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.#ctor">
      <summary>初始化 <see cref="T:System.Security.Permissions.ResourcePermissionBase" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.#ctor(System.Security.Permissions.PermissionState)">
      <summary>在创建过程中，用指定级别的资源访问权限初始化 <see cref="T:System.Security.Permissions.ResourcePermissionBase" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 参数不是有效的 <see cref="T:System.Security.Permissions.PermissionState" /> 值。</exception>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.AddPermissionAccess(System.Security.Permissions.ResourcePermissionBaseEntry)">
      <summary>将权限项添加到权限。</summary>
      <param name="entry">要添加的 <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry" />。</param>
      <exception cref="T:System.ArgumentNullException">指定的 <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Security.Permissions.ResourcePermissionBaseEntry.PermissionAccessPath" /> 属性中的元素数目不等于 <see cref="P:System.Security.Permissions.ResourcePermissionBase.TagNames" /> 属性中的元素数目。- 或 -<see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry" /> 已经包含在权限中。</exception>
    </member>
    <member name="F:System.Security.Permissions.ResourcePermissionBase.Any">
      <summary>指定要用来表示任何通配符的字符。</summary>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.Clear">
      <summary>清除已添加的权限项的权限。</summary>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.Copy">
      <summary>创建并返回与当前权限对象相同的副本。</summary>
      <returns>当前权限对象的副本。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.FromXml(System.Security.SecurityElement)">
      <summary>用 XML 编码重新构造具有指定状态的安全对象。</summary>
      <param name="securityElement">用于重新构造安全对象的 XML 编码。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="securityElement" /> 参数不是有效的权限元素。- 或 -不支持 <paramref name="securityElement" /> 参数的版本号。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityElement" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.GetPermissionEntries">
      <summary>返回已添加到此权限的 <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry" /> 对象的数组。</summary>
      <returns>已添加到此权限的 <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry" /> 对象的数组。</returns>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.Intersect(System.Security.IPermission)">
      <summary>创建并返回作为当前权限对象和目标权限对象的交集的权限对象。</summary>
      <returns>表示当前对象和指定目标交集的新权限对象。如果交集为空，则此对象为 null。</returns>
      <param name="target">与当前权限对象类型相同的权限对象。</param>
      <exception cref="T:System.ArgumentException">目标权限对象与当前权限对象不属于同一类型。</exception>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前权限对象是否是指定权限的子集。</summary>
      <returns>
            如果当前权限对象是指定权限对象的子集，则为 true；否则为 false。</returns>
      <param name="target">将用于测试子集关系的权限对象。</param>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.IsUnrestricted">
      <summary>获取一个值，该值指示该权限是否不受限制。</summary>
      <returns>
            如果权限不受限制，则为 true，否则为 false。</returns>
    </member>
    <member name="F:System.Security.Permissions.ResourcePermissionBase.Local">
      <summary>指定要用来表示局部引用的字符。</summary>
    </member>
    <member name="P:System.Security.Permissions.ResourcePermissionBase.PermissionAccessType">
      <summary>获取或设置描述给予资源的访问权限类型的枚举值。</summary>
      <returns>枚举值，它从 <see cref="T:System.Type" /> 派生并描述给予资源的访问权限的类型。</returns>
      <exception cref="T:System.ArgumentNullException">属性值为 null。</exception>
      <exception cref="T:System.ArgumentException">属性值不是枚举值。</exception>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.RemovePermissionAccess(System.Security.Permissions.ResourcePermissionBaseEntry)">
      <summary>从该权限中移除权限项。</summary>
      <param name="entry">要移除的 <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry" />。</param>
      <exception cref="T:System.ArgumentNullException">指定的 <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Security.Permissions.ResourcePermissionBaseEntry.PermissionAccessPath" /> 属性中的元素数目不等于 <see cref="P:System.Security.Permissions.ResourcePermissionBase.TagNames" /> 属性中的元素数目。- 或 -<see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry" /> 不在此权限中。</exception>
    </member>
    <member name="P:System.Security.Permissions.ResourcePermissionBase.TagNames">
      <summary>获取或设置标识处于保护中的资源的字符串数组。</summary>
      <returns>标识处于保护中的资源的字符串数组。</returns>
      <exception cref="T:System.ArgumentNullException">属性值为 null。</exception>
      <exception cref="T:System.ArgumentException">数组的长度为 0。</exception>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.ToXml">
      <summary>创建并返回安全对象及其当前状态的 XML 编码。</summary>
      <returns>安全对象的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.Union(System.Security.IPermission)">
      <summary>创建将当前权限对象与目标权限对象组合的权限对象。</summary>
      <returns>新权限对象，它表示当前权限对象和指定权限对象的并集。</returns>
      <param name="target">要与当前的权限对象合并的权限对象。它必须与当前权限对象的类型相同。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 权限对象与当前权限对象不属于同一类型。</exception>
    </member>
    <member name="T:System.Security.Permissions.ResourcePermissionBaseEntry">
      <summary>定义代码访问安全权限集的最小单位。</summary>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBaseEntry.#ctor">
      <summary>初始化 <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBaseEntry.#ctor(System.Int32,System.String[])">
      <summary>用指定的权限访问和权限访问路径初始化 <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry" /> 类的新实例。</summary>
      <param name="permissionAccess">权限访问级别枚举值的整数表示形式。<see cref="P:System.Security.Permissions.ResourcePermissionBaseEntry.PermissionAccess" /> 属性被设置为该值。 </param>
      <param name="permissionAccessPath">标识处于保护中的资源的字符串数组。<see cref="P:System.Security.Permissions.ResourcePermissionBaseEntry.PermissionAccessPath" /> 属性被设置为该值。 </param>
      <exception cref="T:System.ArgumentNullException">指定的 <paramref name="permissionAccessPath" /> 为 null。 </exception>
    </member>
    <member name="P:System.Security.Permissions.ResourcePermissionBaseEntry.PermissionAccess">
      <summary>获取访问级别枚举值的整数表示形式。</summary>
      <returns>访问级别枚举值。</returns>
    </member>
    <member name="P:System.Security.Permissions.ResourcePermissionBaseEntry.PermissionAccessPath">
      <summary>获取标识处于保护中的资源的字符串数组。</summary>
      <returns>标识处于保护中的资源的字符串数组。</returns>
    </member>
    <member name="T:System.Security.Permissions.StorePermission">
      <summary>控制对包含 X.509 证书的存储区的访问权限。无法继承此类。</summary>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>用完全受限制或无限制的权限状态初始化 <see cref="T:System.Security.Permissions.StorePermission" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 不是有效的 <see cref="T:System.Security.Permissions.PermissionState" /> 值。</exception>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.#ctor(System.Security.Permissions.StorePermissionFlags)">
      <summary>用指定的访问权限初始化 <see cref="T:System.Security.Permissions.StorePermission" /> 类的新实例。</summary>
      <param name="flag">
        <see cref="T:System.Security.Permissions.StorePermissionFlags" /> 值的按位组合。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="flag" /> 不是 <see cref="T:System.Security.Permissions.StorePermissionFlags" /> 值的有效组合。</exception>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.Copy">
      <summary>创建并返回当前权限的相同副本。</summary>
      <returns>当前权限的副本。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Security.Permissions.StorePermission.Flags">
      <summary>获取或设置当前权限允许的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Store" /> 访问类型。</summary>
      <returns>
        <see cref="T:System.Security.Permissions.StorePermissionFlags" /> 值的按位组合。</returns>
      <exception cref="T:System.ArgumentException">试图将此属性设置为无效值。要查阅有效值，请参见 <see cref="T:System.Security.Permissions.StorePermissionFlags" />。</exception>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.FromXml(System.Security.SecurityElement)">
      <summary>从 XML 编码重新构造具有指定状态的权限。</summary>
      <param name="securityElement">
        <see cref="T:System.Security.SecurityElement" />，包含用于重新构造权限的 XML 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityElement" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="securityElement" /> 不是一个有效的权限元素。- 或 - <paramref name="securityElement" /> 中的版本号无效。</exception>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.Intersect(System.Security.IPermission)">
      <summary>创建并返回一个权限，该权限是当前权限和指定权限的交集。</summary>
      <returns>一个新权限，它表示当前权限与指定权限的交集。如果交集为空，则此新权限为 null。</returns>
      <param name="target">要与当前权限相交的权限。它必须与当前权限属于同一类型。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 null，而且与当前权限不是同一类型。</exception>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前权限是否为指定权限的子集。</summary>
      <returns>
            如果当前权限是指定权限的子集，则为 true；否则为 false。</returns>
      <param name="target">要测试子集关系的权限。此权限必须与当前权限属于同一类型。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 null，而且与当前权限不是同一类型。</exception>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.IsUnrestricted">
      <summary>返回一个值，该值指示当前权限是否为无限制的。</summary>
      <returns>
            如果当前权限是无限制的，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.ToXml">
      <summary>创建权限及其当前状态的 XML 编码。</summary>
      <returns>
        <see cref="T:System.Security.SecurityElement" />，包含权限的 XML 编码（包括任何状态信息）。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.Union(System.Security.IPermission)">
      <summary>创建一个权限，该权限是当前权限与指定权限的并集。</summary>
      <returns>一个新权限，它表示当前权限与指定权限的并集。</returns>
      <param name="target">将与当前权限合并的权限。它必须与当前权限属于同一类型。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 null，而且与当前权限不是同一类型。</exception>
    </member>
    <member name="T:System.Security.Permissions.StorePermissionAttribute">
      <summary>允许对使用声明安全性应用到代码中的 <see cref="T:System.Security.Permissions.StorePermission" /> 进行安全操作。无法继承此类。</summary>
    </member>
    <member name="M:System.Security.Permissions.StorePermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用指定的安全操作初始化 <see cref="T:System.Security.Permissions.StorePermissionAttribute" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。 </param>
    </member>
    <member name="P:System.Security.Permissions.StorePermissionAttribute.AddToStore">
      <summary>获取或设置一个值，该值指示是否允许代码向存储区添加。</summary>
      <returns>
如果允许向存储区添加，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Security.Permissions.StorePermissionAttribute.CreatePermission">
      <summary>创建并返回一个新的 <see cref="T:System.Security.Permissions.StorePermission" />。</summary>
      <returns>与此属性对应的 <see cref="T:System.Security.Permissions.StorePermission" />。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Security.Permissions.StorePermissionAttribute.CreateStore">
      <summary>获取或设置一个值，该值指示是否允许代码创建存储区。</summary>
      <returns>
如果允许创建存储区，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Security.Permissions.StorePermissionAttribute.DeleteStore">
      <summary>获取或设置一个值，该值指示是否允许代码删除存储区。</summary>
      <returns>
如果允许删除存储区，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Security.Permissions.StorePermissionAttribute.EnumerateCertificates">
      <summary>获取或设置一个值，该值指示是否允许代码枚举存储区中的证书。</summary>
      <returns>
如果允许枚举证书，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Security.Permissions.StorePermissionAttribute.EnumerateStores">
      <summary>获取或设置一个值，该值指示是否允许代码枚举存储区。</summary>
      <returns>
如果允许枚举存储区，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Security.Permissions.StorePermissionAttribute.Flags">
      <summary>获取或设置存储区权限。</summary>
      <returns>
        <see cref="T:System.Security.Permissions.StorePermissionFlags" /> 值的按位组合。默认为 <see cref="F:System.Security.Permissions.StorePermissionFlags.NoFlags" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.StorePermissionAttribute.OpenStore">
      <summary>获取或设置一个值，该值指示是否允许代码打开存储区。</summary>
      <returns>
如果允许打开存储区，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Security.Permissions.StorePermissionAttribute.RemoveFromStore">
      <summary>获取或设置一个值，该值指示是否允许代码从存储区中移除证书。</summary>
      <returns>
如果允许从存储区中移除证书，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Security.Permissions.StorePermissionFlags">
      <summary>指定对 X.509 证书存储区的允许访问权限。</summary>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.NoFlags">
      <summary>未授予执行任何证书或存储区操作的权限。</summary>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.CreateStore">
      <summary>新建存储区的能力。</summary>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.DeleteStore">
      <summary>删除存储区的能力。</summary>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.EnumerateStores">
      <summary>枚举计算机上的存储区的能力。</summary>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.OpenStore">
      <summary>打开存储区的能力。</summary>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.AddToStore">
      <summary>将证书添加到存储区的能力。</summary>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.RemoveFromStore">
      <summary>从存储区中移除证书的能力。</summary>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.EnumerateCertificates">
      <summary>枚举存储区中的证书的能力。</summary>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.AllFlags">
      <summary>执行所有证书和存储区操作的能力。</summary>
    </member>
    <member name="T:System.Text.RegularExpressions.Capture">
      <summary>
                    表示单个子表达式捕获中的结果。<see cref="T:System.Text.RegularExpressions.Capture" /> 表示单个成功捕获中的一个子字符串。
                </summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Index">
      <summary>
                    原始字符串中发现捕获的子字符串的第一个字符的位置。
                </summary>
      <returns>
                    原始字符串中发现捕获的子字符串的从零开始的起始位置。
                </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Length">
      <summary>
捕获的子字符串的长度。
                </summary>
      <returns>
捕获的子字符串的长度。
                </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Capture.ToString">
      <summary>
从输入字符串中获取捕获的子字符串。
                </summary>
      <returns>
通过匹配捕获的实际子字符串。
                </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Value">
      <summary>
从输入字符串中获取捕获的子字符串。
                </summary>
      <returns>
通过匹配捕获的实际子字符串。
                </returns>
    </member>
    <member name="T:System.Text.RegularExpressions.CaptureCollection">
      <summary>表示一个捕获子字符串序列。CaptureCollection 返回由单个捕获组执行的捕获的集合。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.CopyTo(System.Array,System.Int32)">
      <summary>将集合的所有元素复制到给定数组中（从给定索引处开始）。</summary>
      <param name="array">要将集合复制到其中的目标数组。 </param>
      <param name="arrayIndex">目标数组中开始复制的位置。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array " /> 为 null。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.Count">
      <summary>获取由该组捕获的子字符串数。</summary>
      <returns>CaptureCollection 中的项数。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.GetEnumerator">
      <summary>提供一个与 Item[i] 顺序相同的枚举数。</summary>
      <returns>包含 CaptureCollection 中所有 Capture 对象的 <see cref="T:System.Collections.IEnumerator" /> 对象。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.IsReadOnly">
      <summary>获取一个值，该值指示该集合是否为只读集合。</summary>
      <returns>此属性的值始终是 true。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.IsSynchronized">
      <summary>获取一个值，该值指示对集合的访问是否为同步的（线程安全）。</summary>
      <returns>此属性的值始终是 false。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.Item(System.Int32)">
      <summary>获取该集合的单个成员。</summary>
      <returns>位于集合中 <paramref name="i" /> 位置的捕获子字符串。</returns>
      <param name="i">捕获集合中的索引。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 小于零或大于 <see cref="P:System.Text.RegularExpressions.CaptureCollection.Count" />。 </exception>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.SyncRoot">
      <summary>获取可用于同步对集合的访问的对象。</summary>
      <returns>可用于同步集合访问的对象。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Group">
      <summary>Group 表示单个捕获组的结果。由于存在数量词，一个捕获组可以在单个匹配中捕获零个、一个或更多的字符串，因此 Group 提供 <see cref="T:System.Text.RegularExpressions.Capture" /> 对象的集合。</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Captures">
      <summary>按从里到外、从左到右的顺序获取由捕获组匹配的所有捕获的集合（如果正则表达式用 <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" /> 选项修改了，则顺序为按从里到外、从右到左）。该集合可以有零个或更多的项。</summary>
      <returns>由该组匹配的子字符串的集合。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Success">
      <summary>获取一个值，该值指示匹配是否成功。</summary>
      <returns>
            如果匹配成功，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Group.Synchronized(System.Text.RegularExpressions.Group)">
      <summary>返回一个与提供的对象等效的 Group 对象，在多个线程间共享该对象是安全的。</summary>
      <returns>一个正则表达式 Group 对象。</returns>
      <param name="inner">输入 <see cref="T:System.Text.RegularExpressions.Group" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inner" /> 为 null。</exception>
    </member>
    <member name="T:System.Text.RegularExpressions.GroupCollection">
      <summary>表示捕获组的集合。<see cref="T:System.Text.RegularExpressions.GroupCollection" /> 返回单个匹配中的捕获组的集合。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Array,System.Int32)">
      <summary>将集合的所有元素复制到给定数组中（从给定索引处开始）。</summary>
      <param name="array">要将集合复制到其中的目标数组。</param>
      <param name="arrayIndex">目标数组中开始复制的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Count">
      <summary>返回集合中的组数。</summary>
      <returns>集合中的组数。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.GetEnumerator">
      <summary>返回可循环访问集合的枚举数。</summary>
      <returns>一个 IEnumerator 对象，它包含 <see cref="T:System.Text.RegularExpressions.GroupCollection" /> 中的所有 <see cref="T:System.Text.RegularExpressions.Group" /> 对象。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.IsReadOnly">
      <summary>获取一个值，该值指示集合是否为只读。</summary>
      <returns>
            如果 GroupCollection 为只读，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.IsSynchronized">
      <summary>获取一个值，该值指示对 GroupCollection 的访问是否已同步（线程安全）。</summary>
      <returns>
            如果访问已同步，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.Int32)">
      <summary>允许通过整数索引访问集合成员。</summary>
      <returns>由 <paramref name="groupnum" /> 指定的集合的成员。</returns>
      <param name="groupnum">要检索的集合成员的索引。</param>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.String)">
      <summary>允许通过字符串索引访问集合成员。</summary>
      <returns>由 <paramref name="groupname" /> 指定的集合的成员。</returns>
      <param name="groupname">要检索的集合成员的关键字。</param>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.SyncRoot">
      <summary>获取可用于同步 GroupCollection 访问的对象。</summary>
      <returns>要同步的 <see cref="T:System.Text.RegularExpressions.Match" /> 对象的副本。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Match">
      <summary>表示单个正则表达式匹配的结果。</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Match.Empty">
      <summary>获取空组。所有失败的匹配都返回此空匹配。</summary>
      <returns>一个空 <see cref="T:System.Text.RegularExpressions.Match" />。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Match.Groups">
      <summary>获取由正则表达式匹配的组的集合。</summary>
      <returns>由模式匹配的字符组。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.NextMatch">
      <summary>从上一个匹配结束的位置（即在上一个匹配字符之后的字符）开始返回一个包含下一个匹配结果的新 Match。</summary>
      <returns>下一个正则表达式 Match 对象。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.Result(System.String)">
      <summary>返回对指定替换模式的扩展。</summary>
      <returns>
        <paramref name="replacement" /> 参数的扩展版本。</returns>
      <param name="replacement">要使用的替换模式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="replacement" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">不允许对此模式进行扩展。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)">
      <summary>返回一个与提供的实例等效的 Match 实例，该实例适合在多个线程间共享。</summary>
      <returns>一个与提供的实例等效的 Match 实例，该实例适合在多个线程间共享。</returns>
      <param name="inner">一个与预期的实例等效的 Match 实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inner" /> 为 null。</exception>
    </member>
    <member name="T:System.Text.RegularExpressions.MatchCollection">
      <summary>表示通过以迭代方式将正则表达式模式应用于输入字符串所找到的成功匹配的集合。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
      <summary>从给定索引处开始将集合的所有元素复制到给定数组。</summary>
      <param name="array">要将集合复制到其中的目标数组。</param>
      <param name="arrayIndex">数组中开始复制的位置。</param>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.Count">
      <summary>获取匹配项的数目。</summary>
      <returns>匹配项的数目。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
      <summary>以与 <see cref="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)" /> 相同的顺序提供一个枚举数。</summary>
      <returns>包含 MatchCollection 中的所有 Match 对象的 <see cref="T:System.Collections.IEnumerator" /> 对象。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.IsReadOnly">
      <summary>获取一个值，该值指示该集合是否为只读集合。</summary>
      <returns>此属性的值总是 true。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.IsSynchronized">
      <summary>获取一个值，该值指示对集合的访问是否为同步的（线程安全）。</summary>
      <returns>此属性的值始终是 false。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
      <summary>获取该集合的单个成员。</summary>
      <returns>位于集合中 <paramref name="i" /> 位置的捕获子字符串。</returns>
      <param name="i">Match 集合中的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 小于 0，或者大于或等于 <see cref="P:System.Text.RegularExpressions.MatchCollection.Count" />。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.SyncRoot">
      <summary>获取可用于同步对集合的访问的对象。</summary>
      <returns>可用于同步集合访问的对象。此属性始终返回对象本身。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.MatchEvaluator">
      <summary>表示在 <see cref="Overload:System.Text.RegularExpressions.Regex.Replace" /> 方法操作过程中每当找到正则表达式匹配时都调用的方法。</summary>
      <returns>由 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委托表示的方法返回的字符串。</returns>
      <param name="match">
        <see cref="T:System.Text.RegularExpressions.Match" /> 对象，表示 <see cref="Overload:System.Text.RegularExpressions.Regex.Replace" /> 方法操作过程中的单个正则表达式匹配。 </param>
    </member>
    <member name="T:System.Text.RegularExpressions.Regex">
      <summary>
                    表示不可变的正则表达式。
                </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor">
      <summary>
                    初始化 <see cref="T:System.Text.RegularExpressions.Regex" /> 类的新实例。
                </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                    使用序列化数据初始化 <see cref="T:System.Text.RegularExpressions.Regex" /> 类的新实例。
                </summary>
      <param name="info">
                    包含序列化模式和 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 信息的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。
                </param>
      <param name="context">
                    此序列化的目标。（未使用此参数；指定 null。）
                </param>
      <exception cref="T:System.ArgumentException">
                    正则表达式语法分析错误。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 包含的模式为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="info" /> 包含无效的 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 标志。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String)">
      <summary>
                    为指定的正则表达式初始化并编译 <see cref="T:System.Text.RegularExpressions.Regex" /> 类的一个新实例。
                </summary>
      <param name="pattern">
                    要匹配的正则表达式模式。
                </param>
      <exception cref="T:System.ArgumentException">
                    正则表达式语法分析错误。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>
                    用修改模式的选项为指定的正则表达式初始化并编译 <see cref="T:System.Text.RegularExpressions.Regex" /> 类的一个新实例。
                </summary>
      <param name="pattern">
                    要匹配的正则表达式模式。
                </param>
      <param name="options">
        <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 枚举值的按位“或”组合。
                </param>
      <exception cref="T:System.ArgumentException">
                    正则表达式语法分析错误。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 包含无效标志。
                </exception>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.CacheSize">
      <summary>
                    获取或设置已编译的正则表达式的当前静态缓存中的最大项数。
                </summary>
      <returns>
                    静态缓存中的最大项数。
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    Set 操作中的值小于零。
                </exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capnames">
      <summary>
                    由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。
                </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.caps">
      <summary>
                    由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。
                </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capsize">
      <summary>
                    由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。
                </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capslist">
      <summary>
                    由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。
                </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)">
      <summary>
                    将一个或多个指定的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象编译为一个命名文件。
                </summary>
      <param name="regexinfos">
                    描述要编译的正则表达式的 <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> 对象数组。
                </param>
      <param name="assemblyname">
                    程序集的文件名。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyname" /> 参数的 <see cref="P:System.Reflection.AssemblyName.Name" /> 属性的值是一个空字符串或 null。
                
                    - 或 -
                <paramref name="regexinfos" /> 中的一个或多个对象的正则表达式模式包含无效语法。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyname" /> 或 <paramref name="regexinfos" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[])">
      <summary>
                    将一个或多个指定的 Regex 对象编译为一个具有指定属性的命名文件。
                </summary>
      <param name="regexinfos">
                    描述要编译的正则表达式的 <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> 对象数组。
                </param>
      <param name="assemblyname">
                    程序集的文件名。
                </param>
      <param name="attributes">
                    描述程序集属性的 <see cref="T:System.Reflection.Emit.CustomAttributeBuilder" /> 对象数组。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyname" /> 参数的 <see cref="P:System.Reflection.AssemblyName.Name" /> 属性的值是一个空字符串或 null。
                
                    - 或 -
                <paramref name="regexinfos" /> 中的一个或多个对象的正则表达式模式包含无效语法。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyname" /> 或 <paramref name="regexinfos" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[],System.String)">
      <summary>
                    将一个或多个指定的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象和一个指定的资源文件编译为一个具有指定属性的命名程序集。
                </summary>
      <param name="regexinfos">
                    描述要编译的正则表达式的 <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> 对象数组。
                </param>
      <param name="assemblyname">
                    程序集的文件名。
                </param>
      <param name="attributes">
                    描述程序集属性的 <see cref="T:System.Reflection.Emit.CustomAttributeBuilder" /> 对象数组。
                </param>
      <param name="resourceFile">
                    要包含在程序集中的 Win32 资源文件的名称。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyname" /> 参数的 <see cref="P:System.Reflection.AssemblyName.Name" /> 属性的值是一个空字符串或 null。
                
                    - 或 -
                <paramref name="regexinfos" /> 中的一个或多个对象的正则表达式模式包含无效语法。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyname" /> 或 <paramref name="regexinfos" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Escape(System.String)">
      <summary>
                    通过替换为转义码来转义最小的元字符集（\、*、+、?、|、{、[、(、)、^、$、.、# 和空白）。
                </summary>
      <returns>
                    包含任何已转换为转义形式的元字符的字符串。
                </returns>
      <param name="str">
                    包含要转换的文本的输入字符串。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 为 null。
                </exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.factory">
      <summary>
                    由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。
                </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GetGroupNames">
      <summary>
                    返回正则表达式的捕获组名数组。
                </summary>
      <returns>
                    组名的字符串数组。
                </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GetGroupNumbers">
      <summary>
                    返回与数组中的组名相对应的捕获组号的数组。
                </summary>
      <returns>
                    组号的整数数组。
                </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)">
      <summary>
                    获取与指定组号相对应的组名。
                </summary>
      <returns>
                    包含与指定组号关联的组名的字符串。
                </returns>
      <param name="i">
                    要转换为相应组名的组号。
                </param>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)">
      <summary>
                    返回与指定组名相对应的组号。
                </summary>
      <returns>
                    与指定组名相对应的组号。
                </returns>
      <param name="name">
                    要转换为相应组号的组名。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.InitializeReferences">
      <summary>
                    由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。
                </summary>
      <exception cref="T:System.NotSupportedException">
                    引用已初始化。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String)">
      <summary>
                    指示 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数中指定的正则表达式在输入字符串中是否找到匹配项。
                </summary>
      <returns>
                    如果正则表达式找到匹配项，则为 true；否则，为 false。
                </returns>
      <param name="input">
                    要搜索匹配项的字符串。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)">
      <summary>
                    指示 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数中指定的正则表达式从输入字符串的指定起始位置开始是否找到匹配项。
                </summary>
      <returns>
                    如果正则表达式找到匹配项，则为 true；否则，为 false。
                </returns>
      <param name="input">
                    要搜索匹配项的字符串。
                </param>
      <param name="startat">
                    开始搜索的字符位置。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> 不能小于零或大于 <paramref name="input" /> 的长度。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)">
      <summary>
                    指示正则表达式使用 <paramref name="pattern" /> 参数中指定的正则表达式是否在输入字符串中找到匹配项。
                </summary>
      <returns>
                    如果正则表达式找到匹配项，则为 true；否则，为 false。
                </returns>
      <param name="input">
                    要搜索匹配项的字符串。
                </param>
      <param name="pattern">
                    要匹配的正则表达式模式。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。
                
                    - 或 -
                <paramref name="pattern" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>
                    指示正则表达式使用 <paramref name="pattern" /> 参数中指定的正则表达式和 <paramref name="options" /> 参数中提供的匹配选项是否在输入字符串中找到匹配项。
                </summary>
      <returns>
                    如果正则表达式找到匹配项，则为 true；否则，为 false。
                </returns>
      <param name="input">
                    要搜索匹配项的字符串。
                </param>
      <param name="pattern">
                    要匹配的正则表达式模式。
                </param>
      <param name="options">
        <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 枚举值的按位“或”组合。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。
                
                    - 或 -
                <paramref name="pattern" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是有效的 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String)">
      <summary>
                    在指定的输入字符串中搜索 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数中指定的正则表达式匹配项。
                </summary>
      <returns>
                    一个正则表达式 <see cref="T:System.Text.RegularExpressions.Match" /> 对象。
                </returns>
      <param name="input">
                    要搜索匹配项的字符串。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)">
      <summary>
                    从指定的输入字符串起始位置开始在输入字符串中搜索正则表达式匹配项。
                </summary>
      <returns>
                    一个正则表达式 <see cref="T:System.Text.RegularExpressions.Match" /> 对象。
                </returns>
      <param name="input">
                    要搜索匹配项的字符串。
                </param>
      <param name="startat">
                    开始搜索的字符位置。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)">
      <summary>
                    从指定的输入字符串起始位置开始在输入字符串中搜索具有指定输入字符串长度的正则表达式匹配项。
                </summary>
      <returns>
                    一个正则表达式 <see cref="T:System.Text.RegularExpressions.Match" /> 对象。
                </returns>
      <param name="input">
                    对其匹配测试的字符串。
                </param>
      <param name="beginning">
                    在输入字符串中开始搜索的字符位置。
                </param>
      <param name="length">
                    子字符串中包含在搜索中的字符数。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)">
      <summary>
                    在指定的输入字符串中搜索 <paramref name="pattern" /> 参数中提供的正则表达式的匹配项。
                </summary>
      <returns>
                    一个正则表达式 <see cref="T:System.Text.RegularExpressions.Match" /> 对象。
                </returns>
      <param name="input">
                    要搜索匹配项的字符串。
                </param>
      <param name="pattern">
                    要匹配的正则表达式模式。
                </param>
      <exception cref="T:System.ArgumentException">
                    正则表达式语法分析错误。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>
                    在输入字符串中搜索 <paramref name="pattern" /> 参数中提供的正则表达式的匹配项（匹配选项在 <paramref name="options" /> 参数中提供）。
                </summary>
      <returns>
                    一个正则表达式 <see cref="T:System.Text.RegularExpressions.Match" /> 对象。
                </returns>
      <param name="input">
                    对其匹配测试的字符串。
                </param>
      <param name="pattern">
                    要匹配的正则表达式模式。
                </param>
      <param name="options">RegexOption 枚举值的按位“或”组合。
                </param>
      <exception cref="T:System.ArgumentException">
                    正则表达式语法分析错误。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String)">
      <summary>
                    在指定的输入字符串中搜索正则表达式的所有匹配项。
                </summary>
      <returns>
                    搜索找到的 <see cref="T:System.Text.RegularExpressions.Match" /> 对象的 <see cref="T:System.Text.RegularExpressions.MatchCollection" />。
                </returns>
      <param name="input">
                    要搜索匹配项的字符串。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)">
      <summary>
                    从字符串中的指定起始位置开始，在指定的输入字符串中搜索正则表达式的所有匹配项。
                </summary>
      <returns>
                    搜索找到的 <see cref="T:System.Text.RegularExpressions.Match" /> 对象的 <see cref="T:System.Text.RegularExpressions.MatchCollection" />。
                </returns>
      <param name="input">
                    要搜索匹配项的字符串。
                </param>
      <param name="startat">
                    在输入字符串中开始搜索的字符位置。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)">
      <summary>
                    在指定的输入字符串中搜索 <paramref name="pattern" /> 参数中指定的正则表达式的所有匹配项。
                </summary>
      <returns>
                    搜索找到的 <see cref="T:System.Text.RegularExpressions.Match" /> 对象的 <see cref="T:System.Text.RegularExpressions.MatchCollection" />。
                </returns>
      <param name="input">
                    要搜索匹配项的字符串。
                </param>
      <param name="pattern">
                    要匹配的正则表达式模式。
                </param>
      <exception cref="T:System.ArgumentException">
                    正则表达式语法分析错误。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>
                    在指定的输入字符串中搜索 <paramref name="pattern" /> 参数中提供的正则表达式的所有匹配项（匹配选项在 <paramref name="options" /> 参数中提供）。
                </summary>
      <returns>
                    搜索找到的 <see cref="T:System.Text.RegularExpressions.Match" /> 对象的 <see cref="T:System.Text.RegularExpressions.MatchCollection" />。
                </returns>
      <param name="input">
                    要搜索匹配项的字符串。
                </param>
      <param name="pattern">
                    要匹配的正则表达式模式。
                </param>
      <param name="options">RegexOption 枚举值的按位“或”组合。
                </param>
      <exception cref="T:System.ArgumentException">
                    正则表达式语法分析错误。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.Options">
      <summary>
                    返回传入 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数的选项。
                </summary>
      <returns>
                    传入 Regex 构造函数的 <paramref name="options" /> 参数。
                </returns>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.pattern">
      <summary>
                    由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。
                </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)">
      <summary>
                    在指定的输入字符串内，使用指定的替换字符串替换与某个正则表达式模式匹配的所有字符串。
                </summary>
      <returns>
                    一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。
                </returns>
      <param name="input">
                    要搜索匹配项的字符串。
                </param>
      <param name="replacement">
                    替换字符串。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。
                
                    - 或 -
                <paramref name="replacement" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32)">
      <summary>
                    在指定输入字符串内，使用指定替换字符串替换与某个正则表达式模式匹配的字符串（其数目为指定的最大数目）。
                </summary>
      <returns>
                    一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。
                </returns>
      <param name="input">
                    要搜索匹配项的字符串。
                </param>
      <param name="replacement">
                    替换字符串。
                </param>
      <param name="count">
                    可进行替换的最大次数。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。
                
                    - 或 -
                <paramref name="replacement" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32,System.Int32)">
      <summary>
                    在指定输入子字符串内，使用指定替换字符串替换与某个正则表达式模式匹配的字符串（其数目为指定的最大数目）。
                </summary>
      <returns>
                    一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。
                </returns>
      <param name="input">
                    要搜索匹配项的字符串。
                </param>
      <param name="replacement">
                    替换字符串。
                </param>
      <param name="count">
                    可进行替换的最大次数。
                </param>
      <param name="startat">
                    输入字符串中开始执行搜索的字符位置。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。
                
                    - 或 -
                <paramref name="replacement" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)">
      <summary>
                    在指定的输入字符串内，使用指定的替换字符串替换与指定正则表达式匹配的所有字符串。
                </summary>
      <returns>
                    一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。
                </returns>
      <param name="input">
                    要搜索匹配项的字符串。
                </param>
      <param name="pattern">
                    要匹配的正则表达式模式。
                </param>
      <param name="replacement">
                    替换字符串。
                </param>
      <exception cref="T:System.ArgumentException">
                    正则表达式语法分析错误。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。
                
                    - 或 -
                <paramref name="pattern" /> 为 null。
                
                    - 或 -
                <paramref name="replacement" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>
                    在指定的输入字符串内，使用指定的替换字符串替换与指定正则表达式匹配的所有字符串。指定的选项将修改匹配操作。
                </summary>
      <returns>
                    一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。
                </returns>
      <param name="input">
                    要搜索匹配项的字符串。
                </param>
      <param name="pattern">
                    要匹配的正则表达式模式。
                </param>
      <param name="replacement">
                    替换字符串。
                </param>
      <param name="options">
        <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 枚举值的按位“或”组合。
                </param>
      <exception cref="T:System.ArgumentException">
                    正则表达式语法分析错误。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。
                
                    - 或 -
                <paramref name="pattern" /> 为 null。
                
                    - 或 -
                <paramref name="replacement" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)">
      <summary>
                    在指定的输入字符串内，使用 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委托返回的字符串替换与指定正则表达式匹配的所有字符串。
                </summary>
      <returns>
                    一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。
                </returns>
      <param name="input">
                    要搜索匹配项的字符串。
                </param>
      <param name="pattern">
                    要匹配的正则表达式模式。
                </param>
      <param name="evaluator">
                    一个自定义方法，它检查每个匹配项，并返回原始匹配字符串或替换字符串。
                </param>
      <exception cref="T:System.ArgumentException">
                    正则表达式语法分析错误。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。
                
                    - 或 -
                <paramref name="pattern" /> 为 null。
                
                    - 或 -
                <paramref name="evaluator" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)">
      <summary>
                    在指定的输入字符串内，使用 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委托返回的字符串替换与指定正则表达式匹配的所有字符串。指定的选项将修改匹配操作。
                </summary>
      <returns>
                    一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。
                </returns>
      <param name="input">
                    要搜索匹配项的字符串。
                </param>
      <param name="pattern">
                    要匹配的正则表达式模式。
                </param>
      <param name="evaluator">
                    一个自定义方法，它检查每个匹配项，并返回原始匹配字符串或替换字符串。
                </param>
      <param name="options">
        <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 枚举值的按位“或”组合。
                </param>
      <exception cref="T:System.ArgumentException">
                    正则表达式语法分析错误。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。
                
                    - 或 -
                <paramref name="pattern" /> 为 null。
                
                    - 或 -
                <paramref name="evaluator" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)">
      <summary>
                    在指定的输入字符串内，使用 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委托返回的字符串替换与指定正则表达式匹配的所有字符串。
                </summary>
      <returns>
                    一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。
                </returns>
      <param name="input">
                    要搜索匹配项的字符串。
                </param>
      <param name="evaluator">
                    一个自定义方法，它检查每个匹配项，并返回原始匹配字符串或替换字符串。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。
                
                    - 或 -
                <paramref name="evaluator" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)">
      <summary>
                    在指定的输入字符串内，使用 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委托返回的字符串替换与某个正则表达式模式匹配的字符串（其数目为指定的最大数目）。
                </summary>
      <returns>
                    一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。
                </returns>
      <param name="input">
                    要搜索匹配项的字符串。
                </param>
      <param name="evaluator">
                    一个自定义方法，它检查每个匹配项，并返回原始匹配字符串或替换字符串。
                </param>
      <param name="count">
                    进行替换的最大次数。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。
                
                    - 或 -
                <paramref name="evaluator" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)">
      <summary>
                    在指定的输入子字符串内，使用 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委托返回的字符串替换与某个正则表达式模式匹配的字符串（其数目为指定的最大数目）。
                </summary>
      <returns>
                    一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。
                </returns>
      <param name="input">
                    要搜索匹配项的字符串。
                </param>
      <param name="evaluator">
                    一个自定义方法，它检查每个匹配项，并返回原始匹配字符串或替换字符串。
                </param>
      <param name="count">
                    进行替换的最大次数。
                </param>
      <param name="startat">
                    输入字符串中开始执行搜索的字符位置。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。
                
                    - 或 -
                <paramref name="evaluator" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.RightToLeft">
      <summary>
                    获取一个值，该值指示正则表达式是否从右向左进行搜索。
                </summary>
      <returns>
                    如果正则表达式从右向左进行搜索，则为 true；否则为 false。
                </returns>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.roptions">
      <summary>
                    由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。
                </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String)">
      <summary>
                    在由 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数指定的正则表达式模式所定义的位置，拆分指定的输入字符串。
                </summary>
      <returns>
                    字符串数组。
                </returns>
      <param name="input">
                    要拆分的字符串。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)">
      <summary>
                    在由 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数中指定的正则表达式定义的位置，将指定的输入字符串拆分指定的最大次数。
                </summary>
      <returns>
                    字符串数组。
                </returns>
      <param name="input">
                    要拆分的字符串。
                </param>
      <param name="count">
                    可拆分的最大次数。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32,System.Int32)">
      <summary>
                    在由 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数中指定的正则表达式定义的位置，将指定的输入字符串拆分指定的最大次数。从输入字符串的指定字符位置开始搜索正则表达式模式。
                </summary>
      <returns>
                    字符串数组。
                </returns>
      <param name="input">
                    要拆分的字符串。
                </param>
      <param name="count">
                    可拆分的最大次数。
                </param>
      <param name="startat">
                    输入字符串中开始搜索的字符位置。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String)">
      <summary>
                    在由正则表达式模式定义的位置拆分输入字符串。
                </summary>
      <returns>
                    字符串数组。
                </returns>
      <param name="input">
                    要拆分的字符串。
                </param>
      <param name="pattern">
                    要匹配的正则表达式模式。
                </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>
                    在由指定的正则表达式模式定义的位置拆分输入字符串。指定的选项将修改匹配操作。
                </summary>
      <returns>
                    字符串数组。
                </returns>
      <param name="input">
                    要拆分的字符串。
                </param>
      <param name="pattern">
                    要匹配的正则表达式模式。
                </param>
      <param name="options">
        <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 枚举值的按位“或”组合。
                </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                    使用所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象来反序列化当前 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象。
                </summary>
      <param name="si">
                    要用序列化信息填充的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。
                </param>
      <param name="context">
                    存储和检索序列化数据的位置。保留供将来使用。
                </param>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.ToString">
      <summary>
                    返回传入 Regex 构造函数的正则表达式模式。
                </summary>
      <returns>
                    传入 Regex 构造函数的 <paramref name="pattern" /> 参数。
                </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Unescape(System.String)">
      <summary>
                    取消转义输入字符串中的任何转义字符。
                </summary>
      <returns>
                    包含任何转换为非转义形式的转义字符的字符串。
                </returns>
      <param name="str">
                    包含要转换的文本的输入字符串。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.UseOptionC">
      <summary>
                    由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。
                </summary>
      <returns>
                    如果 <see cref="P:System.Text.RegularExpressions.Regex.Options" /> 属性包含 <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> 选项，则为 true；否则为 false。
                </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.UseOptionR">
      <summary>
                    由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。
                </summary>
      <returns>
                    如果 <see cref="P:System.Text.RegularExpressions.Regex.Options" /> 属性包含 <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" /> 选项，则为 true；否则为 false。
                </returns>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexCompilationInfo">
      <summary>提供有关使用正则表达式将正则表达式编译为独立程序集的信息。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean)">
      <summary>初始化 <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> 类的新实例，该类包含有关要在程序集内包括的正则表达式的信息。</summary>
      <param name="pattern">要编译的正则表达式。</param>
      <param name="options">编译正则表达式时使用的正则表达式选项。</param>
      <param name="name">表示已编译的正则表达式的类型名称。</param>
      <param name="fullnamespace">新类型所属的命名空间。</param>
      <param name="ispublic">
                若要使所编译的正则表达式对公共可见，则为 true；否则，为 false。</param>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.IsPublic">
      <summary>获取或设置一个值，该值指示已编译的正则表达式是否具有公共可见性。</summary>
      <returns>
            如果正则表达式具有公共可见性，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.Name">
      <summary>获取或设置表示已编译的正则表达式的类型名称。</summary>
      <returns>新类型的名称。</returns>
      <exception cref="T:System.ArgumentNullException">此属性的值为 null。</exception>
      <exception cref="T:System.ArgumentException">此属性的值为空字符串。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.Namespace">
      <summary>获取或设置新类型所属的命名空间。</summary>
      <returns>新类型的命名空间。</returns>
      <exception cref="T:System.ArgumentNullException">此属性的值为 null。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.Options">
      <summary>获取或设置编译正则表达式时使用的选项。</summary>
      <returns>枚举值的按位组合。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.Pattern">
      <summary>获取或设置要编译的正则表达式。</summary>
      <returns>要编译的正则表达式。</returns>
      <exception cref="T:System.ArgumentNullException">此属性的值为 null。</exception>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexOptions">
      <summary>
                    提供用于设置正则表达式选项的枚举值。
                </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.None">
      <summary>
                    指定不设置选项。
                </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase">
      <summary>
                    指定不区分大小写的匹配。
                </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Multiline">
      <summary>
                    多行模式。更改 ^ 和 $ 的含义，使它们分别在任意一行的行首和行尾匹配，而不仅仅在整个字符串的开头和结尾匹配。
                </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.ExplicitCapture">
      <summary>
                    指定有效的捕获仅为形式为 (?&lt;name&gt;...) 的显式命名或编号的组。这使未命名的圆括号可以充当非捕获组，并且不会使表达式的语法 (?:...) 显得笨拙。
                </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Compiled">
      <summary>
                    指定将正则表达式编译为程序集。这会产生更快的执行速度，但会增加启动时间。在调用 <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> 方法时，不应将此值分配给 <see cref="P:System.Text.RegularExpressions.RegexCompilationInfo.Options" /> 属性。
                </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Singleline">
      <summary>
                    指定单行模式。更改点 (.) 的含义，使它与每一个字符匹配（而不是与除 \n 之外的每个字符匹配）。
                </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace">
      <summary>
                    消除模式中的非转义空白并启用由 # 标记的注释。但是，<see cref="F:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace" /> 值不会影响或消除字符类中的空白。
                </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.RightToLeft">
      <summary>
                    指定搜索从右向左而不是从左向右进行。
                </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.ECMAScript">
      <summary>
                    为表达式启用符合 ECMAScript 的行为。该值只能与 <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase" />、<see cref="F:System.Text.RegularExpressions.RegexOptions.Multiline" /> 和 <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> 值一起使用。该值与其他任何值一起使用均将导致异常。
                </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.CultureInvariant">
      <summary>
                    指定忽略语言中的区域性差异。有关更多信息，请参见 在 RegularExpressions 命名空间中执行不区分区域性的操作。
                </summary>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexRunner">
      <summary>
        <see cref="T:System.Text.RegularExpressions.RegexRunner" /> 类是编译正则表达式的基类。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.#ctor">
      <summary>初始化 <see cref="T:System.Text.RegularExpressions.RegexRunner" /> 类的新实例。 </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Capture(System.Int32,System.Int32,System.Int32)">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。 </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.CharInClass(System.Char,System.String)">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。确定字符是否在字符类中。</summary>
      <returns>
如果 <paramref name="ch" /> 参数在由 <paramref name="charClass" /> 参数指定的字符类中，则为 true。</returns>
      <param name="ch">要测试的字符。</param>
      <param name="charClass">字符类的内部名称。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.CharInSet(System.Char,System.String,System.String)">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。 </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Crawl(System.Int32)">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。 </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Crawlpos">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。 </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.DoubleCrawl">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。 </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.DoubleStack">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。 </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.DoubleTrack">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。 </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.EnsureStorage">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。 </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.FindFirstChar">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。 </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Go">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。 </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.InitTrackCount">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。 </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.IsBoundary(System.Int32,System.Int32,System.Int32)">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。 </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.IsECMABoundary(System.Int32,System.Int32,System.Int32)">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。 </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.IsMatched(System.Int32)">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。 </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.MatchIndex(System.Int32)">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。 </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.MatchLength(System.Int32)">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。 </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Popcrawl">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。 </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runcrawl">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。 </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runcrawlpos">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。 </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runmatch">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。 </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runregex">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。 </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runstack">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。 </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runstackpos">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。 </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtext">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。 </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextbeg">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。 </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextend">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。 </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextpos">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。 </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextstart">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。 </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtrack">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。 </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtrackcount">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。 </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtrackpos">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。 </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Scan(System.Text.RegularExpressions.Regex,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。 </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.TransferCapture(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。 </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Uncapture">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法生成的 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象使用。</summary>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexRunnerFactory">
      <summary>为编译过的正则表达式创建 <see cref="T:System.Text.RegularExpressions.RegexRunner" /> 类。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunnerFactory.#ctor">
      <summary>初始化 <see cref="T:System.Text.RegularExpressions.RegexRunnerFactory" /> 类的新实例。 </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunnerFactory.CreateInstance">
      <summary>当在派生类中被重写时，为编译过的特定正则表达式创建 <see cref="T:System.Text.RegularExpressions.RegexRunner" /> 对象。</summary>
      <returns>
        <see cref="T:System.Text.RegularExpressions.RegexRunner" /> 对象旨在执行编译过的特定正则表达式。 </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Finalize"></member>
    <member name="T:System.Threading.Semaphore">
      <summary>限制可同时访问某一资源或资源池的线程数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.Threading.Semaphore" /> 类的新实例，并指定最大并发入口数，还可以选择保留某些入口。</summary>
      <param name="initialCount">可以同时授予的信号量的初始请求数。</param>
      <param name="maximumCount">可以同时授予的信号量的最大请求数。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="initialCount" /> 大于 <paramref name="maximumCount" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumCount" /> 小于 1。- 或 -<paramref name="initialCount" /> 小于 0。</exception>
    </member>
    <member name="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String)">
      <summary>初始化 <see cref="T:System.Threading.Semaphore" /> 类的新实例，并指定最大并发入口数，还可以选择为调用线程保留某些入口，以及选择指定系统信号量对象的名称。</summary>
      <param name="initialCount">可以同时授予的信号量的初始请求数。</param>
      <param name="maximumCount">可以同时授予的信号量的最大请求数。</param>
      <param name="name">命名系统信号量对象的名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="initialCount" /> 大于 <paramref name="maximumCount" />。- 或 -<paramref name="name" /> 的长度超过 260 个字符。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumCount" /> 小于 1。- 或 -<paramref name="initialCount" /> 小于 0。</exception>
      <exception cref="T:System.IO.IOException">发生了一个 Win32 错误。</exception>
      <exception cref="T:System.UnauthorizedAccessException">命名信号量存在并具有访问控制安全性，但用户不具有 <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />。</exception>
      <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">无法创建命名的信号量，可能是因为存在同名但类型不同的等待句柄。</exception>
    </member>
    <member name="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@)">
      <summary>初始化 <see cref="T:System.Threading.Semaphore" /> 类的新实例，并指定最大并发入口数，还可以选择为调用线程保留某些入口，选择指定系统信号量对象的名称，以及指定一个变量来接收指示是否创建了新系统信号量的值。</summary>
      <param name="initialCount">可以同时满足的信号量的初始请求数。</param>
      <param name="maximumCount">可以同时满足的信号量的最大请求数。</param>
      <param name="name">命名系统信号量对象的名称。</param>
      <param name="createdNew">在此方法返回时，如果创建了本地信号量（即，如果 <paramref name="name" /> 为 null 或空字符串）或指定的命名系统信号量，则包含 true；如果指定的命名系统信号量已存在，则为 false。该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="initialCount" /> 大于 <paramref name="maximumCount" />。- 或 -<paramref name="name" /> 的长度超过 260 个字符。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumCount" /> 小于 1。- 或 -<paramref name="initialCount" /> 小于 0。</exception>
      <exception cref="T:System.IO.IOException">发生了一个 Win32 错误。</exception>
      <exception cref="T:System.UnauthorizedAccessException">命名信号量存在并具有访问控制安全性，但用户不具有 <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />。</exception>
      <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">无法创建命名的信号量，可能是因为存在同名但类型不同的等待句柄。</exception>
    </member>
    <member name="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@,System.Security.AccessControl.SemaphoreSecurity)">
      <summary>初始化 <see cref="T:System.Threading.Semaphore" /> 类的新实例，并指定最大并发入口数，还可以选择为调用线程保留某些入口，可以选择指定系统信号量对象的名称，指定一个变量来接收指示是否创建了新系统信号量的值，以及指定系统信号量的安全访问控制。</summary>
      <param name="initialCount">可以同时满足的信号量的初始请求数。</param>
      <param name="maximumCount">可以同时满足的信号量的最大请求数。</param>
      <param name="name">命名系统信号量对象的名称。</param>
      <param name="createdNew">在此方法返回时，如果创建了本地信号量（即，如果 <paramref name="name" /> 为 null 或空字符串）或指定的命名系统信号量，则包含 true；如果指定的命名系统信号量已存在，则为 false。该参数未经初始化即被传递。</param>
      <param name="semaphoreSecurity">一个 <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> 对象，表示应用于已命名的系统信号量的访问控制安全性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="initialCount" /> 大于 <paramref name="maximumCount" />。- 或 -<paramref name="name" /> 的长度超过 260 个字符。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumCount" /> 小于 1。- 或 -<paramref name="initialCount" /> 小于 0。</exception>
      <exception cref="T:System.UnauthorizedAccessException">命名信号量存在并具有访问控制安全性，但用户不具有 <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />。</exception>
      <exception cref="T:System.IO.IOException">发生了一个 Win32 错误。</exception>
      <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">无法创建命名的信号量，可能是因为存在同名但类型不同的等待句柄。</exception>
    </member>
    <member name="M:System.Threading.Semaphore.GetAccessControl">
      <summary>获取已命名的系统信号量的访问控制安全性。</summary>
      <returns>一个 <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> 对象，表示已命名系统信号量的访问控制安全性。</returns>
      <exception cref="T:System.UnauthorizedAccessException">当前 <see cref="T:System.Threading.Semaphore" /> 对象表示一个已命名的系统信号量，但用户不具备 <see cref="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions" /> 权限。- 或 -当前 <see cref="T:System.Threading.Semaphore" /> 对象表示一个已命名的系统信号量，但它不是以 <see cref="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions" /> 权限打开的。</exception>
      <exception cref="T:System.NotSupportedException">在 Windows 98 或 Windows Millennium Edition 中不受支持。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Semaphore.OpenExisting(System.String)">
      <summary>打开一个现有的已命名信号量。</summary>
      <returns>一个 <see cref="T:System.Threading.Semaphore" /> 对象，表示一个已命名的系统信号量。</returns>
      <param name="name">已命名的系统信号量的名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 是空字符串。- 或 -<paramref name="name" /> 的长度超过 260 个字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">命名的信号量不存在。</exception>
      <exception cref="T:System.IO.IOException">发生了一个 Win32 错误。</exception>
      <exception cref="T:System.UnauthorizedAccessException">已命名的信号量存在，但用户不具备使用它所需的安全访问权。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Threading.Semaphore.OpenExisting(System.String,System.Security.AccessControl.SemaphoreRights)">
      <summary>打开现有的已命名信号量，并指定所需的安全访问权限。</summary>
      <returns>一个 <see cref="T:System.Threading.Semaphore" /> 对象，表示已命名的系统信号量。</returns>
      <param name="name">系统信号量的名称。</param>
      <param name="rights">表示所需的安全访问权限的 <see cref="T:System.Security.AccessControl.SemaphoreRights" /> 值的按位组合。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 是空字符串。- 或 -<paramref name="name" /> 的长度超过 260 个字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">命名的信号量不存在。</exception>
      <exception cref="T:System.IO.IOException">发生了一个 Win32 错误。</exception>
      <exception cref="T:System.UnauthorizedAccessException">已命名的信号量存在，但用户不具备所需的安全访问权限。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Semaphore.Release">
      <summary>退出信号量并返回前一个计数。</summary>
      <returns>调用 <see cref="Overload:System.Threading.Semaphore.Release" /> 方法前信号量的计数。</returns>
      <exception cref="T:System.Threading.SemaphoreFullException">信号量计数已是最大值。</exception>
      <exception cref="T:System.IO.IOException">发生已命名信号量的 Win32 错误。</exception>
      <exception cref="T:System.UnauthorizedAccessException">当前信号量表示一个已命名的系统信号量，但用户不具备 <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />。- 或 -当前信号量表示一个已命名的系统信号量，但它未用 <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> 打开。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Semaphore.Release(System.Int32)">
      <summary>以指定的次数退出信号量并返回前一个计数。</summary>
      <returns>调用 <see cref="Overload:System.Threading.Semaphore.Release" /> 方法前信号量的计数。</returns>
      <param name="releaseCount">退出信号量的次数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="releaseCount" /> 小于 1。</exception>
      <exception cref="T:System.Threading.SemaphoreFullException">信号量计数已是最大值。</exception>
      <exception cref="T:System.IO.IOException">发生已命名信号量的 Win32 错误。</exception>
      <exception cref="T:System.UnauthorizedAccessException">当前信号量表示一个已命名的系统信号量，但用户不具备 <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> 权限。- 或 -当前信号量表示一个已命名的系统信号量，但它不是以 <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> 权限打开的。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Semaphore.SetAccessControl(System.Security.AccessControl.SemaphoreSecurity)">
      <summary>设置已命名的系统信号量的访问控制安全性。</summary>
      <param name="semaphoreSecurity">一个 <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> 对象，表示应用于已命名的系统信号量的访问控制安全性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="semaphoreSecurity" /> 为 null。</exception>
      <exception cref="T:System.UnauthorizedAccessException">用户不具备 <see cref="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions" /> 权限。- 或 -信号量不是以 <see cref="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions" /> 权限打开的。</exception>
      <exception cref="T:System.NotSupportedException">当前 <see cref="T:System.Threading.Semaphore" /> 对象不表示已命名的系统信号量。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Threading.SemaphoreFullException">
      <summary>对计数已达到最大值的信号量调用 <see cref="Overload:System.Threading.Semaphore.Release" /> 方法时引发的异常。 </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.SemaphoreFullException.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.Threading.SemaphoreFullException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Threading.SemaphoreFullException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Threading.SemaphoreFullException" /> 类的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，包含有关所引发异常的序列化对象数据。 </param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，它包含有关源或目标的上下文信息。</param>
    </member>
    <member name="M:System.Threading.SemaphoreFullException.#ctor(System.String)">
      <summary>用指定的错误信息初始化 <see cref="T:System.Threading.SemaphoreFullException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.Threading.SemaphoreFullException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Threading.SemaphoreFullException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。如果 <paramref name="innerException" /> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.Threading.ThreadExceptionEventArgs">
      <summary>为 <see cref="E:System.Windows.Forms.Application.ThreadException" /> 事件提供数据。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.ThreadExceptionEventArgs.#ctor(System.Exception)">
      <summary>初始化 <see cref="T:System.Threading.ThreadExceptionEventArgs" /> 类的新实例。</summary>
      <param name="t">已发生的 <see cref="T:System.Exception" />。 </param>
    </member>
    <member name="P:System.Threading.ThreadExceptionEventArgs.Exception">
      <summary>获取已发生的 <see cref="T:System.Exception" />。</summary>
      <returns>已发生的 <see cref="T:System.Exception" />。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Threading.ThreadExceptionEventHandler">
      <summary>表示将要处理 <see cref="T:System.Windows.Forms.Application" /> 的 <see cref="E:System.Windows.Forms.Application.ThreadException" /> 事件的方法。</summary>
      <param name="sender">事件源。 </param>
      <param name="e">包含事件数据的 <see cref="T:System.Threading.ThreadExceptionEventArgs" />。 </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Timers.ElapsedEventArgs">
      <summary>为 <see cref="E:System.Timers.Timer.Elapsed" /> 事件提供数据。</summary>
    </member>
    <member name="P:System.Timers.ElapsedEventArgs.SignalTime">
      <summary>获取引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件的时间。</summary>
      <returns>引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件的时间。</returns>
    </member>
    <member name="T:System.Timers.ElapsedEventHandler">
      <summary>表示将要处理 <see cref="T:System.Timers.Timer" /> 的 <see cref="E:System.Timers.Timer.Elapsed" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Timers.ElapsedEventArgs" /> 对象。</param>
    </member>
    <member name="T:System.Timers.Timer">
      <summary>
                    在应用程序中生成定期事件。
                </summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor">
      <summary>
                    初始化 <see cref="T:System.Timers.Timer" /> 类的新实例，并将所有属性设置为初始值。
                </summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor(System.Double)">
      <summary>
                    初始化 <see cref="T:System.Timers.Timer" /> 类的新实例，并将 <see cref="P:System.Timers.Timer.Interval" /> 属性设置为指定的时间周期。
                </summary>
      <param name="interval">
                    事件之间经过的时间（以毫秒为单位）。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="interval" /> 参数的值小于或等于 0，或者大于 <see cref="F:System.Int32.MaxValue" />。
                </exception>
    </member>
    <member name="P:System.Timers.Timer.AutoReset">
      <summary>
                    获取或设置一个值，该值指示 <see cref="T:System.Timers.Timer" /> 是应在每次指定的间隔结束时引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件，还是仅在指定的间隔第一次结束后引发该事件。
                </summary>
      <returns>
                    如果 <see cref="T:System.Timers.Timer" /> 应在每次间隔结束时引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件，则为 true；如果它仅在间隔第一次结束后引发一次 <see cref="E:System.Timers.Timer.Elapsed" /> 事件，则为 false。默认值为 true。
                </returns>
    </member>
    <member name="M:System.Timers.Timer.BeginInit">
      <summary>
                    开始用于窗体或由其他组件使用的 <see cref="T:System.Timers.Timer" /> 的运行时初始化。
                </summary>
    </member>
    <member name="M:System.Timers.Timer.Close">
      <summary>
                    释放由 <see cref="T:System.Timers.Timer" /> 占用的资源。
                </summary>
    </member>
    <member name="M:System.Timers.Timer.Dispose(System.Boolean)">
      <summary>
                    释放由当前 <see cref="T:System.Timers.Timer" /> 使用的所有资源。
                </summary>
      <param name="disposing">
                    为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。
                </param>
    </member>
    <member name="E:System.Timers.Timer.Elapsed">
      <summary>
                    达到间隔时发生。
                </summary>
    </member>
    <member name="P:System.Timers.Timer.Enabled">
      <summary>
                    获取或设置一个值，该值指示 <see cref="T:System.Timers.Timer" /> 是否应引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件。
                </summary>
      <returns>
                    如果 <see cref="T:System.Timers.Timer" /> 应引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件，则为 true；否则，为 false。默认值为 false。
                </returns>
      <exception cref="T:System.ObjectDisposedException">
                    计时器已释放，无法设置此属性。
                </exception>
    </member>
    <member name="M:System.Timers.Timer.EndInit">
      <summary>
                    结束用于窗体上或由其他组件使用的 <see cref="T:System.Timers.Timer" /> 的运行时初始化。
                </summary>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Timers.Timer.Interval">
      <summary>
                    获取或设置引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件的间隔。
                </summary>
      <returns>
                    引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件的间隔时间（以毫秒为单位）。默认为 100 毫秒。
                </returns>
      <exception cref="T:System.ArgumentException">
                    间隔小于或等于零。
                </exception>
    </member>
    <member name="P:System.Timers.Timer.Site">
      <summary>
                    获取或设置在设计模式中将 <see cref="T:System.Timers.Timer" /> 绑定到其容器的站点。
                </summary>
      <returns>
        <see cref="T:System.ComponentModel.ISite" /> 界面，此界面表示将 <see cref="T:System.Timers.Timer" /> 对象帮定到其容器的站点。
                </returns>
    </member>
    <member name="M:System.Timers.Timer.Start">
      <summary>
                    通过将 <see cref="P:System.Timers.Timer.Enabled" /> 设置为 true 开始引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件。
                </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    创建的 <see cref="T:System.Timers.Timer" /> 的间隔等于或大于 <see cref="F:System.Int32.MaxValue" /> + 1，或被设置为小于零。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Timers.Timer.Stop">
      <summary>
                    通过将 <see cref="P:System.Timers.Timer.Enabled" /> 设置为 false 停止引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件。
                </summary>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Timers.Timer.SynchronizingObject">
      <summary>
                    获取或设置对象，该对象用于在间隔过后封送发出的事件处理程序调用。
                </summary>
      <returns>
        <see cref="T:System.ComponentModel.ISynchronizeInvoke" />，它表示对象，该对象用于在间隔过后封送发出的事件处理程序调用。默认值为 null。
                </returns>
    </member>
    <member name="T:System.Timers.TimersDescriptionAttribute">
      <summary>设置可视化设计器在引用事件、扩展程序或属性时可以显示的说明。</summary>
    </member>
    <member name="M:System.Timers.TimersDescriptionAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Timers.TimersDescriptionAttribute" /> 类的新实例。</summary>
      <param name="description">要使用的说明。 </param>
    </member>
    <member name="P:System.Timers.TimersDescriptionAttribute.Description">
      <summary>获取可视化设计器在引用事件、扩展程序或属性时可以显示的说明。</summary>
      <returns>事件、扩展程序或属性的说明。</returns>
    </member>
    <member name="T:System.Web.AspNetHostingPermission">
      <summary>ASP.NET 寄宿的环境中的控件访问权限。无法继承此类。</summary>
    </member>
    <member name="M:System.Web.AspNetHostingPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>用指定的 <see cref="T:System.Security.Permissions.PermissionState" /> 枚举值初始化 <see cref="T:System.Web.AspNetHostingPermission" /> 类的新实例。</summary>
      <param name="state">一个 <see cref="T:System.Security.Permissions.PermissionState" /> 枚举值。 </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 未设置为 <see cref="T:System.Security.Permissions.PermissionState" /> 枚举值之一。</exception>
    </member>
    <member name="M:System.Web.AspNetHostingPermission.#ctor(System.Web.AspNetHostingPermissionLevel)">
      <summary>使用指定的权限级别初始化 <see cref="T:System.Web.AspNetHostingPermission" /> 类的新实例。</summary>
      <param name="level">
        <see cref="T:System.Web.AspNetHostingPermissionLevel" /> 枚举值。 </param>
    </member>
    <member name="M:System.Web.AspNetHostingPermission.Copy">
      <summary>通过派生类实现时，创建和返回当前权限对象的相同副本。</summary>
      <returns>当前权限对象的副本。</returns>
    </member>
    <member name="M:System.Web.AspNetHostingPermission.FromXml(System.Security.SecurityElement)">
      <summary>从 XML 编码重新构造具有指定状态的权限对象。</summary>
      <param name="securityElement">包含用于重新构造权限对象的 XML 编码的 <see cref="T:System.Security.SecurityElement" />。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityElement" /> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="securityElement" /> 的 <see cref="P:System.Security.SecurityElement.Tag" /> 属性不等于“IPermission”。 - 或 - <paramref name="securityElement" /> 的类 <see cref="M:System.Security.SecurityElement.Attribute(System.String)" /> 为 null 或空字符串 ("")。 </exception>
    </member>
    <member name="M:System.Web.AspNetHostingPermission.Intersect(System.Security.IPermission)">
      <summary>通过派生类实现时，创建和返回是当前权限和指定权限的交集的权限。</summary>
      <returns>表示当前权限与指定权限的交集的 <see cref="T:System.Security.IPermission" />；如果交集为空，则为 null。</returns>
      <param name="target">将与当前权限合并的权限。它必须与当前权限属于同一类型。 </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 <see cref="T:System.Web.AspNetHostingPermission" />。 </exception>
    </member>
    <member name="M:System.Web.AspNetHostingPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>返回一个值，指示当前的权限是否为指定权限的一个子集。</summary>
      <returns>
如果当前 <see cref="T:System.Security.IPermission" /> 是指定 <see cref="T:System.Security.IPermission" /> 的子集，则为 true；否则为 false。</returns>
      <param name="target">与当前权限进行合并的 <see cref="T:System.Security.IPermission" />。它必须与当前 <see cref="T:System.Security.IPermission" /> 属于同一类型。 </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 <see cref="T:System.Web.AspNetHostingPermission" />。 </exception>
    </member>
    <member name="M:System.Web.AspNetHostingPermission.IsUnrestricted">
      <summary>返回一个值，该值指示是否允许对受当前权限保护的资源进行不受限制地访问。</summary>
      <returns>
如果允许不受限制地使用受此权限所保护的资源，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Web.AspNetHostingPermission.Level">
      <summary>获取或设置 ASP.NET 应用程序的当前宿主权限级别。</summary>
      <returns>
        <see cref="T:System.Web.AspNetHostingPermissionLevel" /> 枚举值之一。</returns>
    </member>
    <member name="M:System.Web.AspNetHostingPermission.ToXml">
      <summary>创建权限对象及其当前状态的 XML 编码。</summary>
      <returns>包含权限对象的 XML 编码的 <see cref="T:System.Security.SecurityElement" />，包括所有状态信息。</returns>
    </member>
    <member name="M:System.Web.AspNetHostingPermission.Union(System.Security.IPermission)">
      <summary>创建一个权限，该权限是当前权限与指定权限的并集。</summary>
      <returns>代表当前权限和指定权限并集的 <see cref="T:System.Security.IPermission" />。</returns>
      <param name="target">将与当前权限合并的权限。它必须与当前权限属于同一类型。 </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 <see cref="T:System.Web.AspNetHostingPermission" />。 </exception>
    </member>
    <member name="T:System.Web.AspNetHostingPermissionAttribute">
      <summary>允许对使用声明安全性应用到代码中的 <see cref="T:System.Web.AspNetHostingPermission" /> 进行安全操作。无法继承此类。</summary>
    </member>
    <member name="M:System.Web.AspNetHostingPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>初始化 <see cref="T:System.Web.AspNetHostingPermissionAttribute" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 枚举值之一。 </param>
    </member>
    <member name="M:System.Web.AspNetHostingPermissionAttribute.CreatePermission">
      <summary>使用先前由 <see cref="P:System.Web.AspNetHostingPermissionAttribute.Level" /> 属性设置的权限级别来创建新的 <see cref="T:System.Web.AspNetHostingPermission" />。</summary>
      <returns>一个 <see cref="T:System.Security.IPermission" />，它是新的 <see cref="T:System.Web.AspNetHostingPermission" />。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Web.AspNetHostingPermissionAttribute.Level">
      <summary>获取或设置当前宿主权限级别。</summary>
      <returns>
        <see cref="T:System.Web.AspNetHostingPermissionLevel" /> 枚举值之一。</returns>
    </member>
    <member name="T:System.Web.AspNetHostingPermissionLevel">
      <summary>指定授予 ASP.NET Web 应用程序的信任级别。</summary>
    </member>
    <member name="F:System.Web.AspNetHostingPermissionLevel.None">
      <summary>指示不授予任何权限。任何要求 <see cref="T:System.Web.AspNetHostingPermission" /> 的请求都将失败。</summary>
    </member>
    <member name="F:System.Web.AspNetHostingPermissionLevel.Minimal">
      <summary>指示由要求 <see cref="F:System.Web.AspNetHostingPermissionLevel.Minimal" /> 信任级别的请求所保护的功能将会成功。此级别允许代码执行，但不允许代码与系统中的资源进行交互。通过使用配置文件中的 trust 节至少配置 <see cref="F:System.Web.AspNetHostingPermissionLevel.Minimal" /> 信任级别，可授予此级别。</summary>
    </member>
    <member name="F:System.Web.AspNetHostingPermissionLevel.Low">
      <summary>指示由任何要求低于或等于 <see cref="F:System.Web.AspNetHostingPermissionLevel.Low" /> 信任级别的请求所保护的功能将会成功。此级别用于允许对受约束环境中的有限资源进行只读访问。通过在配置文件的 trust 节中指定 <see cref="F:System.Web.AspNetHostingPermissionLevel.Low" /> 信任级别可授予此级别。</summary>
    </member>
    <member name="F:System.Web.AspNetHostingPermissionLevel.Medium">
      <summary>指示由任何要求低于或等于 <see cref="F:System.Web.AspNetHostingPermissionLevel.Medium" /> 信任级别的请求所保护的功能将会成功。通过在配置文件的 trust 节中至少配置 <see cref="F:System.Web.AspNetHostingPermissionLevel.Medium" /> 信任级别，可授予此级别。</summary>
    </member>
    <member name="F:System.Web.AspNetHostingPermissionLevel.High">
      <summary>指示由任何要求低于或等于 High 信任级别的请求所保护的功能将会成功。此级别适用于高度信任的托管代码应用程序，这些应用程序需要使用大多数支持不完全受信任访问的托管权限。此级别没有授予某些最高权限（例如，调入本机代码的能力），但确实提供了一种方式，以最小特权运行受信任应用程序或为高度信任的应用程序提供某种程度的限制。通过在配置文件的 trust 节中至少配置 <see cref="F:System.Web.AspNetHostingPermissionLevel.High" /> 信任级别，可授予此级别。</summary>
    </member>
    <member name="F:System.Web.AspNetHostingPermissionLevel.Unrestricted">
      <summary>指示任何要求获得使用应用程序的所有功能的权限的请求都会得到准许。这等效于在配置文件的 trust 节中授予 Full 信任级别。</summary>
    </member>
  </members>
</doc>